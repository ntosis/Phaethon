In archive libu8glib.a:

chessengine.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00003450  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000026ee  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.cu_add_pos 00000014  00000000  00000000  00005b72  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.stack_GetCurrElement 0000000a  00000000  00000000  00005b86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.stack_Push 00000034  00000000  00000000  00005b90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.stack_Pop 00000020  00000000  00000000  00005bc4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.stack_InitCurrElement 00000018  00000000  00000000  00005be4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.stack_Init 0000002e  00000000  00000000  00005bfc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.stack_SetMove 0000001e  00000000  00000000  00005c2a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.cu_NextPos 00000016  00000000  00000000  00005c48  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.cu_PrevPos 00000014  00000000  00000000  00005c5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.cp_GetFromBoard 00000014  00000000  00000000  00005c72  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.cp_SetOnBoard 00000014  00000000  00000000  00005c86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.cu_IsIllegalPosition 00000034  00000000  00000000  00005c9a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.ce_Eval 00000136  00000000  00000000  00005cce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.cu_ClearMoveHistory 00000006  00000000  00000000  00005e04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.cu_ClearBoard 00000032  00000000  00000000  00005e0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.chess_SetupBoardTest01 00000024  00000000  00000000  00005e3c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.chess_SetupBoard 00000072  00000000  00000000  00005e60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.cu_ReduceHistoryByFullMove 00000056  00000000  00000000  00005ed2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.cu_UndoHalfMove 00000062  00000000  00000000  00005f28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.cu_PushHalfMove 00000030  00000000  00000000  00005f8a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.cu_GetHalfMoveStr 0000007e  00000000  00000000  00005fba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text.cu_Move 00000194  00000000  00000000  00006038  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.ce_FindPieceByStep 000000ae  00000000  00000000  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text.ce_FindPawnPiece 0000004e  00000000  00000000  0000627a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text.ce_CalculatePositionWeight 0000008c  00000000  00000000  000062c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text.cu_IsKingCastling 0000006c  00000000  00000000  00006354  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text.ce_GetPositionAttackWeight 00000024  00000000  00000000  000063c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text.ce_GetPositionAttackCount 00000024  00000000  00000000  000063e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text.ce_LoopPieces 00000074  00000000  00000000  00006408  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text.ce_LoopRecur 000000b0  00000000  00000000  0000647c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text.ce_LoopDirsSingleMultiStep 0000004c  00000000  00000000  0000652c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text.ce_LoopRook 0000000a  00000000  00000000  00006578  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text.ce_LoopBishop 0000000a  00000000  00000000  00006582  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text.ce_LoopQueen 0000000a  00000000  00000000  0000658c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text.ce_LoopKnight 0000000a  00000000  00000000  00006596  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text.ce_LoopKing 00000076  00000000  00000000  000065a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text.ce_LoopPawnSideCapture 0000004c  00000000  00000000  00006616  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text.ce_LoopPawn 0000008a  00000000  00000000  00006662  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text.chess_ClearMarks 00000014  00000000  00000000  000066ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text.chess_MarkMovable 00000010  00000000  00000000  00006700  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text.chess_MarkTargetMoves 00000036  00000000  00000000  00006710  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text.chess_GetNextMarked 0000004a  00000000  00000000  00006746  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text.chess_ManualMove 000000e6  00000000  00000000  00006790  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text.chess_ComputerMove 0000001c  00000000  00000000  00006876  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text.mnu_DrawHome 0000006a  00000000  00000000  00006892  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text.mnu_DrawEntry 000000d2  00000000  00000000  000068fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text.mnu_Draw 00000072  00000000  00000000  000069ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text.mnu_Step 00000036  00000000  00000000  00006a40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text.chess_DrawFrame 00000090  00000000  00000000  00006a76  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text.chess_DrawBoard 00000320  00000000  00000000  00006b06  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text.chess_Thinking 00000002  00000000  00000000  00006e26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.chess_Init 00000074  00000000  00000000  00006e28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .rodata.str1.1 00000065  00000000  00000000  00006e9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 58 .text.chess_Draw 00000100  00000000  00000000  00006f01  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text.chess_Step 000001aa  00000000  00000000  00007001  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .progmem.data.__c.3713 00000008  00000000  00000000  000071ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 61 .bss.buf.3547 00000007  00000000  00000000  000071b3  2**0
                  ALLOC
 62 .data.chess_boxoffset 00000001  00000000  00000000  000071b3  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 63 .data.chess_boxsize 00000001  00000000  00000000  000071b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 64 .progmem.data.chess_black_pieces_bm 00000030  00000000  00000000  000071b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 65 .progmem.data.chess_pieces_body_bm 00000030  00000000  00000000  000071e5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 66 .data.chess_target_pos 00000001  00000000  00000000  00007215  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 67 .data.chess_source_pos 00000001  00000000  00000000  00007216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 68 .bss.chess_state 00000001  00000000  00000000  00007217  2**0
                  ALLOC
 69 .bss.chess_key_cmd 00000001  00000000  00000000  00007217  2**0
                  ALLOC
 70 .bss.chess_key_code 00000001  00000000  00000000  00007217  2**0
                  ALLOC
 71 .data.mnu_max 00000001  00000000  00000000  00007217  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 72 .bss.mnu_pos  00000001  00000000  00000000  00007218  2**0
                  ALLOC
 73 .data.mnu_list 00000008  00000000  00000000  00007218  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 74 .data.mnu_title 00000002  00000000  00000000  00007220  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 75 .progmem.data.ce_dir_offset_knight 00000009  00000000  00000000  00007222  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 76 .progmem.data.ce_dir_offset_queen 00000009  00000000  00000000  0000722b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 77 .progmem.data.ce_dir_offset_bishop 00000005  00000000  00000000  00007234  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 78 .progmem.data.ce_dir_offset_rook 00000005  00000000  00000000  00007239  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 79 .data.chess_piece_to_char 00000006  00000000  00000000  0000723e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 80 .data.ce_pos_weight 00000008  00000000  00000000  00007244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 81 .data.ce_piece_weight 00000007  00000000  00000000  0000724c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 82 .comment      00000022  00000000  00000000  00007253  2**0
                  CONTENTS, READONLY

Disassembly of section .text.cu_add_pos:

00000000 <cu_add_pos>:
  }
}


void chess_Step(uint8_t keycode)
{
   0:	26 2f       	mov	r18, r22
  if ( keycode == CHESS_KEY_NONE )
   2:	22 95       	swap	r18
   4:	2f 70       	andi	r18, 0x0F	; 15
  {
    chess_key_cmd = chess_key_code;
   6:	2f 59       	subi	r18, 0x9F	; 159
   8:	fc 01       	movw	r30, r24
   a:	20 83       	st	Z, r18
   c:	6f 70       	andi	r22, 0x0F	; 15
    chess_key_code = CHESS_KEY_NONE;
   e:	6f 5c       	subi	r22, 0xCF	; 207
  10:	61 83       	std	Z+1, r22	; 0x01
  12:	08 95       	ret

Disassembly of section .text.stack_GetCurrElement:

00000014 <stack_GetCurrElement>:
  }
  else
  {
    chess_key_cmd = CHESS_KEY_NONE;
  14:	80 91 00 00 	lds	r24, 0x0000
    chess_key_code = keycode;
  18:	90 91 00 00 	lds	r25, 0x0000
  }
  //chess_ComputerMove(2);
  switch(chess_state)
  1c:	08 95       	ret

Disassembly of section .text.stack_Push:

00000032 <stack_Push>:
	  chess_state = CHESS_STATE_SELECT_START;
	}
      }
      break;
    case CHESS_STATE_SELECT_START:
      chess_ClearMarks();
  32:	e0 91 00 00 	lds	r30, 0x0000
      chess_MarkMovable();
  36:	90 91 00 00 	lds	r25, 0x0000
      chess_source_pos = chess_GetNextMarked(255, 0);
  3a:	e9 17       	cp	r30, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <stack_Push+0xc>
  3e:	ef 5f       	subi	r30, 0xFF	; 255
  40:	e0 93 00 00 	sts	0x0000, r30
  44:	97 e0       	ldi	r25, 0x07	; 7
  46:	e9 9f       	mul	r30, r25
  {
    chess_key_cmd = CHESS_KEY_NONE;
    chess_key_code = keycode;
  }
  //chess_ComputerMove(2);
  switch(chess_state)
  48:	f0 01       	movw	r30, r0
  4a:	11 24       	eor	r1, r1
  4c:	e0 50       	subi	r30, 0x00	; 0
  4e:	f0 40       	sbci	r31, 0x00	; 0
  50:	f0 93 00 00 	sts	0x0000, r31
  54:	e0 93 00 00 	sts	0x0000, r30
  58:	91 e0       	ldi	r25, 0x01	; 1
  {
    case CHESS_STATE_MENU:
      mnu_Step(chess_key_cmd);
  5a:	98 27       	eor	r25, r24
  5c:	92 83       	std	Z+2, r25	; 0x02
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	08 95       	ret
      if ( chess_key_cmd == CHESS_KEY_SELECT )
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	08 95       	ret

Disassembly of section .text.stack_Pop:

00000098 <stack_Pop>:
	  lrc_obj.orientation = 1;
	  chess_state = CHESS_STATE_THINKING;
	}
	else if ( mnu_pos == 2 )
	{
	  if ( lrc_obj.ply_count >= 2 )
  98:	e0 e0       	ldi	r30, 0x00	; 0
  9a:	f0 e0       	ldi	r31, 0x00	; 0
	  {
	    cu_UndoHalfMove();
  9c:	80 81       	ld	r24, Z
  9e:	81 50       	subi	r24, 0x01	; 1
	    cu_UndoHalfMove();
  a0:	80 83       	st	Z, r24
  a2:	27 e0       	ldi	r18, 0x07	; 7
	    lrc_obj.ply_count-=2;
  a4:	82 9f       	mul	r24, r18
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	80 50       	subi	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
	    if ( lrc_obj.ply_count == 0 )
  ae:	90 93 00 00 	sts	0x0000, r25
	      mnu_pos = 0;
  b2:	80 93 00 00 	sts	0x0000, r24
  b6:	08 95       	ret

Disassembly of section .text.stack_InitCurrElement:

00000150 <stack_InitCurrElement>:
	chess_target_pos = ILLEGAL_POSITION;
	chess_state = CHESS_STATE_SELECT_PIECE;
      }
      else if ( chess_key_cmd == CHESS_KEY_SELECT )
      {
	chess_ManualMove(chess_source_pos, chess_target_pos);
 150:	e0 91 00 00 	lds	r30, 0x0000
 154:	f0 91 00 00 	lds	r31, 0x0000
	if ( lrc_obj.is_game_end != 0 )
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e8       	ldi	r25, 0x80	; 128
 15c:	96 83       	std	Z+6, r25	; 0x06
 15e:	85 83       	std	Z+5, r24	; 0x05
	  chess_state = CHESS_STATE_GAME_END;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	83 83       	std	Z+3, r24	; 0x03
	else
	  chess_state = CHESS_STATE_THINKING;
 164:	84 83       	std	Z+4, r24	; 0x04
 166:	08 95       	ret

Disassembly of section .text.stack_Init:

000002b8 <stack_Init>:
	chess_SetupBoard();
      }	
      break;
  }
  
}
 2b8:	10 92 00 00 	sts	0x0000, r1
 2bc:	20 e0       	ldi	r18, 0x00	; 0
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	30 93 00 00 	sts	0x0000, r19
 2c4:	20 93 00 00 	sts	0x0000, r18
 2c8:	80 93 00 00 	sts	0x0000, r24
 2cc:	10 92 00 00 	sts	0x0000, r1
 2d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2d4:	e0 91 00 00 	lds	r30, 0x0000
 2d8:	f0 91 00 00 	lds	r31, 0x0000
 2dc:	80 91 00 00 	lds	r24, 0x0000
 2e0:	81 70       	andi	r24, 0x01	; 1
 2e2:	82 83       	std	Z+2, r24	; 0x02
 2e4:	08 95       	ret

Disassembly of section .text.stack_SetMove:

0000059e <stack_SetMove>:
 59e:	e0 91 00 00 	lds	r30, 0x0000
 5a2:	f0 91 00 00 	lds	r31, 0x0000
 5a6:	25 81       	ldd	r18, Z+5	; 0x05
 5a8:	36 81       	ldd	r19, Z+6	; 0x06
 5aa:	28 17       	cp	r18, r24
 5ac:	39 07       	cpc	r19, r25
 5ae:	04 f4       	brge	.+0      	; 0x5b0 <stack_SetMove+0x12>
 5b0:	96 83       	std	Z+6, r25	; 0x06
 5b2:	85 83       	std	Z+5, r24	; 0x05
 5b4:	80 81       	ld	r24, Z
 5b6:	83 83       	std	Z+3, r24	; 0x03
 5b8:	64 83       	std	Z+4, r22	; 0x04
 5ba:	08 95       	ret

Disassembly of section .text.cu_NextPos:

00000b5a <cu_NextPos>:
 b5a:	98 2f       	mov	r25, r24
 b5c:	81 e0       	ldi	r24, 0x01	; 1
 b5e:	89 0f       	add	r24, r25
 b60:	83 ff       	sbrs	r24, 3
 b62:	00 c0       	rjmp	.+0      	; 0xb64 <cu_NextPos+0xa>
 b64:	81 e1       	ldi	r24, 0x11	; 17
 b66:	89 0f       	add	r24, r25
 b68:	80 7f       	andi	r24, 0xF0	; 240
 b6a:	87 fd       	sbrc	r24, 7
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	08 95       	ret

Disassembly of section .text.cu_PrevPos:

000016ca <cu_PrevPos>:
    16ca:	81 50       	subi	r24, 0x01	; 1
    16cc:	87 fd       	sbrc	r24, 7
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <cu_PrevPos+0x6>
    16d0:	83 ff       	sbrs	r24, 3
    16d2:	00 c0       	rjmp	.+0      	; 0x16d4 <cu_PrevPos+0xa>
    16d4:	80 7f       	andi	r24, 0xF0	; 240
    16d6:	87 60       	ori	r24, 0x07	; 7
    16d8:	08 95       	ret
    16da:	87 e7       	ldi	r24, 0x77	; 119
    16dc:	08 95       	ret

Disassembly of section .text.cp_GetFromBoard:

00002da8 <cp_GetFromBoard>:
    2da8:	e8 2f       	mov	r30, r24
    2daa:	e0 7f       	andi	r30, 0xF0	; 240
    2dac:	e6 95       	lsr	r30
    2dae:	8f 70       	andi	r24, 0x0F	; 15
    2db0:	e8 2b       	or	r30, r24
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	e0 50       	subi	r30, 0x00	; 0
    2db6:	f0 40       	sbci	r31, 0x00	; 0
    2db8:	82 81       	ldd	r24, Z+2	; 0x02
    2dba:	08 95       	ret

Disassembly of section .text.cp_SetOnBoard:

00005b64 <cp_SetOnBoard>:
    5b64:	e8 2f       	mov	r30, r24
    5b66:	e0 7f       	andi	r30, 0xF0	; 240
    5b68:	e6 95       	lsr	r30
    5b6a:	8f 70       	andi	r24, 0x0F	; 15
    5b6c:	e8 2b       	or	r30, r24
    5b6e:	f0 e0       	ldi	r31, 0x00	; 0
    5b70:	e0 50       	subi	r30, 0x00	; 0
    5b72:	f0 40       	sbci	r31, 0x00	; 0
    5b74:	62 83       	std	Z+2, r22	; 0x02
    5b76:	08 95       	ret

Disassembly of section .text.cu_IsIllegalPosition:

0000b6dc <cu_IsIllegalPosition>:
    b6dc:	1f 93       	push	r17
    b6de:	cf 93       	push	r28
    b6e0:	df 93       	push	r29
    b6e2:	1f 92       	push	r1
    b6e4:	cd b7       	in	r28, 0x3d	; 61
    b6e6:	de b7       	in	r29, 0x3e	; 62
    b6e8:	18 2f       	mov	r17, r24
    b6ea:	18 78       	andi	r17, 0x88	; 136
    b6ec:	01 f4       	brne	.+0      	; 0xb6ee <cu_IsIllegalPosition+0x12>
    b6ee:	69 83       	std	Y+1, r22	; 0x01
    b6f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    b6f4:	69 81       	ldd	r22, Y+1	; 0x01
    b6f6:	88 23       	and	r24, r24
    b6f8:	01 f0       	breq	.+0      	; 0xb6fa <cu_IsIllegalPosition+0x1e>
    b6fa:	82 95       	swap	r24
    b6fc:	81 70       	andi	r24, 0x01	; 1
    b6fe:	86 13       	cpse	r24, r22
    b700:	00 c0       	rjmp	.+0      	; 0xb702 <cu_IsIllegalPosition+0x26>
    b702:	11 e0       	ldi	r17, 0x01	; 1
    b704:	81 2f       	mov	r24, r17
    b706:	0f 90       	pop	r0
    b708:	df 91       	pop	r29
    b70a:	cf 91       	pop	r28
    b70c:	1f 91       	pop	r17
    b70e:	08 95       	ret

Disassembly of section .text.ce_Eval:

00016dec <ce_Eval>:
   16dec:	6f 92       	push	r6
   16dee:	7f 92       	push	r7
   16df0:	8f 92       	push	r8
   16df2:	9f 92       	push	r9
   16df4:	af 92       	push	r10
   16df6:	bf 92       	push	r11
   16df8:	cf 92       	push	r12
   16dfa:	df 92       	push	r13
   16dfc:	ef 92       	push	r14
   16dfe:	ff 92       	push	r15
   16e00:	0f 93       	push	r16
   16e02:	1f 93       	push	r17
   16e04:	cf 93       	push	r28
   16e06:	df 93       	push	r29
   16e08:	1f 92       	push	r1
   16e0a:	cd b7       	in	r28, 0x3d	; 61
   16e0c:	de b7       	in	r29, 0x3e	; 62
   16e0e:	a0 90 00 00 	lds	r10, 0x0000
   16e12:	b0 90 00 00 	lds	r11, 0x0000
   16e16:	90 e0       	ldi	r25, 0x00	; 0
   16e18:	61 2c       	mov	r6, r1
   16e1a:	71 2c       	mov	r7, r1
   16e1c:	00 e0       	ldi	r16, 0x00	; 0
   16e1e:	10 e0       	ldi	r17, 0x00	; 0
   16e20:	e1 2c       	mov	r14, r1
   16e22:	f1 2c       	mov	r15, r1
   16e24:	c1 2c       	mov	r12, r1
   16e26:	d1 2c       	mov	r13, r1
   16e28:	91 2c       	mov	r9, r1
   16e2a:	81 2c       	mov	r8, r1
   16e2c:	89 2f       	mov	r24, r25
   16e2e:	99 83       	std	Y+1, r25	; 0x01
   16e30:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   16e34:	48 2f       	mov	r20, r24
   16e36:	4f 70       	andi	r20, 0x0F	; 15
   16e38:	99 81       	ldd	r25, Y+1	; 0x01
   16e3a:	44 23       	and	r20, r20
   16e3c:	01 f4       	brne	.+0      	; 0x16e3e <ce_Eval+0x52>
   16e3e:	00 c0       	rjmp	.+0      	; 0x16e40 <ce_Eval+0x54>
   16e40:	82 95       	swap	r24
   16e42:	81 70       	andi	r24, 0x01	; 1
   16e44:	f5 01       	movw	r30, r10
   16e46:	62 81       	ldd	r22, Z+2	; 0x02
   16e48:	24 2f       	mov	r18, r20
   16e4a:	30 e0       	ldi	r19, 0x00	; 0
   16e4c:	5f ef       	ldi	r21, 0xFF	; 255
   16e4e:	54 0f       	add	r21, r20
   16e50:	68 13       	cpse	r22, r24
   16e52:	00 c0       	rjmp	.+0      	; 0x16e54 <ce_Eval+0x68>
   16e54:	46 30       	cpi	r20, 0x06	; 6
   16e56:	01 f4       	brne	.+0      	; 0x16e58 <ce_Eval+0x6c>
   16e58:	88 24       	eor	r8, r8
   16e5a:	83 94       	inc	r8
   16e5c:	f9 01       	movw	r30, r18
   16e5e:	e0 50       	subi	r30, 0x00	; 0
   16e60:	f0 40       	sbci	r31, 0x00	; 0
   16e62:	80 81       	ld	r24, Z
   16e64:	c8 0e       	add	r12, r24
   16e66:	d1 1c       	adc	r13, r1
   16e68:	52 30       	cpi	r21, 0x02	; 2
   16e6a:	00 f4       	brcc	.+0      	; 0x16e6c <ce_Eval+0x80>
   16e6c:	e9 2f       	mov	r30, r25
   16e6e:	e7 70       	andi	r30, 0x07	; 7
   16e70:	f0 e0       	ldi	r31, 0x00	; 0
   16e72:	e0 50       	subi	r30, 0x00	; 0
   16e74:	f0 40       	sbci	r31, 0x00	; 0
   16e76:	20 81       	ld	r18, Z
   16e78:	e9 2f       	mov	r30, r25
   16e7a:	e2 95       	swap	r30
   16e7c:	e7 70       	andi	r30, 0x07	; 7
   16e7e:	f0 e0       	ldi	r31, 0x00	; 0
   16e80:	e0 50       	subi	r30, 0x00	; 0
   16e82:	f0 40       	sbci	r31, 0x00	; 0
   16e84:	80 81       	ld	r24, Z
   16e86:	28 9f       	mul	r18, r24
   16e88:	00 0d       	add	r16, r0
   16e8a:	11 1d       	adc	r17, r1
   16e8c:	11 24       	eor	r1, r1
   16e8e:	00 c0       	rjmp	.+0      	; 0x16e90 <ce_Eval+0xa4>
   16e90:	46 30       	cpi	r20, 0x06	; 6
   16e92:	01 f4       	brne	.+0      	; 0x16e94 <ce_Eval+0xa8>
   16e94:	99 24       	eor	r9, r9
   16e96:	93 94       	inc	r9
   16e98:	f9 01       	movw	r30, r18
   16e9a:	e0 50       	subi	r30, 0x00	; 0
   16e9c:	f0 40       	sbci	r31, 0x00	; 0
   16e9e:	80 81       	ld	r24, Z
   16ea0:	e8 0e       	add	r14, r24
   16ea2:	f1 1c       	adc	r15, r1
   16ea4:	52 30       	cpi	r21, 0x02	; 2
   16ea6:	00 f4       	brcc	.+0      	; 0x16ea8 <ce_Eval+0xbc>
   16ea8:	e9 2f       	mov	r30, r25
   16eaa:	e7 70       	andi	r30, 0x07	; 7
   16eac:	f0 e0       	ldi	r31, 0x00	; 0
   16eae:	e0 50       	subi	r30, 0x00	; 0
   16eb0:	f0 40       	sbci	r31, 0x00	; 0
   16eb2:	20 81       	ld	r18, Z
   16eb4:	e9 2f       	mov	r30, r25
   16eb6:	e2 95       	swap	r30
   16eb8:	e7 70       	andi	r30, 0x07	; 7
   16eba:	f0 e0       	ldi	r31, 0x00	; 0
   16ebc:	e0 50       	subi	r30, 0x00	; 0
   16ebe:	f0 40       	sbci	r31, 0x00	; 0
   16ec0:	80 81       	ld	r24, Z
   16ec2:	28 9f       	mul	r18, r24
   16ec4:	60 0c       	add	r6, r0
   16ec6:	71 1c       	adc	r7, r1
   16ec8:	11 24       	eor	r1, r1
   16eca:	89 2f       	mov	r24, r25
   16ecc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   16ed0:	98 2f       	mov	r25, r24
   16ed2:	81 11       	cpse	r24, r1
   16ed4:	00 c0       	rjmp	.+0      	; 0x16ed6 <ce_Eval+0xea>
   16ed6:	88 20       	and	r8, r8
   16ed8:	01 f0       	breq	.+0      	; 0x16eda <ce_Eval+0xee>
   16eda:	99 20       	and	r9, r9
   16edc:	01 f0       	breq	.+0      	; 0x16ede <ce_Eval+0xf2>
   16ede:	c6 01       	movw	r24, r12
   16ee0:	8e 19       	sub	r24, r14
   16ee2:	9f 09       	sbc	r25, r15
   16ee4:	23 e0       	ldi	r18, 0x03	; 3
   16ee6:	88 0f       	add	r24, r24
   16ee8:	99 1f       	adc	r25, r25
   16eea:	2a 95       	dec	r18
   16eec:	01 f4       	brne	.+0      	; 0x16eee <ce_Eval+0x102>
   16eee:	06 19       	sub	r16, r6
   16ef0:	17 09       	sbc	r17, r7
   16ef2:	80 0f       	add	r24, r16
   16ef4:	91 1f       	adc	r25, r17
   16ef6:	00 c0       	rjmp	.+0      	; 0x16ef8 <ce_Eval+0x10c>
   16ef8:	81 e0       	ldi	r24, 0x01	; 1
   16efa:	90 e8       	ldi	r25, 0x80	; 128
   16efc:	00 c0       	rjmp	.+0      	; 0x16efe <ce_Eval+0x112>
   16efe:	8f ef       	ldi	r24, 0xFF	; 255
   16f00:	9f e7       	ldi	r25, 0x7F	; 127
   16f02:	0f 90       	pop	r0
   16f04:	df 91       	pop	r29
   16f06:	cf 91       	pop	r28
   16f08:	1f 91       	pop	r17
   16f0a:	0f 91       	pop	r16
   16f0c:	ff 90       	pop	r15
   16f0e:	ef 90       	pop	r14
   16f10:	df 90       	pop	r13
   16f12:	cf 90       	pop	r12
   16f14:	bf 90       	pop	r11
   16f16:	af 90       	pop	r10
   16f18:	9f 90       	pop	r9
   16f1a:	8f 90       	pop	r8
   16f1c:	7f 90       	pop	r7
   16f1e:	6f 90       	pop	r6
   16f20:	08 95       	ret

Disassembly of section .text.cu_ClearMoveHistory:

0002dd0e <cu_ClearMoveHistory>:
   2dd0e:	10 92 00 00 	sts	0x0000, r1
   2dd12:	08 95       	ret

Disassembly of section .text.cu_ClearBoard:

0005ba22 <cu_ClearBoard>:
   5ba22:	e0 e0       	ldi	r30, 0x00	; 0
   5ba24:	f0 e0       	ldi	r31, 0x00	; 0
   5ba26:	11 92       	st	Z+, r1
   5ba28:	80 e0       	ldi	r24, 0x00	; 0
   5ba2a:	e0 30       	cpi	r30, 0x00	; 0
   5ba2c:	f8 07       	cpc	r31, r24
   5ba2e:	01 f4       	brne	.+0      	; 0x5ba30 <cu_ClearBoard+0xe>
   5ba30:	10 92 00 00 	sts	0x0000, r1
   5ba34:	10 92 00 00 	sts	0x0000, r1
   5ba38:	8f ef       	ldi	r24, 0xFF	; 255
   5ba3a:	80 93 00 00 	sts	0x0000, r24
   5ba3e:	80 93 00 00 	sts	0x0000, r24
   5ba42:	8f e0       	ldi	r24, 0x0F	; 15
   5ba44:	80 93 00 00 	sts	0x0000, r24
   5ba48:	10 92 00 00 	sts	0x0000, r1
   5ba4c:	10 92 00 00 	sts	0x0000, r1
   5ba50:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.chess_SetupBoardTest01:

000b7476 <chess_SetupBoardTest01>:
   b7476:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   b747a:	86 e1       	ldi	r24, 0x16	; 22
   b747c:	80 93 00 00 	sts	0x0000, r24
   b7480:	81 e0       	ldi	r24, 0x01	; 1
   b7482:	80 93 00 00 	sts	0x0000, r24
   b7486:	86 e0       	ldi	r24, 0x06	; 6
   b7488:	80 93 00 00 	sts	0x0000, r24
   b748c:	84 e1       	ldi	r24, 0x14	; 20
   b748e:	80 93 00 00 	sts	0x0000, r24
   b7492:	85 e0       	ldi	r24, 0x05	; 5
   b7494:	80 93 00 00 	sts	0x0000, r24
   b7498:	08 95       	ret

Disassembly of section .text.chess_SetupBoard:

0016e910 <chess_SetupBoard>:
  16e910:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  16e914:	a0 e0       	ldi	r26, 0x00	; 0
  16e916:	b0 e0       	ldi	r27, 0x00	; 0
  16e918:	e0 e0       	ldi	r30, 0x00	; 0
  16e91a:	f0 e0       	ldi	r31, 0x00	; 0
  16e91c:	91 e0       	ldi	r25, 0x01	; 1
  16e91e:	81 e1       	ldi	r24, 0x11	; 17
  16e920:	9d 93       	st	X+, r25
  16e922:	81 93       	st	Z+, r24
  16e924:	20 e0       	ldi	r18, 0x00	; 0
  16e926:	e0 30       	cpi	r30, 0x00	; 0
  16e928:	f2 07       	cpc	r31, r18
  16e92a:	01 f4       	brne	.+0      	; 0x16e92c <chess_SetupBoard+0x1c>
  16e92c:	84 e0       	ldi	r24, 0x04	; 4
  16e92e:	80 93 00 00 	sts	0x0000, r24
  16e932:	92 e0       	ldi	r25, 0x02	; 2
  16e934:	90 93 00 00 	sts	0x0000, r25
  16e938:	23 e0       	ldi	r18, 0x03	; 3
  16e93a:	20 93 00 00 	sts	0x0000, r18
  16e93e:	35 e0       	ldi	r19, 0x05	; 5
  16e940:	30 93 00 00 	sts	0x0000, r19
  16e944:	36 e0       	ldi	r19, 0x06	; 6
  16e946:	30 93 00 00 	sts	0x0000, r19
  16e94a:	20 93 00 00 	sts	0x0000, r18
  16e94e:	90 93 00 00 	sts	0x0000, r25
  16e952:	80 93 00 00 	sts	0x0000, r24
  16e956:	84 e1       	ldi	r24, 0x14	; 20
  16e958:	80 93 00 00 	sts	0x0000, r24
  16e95c:	92 e1       	ldi	r25, 0x12	; 18
  16e95e:	90 93 00 00 	sts	0x0000, r25
  16e962:	23 e1       	ldi	r18, 0x13	; 19
  16e964:	20 93 00 00 	sts	0x0000, r18
  16e968:	35 e1       	ldi	r19, 0x15	; 21
  16e96a:	30 93 00 00 	sts	0x0000, r19
  16e96e:	36 e1       	ldi	r19, 0x16	; 22
  16e970:	30 93 00 00 	sts	0x0000, r19
  16e974:	20 93 00 00 	sts	0x0000, r18
  16e978:	90 93 00 00 	sts	0x0000, r25
  16e97c:	80 93 00 00 	sts	0x0000, r24
  16e980:	08 95       	ret

Disassembly of section .text.cu_ReduceHistoryByFullMove:

002dd292 <cu_ReduceHistoryByFullMove>:
  2dd292:	cf 93       	push	r28
  2dd294:	79 e0       	ldi	r23, 0x09	; 9
  2dd296:	60 91 00 00 	lds	r22, 0x0000
  2dd29a:	67 30       	cpi	r22, 0x07	; 7
  2dd29c:	00 f0       	brcs	.+0      	; 0x2dd29e <cu_ReduceHistoryByFullMove+0xc>
  2dd29e:	c0 e0       	ldi	r28, 0x00	; 0
  2dd2a0:	46 2f       	mov	r20, r22
  2dd2a2:	50 e0       	ldi	r21, 0x00	; 0
  2dd2a4:	2c 2f       	mov	r18, r28
  2dd2a6:	30 e0       	ldi	r19, 0x00	; 0
  2dd2a8:	c9 01       	movw	r24, r18
  2dd2aa:	02 96       	adiw	r24, 0x02	; 2
  2dd2ac:	84 17       	cp	r24, r20
  2dd2ae:	95 07       	cpc	r25, r21
  2dd2b0:	04 f4       	brge	.+0      	; 0x2dd2b2 <cu_ReduceHistoryByFullMove+0x20>
  2dd2b2:	72 9f       	mul	r23, r18
  2dd2b4:	d0 01       	movw	r26, r0
  2dd2b6:	73 9f       	mul	r23, r19
  2dd2b8:	b0 0d       	add	r27, r0
  2dd2ba:	11 24       	eor	r1, r1
  2dd2bc:	a0 50       	subi	r26, 0x00	; 0
  2dd2be:	b0 40       	sbci	r27, 0x00	; 0
  2dd2c0:	78 9f       	mul	r23, r24
  2dd2c2:	f0 01       	movw	r30, r0
  2dd2c4:	79 9f       	mul	r23, r25
  2dd2c6:	f0 0d       	add	r31, r0
  2dd2c8:	11 24       	eor	r1, r1
  2dd2ca:	e0 50       	subi	r30, 0x00	; 0
  2dd2cc:	f0 40       	sbci	r31, 0x00	; 0
  2dd2ce:	87 2f       	mov	r24, r23
  2dd2d0:	01 90       	ld	r0, Z+
  2dd2d2:	0d 92       	st	X+, r0
  2dd2d4:	8a 95       	dec	r24
  2dd2d6:	01 f4       	brne	.+0      	; 0x2dd2d8 <cu_ReduceHistoryByFullMove+0x46>
  2dd2d8:	cf 5f       	subi	r28, 0xFF	; 255
  2dd2da:	00 c0       	rjmp	.+0      	; 0x2dd2dc <cu_ReduceHistoryByFullMove+0x4a>
  2dd2dc:	62 50       	subi	r22, 0x02	; 2
  2dd2de:	60 93 00 00 	sts	0x0000, r22
  2dd2e2:	00 c0       	rjmp	.+0      	; 0x2dd2e4 <cu_ReduceHistoryByFullMove+0x52>
  2dd2e4:	cf 91       	pop	r28
  2dd2e6:	08 95       	ret

Disassembly of section .text.cu_UndoHalfMove:

005ba57a <cu_UndoHalfMove>:
  5ba57a:	cf 93       	push	r28
  5ba57c:	df 93       	push	r29
  5ba57e:	c0 91 00 00 	lds	r28, 0x0000
  5ba582:	cc 23       	and	r28, r28
  5ba584:	01 f0       	breq	.+0      	; 0x5ba586 <cu_UndoHalfMove+0xc>
  5ba586:	c1 50       	subi	r28, 0x01	; 1
  5ba588:	c0 93 00 00 	sts	0x0000, r28
  5ba58c:	89 e0       	ldi	r24, 0x09	; 9
  5ba58e:	c8 9f       	mul	r28, r24
  5ba590:	e0 01       	movw	r28, r0
  5ba592:	11 24       	eor	r1, r1
  5ba594:	c0 50       	subi	r28, 0x00	; 0
  5ba596:	d0 40       	sbci	r29, 0x00	; 0
  5ba598:	8e 81       	ldd	r24, Y+6	; 0x06
  5ba59a:	80 93 00 00 	sts	0x0000, r24
  5ba59e:	8f 81       	ldd	r24, Y+7	; 0x07
  5ba5a0:	80 93 00 00 	sts	0x0000, r24
  5ba5a4:	88 85       	ldd	r24, Y+8	; 0x08
  5ba5a6:	80 93 00 00 	sts	0x0000, r24
  5ba5aa:	68 81       	ld	r22, Y
  5ba5ac:	89 81       	ldd	r24, Y+1	; 0x01
  5ba5ae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5ba5b2:	60 e0       	ldi	r22, 0x00	; 0
  5ba5b4:	8a 81       	ldd	r24, Y+2	; 0x02
  5ba5b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5ba5ba:	8c 81       	ldd	r24, Y+4	; 0x04
  5ba5bc:	8f 3f       	cpi	r24, 0xFF	; 255
  5ba5be:	01 f0       	breq	.+0      	; 0x5ba5c0 <cu_UndoHalfMove+0x46>
  5ba5c0:	6b 81       	ldd	r22, Y+3	; 0x03
  5ba5c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  5ba5c6:	8d 81       	ldd	r24, Y+5	; 0x05
  5ba5c8:	8f 3f       	cpi	r24, 0xFF	; 255
  5ba5ca:	01 f0       	breq	.+0      	; 0x5ba5cc <cu_UndoHalfMove+0x52>
  5ba5cc:	60 e0       	ldi	r22, 0x00	; 0
  5ba5ce:	df 91       	pop	r29
  5ba5d0:	cf 91       	pop	r28
  5ba5d2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  5ba5d6:	df 91       	pop	r29
  5ba5d8:	cf 91       	pop	r28
  5ba5da:	08 95       	ret

Disassembly of section .text.cu_PushHalfMove:

00b74b56 <cu_PushHalfMove>:
  b74b56:	80 91 00 00 	lds	r24, 0x0000
  b74b5a:	99 e0       	ldi	r25, 0x09	; 9
  b74b5c:	89 9f       	mul	r24, r25
  b74b5e:	f0 01       	movw	r30, r0
  b74b60:	11 24       	eor	r1, r1
  b74b62:	e0 50       	subi	r30, 0x00	; 0
  b74b64:	f0 40       	sbci	r31, 0x00	; 0
  b74b66:	8c 30       	cpi	r24, 0x0C	; 12
  b74b68:	00 f4       	brcc	.+0      	; 0xb74b6a <cu_PushHalfMove+0x14>
  b74b6a:	8f 5f       	subi	r24, 0xFF	; 255
  b74b6c:	80 93 00 00 	sts	0x0000, r24
  b74b70:	80 91 00 00 	lds	r24, 0x0000
  b74b74:	86 83       	std	Z+6, r24	; 0x06
  b74b76:	80 91 00 00 	lds	r24, 0x0000
  b74b7a:	87 83       	std	Z+7, r24	; 0x07
  b74b7c:	80 91 00 00 	lds	r24, 0x0000
  b74b80:	80 87       	std	Z+8, r24	; 0x08
  b74b82:	cf 01       	movw	r24, r30
  b74b84:	08 95       	ret

Disassembly of section .text.cu_GetHalfMoveStr:

016e96dc <cu_GetHalfMoveStr>:
 16e96dc:	ef 92       	push	r14
 16e96de:	ff 92       	push	r15
 16e96e0:	0f 93       	push	r16
 16e96e2:	1f 93       	push	r17
 16e96e4:	cf 93       	push	r28
 16e96e6:	df 93       	push	r29
 16e96e8:	29 e0       	ldi	r18, 0x09	; 9
 16e96ea:	82 9f       	mul	r24, r18
 16e96ec:	e0 01       	movw	r28, r0
 16e96ee:	11 24       	eor	r1, r1
 16e96f0:	c0 50       	subi	r28, 0x00	; 0
 16e96f2:	d0 40       	sbci	r29, 0x00	; 0
 16e96f4:	e8 81       	ld	r30, Y
 16e96f6:	ef 70       	andi	r30, 0x0F	; 15
 16e96f8:	01 f0       	breq	.+0      	; 0x16e96fa <cu_GetHalfMoveStr+0x1e>
 16e96fa:	e1 30       	cpi	r30, 0x01	; 1
 16e96fc:	01 f0       	breq	.+0      	; 0x16e96fe <cu_GetHalfMoveStr+0x22>
 16e96fe:	f0 e0       	ldi	r31, 0x00	; 0
 16e9700:	e0 50       	subi	r30, 0x00	; 0
 16e9702:	f0 40       	sbci	r31, 0x00	; 0
 16e9704:	80 81       	ld	r24, Z
 16e9706:	80 93 00 00 	sts	0x0000, r24
 16e970a:	00 e0       	ldi	r16, 0x00	; 0
 16e970c:	10 e0       	ldi	r17, 0x00	; 0
 16e970e:	00 c0       	rjmp	.+0      	; 0x16e9710 <cu_GetHalfMoveStr+0x34>
 16e9710:	00 e0       	ldi	r16, 0x00	; 0
 16e9712:	10 e0       	ldi	r17, 0x00	; 0
 16e9714:	69 81       	ldd	r22, Y+1	; 0x01
 16e9716:	c8 01       	movw	r24, r16
 16e9718:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16e971c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e971e:	8f 70       	andi	r24, 0x0F	; 15
 16e9720:	f8 01       	movw	r30, r16
 16e9722:	33 96       	adiw	r30, 0x03	; 3
 16e9724:	7f 01       	movw	r14, r30
 16e9726:	81 11       	cpse	r24, r1
 16e9728:	00 c0       	rjmp	.+0      	; 0x16e972a <cu_GetHalfMoveStr+0x4e>
 16e972a:	8d e2       	ldi	r24, 0x2D	; 45
 16e972c:	00 c0       	rjmp	.+0      	; 0x16e972e <cu_GetHalfMoveStr+0x52>
 16e972e:	88 e7       	ldi	r24, 0x78	; 120
 16e9730:	f8 01       	movw	r30, r16
 16e9732:	82 83       	std	Z+2, r24	; 0x02
 16e9734:	6a 81       	ldd	r22, Y+2	; 0x02
 16e9736:	c7 01       	movw	r24, r14
 16e9738:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16e973c:	f7 01       	movw	r30, r14
 16e973e:	32 96       	adiw	r30, 0x02	; 2
 16e9740:	00 c0       	rjmp	.+0      	; 0x16e9742 <cu_GetHalfMoveStr+0x66>
 16e9742:	e0 e0       	ldi	r30, 0x00	; 0
 16e9744:	f0 e0       	ldi	r31, 0x00	; 0
 16e9746:	10 82       	st	Z, r1
 16e9748:	80 e0       	ldi	r24, 0x00	; 0
 16e974a:	90 e0       	ldi	r25, 0x00	; 0
 16e974c:	df 91       	pop	r29
 16e974e:	cf 91       	pop	r28
 16e9750:	1f 91       	pop	r17
 16e9752:	0f 91       	pop	r16
 16e9754:	ff 90       	pop	r15
 16e9756:	ef 90       	pop	r14
 16e9758:	08 95       	ret

Disassembly of section .text.cu_Move:

02dd2e36 <cu_Move>:
 2dd2e36:	cf 92       	push	r12
 2dd2e38:	df 92       	push	r13
 2dd2e3a:	ef 92       	push	r14
 2dd2e3c:	ff 92       	push	r15
 2dd2e3e:	0f 93       	push	r16
 2dd2e40:	1f 93       	push	r17
 2dd2e42:	cf 93       	push	r28
 2dd2e44:	df 93       	push	r29
 2dd2e46:	e8 2e       	mov	r14, r24
 2dd2e48:	f6 2e       	mov	r15, r22
 2dd2e4a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2e4e:	ec 01       	movw	r28, r24
 2dd2e50:	8e 2d       	mov	r24, r14
 2dd2e52:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2e56:	d8 2e       	mov	r13, r24
 2dd2e58:	8f 2d       	mov	r24, r15
 2dd2e5a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2e5e:	d8 82       	st	Y, r13
 2dd2e60:	e9 82       	std	Y+1, r14	; 0x01
 2dd2e62:	fa 82       	std	Y+2, r15	; 0x02
 2dd2e64:	8b 83       	std	Y+3, r24	; 0x03
 2dd2e66:	fc 82       	std	Y+4, r15	; 0x04
 2dd2e68:	9f ef       	ldi	r25, 0xFF	; 255
 2dd2e6a:	9d 83       	std	Y+5, r25	; 0x05
 2dd2e6c:	9d 2d       	mov	r25, r13
 2dd2e6e:	9f 70       	andi	r25, 0x0F	; 15
 2dd2e70:	91 30       	cpi	r25, 0x01	; 1
 2dd2e72:	01 f4       	brne	.+0      	; 0x2dd2e74 <cu_Move+0x3e>
 2dd2e74:	4e 2d       	mov	r20, r14
 2dd2e76:	50 e0       	ldi	r21, 0x00	; 0
 2dd2e78:	2f 2d       	mov	r18, r15
 2dd2e7a:	30 e0       	ldi	r19, 0x00	; 0
 2dd2e7c:	ba 01       	movw	r22, r20
 2dd2e7e:	62 1b       	sub	r22, r18
 2dd2e80:	73 0b       	sbc	r23, r19
 2dd2e82:	60 32       	cpi	r22, 0x20	; 32
 2dd2e84:	71 05       	cpc	r23, r1
 2dd2e86:	01 f0       	breq	.+0      	; 0x2dd2e88 <cu_Move+0x52>
 2dd2e88:	b9 01       	movw	r22, r18
 2dd2e8a:	64 1b       	sub	r22, r20
 2dd2e8c:	75 0b       	sbc	r23, r21
 2dd2e8e:	60 32       	cpi	r22, 0x20	; 32
 2dd2e90:	71 05       	cpc	r23, r1
 2dd2e92:	01 f4       	brne	.+0      	; 0x2dd2e94 <cu_Move+0x5e>
 2dd2e94:	d4 fa       	bst	r13, 4
 2dd2e96:	00 27       	eor	r16, r16
 2dd2e98:	00 f9       	bld	r16, 0
 2dd2e9a:	10 e0       	ldi	r17, 0x00	; 0
 2dd2e9c:	00 50       	subi	r16, 0x00	; 0
 2dd2e9e:	10 40       	sbci	r17, 0x00	; 0
 2dd2ea0:	f8 01       	movw	r30, r16
 2dd2ea2:	ee 5b       	subi	r30, 0xBE	; 190
 2dd2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
 2dd2ea6:	f0 82       	st	Z, r15
 2dd2ea8:	00 c0       	rjmp	.+0      	; 0x2dd2eaa <cu_Move+0x74>
 2dd2eaa:	6f 2d       	mov	r22, r15
 2dd2eac:	62 95       	swap	r22
 2dd2eae:	6f 70       	andi	r22, 0x0F	; 15
 2dd2eb0:	01 f0       	breq	.+0      	; 0x2dd2eb2 <cu_Move+0x7c>
 2dd2eb2:	67 30       	cpi	r22, 0x07	; 7
 2dd2eb4:	01 f4       	brne	.+0      	; 0x2dd2eb6 <cu_Move+0x80>
 2dd2eb6:	8d 2d       	mov	r24, r13
 2dd2eb8:	85 60       	ori	r24, 0x05	; 5
 2dd2eba:	d8 2e       	mov	r13, r24
 2dd2ebc:	00 c0       	rjmp	.+0      	; 0x2dd2ebe <cu_Move+0x88>
 2dd2ebe:	24 0f       	add	r18, r20
 2dd2ec0:	35 1f       	adc	r19, r21
 2dd2ec2:	20 ff       	sbrs	r18, 0
 2dd2ec4:	00 c0       	rjmp	.+0      	; 0x2dd2ec6 <cu_Move+0x90>
 2dd2ec6:	8f 70       	andi	r24, 0x0F	; 15
 2dd2ec8:	01 f0       	breq	.+0      	; 0x2dd2eca <cu_Move+0x94>
 2dd2eca:	00 c0       	rjmp	.+0      	; 0x2dd2ecc <cu_Move+0x96>
 2dd2ecc:	d4 fa       	bst	r13, 4
 2dd2ece:	ee 27       	eor	r30, r30
 2dd2ed0:	e0 f9       	bld	r30, 0
 2dd2ed2:	e9 27       	eor	r30, r25
 2dd2ed4:	f0 e0       	ldi	r31, 0x00	; 0
 2dd2ed6:	e0 50       	subi	r30, 0x00	; 0
 2dd2ed8:	f0 40       	sbci	r31, 0x00	; 0
 2dd2eda:	10 81       	ld	r17, Z
 2dd2edc:	1c 83       	std	Y+4, r17	; 0x04
 2dd2ede:	81 2f       	mov	r24, r17
 2dd2ee0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2ee4:	8b 83       	std	Y+3, r24	; 0x03
 2dd2ee6:	c1 2c       	mov	r12, r1
 2dd2ee8:	0f ef       	ldi	r16, 0xFF	; 255
 2dd2eea:	00 c0       	rjmp	.+0      	; 0x2dd2eec <cu_Move+0xb6>
 2dd2eec:	96 30       	cpi	r25, 0x06	; 6
 2dd2eee:	01 f4       	brne	.+0      	; 0x2dd2ef0 <cu_Move+0xba>
 2dd2ef0:	80 91 00 00 	lds	r24, 0x0000
 2dd2ef4:	d4 fc       	sbrc	r13, 4
 2dd2ef6:	00 c0       	rjmp	.+0      	; 0x2dd2ef8 <cu_Move+0xc2>
 2dd2ef8:	8c 70       	andi	r24, 0x0C	; 12
 2dd2efa:	00 c0       	rjmp	.+0      	; 0x2dd2efc <cu_Move+0xc6>
 2dd2efc:	83 70       	andi	r24, 0x03	; 3
 2dd2efe:	80 93 00 00 	sts	0x0000, r24
 2dd2f02:	2e 2d       	mov	r18, r14
 2dd2f04:	30 e0       	ldi	r19, 0x00	; 0
 2dd2f06:	4f 2d       	mov	r20, r15
 2dd2f08:	50 e0       	ldi	r21, 0x00	; 0
 2dd2f0a:	f9 01       	movw	r30, r18
 2dd2f0c:	e4 1b       	sub	r30, r20
 2dd2f0e:	f5 0b       	sbc	r31, r21
 2dd2f10:	32 97       	sbiw	r30, 0x02	; 2
 2dd2f12:	01 f4       	brne	.+0      	; 0x2dd2f14 <cu_Move+0xde>
 2dd2f14:	0f ef       	ldi	r16, 0xFF	; 255
 2dd2f16:	0e 0d       	add	r16, r14
 2dd2f18:	1c ef       	ldi	r17, 0xFC	; 252
 2dd2f1a:	00 c0       	rjmp	.+0      	; 0x2dd2f1c <cu_Move+0xe6>
 2dd2f1c:	42 1b       	sub	r20, r18
 2dd2f1e:	53 0b       	sbc	r21, r19
 2dd2f20:	42 30       	cpi	r20, 0x02	; 2
 2dd2f22:	51 05       	cpc	r21, r1
 2dd2f24:	01 f4       	brne	.+0      	; 0x2dd2f26 <cu_Move+0xf0>
 2dd2f26:	01 e0       	ldi	r16, 0x01	; 1
 2dd2f28:	0e 0d       	add	r16, r14
 2dd2f2a:	13 e0       	ldi	r17, 0x03	; 3
 2dd2f2c:	1e 0d       	add	r17, r14
 2dd2f2e:	81 2f       	mov	r24, r17
 2dd2f30:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2f34:	c8 2e       	mov	r12, r24
 2dd2f36:	8b 83       	std	Y+3, r24	; 0x03
 2dd2f38:	1c 83       	std	Y+4, r17	; 0x04
 2dd2f3a:	0d 83       	std	Y+5, r16	; 0x05
 2dd2f3c:	00 c0       	rjmp	.+0      	; 0x2dd2f3e <cu_Move+0x108>
 2dd2f3e:	94 30       	cpi	r25, 0x04	; 4
 2dd2f40:	01 f4       	brne	.+0      	; 0x2dd2f42 <cu_Move+0x10c>
 2dd2f42:	e1 10       	cpse	r14, r1
 2dd2f44:	00 c0       	rjmp	.+0      	; 0x2dd2f46 <cu_Move+0x110>
 2dd2f46:	80 91 00 00 	lds	r24, 0x0000
 2dd2f4a:	8e 7f       	andi	r24, 0xFE	; 254
 2dd2f4c:	00 c0       	rjmp	.+0      	; 0x2dd2f4e <cu_Move+0x118>
 2dd2f4e:	87 e0       	ldi	r24, 0x07	; 7
 2dd2f50:	e8 12       	cpse	r14, r24
 2dd2f52:	00 c0       	rjmp	.+0      	; 0x2dd2f54 <cu_Move+0x11e>
 2dd2f54:	80 91 00 00 	lds	r24, 0x0000
 2dd2f58:	8d 7f       	andi	r24, 0xFD	; 253
 2dd2f5a:	00 c0       	rjmp	.+0      	; 0x2dd2f5c <cu_Move+0x126>
 2dd2f5c:	80 e7       	ldi	r24, 0x70	; 112
 2dd2f5e:	e8 12       	cpse	r14, r24
 2dd2f60:	00 c0       	rjmp	.+0      	; 0x2dd2f62 <cu_Move+0x12c>
 2dd2f62:	80 91 00 00 	lds	r24, 0x0000
 2dd2f66:	8b 7f       	andi	r24, 0xFB	; 251
 2dd2f68:	00 c0       	rjmp	.+0      	; 0x2dd2f6a <cu_Move+0x134>
 2dd2f6a:	87 e7       	ldi	r24, 0x77	; 119
 2dd2f6c:	e8 12       	cpse	r14, r24
 2dd2f6e:	00 c0       	rjmp	.+0      	; 0x2dd2f70 <cu_Move+0x13a>
 2dd2f70:	80 91 00 00 	lds	r24, 0x0000
 2dd2f74:	87 7f       	andi	r24, 0xF7	; 247
 2dd2f76:	80 93 00 00 	sts	0x0000, r24
 2dd2f7a:	c1 2c       	mov	r12, r1
 2dd2f7c:	0f ef       	ldi	r16, 0xFF	; 255
 2dd2f7e:	1f ef       	ldi	r17, 0xFF	; 255
 2dd2f80:	6d 2d       	mov	r22, r13
 2dd2f82:	8f 2d       	mov	r24, r15
 2dd2f84:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2f88:	0f 3f       	cpi	r16, 0xFF	; 255
 2dd2f8a:	01 f0       	breq	.+0      	; 0x2dd2f8c <cu_Move+0x156>
 2dd2f8c:	6c 2d       	mov	r22, r12
 2dd2f8e:	80 2f       	mov	r24, r16
 2dd2f90:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2f94:	60 e0       	ldi	r22, 0x00	; 0
 2dd2f96:	8e 2d       	mov	r24, r14
 2dd2f98:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2dd2f9c:	1f 3f       	cpi	r17, 0xFF	; 255
 2dd2f9e:	01 f0       	breq	.+0      	; 0x2dd2fa0 <cu_Move+0x16a>
 2dd2fa0:	60 e0       	ldi	r22, 0x00	; 0
 2dd2fa2:	81 2f       	mov	r24, r17
 2dd2fa4:	df 91       	pop	r29
 2dd2fa6:	cf 91       	pop	r28
 2dd2fa8:	1f 91       	pop	r17
 2dd2faa:	0f 91       	pop	r16
 2dd2fac:	ff 90       	pop	r15
 2dd2fae:	ef 90       	pop	r14
 2dd2fb0:	df 90       	pop	r13
 2dd2fb2:	cf 90       	pop	r12
 2dd2fb4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 2dd2fb8:	df 91       	pop	r29
 2dd2fba:	cf 91       	pop	r28
 2dd2fbc:	1f 91       	pop	r17
 2dd2fbe:	0f 91       	pop	r16
 2dd2fc0:	ff 90       	pop	r15
 2dd2fc2:	ef 90       	pop	r14
 2dd2fc4:	df 90       	pop	r13
 2dd2fc6:	cf 90       	pop	r12
 2dd2fc8:	08 95       	ret

Disassembly of section .text.ce_FindPieceByStep:

05ba5e00 <ce_FindPieceByStep>:
 5ba5e00:	8f 92       	push	r8
 5ba5e02:	9f 92       	push	r9
 5ba5e04:	bf 92       	push	r11
 5ba5e06:	cf 92       	push	r12
 5ba5e08:	df 92       	push	r13
 5ba5e0a:	ef 92       	push	r14
 5ba5e0c:	ff 92       	push	r15
 5ba5e0e:	0f 93       	push	r16
 5ba5e10:	1f 93       	push	r17
 5ba5e12:	cf 93       	push	r28
 5ba5e14:	df 93       	push	r29
 5ba5e16:	00 d0       	rcall	.+0      	; 0x5ba5e18 <ce_FindPieceByStep+0x18>
 5ba5e18:	cd b7       	in	r28, 0x3d	; 61
 5ba5e1a:	de b7       	in	r29, 0x3e	; 62
 5ba5e1c:	c8 2e       	mov	r12, r24
 5ba5e1e:	8a 01       	movw	r16, r20
 5ba5e20:	e6 2e       	mov	r14, r22
 5ba5e22:	f1 2c       	mov	r15, r1
 5ba5e24:	c7 01       	movw	r24, r14
 5ba5e26:	80 50       	subi	r24, 0x00	; 0
 5ba5e28:	90 40       	sbci	r25, 0x00	; 0
 5ba5e2a:	7c 01       	movw	r14, r24
 5ba5e2c:	f8 01       	movw	r30, r16
 5ba5e2e:	94 91       	lpm	r25, Z
 5ba5e30:	99 23       	and	r25, r25
 5ba5e32:	01 f0       	breq	.+0      	; 0x5ba5e34 <ce_FindPieceByStep+0x34>
 5ba5e34:	dc 2c       	mov	r13, r12
 5ba5e36:	b9 2e       	mov	r11, r25
 5ba5e38:	db 0c       	add	r13, r11
 5ba5e3a:	8d 2d       	mov	r24, r13
 5ba5e3c:	88 78       	andi	r24, 0x88	; 136
 5ba5e3e:	01 f4       	brne	.+0      	; 0x5ba5e40 <ce_FindPieceByStep+0x40>
 5ba5e40:	8d 2d       	mov	r24, r13
 5ba5e42:	2a 83       	std	Y+2, r18	; 0x02
 5ba5e44:	69 83       	std	Y+1, r22	; 0x01
 5ba5e46:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5ba5e4a:	98 2f       	mov	r25, r24
 5ba5e4c:	9f 70       	andi	r25, 0x0F	; 15
 5ba5e4e:	2a 81       	ldd	r18, Y+2	; 0x02
 5ba5e50:	69 81       	ldd	r22, Y+1	; 0x01
 5ba5e52:	99 23       	and	r25, r25
 5ba5e54:	01 f0       	breq	.+0      	; 0x5ba5e56 <ce_FindPieceByStep+0x56>
 5ba5e56:	96 13       	cpse	r25, r22
 5ba5e58:	00 c0       	rjmp	.+0      	; 0x5ba5e5a <ce_FindPieceByStep+0x5a>
 5ba5e5a:	84 fb       	bst	r24, 4
 5ba5e5c:	88 24       	eor	r8, r8
 5ba5e5e:	80 f8       	bld	r8, 0
 5ba5e60:	91 2c       	mov	r9, r1
 5ba5e62:	c4 01       	movw	r24, r8
 5ba5e64:	80 50       	subi	r24, 0x00	; 0
 5ba5e66:	90 40       	sbci	r25, 0x00	; 0
 5ba5e68:	4c 01       	movw	r8, r24
 5ba5e6a:	fc 01       	movw	r30, r24
 5ba5e6c:	e3 5b       	subi	r30, 0xB3	; 179
 5ba5e6e:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba5e70:	90 81       	ld	r25, Z
 5ba5e72:	d7 01       	movw	r26, r14
 5ba5e74:	8c 91       	ld	r24, X
 5ba5e76:	98 0f       	add	r25, r24
 5ba5e78:	90 83       	st	Z, r25
 5ba5e7a:	f4 01       	movw	r30, r8
 5ba5e7c:	e5 5b       	subi	r30, 0xB5	; 181
 5ba5e7e:	ff 4f       	sbci	r31, 0xFF	; 255
 5ba5e80:	90 81       	ld	r25, Z
 5ba5e82:	9f 5f       	subi	r25, 0xFF	; 255
 5ba5e84:	90 83       	st	Z, r25
 5ba5e86:	00 c0       	rjmp	.+0      	; 0x5ba5e88 <ce_FindPieceByStep+0x88>
 5ba5e88:	21 11       	cpse	r18, r1
 5ba5e8a:	00 c0       	rjmp	.+0      	; 0x5ba5e8c <ce_FindPieceByStep+0x8c>
 5ba5e8c:	0f 5f       	subi	r16, 0xFF	; 255
 5ba5e8e:	1f 4f       	sbci	r17, 0xFF	; 255
 5ba5e90:	00 c0       	rjmp	.+0      	; 0x5ba5e92 <ce_FindPieceByStep+0x92>
 5ba5e92:	0f 90       	pop	r0
 5ba5e94:	0f 90       	pop	r0
 5ba5e96:	df 91       	pop	r29
 5ba5e98:	cf 91       	pop	r28
 5ba5e9a:	1f 91       	pop	r17
 5ba5e9c:	0f 91       	pop	r16
 5ba5e9e:	ff 90       	pop	r15
 5ba5ea0:	ef 90       	pop	r14
 5ba5ea2:	df 90       	pop	r13
 5ba5ea4:	cf 90       	pop	r12
 5ba5ea6:	bf 90       	pop	r11
 5ba5ea8:	9f 90       	pop	r9
 5ba5eaa:	8f 90       	pop	r8
 5ba5eac:	08 95       	ret

Disassembly of section .text.ce_FindPawnPiece:

0b74bcae <ce_FindPawnPiece>:
 b74bcae:	cf 93       	push	r28
 b74bcb0:	df 93       	push	r29
 b74bcb2:	1f 92       	push	r1
 b74bcb4:	cd b7       	in	r28, 0x3d	; 61
 b74bcb6:	de b7       	in	r29, 0x3e	; 62
 b74bcb8:	98 2f       	mov	r25, r24
 b74bcba:	98 78       	andi	r25, 0x88	; 136
 b74bcbc:	01 f4       	brne	.+0      	; 0xb74bcbe <ce_FindPawnPiece+0x10>
 b74bcbe:	69 83       	std	Y+1, r22	; 0x01
 b74bcc0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b74bcc4:	98 2f       	mov	r25, r24
 b74bcc6:	9f 70       	andi	r25, 0x0F	; 15
 b74bcc8:	69 81       	ldd	r22, Y+1	; 0x01
 b74bcca:	91 30       	cpi	r25, 0x01	; 1
 b74bccc:	01 f4       	brne	.+0      	; 0xb74bcce <ce_FindPawnPiece+0x20>
 b74bcce:	82 95       	swap	r24
 b74bcd0:	81 70       	andi	r24, 0x01	; 1
 b74bcd2:	86 13       	cpse	r24, r22
 b74bcd4:	00 c0       	rjmp	.+0      	; 0xb74bcd6 <ce_FindPawnPiece+0x28>
 b74bcd6:	90 e0       	ldi	r25, 0x00	; 0
 b74bcd8:	80 50       	subi	r24, 0x00	; 0
 b74bcda:	90 40       	sbci	r25, 0x00	; 0
 b74bcdc:	fc 01       	movw	r30, r24
 b74bcde:	e3 5b       	subi	r30, 0xB3	; 179
 b74bce0:	ff 4f       	sbci	r31, 0xFF	; 255
 b74bce2:	20 81       	ld	r18, Z
 b74bce4:	2f 5f       	subi	r18, 0xFF	; 255
 b74bce6:	20 83       	st	Z, r18
 b74bce8:	fc 01       	movw	r30, r24
 b74bcea:	e5 5b       	subi	r30, 0xB5	; 181
 b74bcec:	ff 4f       	sbci	r31, 0xFF	; 255
 b74bcee:	80 81       	ld	r24, Z
 b74bcf0:	8f 5f       	subi	r24, 0xFF	; 255
 b74bcf2:	80 83       	st	Z, r24
 b74bcf4:	0f 90       	pop	r0
 b74bcf6:	df 91       	pop	r29
 b74bcf8:	cf 91       	pop	r28
 b74bcfa:	08 95       	ret

Disassembly of section .text.ce_CalculatePositionWeight:

16e979aa <ce_CalculatePositionWeight>:
16e979aa:	cf 93       	push	r28
16e979ac:	c8 2f       	mov	r28, r24
16e979ae:	10 92 00 00 	sts	0x0000, r1
16e979b2:	10 92 00 00 	sts	0x0000, r1
16e979b6:	10 92 00 00 	sts	0x0000, r1
16e979ba:	10 92 00 00 	sts	0x0000, r1
16e979be:	88 78       	andi	r24, 0x88	; 136
16e979c0:	01 f4       	brne	.+0      	; 0x16e979c2 <ce_CalculatePositionWeight+0x18>
16e979c2:	21 e0       	ldi	r18, 0x01	; 1
16e979c4:	40 e0       	ldi	r20, 0x00	; 0
16e979c6:	50 e0       	ldi	r21, 0x00	; 0
16e979c8:	64 e0       	ldi	r22, 0x04	; 4
16e979ca:	8c 2f       	mov	r24, r28
16e979cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e979d0:	21 e0       	ldi	r18, 0x01	; 1
16e979d2:	40 e0       	ldi	r20, 0x00	; 0
16e979d4:	50 e0       	ldi	r21, 0x00	; 0
16e979d6:	63 e0       	ldi	r22, 0x03	; 3
16e979d8:	8c 2f       	mov	r24, r28
16e979da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e979de:	21 e0       	ldi	r18, 0x01	; 1
16e979e0:	40 e0       	ldi	r20, 0x00	; 0
16e979e2:	50 e0       	ldi	r21, 0x00	; 0
16e979e4:	65 e0       	ldi	r22, 0x05	; 5
16e979e6:	8c 2f       	mov	r24, r28
16e979e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e979ec:	20 e0       	ldi	r18, 0x00	; 0
16e979ee:	40 e0       	ldi	r20, 0x00	; 0
16e979f0:	50 e0       	ldi	r21, 0x00	; 0
16e979f2:	62 e0       	ldi	r22, 0x02	; 2
16e979f4:	8c 2f       	mov	r24, r28
16e979f6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e979fa:	20 e0       	ldi	r18, 0x00	; 0
16e979fc:	40 e0       	ldi	r20, 0x00	; 0
16e979fe:	50 e0       	ldi	r21, 0x00	; 0
16e97a00:	66 e0       	ldi	r22, 0x06	; 6
16e97a02:	8c 2f       	mov	r24, r28
16e97a04:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e97a08:	61 e0       	ldi	r22, 0x01	; 1
16e97a0a:	81 e1       	ldi	r24, 0x11	; 17
16e97a0c:	8c 0f       	add	r24, r28
16e97a0e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e97a12:	61 e0       	ldi	r22, 0x01	; 1
16e97a14:	8f e0       	ldi	r24, 0x0F	; 15
16e97a16:	8c 0f       	add	r24, r28
16e97a18:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e97a1c:	60 e0       	ldi	r22, 0x00	; 0
16e97a1e:	8f ee       	ldi	r24, 0xEF	; 239
16e97a20:	8c 0f       	add	r24, r28
16e97a22:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
16e97a26:	60 e0       	ldi	r22, 0x00	; 0
16e97a28:	81 ef       	ldi	r24, 0xF1	; 241
16e97a2a:	8c 0f       	add	r24, r28
16e97a2c:	cf 91       	pop	r28
16e97a2e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
16e97a32:	cf 91       	pop	r28
16e97a34:	08 95       	ret

Disassembly of section .text.cu_IsKingCastling:

2dd2f3e0 <cu_IsKingCastling>:
2dd2f3e0:	ff 92       	push	r15
2dd2f3e2:	0f 93       	push	r16
2dd2f3e4:	1f 93       	push	r17
2dd2f3e6:	cf 93       	push	r28
2dd2f3e8:	df 93       	push	r29
2dd2f3ea:	f6 2e       	mov	r15, r22
2dd2f3ec:	04 2f       	mov	r16, r20
2dd2f3ee:	90 91 00 00 	lds	r25, 0x0000
2dd2f3f2:	98 23       	and	r25, r24
2dd2f3f4:	01 f4       	brne	.+0      	; 0x2dd2f3f6 <cu_IsKingCastling+0x16>
2dd2f3f6:	80 e0       	ldi	r24, 0x00	; 0
2dd2f3f8:	00 c0       	rjmp	.+0      	; 0x2dd2f3fa <cu_IsKingCastling+0x1a>
2dd2f3fa:	a0 91 00 00 	lds	r26, 0x0000
2dd2f3fe:	b0 91 00 00 	lds	r27, 0x0000
2dd2f402:	1c 91       	ld	r17, X
2dd2f404:	c1 e0       	ldi	r28, 0x01	; 1
2dd2f406:	12 96       	adiw	r26, 0x02	; 2
2dd2f408:	8c 91       	ld	r24, X
2dd2f40a:	c8 1b       	sub	r28, r24
2dd2f40c:	81 2f       	mov	r24, r17
2dd2f40e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2dd2f412:	ec 2f       	mov	r30, r28
2dd2f414:	f0 e0       	ldi	r31, 0x00	; 0
2dd2f416:	e0 50       	subi	r30, 0x00	; 0
2dd2f418:	f0 40       	sbci	r31, 0x00	; 0
2dd2f41a:	80 81       	ld	r24, Z
2dd2f41c:	81 11       	cpse	r24, r1
2dd2f41e:	00 c0       	rjmp	.+0      	; 0x2dd2f420 <cu_IsKingCastling+0x40>
2dd2f420:	ef 01       	movw	r28, r30
2dd2f422:	1f 0d       	add	r17, r15
2dd2f424:	81 2f       	mov	r24, r17
2dd2f426:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2dd2f42a:	8f 70       	andi	r24, 0x0F	; 15
2dd2f42c:	01 f4       	brne	.+0      	; 0x2dd2f42e <cu_IsKingCastling+0x4e>
2dd2f42e:	81 2f       	mov	r24, r17
2dd2f430:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2dd2f434:	88 81       	ld	r24, Y
2dd2f436:	81 11       	cpse	r24, r1
2dd2f438:	00 c0       	rjmp	.+0      	; 0x2dd2f43a <cu_IsKingCastling+0x5a>
2dd2f43a:	01 50       	subi	r16, 0x01	; 1
2dd2f43c:	01 f4       	brne	.+0      	; 0x2dd2f43e <cu_IsKingCastling+0x5e>
2dd2f43e:	81 e0       	ldi	r24, 0x01	; 1
2dd2f440:	df 91       	pop	r29
2dd2f442:	cf 91       	pop	r28
2dd2f444:	1f 91       	pop	r17
2dd2f446:	0f 91       	pop	r16
2dd2f448:	ff 90       	pop	r15
2dd2f44a:	08 95       	ret

Disassembly of section .text.ce_GetPositionAttackWeight:

5ba5e82c <ce_GetPositionAttackWeight>:
5ba5e82c:	cf 93       	push	r28
5ba5e82e:	df 93       	push	r29
5ba5e830:	1f 92       	push	r1
5ba5e832:	cd b7       	in	r28, 0x3d	; 61
5ba5e834:	de b7       	in	r29, 0x3e	; 62
5ba5e836:	69 83       	std	Y+1, r22	; 0x01
5ba5e838:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
5ba5e83c:	69 81       	ldd	r22, Y+1	; 0x01
5ba5e83e:	e6 2f       	mov	r30, r22
5ba5e840:	f0 e0       	ldi	r31, 0x00	; 0
5ba5e842:	e0 50       	subi	r30, 0x00	; 0
5ba5e844:	f0 40       	sbci	r31, 0x00	; 0
5ba5e846:	80 81       	ld	r24, Z
5ba5e848:	0f 90       	pop	r0
5ba5e84a:	df 91       	pop	r29
5ba5e84c:	cf 91       	pop	r28
5ba5e84e:	08 95       	ret

Disassembly of section .text.ce_GetPositionAttackCount:

b74bd07c <ce_GetPositionAttackCount>:
b74bd07c:	cf 93       	push	r28
b74bd07e:	df 93       	push	r29
b74bd080:	1f 92       	push	r1
b74bd082:	cd b7       	in	r28, 0x3d	; 61
b74bd084:	de b7       	in	r29, 0x3e	; 62
b74bd086:	69 83       	std	Y+1, r22	; 0x01
b74bd088:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
b74bd08c:	69 81       	ldd	r22, Y+1	; 0x01
b74bd08e:	e6 2f       	mov	r30, r22
b74bd090:	f0 e0       	ldi	r31, 0x00	; 0
b74bd092:	e0 50       	subi	r30, 0x00	; 0
b74bd094:	f0 40       	sbci	r31, 0x00	; 0
b74bd096:	80 81       	ld	r24, Z
b74bd098:	0f 90       	pop	r0
b74bd09a:	df 91       	pop	r29
b74bd09c:	cf 91       	pop	r28
b74bd09e:	08 95       	ret

Disassembly of section .text.ce_LoopPieces:

6e97a11c <ce_LoopPieces>:
6e97a11c:	cf 93       	push	r28
6e97a11e:	df 93       	push	r29
6e97a120:	c0 91 00 00 	lds	r28, 0x0000
6e97a124:	d0 91 00 00 	lds	r29, 0x0000
6e97a128:	18 82       	st	Y, r1
6e97a12a:	88 81       	ld	r24, Y
6e97a12c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a130:	89 83       	std	Y+1, r24	; 0x01
6e97a132:	88 23       	and	r24, r24
6e97a134:	01 f0       	breq	.+0      	; 0x6e97a136 <ce_GetPositionAttackWeight+0x12f1b90a>
6e97a136:	84 fb       	bst	r24, 4
6e97a138:	99 27       	eor	r25, r25
6e97a13a:	90 f9       	bld	r25, 0
6e97a13c:	2a 81       	ldd	r18, Y+2	; 0x02
6e97a13e:	29 13       	cpse	r18, r25
6e97a140:	00 c0       	rjmp	.+0      	; 0x6e97a142 <ce_GetPositionAttackWeight+0x12f1b916>
6e97a142:	8f 70       	andi	r24, 0x0F	; 15
6e97a144:	83 30       	cpi	r24, 0x03	; 3
6e97a146:	01 f0       	breq	.+0      	; 0x6e97a148 <ce_GetPositionAttackWeight+0x12f1b91c>
6e97a148:	00 f4       	brcc	.+0      	; 0x6e97a14a <ce_GetPositionAttackWeight+0x12f1b91e>
6e97a14a:	81 30       	cpi	r24, 0x01	; 1
6e97a14c:	01 f0       	breq	.+0      	; 0x6e97a14e <ce_GetPositionAttackWeight+0x12f1b922>
6e97a14e:	82 30       	cpi	r24, 0x02	; 2
6e97a150:	01 f4       	brne	.+0      	; 0x6e97a152 <ce_GetPositionAttackWeight+0x12f1b926>
6e97a152:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a156:	00 c0       	rjmp	.+0      	; 0x6e97a158 <ce_GetPositionAttackWeight+0x12f1b92c>
6e97a158:	85 30       	cpi	r24, 0x05	; 5
6e97a15a:	01 f0       	breq	.+0      	; 0x6e97a15c <ce_GetPositionAttackWeight+0x12f1b930>
6e97a15c:	00 f0       	brcs	.+0      	; 0x6e97a15e <ce_GetPositionAttackWeight+0x12f1b932>
6e97a15e:	86 30       	cpi	r24, 0x06	; 6
6e97a160:	01 f4       	brne	.+0      	; 0x6e97a162 <ce_GetPositionAttackWeight+0x12f1b936>
6e97a162:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a166:	00 c0       	rjmp	.+0      	; 0x6e97a168 <ce_GetPositionAttackWeight+0x12f1b93c>
6e97a168:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a16c:	00 c0       	rjmp	.+0      	; 0x6e97a16e <ce_GetPositionAttackWeight+0x12f1b942>
6e97a16e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a172:	00 c0       	rjmp	.+0      	; 0x6e97a174 <ce_GetPositionAttackWeight+0x12f1b948>
6e97a174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a178:	00 c0       	rjmp	.+0      	; 0x6e97a17a <ce_GetPositionAttackWeight+0x12f1b94e>
6e97a17a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a17e:	88 81       	ld	r24, Y
6e97a180:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6e97a184:	88 83       	st	Y, r24
6e97a186:	81 11       	cpse	r24, r1
6e97a188:	00 c0       	rjmp	.+0      	; 0x6e97a18a <ce_GetPositionAttackWeight+0x12f1b95e>
6e97a18a:	df 91       	pop	r29
6e97a18c:	cf 91       	pop	r28
6e97a18e:	08 95       	ret

Disassembly of section .text.ce_LoopRecur:

dd2f42ac <ce_LoopRecur>:
dd2f42ac:	1f 93       	push	r17
dd2f42ae:	cf 93       	push	r28
dd2f42b0:	df 93       	push	r29
dd2f42b2:	18 2f       	mov	r17, r24
dd2f42b4:	c0 91 00 00 	lds	r28, 0x0000
dd2f42b8:	d0 91 00 00 	lds	r29, 0x0000
dd2f42bc:	6a 81       	ldd	r22, Y+2	; 0x02
dd2f42be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42c2:	81 11       	cpse	r24, r1
dd2f42c4:	00 c0       	rjmp	.+0      	; 0xdd2f42c6 <ce_GetPositionAttackCount+0x25e3724a>
dd2f42c6:	61 2f       	mov	r22, r17
dd2f42c8:	88 81       	ld	r24, Y
dd2f42ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42ce:	e0 91 00 00 	lds	r30, 0x0000
dd2f42d2:	f0 91 00 00 	lds	r31, 0x0000
dd2f42d6:	82 81       	ldd	r24, Z+2	; 0x02
dd2f42d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42dc:	81 11       	cpse	r24, r1
dd2f42de:	00 c0       	rjmp	.+0      	; 0xdd2f42e0 <ce_GetPositionAttackCount+0x25e37264>
dd2f42e0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42e4:	ec 01       	movw	r28, r24
dd2f42e6:	00 c0       	rjmp	.+0      	; 0xdd2f42e8 <ce_GetPositionAttackCount+0x25e3726c>
dd2f42e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f42f0:	e0 91 00 00 	lds	r30, 0x0000
dd2f42f4:	f0 91 00 00 	lds	r31, 0x0000
dd2f42f8:	c5 81       	ldd	r28, Z+5	; 0x05
dd2f42fa:	d6 81       	ldd	r29, Z+6	; 0x06
dd2f42fc:	d1 95       	neg	r29
dd2f42fe:	c1 95       	neg	r28
dd2f4300:	d1 09       	sbc	r29, r1
dd2f4302:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f4306:	61 2f       	mov	r22, r17
dd2f4308:	ce 01       	movw	r24, r28
dd2f430a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f430e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f4312:	80 91 00 00 	lds	r24, 0x0000
dd2f4316:	88 23       	and	r24, r24
dd2f4318:	01 f0       	breq	.+0      	; 0xdd2f431a <ce_GetPositionAttackCount+0x25e3729e>
dd2f431a:	e0 91 00 00 	lds	r30, 0x0000
dd2f431e:	f0 91 00 00 	lds	r31, 0x0000
dd2f4322:	81 30       	cpi	r24, 0x01	; 1
dd2f4324:	01 f4       	brne	.+0      	; 0xdd2f4326 <ce_GetPositionAttackCount+0x25e372aa>
dd2f4326:	61 81       	ldd	r22, Z+1	; 0x01
dd2f4328:	60 62       	ori	r22, 0x20	; 32
dd2f432a:	80 81       	ld	r24, Z
dd2f432c:	00 c0       	rjmp	.+0      	; 0xdd2f432e <ce_GetPositionAttackCount+0x25e372b2>
dd2f432e:	82 30       	cpi	r24, 0x02	; 2
dd2f4330:	01 f4       	brne	.+0      	; 0xdd2f4332 <ce_GetPositionAttackCount+0x25e372b6>
dd2f4332:	90 81       	ld	r25, Z
dd2f4334:	80 91 00 00 	lds	r24, 0x0000
dd2f4338:	98 13       	cpse	r25, r24
dd2f433a:	00 c0       	rjmp	.+0      	; 0xdd2f433c <ce_GetPositionAttackCount+0x25e372c0>
dd2f433c:	81 2f       	mov	r24, r17
dd2f433e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f4342:	68 2f       	mov	r22, r24
dd2f4344:	60 62       	ori	r22, 0x20	; 32
dd2f4346:	81 2f       	mov	r24, r17
dd2f4348:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dd2f434c:	00 c0       	rjmp	.+0      	; 0xdd2f434e <ce_GetPositionAttackCount+0x25e372d2>
dd2f434e:	80 e0       	ldi	r24, 0x00	; 0
dd2f4350:	00 c0       	rjmp	.+0      	; 0xdd2f4352 <ce_GetPositionAttackCount+0x25e372d6>
dd2f4352:	81 e0       	ldi	r24, 0x01	; 1
dd2f4354:	df 91       	pop	r29
dd2f4356:	cf 91       	pop	r28
dd2f4358:	1f 91       	pop	r17
dd2f435a:	08 95       	ret

Disassembly of section .text.ce_LoopDirsSingleMultiStep:

ba5e8608 <ce_LoopDirsSingleMultiStep>:
ba5e8608:	ff 92       	push	r15
ba5e860a:	0f 93       	push	r16
ba5e860c:	1f 93       	push	r17
ba5e860e:	cf 93       	push	r28
ba5e8610:	df 93       	push	r29
ba5e8612:	ec 01       	movw	r28, r24
ba5e8614:	f6 2e       	mov	r15, r22
ba5e8616:	fe 01       	movw	r30, r28
ba5e8618:	84 91       	lpm	r24, Z
ba5e861a:	88 23       	and	r24, r24
ba5e861c:	01 f0       	breq	.+0      	; 0xba5e861e <ce_GetPositionAttackCount+0x312b5a2>
ba5e861e:	e0 91 00 00 	lds	r30, 0x0000
ba5e8622:	f0 91 00 00 	lds	r31, 0x0000
ba5e8626:	10 81       	ld	r17, Z
ba5e8628:	08 2f       	mov	r16, r24
ba5e862a:	10 0f       	add	r17, r16
ba5e862c:	81 2f       	mov	r24, r17
ba5e862e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ba5e8632:	88 23       	and	r24, r24
ba5e8634:	01 f0       	breq	.+0      	; 0xba5e8636 <ce_GetPositionAttackCount+0x312b5ba>
ba5e8636:	81 2f       	mov	r24, r17
ba5e8638:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
ba5e863c:	8f 70       	andi	r24, 0x0F	; 15
ba5e863e:	01 f4       	brne	.+0      	; 0xba5e8640 <ce_GetPositionAttackCount+0x312b5c4>
ba5e8640:	f1 10       	cpse	r15, r1
ba5e8642:	00 c0       	rjmp	.+0      	; 0xba5e8644 <ce_GetPositionAttackCount+0x312b5c8>
ba5e8644:	21 96       	adiw	r28, 0x01	; 1
ba5e8646:	00 c0       	rjmp	.+0      	; 0xba5e8648 <ce_GetPositionAttackCount+0x312b5cc>
ba5e8648:	df 91       	pop	r29
ba5e864a:	cf 91       	pop	r28
ba5e864c:	1f 91       	pop	r17
ba5e864e:	0f 91       	pop	r16
ba5e8650:	ff 90       	pop	r15
ba5e8652:	08 95       	ret

Disassembly of section .text.ce_LoopRook:

74bd0c5c <ce_LoopRook>:
74bd0c5c:	61 e0       	ldi	r22, 0x01	; 1
74bd0c5e:	80 e0       	ldi	r24, 0x00	; 0
74bd0c60:	90 e0       	ldi	r25, 0x00	; 0
74bd0c62:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ce_LoopBishop:

e97a18c2 <ce_LoopBishop>:
e97a18c2:	61 e0       	ldi	r22, 0x01	; 1
e97a18c4:	80 e0       	ldi	r24, 0x00	; 0
e97a18c6:	90 e0       	ldi	r25, 0x00	; 0
e97a18c8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ce_LoopQueen:

d2f4318e <ce_LoopQueen>:
d2f4318e:	61 e0       	ldi	r22, 0x01	; 1
d2f43190:	80 e0       	ldi	r24, 0x00	; 0
d2f43192:	90 e0       	ldi	r25, 0x00	; 0
d2f43194:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ce_LoopKnight:

a5e86326 <ce_LoopKnight>:
a5e86326:	60 e0       	ldi	r22, 0x00	; 0
a5e86328:	80 e0       	ldi	r24, 0x00	; 0
a5e8632a:	90 e0       	ldi	r25, 0x00	; 0
a5e8632c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ce_LoopKing:

4bd0c656 <ce_LoopKing>:
4bd0c656:	e0 91 00 00 	lds	r30, 0x0000
4bd0c65a:	f0 91 00 00 	lds	r31, 0x0000
4bd0c65e:	82 81       	ldd	r24, Z+2	; 0x02
4bd0c660:	43 e0       	ldi	r20, 0x03	; 3
4bd0c662:	6f ef       	ldi	r22, 0xFF	; 255
4bd0c664:	81 11       	cpse	r24, r1
4bd0c666:	00 c0       	rjmp	.+0      	; 0x4bd0c668 <cu_IsKingCastling+0x1dfdd288>
4bd0c668:	81 e0       	ldi	r24, 0x01	; 1
4bd0c66a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c66e:	88 23       	and	r24, r24
4bd0c670:	01 f0       	breq	.+0      	; 0x4bd0c672 <cu_IsKingCastling+0x1dfdd292>
4bd0c672:	e0 91 00 00 	lds	r30, 0x0000
4bd0c676:	f0 91 00 00 	lds	r31, 0x0000
4bd0c67a:	80 81       	ld	r24, Z
4bd0c67c:	82 50       	subi	r24, 0x02	; 2
4bd0c67e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c682:	42 e0       	ldi	r20, 0x02	; 2
4bd0c684:	61 e0       	ldi	r22, 0x01	; 1
4bd0c686:	82 e0       	ldi	r24, 0x02	; 2
4bd0c688:	00 c0       	rjmp	.+0      	; 0x4bd0c68a <cu_IsKingCastling+0x1dfdd2aa>
4bd0c68a:	84 e0       	ldi	r24, 0x04	; 4
4bd0c68c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c690:	88 23       	and	r24, r24
4bd0c692:	01 f0       	breq	.+0      	; 0x4bd0c694 <cu_IsKingCastling+0x1dfdd2b4>
4bd0c694:	e0 91 00 00 	lds	r30, 0x0000
4bd0c698:	f0 91 00 00 	lds	r31, 0x0000
4bd0c69c:	80 81       	ld	r24, Z
4bd0c69e:	82 50       	subi	r24, 0x02	; 2
4bd0c6a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c6a4:	42 e0       	ldi	r20, 0x02	; 2
4bd0c6a6:	61 e0       	ldi	r22, 0x01	; 1
4bd0c6a8:	88 e0       	ldi	r24, 0x08	; 8
4bd0c6aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c6ae:	88 23       	and	r24, r24
4bd0c6b0:	01 f0       	breq	.+0      	; 0x4bd0c6b2 <cu_IsKingCastling+0x1dfdd2d2>
4bd0c6b2:	e0 91 00 00 	lds	r30, 0x0000
4bd0c6b6:	f0 91 00 00 	lds	r31, 0x0000
4bd0c6ba:	80 81       	ld	r24, Z
4bd0c6bc:	8e 5f       	subi	r24, 0xFE	; 254
4bd0c6be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
4bd0c6c2:	60 e0       	ldi	r22, 0x00	; 0
4bd0c6c4:	80 e0       	ldi	r24, 0x00	; 0
4bd0c6c6:	90 e0       	ldi	r25, 0x00	; 0
4bd0c6c8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.ce_LoopPawnSideCapture:

97a18d22 <ce_LoopPawnSideCapture>:
97a18d22:	cf 93       	push	r28
97a18d24:	c8 2f       	mov	r28, r24
97a18d26:	88 78       	andi	r24, 0x88	; 136
97a18d28:	01 f4       	brne	.+0      	; 0x97a18d2a <ce_GetPositionAttackWeight+0x3bfba4fe>
97a18d2a:	8c 2f       	mov	r24, r28
97a18d2c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
97a18d30:	8f 70       	andi	r24, 0x0F	; 15
97a18d32:	01 f0       	breq	.+0      	; 0x97a18d34 <ce_GetPositionAttackWeight+0x3bfba508>
97a18d34:	8c 2f       	mov	r24, r28
97a18d36:	cf 91       	pop	r28
97a18d38:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
97a18d3c:	e0 91 00 00 	lds	r30, 0x0000
97a18d40:	f0 91 00 00 	lds	r31, 0x0000
97a18d44:	82 81       	ldd	r24, Z+2	; 0x02
97a18d46:	4c 2f       	mov	r20, r28
97a18d48:	50 e0       	ldi	r21, 0x00	; 0
97a18d4a:	81 11       	cpse	r24, r1
97a18d4c:	00 c0       	rjmp	.+0      	; 0x97a18d4e <ce_GetPositionAttackWeight+0x3bfba522>
97a18d4e:	20 91 00 00 	lds	r18, 0x0000
97a18d52:	30 e0       	ldi	r19, 0x00	; 0
97a18d54:	20 5f       	subi	r18, 0xF0	; 240
97a18d56:	3f 4f       	sbci	r19, 0xFF	; 255
97a18d58:	00 c0       	rjmp	.+0      	; 0x97a18d5a <ce_GetPositionAttackWeight+0x3bfba52e>
97a18d5a:	20 91 00 00 	lds	r18, 0x0000
97a18d5e:	30 e0       	ldi	r19, 0x00	; 0
97a18d60:	40 5f       	subi	r20, 0xF0	; 240
97a18d62:	5f 4f       	sbci	r21, 0xFF	; 255
97a18d64:	24 17       	cp	r18, r20
97a18d66:	35 07       	cpc	r19, r21
97a18d68:	01 f0       	breq	.+0      	; 0x97a18d6a <ce_GetPositionAttackWeight+0x3bfba53e>
97a18d6a:	cf 91       	pop	r28
97a18d6c:	08 95       	ret

Disassembly of section .text.ce_LoopPawn:

2f431a90 <ce_LoopPawn>:
2f431a90:	0f 93       	push	r16
2f431a92:	1f 93       	push	r17
2f431a94:	cf 93       	push	r28
2f431a96:	df 93       	push	r29
2f431a98:	e0 91 00 00 	lds	r30, 0x0000
2f431a9c:	f0 91 00 00 	lds	r31, 0x0000
2f431aa0:	c0 81       	ld	r28, Z
2f431aa2:	12 81       	ldd	r17, Z+2	; 0x02
2f431aa4:	11 11       	cpse	r17, r1
2f431aa6:	00 c0       	rjmp	.+0      	; 0x2f431aa8 <cu_IsKingCastling+0x17026c8>
2f431aa8:	d0 e1       	ldi	r29, 0x10	; 16
2f431aaa:	00 c0       	rjmp	.+0      	; 0x2f431aac <cu_IsKingCastling+0x17026cc>
2f431aac:	d0 ef       	ldi	r29, 0xF0	; 240
2f431aae:	dc 0f       	add	r29, r28
2f431ab0:	8d 2f       	mov	r24, r29
2f431ab2:	88 78       	andi	r24, 0x88	; 136
2f431ab4:	01 f4       	brne	.+0      	; 0x2f431ab6 <cu_IsKingCastling+0x17026d6>
2f431ab6:	8d 2f       	mov	r24, r29
2f431ab8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2f431abc:	8f 70       	andi	r24, 0x0F	; 15
2f431abe:	01 f4       	brne	.+0      	; 0x2f431ac0 <cu_IsKingCastling+0x17026e0>
2f431ac0:	0c 2f       	mov	r16, r28
2f431ac2:	02 95       	swap	r16
2f431ac4:	0f 70       	andi	r16, 0x0F	; 15
2f431ac6:	8d 2f       	mov	r24, r29
2f431ac8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2f431acc:	11 11       	cpse	r17, r1
2f431ace:	00 c0       	rjmp	.+0      	; 0x2f431ad0 <cu_IsKingCastling+0x17026f0>
2f431ad0:	01 30       	cpi	r16, 0x01	; 1
2f431ad2:	01 f0       	breq	.+0      	; 0x2f431ad4 <cu_IsKingCastling+0x17026f4>
2f431ad4:	8f e0       	ldi	r24, 0x0F	; 15
2f431ad6:	00 c0       	rjmp	.+0      	; 0x2f431ad8 <cu_IsKingCastling+0x17026f8>
2f431ad8:	11 30       	cpi	r17, 0x01	; 1
2f431ada:	01 f4       	brne	.+0      	; 0x2f431adc <cu_IsKingCastling+0x17026fc>
2f431adc:	06 30       	cpi	r16, 0x06	; 6
2f431ade:	01 f4       	brne	.+0      	; 0x2f431ae0 <cu_IsKingCastling+0x1702700>
2f431ae0:	d0 51       	subi	r29, 0x10	; 16
2f431ae2:	00 c0       	rjmp	.+0      	; 0x2f431ae4 <cu_IsKingCastling+0x1702704>
2f431ae4:	d0 5f       	subi	r29, 0xF0	; 240
2f431ae6:	8d 2f       	mov	r24, r29
2f431ae8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2f431aec:	8f 70       	andi	r24, 0x0F	; 15
2f431aee:	01 f4       	brne	.+0      	; 0x2f431af0 <cu_IsKingCastling+0x1702710>
2f431af0:	8d 2f       	mov	r24, r29
2f431af2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2f431af6:	11 23       	and	r17, r17
2f431af8:	01 f0       	breq	.+0      	; 0x2f431afa <cu_IsKingCastling+0x170271a>
2f431afa:	81 ef       	ldi	r24, 0xF1	; 241
2f431afc:	8c 0f       	add	r24, r28
2f431afe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2f431b02:	11 11       	cpse	r17, r1
2f431b04:	00 c0       	rjmp	.+0      	; 0x2f431b06 <cu_IsKingCastling+0x1702726>
2f431b06:	81 e1       	ldi	r24, 0x11	; 17
2f431b08:	00 c0       	rjmp	.+0      	; 0x2f431b0a <cu_IsKingCastling+0x170272a>
2f431b0a:	8f ee       	ldi	r24, 0xEF	; 239
2f431b0c:	8c 0f       	add	r24, r28
2f431b0e:	df 91       	pop	r29
2f431b10:	cf 91       	pop	r28
2f431b12:	1f 91       	pop	r17
2f431b14:	0f 91       	pop	r16
2f431b16:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.chess_ClearMarks:

5e8635aa <chess_ClearMarks>:
5e8635aa:	e0 e0       	ldi	r30, 0x00	; 0
5e8635ac:	f0 e0       	ldi	r31, 0x00	; 0
5e8635ae:	80 81       	ld	r24, Z
5e8635b0:	8f 7d       	andi	r24, 0xDF	; 223
5e8635b2:	81 93       	st	Z+, r24
5e8635b4:	80 e0       	ldi	r24, 0x00	; 0
5e8635b6:	e0 30       	cpi	r30, 0x00	; 0
5e8635b8:	f8 07       	cpc	r31, r24
5e8635ba:	01 f4       	brne	.+0      	; 0x5e8635bc <ce_GetPositionAttackWeight+0x2e04d90>
5e8635bc:	08 95       	ret

Disassembly of section .text.chess_MarkMovable:

bd0c6b68 <chess_MarkMovable>:
bd0c6b68:	80 e0       	ldi	r24, 0x00	; 0
bd0c6b6a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bd0c6b6e:	81 e0       	ldi	r24, 0x01	; 1
bd0c6b70:	80 93 00 00 	sts	0x0000, r24
bd0c6b74:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.chess_MarkTargetMoves:

7a18d6e0 <chess_MarkTargetMoves>:
7a18d6e0:	1f 93       	push	r17
7a18d6e2:	cf 93       	push	r28
7a18d6e4:	df 93       	push	r29
7a18d6e6:	18 2f       	mov	r17, r24
7a18d6e8:	80 e0       	ldi	r24, 0x00	; 0
7a18d6ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7a18d6ee:	c0 91 00 00 	lds	r28, 0x0000
7a18d6f2:	d0 91 00 00 	lds	r29, 0x0000
7a18d6f6:	81 2f       	mov	r24, r17
7a18d6f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7a18d6fc:	82 95       	swap	r24
7a18d6fe:	81 70       	andi	r24, 0x01	; 1
7a18d700:	8a 83       	std	Y+2, r24	; 0x02
7a18d702:	10 93 00 00 	sts	0x0000, r17
7a18d706:	82 e0       	ldi	r24, 0x02	; 2
7a18d708:	80 93 00 00 	sts	0x0000, r24
7a18d70c:	df 91       	pop	r29
7a18d70e:	cf 91       	pop	r28
7a18d710:	1f 91       	pop	r17
7a18d712:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.chess_GetNextMarked:

f431adf6 <chess_GetNextMarked>:
f431adf6:	0f 93       	push	r16
f431adf8:	1f 93       	push	r17
f431adfa:	cf 93       	push	r28
f431adfc:	df 93       	push	r29
f431adfe:	18 2f       	mov	r17, r24
f431ae00:	06 2f       	mov	r16, r22
f431ae02:	c8 2f       	mov	r28, r24
f431ae04:	d0 e4       	ldi	r29, 0x40	; 64
f431ae06:	8c 2f       	mov	r24, r28
f431ae08:	00 23       	and	r16, r16
f431ae0a:	01 f0       	breq	.+0      	; 0xf431ae0c <ce_GetPositionAttackCount+0x3ce5dd90>
f431ae0c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f431ae10:	00 c0       	rjmp	.+0      	; 0xf431ae12 <ce_GetPositionAttackCount+0x3ce5dd96>
f431ae12:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f431ae16:	c8 2f       	mov	r28, r24
f431ae18:	1f 3f       	cpi	r17, 0xFF	; 255
f431ae1a:	01 f0       	breq	.+0      	; 0xf431ae1c <ce_GetPositionAttackCount+0x3ce5dda0>
f431ae1c:	88 23       	and	r24, r24
f431ae1e:	01 f0       	breq	.+0      	; 0xf431ae20 <ce_GetPositionAttackCount+0x3ce5dda4>
f431ae20:	8c 2f       	mov	r24, r28
f431ae22:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f431ae26:	85 fd       	sbrc	r24, 5
f431ae28:	00 c0       	rjmp	.+0      	; 0xf431ae2a <ce_GetPositionAttackCount+0x3ce5ddae>
f431ae2a:	d1 50       	subi	r29, 0x01	; 1
f431ae2c:	01 f4       	brne	.+0      	; 0xf431ae2e <ce_GetPositionAttackCount+0x3ce5ddb2>
f431ae2e:	00 c0       	rjmp	.+0      	; 0xf431ae30 <ce_GetPositionAttackCount+0x3ce5ddb4>
f431ae30:	8c 2f       	mov	r24, r28
f431ae32:	00 c0       	rjmp	.+0      	; 0xf431ae34 <ce_GetPositionAttackCount+0x3ce5ddb8>
f431ae34:	8f ef       	ldi	r24, 0xFF	; 255
f431ae36:	df 91       	pop	r29
f431ae38:	cf 91       	pop	r28
f431ae3a:	1f 91       	pop	r17
f431ae3c:	0f 91       	pop	r16
f431ae3e:	08 95       	ret

Disassembly of section .text.chess_ManualMove:

e8635c36 <chess_ManualMove>:
e8635c36:	ef 92       	push	r14
e8635c38:	ff 92       	push	r15
e8635c3a:	0f 93       	push	r16
e8635c3c:	1f 93       	push	r17
e8635c3e:	cf 93       	push	r28
e8635c40:	df 93       	push	r29
e8635c42:	1f 92       	push	r1
e8635c44:	cd b7       	in	r28, 0x3d	; 61
e8635c46:	de b7       	in	r29, 0x3e	; 62
e8635c48:	18 2f       	mov	r17, r24
e8635c4a:	86 2f       	mov	r24, r22
e8635c4c:	69 83       	std	Y+1, r22	; 0x01
e8635c4e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635c52:	98 2f       	mov	r25, r24
e8635c54:	8f 70       	andi	r24, 0x0F	; 15
e8635c56:	69 81       	ldd	r22, Y+1	; 0x01
e8635c58:	86 30       	cpi	r24, 0x06	; 6
e8635c5a:	01 f4       	brne	.+0      	; 0xe8635c5c <ce_GetPositionAttackCount+0x31178be0>
e8635c5c:	81 e0       	ldi	r24, 0x01	; 1
e8635c5e:	80 93 00 00 	sts	0x0000, r24
e8635c62:	92 95       	swap	r25
e8635c64:	91 70       	andi	r25, 0x01	; 1
e8635c66:	90 93 00 00 	sts	0x0000, r25
e8635c6a:	69 83       	std	Y+1, r22	; 0x01
e8635c6c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635c70:	69 81       	ldd	r22, Y+1	; 0x01
e8635c72:	81 2f       	mov	r24, r17
e8635c74:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635c78:	80 91 00 00 	lds	r24, 0x0000
e8635c7c:	80 fb       	bst	r24, 0
e8635c7e:	ee 24       	eor	r14, r14
e8635c80:	e0 f8       	bld	r14, 0
e8635c82:	f1 2c       	mov	r15, r1
e8635c84:	97 01       	movw	r18, r14
e8635c86:	20 50       	subi	r18, 0x00	; 0
e8635c88:	30 40       	sbci	r19, 0x00	; 0
e8635c8a:	f9 01       	movw	r30, r18
e8635c8c:	ee 5b       	subi	r30, 0xBE	; 190
e8635c8e:	ff 4f       	sbci	r31, 0xFF	; 255
e8635c90:	9f ef       	ldi	r25, 0xFF	; 255
e8635c92:	90 83       	st	Z, r25
e8635c94:	8f 5f       	subi	r24, 0xFF	; 255
e8635c96:	80 93 00 00 	sts	0x0000, r24
e8635c9a:	81 e0       	ldi	r24, 0x01	; 1
e8635c9c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635ca0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635ca4:	e0 91 00 00 	lds	r30, 0x0000
e8635ca8:	f0 91 00 00 	lds	r31, 0x0000
e8635cac:	83 81       	ldd	r24, Z+3	; 0x03
e8635cae:	8f 3f       	cpi	r24, 0xFF	; 255
e8635cb0:	01 f4       	brne	.+0      	; 0xe8635cb2 <ce_GetPositionAttackCount+0x31178c36>
e8635cb2:	00 91 00 00 	lds	r16, 0x0000
e8635cb6:	01 70       	andi	r16, 0x01	; 1
e8635cb8:	10 e0       	ldi	r17, 0x00	; 0
e8635cba:	81 2f       	mov	r24, r17
e8635cbc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635cc0:	98 2f       	mov	r25, r24
e8635cc2:	9f 70       	andi	r25, 0x0F	; 15
e8635cc4:	96 30       	cpi	r25, 0x06	; 6
e8635cc6:	01 f4       	brne	.+0      	; 0xe8635cc8 <ce_GetPositionAttackCount+0x31178c4c>
e8635cc8:	82 95       	swap	r24
e8635cca:	81 70       	andi	r24, 0x01	; 1
e8635ccc:	80 13       	cpse	r24, r16
e8635cce:	00 c0       	rjmp	.+0      	; 0xe8635cd0 <ce_GetPositionAttackCount+0x31178c54>
e8635cd0:	81 2f       	mov	r24, r17
e8635cd2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635cd6:	21 e0       	ldi	r18, 0x01	; 1
e8635cd8:	80 2f       	mov	r24, r16
e8635cda:	82 27       	eor	r24, r18
e8635cdc:	90 e0       	ldi	r25, 0x00	; 0
e8635cde:	80 50       	subi	r24, 0x00	; 0
e8635ce0:	90 40       	sbci	r25, 0x00	; 0
e8635ce2:	fc 01       	movw	r30, r24
e8635ce4:	e5 5b       	subi	r30, 0xB5	; 181
e8635ce6:	ff 4f       	sbci	r31, 0xFF	; 255
e8635ce8:	80 81       	ld	r24, Z
e8635cea:	20 93 00 00 	sts	0x0000, r18
e8635cee:	88 23       	and	r24, r24
e8635cf0:	01 f0       	breq	.+0      	; 0xe8635cf2 <ce_GetPositionAttackCount+0x31178c76>
e8635cf2:	00 93 00 00 	sts	0x0000, r16
e8635cf6:	00 c0       	rjmp	.+0      	; 0xe8635cf8 <ce_GetPositionAttackCount+0x31178c7c>
e8635cf8:	82 e0       	ldi	r24, 0x02	; 2
e8635cfa:	80 93 00 00 	sts	0x0000, r24
e8635cfe:	00 c0       	rjmp	.+0      	; 0xe8635d00 <ce_GetPositionAttackCount+0x31178c84>
e8635d00:	81 2f       	mov	r24, r17
e8635d02:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e8635d06:	18 2f       	mov	r17, r24
e8635d08:	81 11       	cpse	r24, r1
e8635d0a:	00 c0       	rjmp	.+0      	; 0xe8635d0c <ce_GetPositionAttackCount+0x31178c90>
e8635d0c:	0f 90       	pop	r0
e8635d0e:	df 91       	pop	r29
e8635d10:	cf 91       	pop	r28
e8635d12:	1f 91       	pop	r17
e8635d14:	0f 91       	pop	r16
e8635d16:	ff 90       	pop	r15
e8635d18:	ef 90       	pop	r14
e8635d1a:	08 95       	ret

Disassembly of section .text.chess_ComputerMove:

d0c6b952 <chess_ComputerMove>:
d0c6b952:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
d0c6b956:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
d0c6b95a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
d0c6b95e:	e0 91 00 00 	lds	r30, 0x0000
d0c6b962:	f0 91 00 00 	lds	r31, 0x0000
d0c6b966:	64 81       	ldd	r22, Z+4	; 0x04
d0c6b968:	83 81       	ldd	r24, Z+3	; 0x03
d0c6b96a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.mnu_DrawHome:

a18d72c0 <mnu_DrawHome>:
a18d72c0:	0f 93       	push	r16
a18d72c2:	1f 93       	push	r17
a18d72c4:	cf 93       	push	r28
a18d72c6:	df 93       	push	r29
a18d72c8:	18 2f       	mov	r17, r24
a18d72ca:	e0 91 00 00 	lds	r30, 0x0000
a18d72ce:	f0 91 00 00 	lds	r31, 0x0000
a18d72d2:	c0 81       	ld	r28, Z
a18d72d4:	d1 81       	ldd	r29, Z+1	; 0x01
a18d72d6:	60 e0       	ldi	r22, 0x00	; 0
a18d72d8:	70 e0       	ldi	r23, 0x00	; 0
a18d72da:	cf 01       	movw	r24, r30
a18d72dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a18d72e0:	80 91 00 00 	lds	r24, 0x0000
a18d72e4:	90 91 00 00 	lds	r25, 0x0000
a18d72e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a18d72ec:	4e ef       	ldi	r20, 0xFE	; 254
a18d72ee:	4d 0f       	add	r20, r29
a18d72f0:	6d ed       	ldi	r22, 0xDD	; 221
a18d72f2:	6c 0f       	add	r22, r28
a18d72f4:	20 e0       	ldi	r18, 0x00	; 0
a18d72f6:	30 e0       	ldi	r19, 0x00	; 0
a18d72f8:	80 91 00 00 	lds	r24, 0x0000
a18d72fc:	90 91 00 00 	lds	r25, 0x0000
a18d7300:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a18d7304:	11 23       	and	r17, r17
a18d7306:	01 f0       	breq	.+0      	; 0xa18d7308 <ce_GetPositionAttackWeight+0x45e78adc>
a18d7308:	47 ef       	ldi	r20, 0xF7	; 247
a18d730a:	4d 0f       	add	r20, r29
a18d730c:	6c ed       	ldi	r22, 0xDC	; 220
a18d730e:	6c 0f       	add	r22, r28
a18d7310:	09 e0       	ldi	r16, 0x09	; 9
a18d7312:	28 2f       	mov	r18, r24
a18d7314:	80 91 00 00 	lds	r24, 0x0000
a18d7318:	90 91 00 00 	lds	r25, 0x0000
a18d731c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a18d7320:	df 91       	pop	r29
a18d7322:	cf 91       	pop	r28
a18d7324:	1f 91       	pop	r17
a18d7326:	0f 91       	pop	r16
a18d7328:	08 95       	ret

Disassembly of section .text.mnu_DrawEntry:

431ae5ea <mnu_DrawEntry>:
431ae5ea:	af 92       	push	r10
431ae5ec:	bf 92       	push	r11
431ae5ee:	df 92       	push	r13
431ae5f0:	ef 92       	push	r14
431ae5f2:	ff 92       	push	r15
431ae5f4:	0f 93       	push	r16
431ae5f6:	1f 93       	push	r17
431ae5f8:	cf 93       	push	r28
431ae5fa:	df 93       	push	r29
431ae5fc:	1f 92       	push	r1
431ae5fe:	cd b7       	in	r28, 0x3d	; 61
431ae600:	de b7       	in	r29, 0x3e	; 62
431ae602:	e8 2e       	mov	r14, r24
431ae604:	5b 01       	movw	r10, r22
431ae606:	d2 2e       	mov	r13, r18
431ae608:	60 e0       	ldi	r22, 0x00	; 0
431ae60a:	70 e0       	ldi	r23, 0x00	; 0
431ae60c:	80 91 00 00 	lds	r24, 0x0000
431ae610:	90 91 00 00 	lds	r25, 0x0000
431ae614:	49 83       	std	Y+1, r20	; 0x01
431ae616:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae61a:	b5 01       	movw	r22, r10
431ae61c:	80 91 00 00 	lds	r24, 0x0000
431ae620:	90 91 00 00 	lds	r25, 0x0000
431ae624:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae628:	f8 2e       	mov	r15, r24
431ae62a:	80 91 00 00 	lds	r24, 0x0000
431ae62e:	90 91 00 00 	lds	r25, 0x0000
431ae632:	fc 01       	movw	r30, r24
431ae634:	10 81       	ld	r17, Z
431ae636:	1f 19       	sub	r17, r15
431ae638:	16 95       	lsr	r17
431ae63a:	49 81       	ldd	r20, Y+1	; 0x01
431ae63c:	44 23       	and	r20, r20
431ae63e:	01 f0       	breq	.+0      	; 0x431ae640 <cu_IsKingCastling+0x1547f260>
431ae640:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae644:	80 91 00 00 	lds	r24, 0x0000
431ae648:	90 91 00 00 	lds	r25, 0x0000
431ae64c:	fc 01       	movw	r30, r24
431ae64e:	41 81       	ldd	r20, Z+1	; 0x01
431ae650:	4b 50       	subi	r20, 0x0B	; 11
431ae652:	4e 19       	sub	r20, r14
431ae654:	0d e0       	ldi	r16, 0x0D	; 13
431ae656:	25 e0       	ldi	r18, 0x05	; 5
431ae658:	2f 0d       	add	r18, r15
431ae65a:	6d ef       	ldi	r22, 0xFD	; 253
431ae65c:	61 0f       	add	r22, r17
431ae65e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae662:	80 91 00 00 	lds	r24, 0x0000
431ae666:	90 91 00 00 	lds	r25, 0x0000
431ae66a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae66e:	80 91 00 00 	lds	r24, 0x0000
431ae672:	90 91 00 00 	lds	r25, 0x0000
431ae676:	fc 01       	movw	r30, r24
431ae678:	41 81       	ldd	r20, Z+1	; 0x01
431ae67a:	41 50       	subi	r20, 0x01	; 1
431ae67c:	4e 19       	sub	r20, r14
431ae67e:	95 01       	movw	r18, r10
431ae680:	61 2f       	mov	r22, r17
431ae682:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae686:	dd 20       	and	r13, r13
431ae688:	01 f0       	breq	.+0      	; 0x431ae68a <cu_IsKingCastling+0x1547f2aa>
431ae68a:	80 91 00 00 	lds	r24, 0x0000
431ae68e:	90 91 00 00 	lds	r25, 0x0000
431ae692:	fc 01       	movw	r30, r24
431ae694:	41 81       	ldd	r20, Z+1	; 0x01
431ae696:	49 50       	subi	r20, 0x09	; 9
431ae698:	4e 19       	sub	r20, r14
431ae69a:	6f ef       	ldi	r22, 0xFF	; 255
431ae69c:	61 0f       	add	r22, r17
431ae69e:	09 e0       	ldi	r16, 0x09	; 9
431ae6a0:	2f 2d       	mov	r18, r15
431ae6a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
431ae6a6:	0f 90       	pop	r0
431ae6a8:	df 91       	pop	r29
431ae6aa:	cf 91       	pop	r28
431ae6ac:	1f 91       	pop	r17
431ae6ae:	0f 91       	pop	r16
431ae6b0:	ff 90       	pop	r15
431ae6b2:	ef 90       	pop	r14
431ae6b4:	df 90       	pop	r13
431ae6b6:	bf 90       	pop	r11
431ae6b8:	af 90       	pop	r10
431ae6ba:	08 95       	ret

Disassembly of section .text.mnu_Draw:

8635cca6 <mnu_Draw>:
8635cca6:	cf 93       	push	r28
8635cca8:	df 93       	push	r29
8635ccaa:	80 91 00 00 	lds	r24, 0x0000
8635ccae:	8e 5f       	subi	r24, 0xFE	; 254
8635ccb0:	e0 91 00 00 	lds	r30, 0x0000
8635ccb4:	f0 91 00 00 	lds	r31, 0x0000
8635ccb8:	d1 81       	ldd	r29, Z+1	; 0x01
8635ccba:	9d 2f       	mov	r25, r29
8635ccbc:	29 e0       	ldi	r18, 0x09	; 9
8635ccbe:	82 9f       	mul	r24, r18
8635ccc0:	90 19       	sub	r25, r0
8635ccc2:	11 24       	eor	r1, r1
8635ccc4:	89 2f       	mov	r24, r25
8635ccc6:	86 95       	lsr	r24
8635ccc8:	d8 1b       	sub	r29, r24
8635ccca:	60 91 00 00 	lds	r22, 0x0000
8635ccce:	70 91 00 00 	lds	r23, 0x0000
8635ccd2:	20 e0       	ldi	r18, 0x00	; 0
8635ccd4:	40 e0       	ldi	r20, 0x00	; 0
8635ccd6:	87 ef       	ldi	r24, 0xF7	; 247
8635ccd8:	8d 0f       	add	r24, r29
8635ccda:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8635ccde:	d2 51       	subi	r29, 0x12	; 18
8635cce0:	c0 e0       	ldi	r28, 0x00	; 0
8635cce2:	80 91 00 00 	lds	r24, 0x0000
8635cce6:	c8 17       	cp	r28, r24
8635cce8:	00 f4       	brcc	.+0      	; 0x8635ccea <ce_GetPositionAttackWeight+0x2a8fe4be>
8635ccea:	d9 50       	subi	r29, 0x09	; 9
8635ccec:	21 e0       	ldi	r18, 0x01	; 1
8635ccee:	80 91 00 00 	lds	r24, 0x0000
8635ccf2:	c8 13       	cpse	r28, r24
8635ccf4:	20 e0       	ldi	r18, 0x00	; 0
8635ccf6:	ec 2f       	mov	r30, r28
8635ccf8:	f0 e0       	ldi	r31, 0x00	; 0
8635ccfa:	ee 0f       	add	r30, r30
8635ccfc:	ff 1f       	adc	r31, r31
8635ccfe:	e0 50       	subi	r30, 0x00	; 0
8635cd00:	f0 40       	sbci	r31, 0x00	; 0
8635cd02:	60 81       	ld	r22, Z
8635cd04:	71 81       	ldd	r23, Z+1	; 0x01
8635cd06:	40 e0       	ldi	r20, 0x00	; 0
8635cd08:	8d 2f       	mov	r24, r29
8635cd0a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
8635cd0e:	cf 5f       	subi	r28, 0xFF	; 255
8635cd10:	00 c0       	rjmp	.+0      	; 0x8635cd12 <ce_GetPositionAttackWeight+0x2a8fe4e6>
8635cd12:	df 91       	pop	r29
8635cd14:	cf 91       	pop	r28
8635cd16:	08 95       	ret

Disassembly of section .text.mnu_Step:

0c6b99be <mnu_Step>:
 c6b99be:	81 30       	cpi	r24, 0x01	; 1
 c6b99c0:	01 f4       	brne	.+0      	; 0xc6b99c2 <ce_FindPawnPiece+0xf6dd14>
 c6b99c2:	40 91 00 00 	lds	r20, 0x0000
 c6b99c6:	84 2f       	mov	r24, r20
 c6b99c8:	90 e0       	ldi	r25, 0x00	; 0
 c6b99ca:	01 96       	adiw	r24, 0x01	; 1
 c6b99cc:	20 91 00 00 	lds	r18, 0x0000
 c6b99d0:	30 e0       	ldi	r19, 0x00	; 0
 c6b99d2:	82 17       	cp	r24, r18
 c6b99d4:	93 07       	cpc	r25, r19
 c6b99d6:	04 f4       	brge	.+0      	; 0xc6b99d8 <ce_FindPawnPiece+0xf6dd2a>
 c6b99d8:	4f 5f       	subi	r20, 0xFF	; 255
 c6b99da:	40 93 00 00 	sts	0x0000, r20
 c6b99de:	08 95       	ret
 c6b99e0:	82 30       	cpi	r24, 0x02	; 2
 c6b99e2:	01 f4       	brne	.+0      	; 0xc6b99e4 <ce_FindPawnPiece+0xf6dd36>
 c6b99e4:	80 91 00 00 	lds	r24, 0x0000
 c6b99e8:	88 23       	and	r24, r24
 c6b99ea:	01 f0       	breq	.+0      	; 0xc6b99ec <ce_FindPawnPiece+0xf6dd3e>
 c6b99ec:	81 50       	subi	r24, 0x01	; 1
 c6b99ee:	80 93 00 00 	sts	0x0000, r24
 c6b99f2:	08 95       	ret

Disassembly of section .text.chess_DrawFrame:

18d733b2 <chess_DrawFrame>:
18d733b2:	0f 93       	push	r16
18d733b4:	1f 93       	push	r17
18d733b6:	cf 93       	push	r28
18d733b8:	df 93       	push	r29
18d733ba:	16 2f       	mov	r17, r22
18d733bc:	98 2f       	mov	r25, r24
18d733be:	9f 70       	andi	r25, 0x0F	; 15
18d733c0:	20 91 00 00 	lds	r18, 0x0000
18d733c4:	22 23       	and	r18, r18
18d733c6:	01 f0       	breq	.+0      	; 0x18d733c8 <ce_CalculatePositionWeight+0x1edba1e>
18d733c8:	37 e0       	ldi	r19, 0x07	; 7
18d733ca:	93 27       	eor	r25, r19
18d733cc:	82 95       	swap	r24
18d733ce:	8f 70       	andi	r24, 0x0F	; 15
18d733d0:	22 23       	and	r18, r18
18d733d2:	01 f0       	breq	.+0      	; 0x18d733d4 <ce_CalculatePositionWeight+0x1edba2a>
18d733d4:	27 e0       	ldi	r18, 0x07	; 7
18d733d6:	82 27       	eor	r24, r18
18d733d8:	d0 91 00 00 	lds	r29, 0x0000
18d733dc:	9d 9f       	mul	r25, r29
18d733de:	c0 2d       	mov	r28, r0
18d733e0:	11 24       	eor	r1, r1
18d733e2:	8d 9f       	mul	r24, r29
18d733e4:	d0 2d       	mov	r29, r0
18d733e6:	11 24       	eor	r1, r1
18d733e8:	80 91 00 00 	lds	r24, 0x0000
18d733ec:	90 91 00 00 	lds	r25, 0x0000
18d733f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
18d733f4:	20 91 00 00 	lds	r18, 0x0000
18d733f8:	40 91 00 00 	lds	r20, 0x0000
18d733fc:	4f 5f       	subi	r20, 0xFF	; 255
18d733fe:	42 1b       	sub	r20, r18
18d73400:	4d 1b       	sub	r20, r29
18d73402:	02 2f       	mov	r16, r18
18d73404:	6c 2f       	mov	r22, r28
18d73406:	80 91 00 00 	lds	r24, 0x0000
18d7340a:	90 91 00 00 	lds	r25, 0x0000
18d7340e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
18d73412:	11 23       	and	r17, r17
18d73414:	01 f0       	breq	.+0      	; 0x18d73416 <ce_CalculatePositionWeight+0x1edba6c>
18d73416:	80 91 00 00 	lds	r24, 0x0000
18d7341a:	22 e0       	ldi	r18, 0x02	; 2
18d7341c:	28 0f       	add	r18, r24
18d7341e:	40 91 00 00 	lds	r20, 0x0000
18d73422:	48 1b       	sub	r20, r24
18d73424:	4d 1b       	sub	r20, r29
18d73426:	6f ef       	ldi	r22, 0xFF	; 255
18d73428:	6c 0f       	add	r22, r28
18d7342a:	02 2f       	mov	r16, r18
18d7342c:	80 91 00 00 	lds	r24, 0x0000
18d73430:	90 91 00 00 	lds	r25, 0x0000
18d73434:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
18d73438:	df 91       	pop	r29
18d7343a:	cf 91       	pop	r28
18d7343c:	1f 91       	pop	r17
18d7343e:	0f 91       	pop	r16
18d73440:	08 95       	ret

Disassembly of section .text.chess_DrawBoard:

31ae67f4 <chess_DrawBoard>:
31ae67f4:	4f 92       	push	r4
31ae67f6:	5f 92       	push	r5
31ae67f8:	6f 92       	push	r6
31ae67fa:	7f 92       	push	r7
31ae67fc:	8f 92       	push	r8
31ae67fe:	9f 92       	push	r9
31ae6800:	af 92       	push	r10
31ae6802:	bf 92       	push	r11
31ae6804:	cf 92       	push	r12
31ae6806:	df 92       	push	r13
31ae6808:	ef 92       	push	r14
31ae680a:	ff 92       	push	r15
31ae680c:	0f 93       	push	r16
31ae680e:	1f 93       	push	r17
31ae6810:	cf 93       	push	r28
31ae6812:	df 93       	push	r29
31ae6814:	80 91 00 00 	lds	r24, 0x0000
31ae6818:	90 91 00 00 	lds	r25, 0x0000
31ae681c:	fc 01       	movw	r30, r24
31ae681e:	23 85       	ldd	r18, Z+11	; 0x0b
31ae6820:	2f 71       	andi	r18, 0x1F	; 31
31ae6822:	30 e0       	ldi	r19, 0x00	; 0
31ae6824:	22 30       	cpi	r18, 0x02	; 2
31ae6826:	31 05       	cpc	r19, r1
31ae6828:	04 f0       	brlt	.+0      	; 0x31ae682a <cu_IsKingCastling+0x3db744a>
31ae682a:	d0 e0       	ldi	r29, 0x00	; 0
31ae682c:	c0 e0       	ldi	r28, 0x00	; 0
31ae682e:	80 91 00 00 	lds	r24, 0x0000
31ae6832:	d8 9f       	mul	r29, r24
31ae6834:	10 2d       	mov	r17, r0
31ae6836:	11 24       	eor	r1, r1
31ae6838:	c8 9f       	mul	r28, r24
31ae683a:	f0 2c       	mov	r15, r0
31ae683c:	11 24       	eor	r1, r1
31ae683e:	80 91 00 00 	lds	r24, 0x0000
31ae6842:	90 91 00 00 	lds	r25, 0x0000
31ae6846:	2c 2f       	mov	r18, r28
31ae6848:	2d 27       	eor	r18, r29
31ae684a:	20 fd       	sbrc	r18, 0
31ae684c:	00 c0       	rjmp	.+0      	; 0x31ae684e <cu_IsKingCastling+0x3db746e>
31ae684e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6852:	00 c0       	rjmp	.+0      	; 0x31ae6854 <cu_IsKingCastling+0x3db7474>
31ae6854:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6858:	20 91 00 00 	lds	r18, 0x0000
31ae685c:	40 91 00 00 	lds	r20, 0x0000
31ae6860:	4f 5f       	subi	r20, 0xFF	; 255
31ae6862:	42 1b       	sub	r20, r18
31ae6864:	4f 19       	sub	r20, r15
31ae6866:	02 2f       	mov	r16, r18
31ae6868:	61 2f       	mov	r22, r17
31ae686a:	80 91 00 00 	lds	r24, 0x0000
31ae686e:	90 91 00 00 	lds	r25, 0x0000
31ae6872:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6876:	cf 5f       	subi	r28, 0xFF	; 255
31ae6878:	c8 30       	cpi	r28, 0x08	; 8
31ae687a:	01 f4       	brne	.+0      	; 0x31ae687c <cu_IsKingCastling+0x3db749c>
31ae687c:	df 5f       	subi	r29, 0xFF	; 255
31ae687e:	d8 30       	cpi	r29, 0x08	; 8
31ae6880:	01 f4       	brne	.+0      	; 0x31ae6882 <cu_IsKingCastling+0x3db74a2>
31ae6882:	00 c0       	rjmp	.+0      	; 0x31ae6884 <cu_IsKingCastling+0x3db74a4>
31ae6884:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6888:	c0 e0       	ldi	r28, 0x00	; 0
31ae688a:	d0 e0       	ldi	r29, 0x00	; 0
31ae688c:	8d 2f       	mov	r24, r29
31ae688e:	8c 27       	eor	r24, r28
31ae6890:	83 fd       	sbrc	r24, 3
31ae6892:	00 c0       	rjmp	.+0      	; 0x31ae6894 <cu_IsKingCastling+0x3db74b4>
31ae6894:	40 91 00 00 	lds	r20, 0x0000
31ae6898:	4c 1b       	sub	r20, r28
31ae689a:	11 e0       	ldi	r17, 0x01	; 1
31ae689c:	1d 0f       	add	r17, r29
31ae689e:	61 2f       	mov	r22, r17
31ae68a0:	80 91 00 00 	lds	r24, 0x0000
31ae68a4:	90 91 00 00 	lds	r25, 0x0000
31ae68a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae68ac:	40 91 00 00 	lds	r20, 0x0000
31ae68b0:	42 50       	subi	r20, 0x02	; 2
31ae68b2:	4c 1b       	sub	r20, r28
31ae68b4:	61 2f       	mov	r22, r17
31ae68b6:	80 91 00 00 	lds	r24, 0x0000
31ae68ba:	90 91 00 00 	lds	r25, 0x0000
31ae68be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae68c2:	40 91 00 00 	lds	r20, 0x0000
31ae68c6:	44 50       	subi	r20, 0x04	; 4
31ae68c8:	4c 1b       	sub	r20, r28
31ae68ca:	61 2f       	mov	r22, r17
31ae68cc:	80 91 00 00 	lds	r24, 0x0000
31ae68d0:	90 91 00 00 	lds	r25, 0x0000
31ae68d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae68d8:	40 91 00 00 	lds	r20, 0x0000
31ae68dc:	46 50       	subi	r20, 0x06	; 6
31ae68de:	4c 1b       	sub	r20, r28
31ae68e0:	61 2f       	mov	r22, r17
31ae68e2:	80 91 00 00 	lds	r24, 0x0000
31ae68e6:	90 91 00 00 	lds	r25, 0x0000
31ae68ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae68ee:	40 91 00 00 	lds	r20, 0x0000
31ae68f2:	4c 1b       	sub	r20, r28
31ae68f4:	13 e0       	ldi	r17, 0x03	; 3
31ae68f6:	1d 0f       	add	r17, r29
31ae68f8:	61 2f       	mov	r22, r17
31ae68fa:	80 91 00 00 	lds	r24, 0x0000
31ae68fe:	90 91 00 00 	lds	r25, 0x0000
31ae6902:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6906:	40 91 00 00 	lds	r20, 0x0000
31ae690a:	46 50       	subi	r20, 0x06	; 6
31ae690c:	4c 1b       	sub	r20, r28
31ae690e:	61 2f       	mov	r22, r17
31ae6910:	80 91 00 00 	lds	r24, 0x0000
31ae6914:	90 91 00 00 	lds	r25, 0x0000
31ae6918:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae691c:	40 91 00 00 	lds	r20, 0x0000
31ae6920:	4c 1b       	sub	r20, r28
31ae6922:	15 e0       	ldi	r17, 0x05	; 5
31ae6924:	1d 0f       	add	r17, r29
31ae6926:	61 2f       	mov	r22, r17
31ae6928:	80 91 00 00 	lds	r24, 0x0000
31ae692c:	90 91 00 00 	lds	r25, 0x0000
31ae6930:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6934:	40 91 00 00 	lds	r20, 0x0000
31ae6938:	46 50       	subi	r20, 0x06	; 6
31ae693a:	4c 1b       	sub	r20, r28
31ae693c:	61 2f       	mov	r22, r17
31ae693e:	80 91 00 00 	lds	r24, 0x0000
31ae6942:	90 91 00 00 	lds	r25, 0x0000
31ae6946:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae694a:	40 91 00 00 	lds	r20, 0x0000
31ae694e:	4c 1b       	sub	r20, r28
31ae6950:	17 e0       	ldi	r17, 0x07	; 7
31ae6952:	1d 0f       	add	r17, r29
31ae6954:	61 2f       	mov	r22, r17
31ae6956:	80 91 00 00 	lds	r24, 0x0000
31ae695a:	90 91 00 00 	lds	r25, 0x0000
31ae695e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6962:	40 91 00 00 	lds	r20, 0x0000
31ae6966:	42 50       	subi	r20, 0x02	; 2
31ae6968:	4c 1b       	sub	r20, r28
31ae696a:	61 2f       	mov	r22, r17
31ae696c:	80 91 00 00 	lds	r24, 0x0000
31ae6970:	90 91 00 00 	lds	r25, 0x0000
31ae6974:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6978:	40 91 00 00 	lds	r20, 0x0000
31ae697c:	44 50       	subi	r20, 0x04	; 4
31ae697e:	4c 1b       	sub	r20, r28
31ae6980:	61 2f       	mov	r22, r17
31ae6982:	80 91 00 00 	lds	r24, 0x0000
31ae6986:	90 91 00 00 	lds	r25, 0x0000
31ae698a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae698e:	40 91 00 00 	lds	r20, 0x0000
31ae6992:	46 50       	subi	r20, 0x06	; 6
31ae6994:	4c 1b       	sub	r20, r28
31ae6996:	61 2f       	mov	r22, r17
31ae6998:	80 91 00 00 	lds	r24, 0x0000
31ae699c:	90 91 00 00 	lds	r25, 0x0000
31ae69a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae69a4:	d8 5f       	subi	r29, 0xF8	; 248
31ae69a6:	d0 34       	cpi	r29, 0x40	; 64
31ae69a8:	01 f0       	breq	.+0      	; 0x31ae69aa <cu_IsKingCastling+0x3db75ca>
31ae69aa:	00 c0       	rjmp	.+0      	; 0x31ae69ac <cu_IsKingCastling+0x3db75cc>
31ae69ac:	c8 5f       	subi	r28, 0xF8	; 248
31ae69ae:	c0 34       	cpi	r28, 0x40	; 64
31ae69b0:	01 f0       	breq	.+0      	; 0x31ae69b2 <cu_IsKingCastling+0x3db75d2>
31ae69b2:	00 c0       	rjmp	.+0      	; 0x31ae69b4 <cu_IsKingCastling+0x3db75d4>
31ae69b4:	50 e0       	ldi	r21, 0x00	; 0
31ae69b6:	a5 2e       	mov	r10, r21
31ae69b8:	50 e0       	ldi	r21, 0x00	; 0
31ae69ba:	b5 2e       	mov	r11, r21
31ae69bc:	60 e0       	ldi	r22, 0x00	; 0
31ae69be:	86 2e       	mov	r8, r22
31ae69c0:	60 e0       	ldi	r22, 0x00	; 0
31ae69c2:	96 2e       	mov	r9, r22
31ae69c4:	88 0c       	add	r8, r8
31ae69c6:	99 1c       	adc	r9, r9
31ae69c8:	1f ef       	ldi	r17, 0xFF	; 255
31ae69ca:	00 c0       	rjmp	.+0      	; 0x31ae69cc <cu_IsKingCastling+0x3db75ec>
31ae69cc:	5c 2c       	mov	r5, r12
31ae69ce:	80 91 00 00 	lds	r24, 0x0000
31ae69d2:	81 11       	cpse	r24, r1
31ae69d4:	00 c0       	rjmp	.+0      	; 0x31ae69d6 <cu_IsKingCastling+0x3db75f6>
31ae69d6:	f5 01       	movw	r30, r10
31ae69d8:	ec 0d       	add	r30, r12
31ae69da:	fd 1d       	adc	r31, r13
31ae69dc:	42 80       	ldd	r4, Z+2	; 0x02
31ae69de:	c4 2d       	mov	r28, r4
31ae69e0:	cf 70       	andi	r28, 0x0F	; 15
31ae69e2:	01 f4       	brne	.+0      	; 0x31ae69e4 <cu_IsKingCastling+0x3db7604>
31ae69e4:	ff ef       	ldi	r31, 0xFF	; 255
31ae69e6:	cf 1a       	sub	r12, r31
31ae69e8:	df 0a       	sbc	r13, r31
31ae69ea:	28 e0       	ldi	r18, 0x08	; 8
31ae69ec:	c2 16       	cp	r12, r18
31ae69ee:	d1 04       	cpc	r13, r1
31ae69f0:	01 f4       	brne	.+0      	; 0x31ae69f2 <cu_IsKingCastling+0x3db7612>
31ae69f2:	11 50       	subi	r17, 0x01	; 1
31ae69f4:	38 e0       	ldi	r19, 0x08	; 8
31ae69f6:	a3 0e       	add	r10, r19
31ae69f8:	b1 1c       	adc	r11, r1
31ae69fa:	17 3f       	cpi	r17, 0xF7	; 247
31ae69fc:	01 f4       	brne	.+0      	; 0x31ae69fe <cu_IsKingCastling+0x3db761e>
31ae69fe:	00 c0       	rjmp	.+0      	; 0x31ae6a00 <cu_IsKingCastling+0x3db7620>
31ae6a00:	34 01       	movw	r6, r8
31ae6a02:	6a 18       	sub	r6, r10
31ae6a04:	7b 08       	sbc	r7, r11
31ae6a06:	c1 2c       	mov	r12, r1
31ae6a08:	d1 2c       	mov	r13, r1
31ae6a0a:	00 c0       	rjmp	.+0      	; 0x31ae6a0c <cu_IsKingCastling+0x3db762c>
31ae6a0c:	f3 01       	movw	r30, r6
31ae6a0e:	ec 19       	sub	r30, r12
31ae6a10:	fd 09       	sbc	r31, r13
31ae6a12:	41 84       	ldd	r4, Z+9	; 0x09
31ae6a14:	00 c0       	rjmp	.+0      	; 0x31ae6a16 <cu_IsKingCastling+0x3db7636>
31ae6a16:	d0 e0       	ldi	r29, 0x00	; 0
31ae6a18:	21 97       	sbiw	r28, 0x01	; 1
31ae6a1a:	43 e0       	ldi	r20, 0x03	; 3
31ae6a1c:	cc 0f       	add	r28, r28
31ae6a1e:	dd 1f       	adc	r29, r29
31ae6a20:	4a 95       	dec	r20
31ae6a22:	01 f4       	brne	.+0      	; 0x31ae6a24 <cu_IsKingCastling+0x3db7644>
31ae6a24:	80 91 00 00 	lds	r24, 0x0000
31ae6a28:	90 91 00 00 	lds	r25, 0x0000
31ae6a2c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6a30:	60 91 00 00 	lds	r22, 0x0000
31ae6a34:	80 91 00 00 	lds	r24, 0x0000
31ae6a38:	9e 01       	movw	r18, r28
31ae6a3a:	20 50       	subi	r18, 0x00	; 0
31ae6a3c:	30 40       	sbci	r19, 0x00	; 0
31ae6a3e:	79 01       	movw	r14, r18
31ae6a40:	40 91 00 00 	lds	r20, 0x0000
31ae6a44:	46 0f       	add	r20, r22
31ae6a46:	18 9f       	mul	r17, r24
31ae6a48:	40 0d       	add	r20, r0
31ae6a4a:	11 24       	eor	r1, r1
31ae6a4c:	61 50       	subi	r22, 0x01	; 1
31ae6a4e:	58 9e       	mul	r5, r24
31ae6a50:	60 0d       	add	r22, r0
31ae6a52:	11 24       	eor	r1, r1
31ae6a54:	08 e0       	ldi	r16, 0x08	; 8
31ae6a56:	21 e0       	ldi	r18, 0x01	; 1
31ae6a58:	80 91 00 00 	lds	r24, 0x0000
31ae6a5c:	90 91 00 00 	lds	r25, 0x0000
31ae6a60:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6a64:	44 fa       	bst	r4, 4
31ae6a66:	44 24       	eor	r4, r4
31ae6a68:	40 f8       	bld	r4, 0
31ae6a6a:	80 91 00 00 	lds	r24, 0x0000
31ae6a6e:	48 12       	cpse	r4, r24
31ae6a70:	00 c0       	rjmp	.+0      	; 0x31ae6a72 <cu_IsKingCastling+0x3db7692>
31ae6a72:	80 91 00 00 	lds	r24, 0x0000
31ae6a76:	90 91 00 00 	lds	r25, 0x0000
31ae6a7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6a7e:	60 91 00 00 	lds	r22, 0x0000
31ae6a82:	80 91 00 00 	lds	r24, 0x0000
31ae6a86:	fe 01       	movw	r30, r28
31ae6a88:	e0 50       	subi	r30, 0x00	; 0
31ae6a8a:	f0 40       	sbci	r31, 0x00	; 0
31ae6a8c:	7f 01       	movw	r14, r30
31ae6a8e:	40 91 00 00 	lds	r20, 0x0000
31ae6a92:	46 0f       	add	r20, r22
31ae6a94:	18 9f       	mul	r17, r24
31ae6a96:	40 0d       	add	r20, r0
31ae6a98:	11 24       	eor	r1, r1
31ae6a9a:	61 50       	subi	r22, 0x01	; 1
31ae6a9c:	58 9e       	mul	r5, r24
31ae6a9e:	60 0d       	add	r22, r0
31ae6aa0:	11 24       	eor	r1, r1
31ae6aa2:	21 e0       	ldi	r18, 0x01	; 1
31ae6aa4:	80 91 00 00 	lds	r24, 0x0000
31ae6aa8:	90 91 00 00 	lds	r25, 0x0000
31ae6aac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6ab0:	00 c0       	rjmp	.+0      	; 0x31ae6ab2 <cu_IsKingCastling+0x3db76d2>
31ae6ab2:	80 91 00 00 	lds	r24, 0x0000
31ae6ab6:	98 2f       	mov	r25, r24
31ae6ab8:	98 78       	andi	r25, 0x88	; 136
31ae6aba:	01 f4       	brne	.+0      	; 0x31ae6abc <cu_IsKingCastling+0x3db76dc>
31ae6abc:	61 e0       	ldi	r22, 0x01	; 1
31ae6abe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
31ae6ac2:	80 91 00 00 	lds	r24, 0x0000
31ae6ac6:	98 2f       	mov	r25, r24
31ae6ac8:	98 78       	andi	r25, 0x88	; 136
31ae6aca:	01 f4       	brne	.+0      	; 0x31ae6acc <cu_IsKingCastling+0x3db76ec>
31ae6acc:	60 e0       	ldi	r22, 0x00	; 0
31ae6ace:	df 91       	pop	r29
31ae6ad0:	cf 91       	pop	r28
31ae6ad2:	1f 91       	pop	r17
31ae6ad4:	0f 91       	pop	r16
31ae6ad6:	ff 90       	pop	r15
31ae6ad8:	ef 90       	pop	r14
31ae6ada:	df 90       	pop	r13
31ae6adc:	cf 90       	pop	r12
31ae6ade:	bf 90       	pop	r11
31ae6ae0:	af 90       	pop	r10
31ae6ae2:	9f 90       	pop	r9
31ae6ae4:	8f 90       	pop	r8
31ae6ae6:	7f 90       	pop	r7
31ae6ae8:	6f 90       	pop	r6
31ae6aea:	5f 90       	pop	r5
31ae6aec:	4f 90       	pop	r4
31ae6aee:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
31ae6af2:	df 91       	pop	r29
31ae6af4:	cf 91       	pop	r28
31ae6af6:	1f 91       	pop	r17
31ae6af8:	0f 91       	pop	r16
31ae6afa:	ff 90       	pop	r15
31ae6afc:	ef 90       	pop	r14
31ae6afe:	df 90       	pop	r13
31ae6b00:	cf 90       	pop	r12
31ae6b02:	bf 90       	pop	r11
31ae6b04:	af 90       	pop	r10
31ae6b06:	9f 90       	pop	r9
31ae6b08:	8f 90       	pop	r8
31ae6b0a:	7f 90       	pop	r7
31ae6b0c:	6f 90       	pop	r6
31ae6b0e:	5f 90       	pop	r5
31ae6b10:	4f 90       	pop	r4
31ae6b12:	08 95       	ret

Disassembly of section .text.chess_Thinking:

635cd308 <chess_Thinking>:
635cd308:	08 95       	ret

Disassembly of section .text.chess_Init:

c6b9a612 <chess_Init>:
c6b9a612:	90 93 00 00 	sts	0x0000, r25
c6b9a616:	80 93 00 00 	sts	0x0000, r24
c6b9a61a:	fc 01       	movw	r30, r24
c6b9a61c:	21 81       	ldd	r18, Z+1	; 0x01
c6b9a61e:	3f ef       	ldi	r19, 0xFF	; 255
c6b9a620:	32 0f       	add	r19, r18
c6b9a622:	30 93 00 00 	sts	0x0000, r19
c6b9a626:	83 85       	ldd	r24, Z+11	; 0x0b
c6b9a628:	8f 71       	andi	r24, 0x1F	; 31
c6b9a62a:	81 30       	cpi	r24, 0x01	; 1
c6b9a62c:	01 f4       	brne	.+0      	; 0xc6b9a62e <ce_GetPositionAttackCount+0xf6dd5b2>
c6b9a62e:	98 e0       	ldi	r25, 0x08	; 8
c6b9a630:	90 93 00 00 	sts	0x0000, r25
c6b9a634:	80 93 00 00 	sts	0x0000, r24
c6b9a638:	00 c0       	rjmp	.+0      	; 0xc6b9a63a <ce_GetPositionAttackCount+0xf6dd5be>
c6b9a63a:	28 35       	cpi	r18, 0x58	; 88
c6b9a63c:	00 f0       	brcs	.+0      	; 0xc6b9a63e <ce_GetPositionAttackCount+0xf6dd5c2>
c6b9a63e:	8a e0       	ldi	r24, 0x0A	; 10
c6b9a640:	80 93 00 00 	sts	0x0000, r24
c6b9a644:	82 e0       	ldi	r24, 0x02	; 2
c6b9a646:	80 93 00 00 	sts	0x0000, r24
c6b9a64a:	00 c0       	rjmp	.+0      	; 0xc6b9a64c <ce_GetPositionAttackCount+0xf6dd5d0>
c6b9a64c:	88 e0       	ldi	r24, 0x08	; 8
c6b9a64e:	80 93 00 00 	sts	0x0000, r24
c6b9a652:	81 e0       	ldi	r24, 0x01	; 1
c6b9a654:	80 93 00 00 	sts	0x0000, r24
c6b9a658:	21 34       	cpi	r18, 0x41	; 65
c6b9a65a:	00 f0       	brcs	.+0      	; 0xc6b9a65c <ce_GetPositionAttackCount+0xf6dd5e0>
c6b9a65c:	30 91 00 00 	lds	r19, 0x0000
c6b9a660:	48 ef       	ldi	r20, 0xF8	; 248
c6b9a662:	43 03       	mulsu	r20, r19
c6b9a664:	c0 01       	movw	r24, r0
c6b9a666:	11 24       	eor	r1, r1
c6b9a668:	82 0f       	add	r24, r18
c6b9a66a:	91 1d       	adc	r25, r1
c6b9a66c:	97 fd       	sbrc	r25, 7
c6b9a66e:	01 96       	adiw	r24, 0x01	; 1
c6b9a670:	95 95       	asr	r25
c6b9a672:	87 95       	ror	r24
c6b9a674:	90 91 00 00 	lds	r25, 0x0000
c6b9a678:	98 1b       	sub	r25, r24
c6b9a67a:	90 93 00 00 	sts	0x0000, r25
c6b9a67e:	60 93 00 00 	sts	0x0000, r22
c6b9a682:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.chess_Draw:

1ae69995 <chess_Draw>:
1ae69995:	1f 93       	push	r17
1ae69997:	cf 93       	push	r28
1ae69999:	df 93       	push	r29
1ae6999b:	80 91 00 00 	lds	r24, 0x0000
1ae6999f:	81 11       	cpse	r24, r1
1ae699a1:	00 c0       	rjmp	.+0      	; 0x1ae699a3 <ce_CalculatePositionWeight+0x3fd1ff9>
1ae699a3:	80 91 00 00 	lds	r24, 0x0000
1ae699a7:	81 11       	cpse	r24, r1
1ae699a9:	00 c0       	rjmp	.+0      	; 0x1ae699ab <ce_CalculatePositionWeight+0x3fd2001>
1ae699ab:	82 e0       	ldi	r24, 0x02	; 2
1ae699ad:	00 c0       	rjmp	.+0      	; 0x1ae699af <ce_CalculatePositionWeight+0x3fd2005>
1ae699af:	84 e0       	ldi	r24, 0x04	; 4
1ae699b1:	80 93 00 00 	sts	0x0000, r24
1ae699b5:	df 91       	pop	r29
1ae699b7:	cf 91       	pop	r28
1ae699b9:	1f 91       	pop	r17
1ae699bb:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
1ae699bf:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae699c3:	c0 91 00 00 	lds	r28, 0x0000
1ae699c7:	c5 30       	cpi	r28, 0x05	; 5
1ae699c9:	00 f0       	brcs	.+0      	; 0x1ae699cb <ce_CalculatePositionWeight+0x3fd2021>
1ae699cb:	c4 e0       	ldi	r28, 0x04	; 4
1ae699cd:	60 e0       	ldi	r22, 0x00	; 0
1ae699cf:	70 e0       	ldi	r23, 0x00	; 0
1ae699d1:	80 91 00 00 	lds	r24, 0x0000
1ae699d5:	90 91 00 00 	lds	r25, 0x0000
1ae699d9:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae699dd:	80 91 00 00 	lds	r24, 0x0000
1ae699e1:	90 91 00 00 	lds	r25, 0x0000
1ae699e5:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae699e9:	18 e0       	ldi	r17, 0x08	; 8
1ae699eb:	d0 e0       	ldi	r29, 0x00	; 0
1ae699ed:	dc 17       	cp	r29, r28
1ae699ef:	01 f0       	breq	.+0      	; 0x1ae699f1 <ce_CalculatePositionWeight+0x3fd2047>
1ae699f1:	80 91 00 00 	lds	r24, 0x0000
1ae699f5:	8c 1b       	sub	r24, r28
1ae699f7:	8d 0f       	add	r24, r29
1ae699f9:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae699fd:	e0 91 00 00 	lds	r30, 0x0000
1ae69a01:	f0 91 00 00 	lds	r31, 0x0000
1ae69a05:	60 81       	ld	r22, Z
1ae69a07:	63 52       	subi	r22, 0x23	; 35
1ae69a09:	9c 01       	movw	r18, r24
1ae69a0b:	41 2f       	mov	r20, r17
1ae69a0d:	cf 01       	movw	r24, r30
1ae69a0f:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae69a13:	df 5f       	subi	r29, 0xFF	; 255
1ae69a15:	18 5f       	subi	r17, 0xF8	; 248
1ae69a17:	00 c0       	rjmp	.+0      	; 0x1ae69a19 <ce_CalculatePositionWeight+0x3fd206f>
1ae69a19:	80 91 00 00 	lds	r24, 0x0000
1ae69a1d:	82 30       	cpi	r24, 0x02	; 2
1ae69a1f:	01 f4       	brne	.+0      	; 0x1ae69a21 <ce_CalculatePositionWeight+0x3fd2077>
1ae69a21:	81 e0       	ldi	r24, 0x01	; 1
1ae69a23:	90 91 00 00 	lds	r25, 0x0000
1ae69a27:	00 c0       	rjmp	.+0      	; 0x1ae69a29 <ce_CalculatePositionWeight+0x3fd207f>
1ae69a29:	83 30       	cpi	r24, 0x03	; 3
1ae69a2b:	01 f4       	brne	.+0      	; 0x1ae69a2d <ce_CalculatePositionWeight+0x3fd2083>
1ae69a2d:	81 e0       	ldi	r24, 0x01	; 1
1ae69a2f:	90 91 00 00 	lds	r25, 0x0000
1ae69a33:	9f 3f       	cpi	r25, 0xFF	; 255
1ae69a35:	01 f0       	breq	.+0      	; 0x1ae69a37 <ce_CalculatePositionWeight+0x3fd208d>
1ae69a37:	80 e0       	ldi	r24, 0x00	; 0
1ae69a39:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1ae69a3d:	80 91 00 00 	lds	r24, 0x0000
1ae69a41:	85 30       	cpi	r24, 0x05	; 5
1ae69a43:	01 f4       	brne	.+0      	; 0x1ae69a45 <ce_CalculatePositionWeight+0x3fd209b>
1ae69a45:	80 91 00 00 	lds	r24, 0x0000
1ae69a49:	e0 91 00 00 	lds	r30, 0x0000
1ae69a4d:	f0 91 00 00 	lds	r31, 0x0000
1ae69a51:	88 23       	and	r24, r24
1ae69a53:	01 f0       	breq	.+0      	; 0x1ae69a55 <ce_CalculatePositionWeight+0x3fd20ab>
1ae69a55:	81 30       	cpi	r24, 0x01	; 1
1ae69a57:	01 f4       	brne	.+0      	; 0x1ae69a59 <ce_CalculatePositionWeight+0x3fd20af>
1ae69a59:	81 81       	ldd	r24, Z+1	; 0x01
1ae69a5b:	86 95       	lsr	r24
1ae69a5d:	21 e0       	ldi	r18, 0x01	; 1
1ae69a5f:	41 e0       	ldi	r20, 0x01	; 1
1ae69a61:	60 e0       	ldi	r22, 0x00	; 0
1ae69a63:	70 e0       	ldi	r23, 0x00	; 0
1ae69a65:	00 c0       	rjmp	.+0      	; 0x1ae69a67 <ce_CalculatePositionWeight+0x3fd20bd>
1ae69a67:	81 81       	ldd	r24, Z+1	; 0x01
1ae69a69:	86 95       	lsr	r24
1ae69a6b:	21 e0       	ldi	r18, 0x01	; 1
1ae69a6d:	41 e0       	ldi	r20, 0x01	; 1
1ae69a6f:	60 e0       	ldi	r22, 0x00	; 0
1ae69a71:	70 e0       	ldi	r23, 0x00	; 0
1ae69a73:	00 c0       	rjmp	.+0      	; 0x1ae69a75 <ce_CalculatePositionWeight+0x3fd20cb>
1ae69a75:	81 81       	ldd	r24, Z+1	; 0x01
1ae69a77:	86 95       	lsr	r24
1ae69a79:	21 e0       	ldi	r18, 0x01	; 1
1ae69a7b:	41 e0       	ldi	r20, 0x01	; 1
1ae69a7d:	60 e0       	ldi	r22, 0x00	; 0
1ae69a7f:	70 e0       	ldi	r23, 0x00	; 0
1ae69a81:	82 50       	subi	r24, 0x02	; 2
1ae69a83:	df 91       	pop	r29
1ae69a85:	cf 91       	pop	r28
1ae69a87:	1f 91       	pop	r17
1ae69a89:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
1ae69a8d:	df 91       	pop	r29
1ae69a8f:	cf 91       	pop	r28
1ae69a91:	1f 91       	pop	r17
1ae69a93:	08 95       	ret

Disassembly of section .text.chess_Step:

35cd342a <chess_Step>:
35cd342a:	cf 93       	push	r28
35cd342c:	81 11       	cpse	r24, r1
35cd342e:	00 c0       	rjmp	.+0      	; 0x35cd3430 <cu_IsKingCastling+0x7fa4050>
35cd3430:	80 91 00 00 	lds	r24, 0x0000
35cd3434:	80 93 00 00 	sts	0x0000, r24
35cd3438:	10 92 00 00 	sts	0x0000, r1
35cd343c:	00 c0       	rjmp	.+0      	; 0x35cd343e <cu_IsKingCastling+0x7fa405e>
35cd343e:	10 92 00 00 	sts	0x0000, r1
35cd3442:	80 93 00 00 	sts	0x0000, r24
35cd3446:	80 91 00 00 	lds	r24, 0x0000
35cd344a:	82 30       	cpi	r24, 0x02	; 2
35cd344c:	01 f4       	brne	.+0      	; 0x35cd344e <cu_IsKingCastling+0x7fa406e>
35cd344e:	00 c0       	rjmp	.+0      	; 0x35cd3450 <cu_IsKingCastling+0x7fa4070>
35cd3450:	00 f4       	brcc	.+0      	; 0x35cd3452 <cu_IsKingCastling+0x7fa4072>
35cd3452:	88 23       	and	r24, r24
35cd3454:	01 f0       	breq	.+0      	; 0x35cd3456 <cu_IsKingCastling+0x7fa4076>
35cd3456:	81 30       	cpi	r24, 0x01	; 1
35cd3458:	01 f0       	breq	.+0      	; 0x35cd345a <cu_IsKingCastling+0x7fa407a>
35cd345a:	00 c0       	rjmp	.+0      	; 0x35cd345c <cu_IsKingCastling+0x7fa407c>
35cd345c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3460:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3464:	60 e0       	ldi	r22, 0x00	; 0
35cd3466:	8f ef       	ldi	r24, 0xFF	; 255
35cd3468:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd346c:	80 93 00 00 	sts	0x0000, r24
35cd3470:	00 c0       	rjmp	.+0      	; 0x35cd3472 <cu_IsKingCastling+0x7fa4092>
35cd3472:	84 30       	cpi	r24, 0x04	; 4
35cd3474:	01 f4       	brne	.+0      	; 0x35cd3476 <cu_IsKingCastling+0x7fa4096>
35cd3476:	00 c0       	rjmp	.+0      	; 0x35cd3478 <cu_IsKingCastling+0x7fa4098>
35cd3478:	00 f4       	brcc	.+0      	; 0x35cd347a <cu_IsKingCastling+0x7fa409a>
35cd347a:	00 c0       	rjmp	.+0      	; 0x35cd347c <cu_IsKingCastling+0x7fa409c>
35cd347c:	85 30       	cpi	r24, 0x05	; 5
35cd347e:	01 f4       	brne	.+0      	; 0x35cd3480 <cu_IsKingCastling+0x7fa40a0>
35cd3480:	00 c0       	rjmp	.+0      	; 0x35cd3482 <cu_IsKingCastling+0x7fa40a2>
35cd3482:	00 c0       	rjmp	.+0      	; 0x35cd3484 <cu_IsKingCastling+0x7fa40a4>
35cd3484:	80 91 00 00 	lds	r24, 0x0000
35cd3488:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd348c:	80 91 00 00 	lds	r24, 0x0000
35cd3490:	83 30       	cpi	r24, 0x03	; 3
35cd3492:	01 f0       	breq	.+0      	; 0x35cd3494 <cu_IsKingCastling+0x7fa40b4>
35cd3494:	00 c0       	rjmp	.+0      	; 0x35cd3496 <cu_IsKingCastling+0x7fa40b6>
35cd3496:	c0 91 00 00 	lds	r28, 0x0000
35cd349a:	c1 11       	cpse	r28, r1
35cd349c:	00 c0       	rjmp	.+0      	; 0x35cd349e <cu_IsKingCastling+0x7fa40be>
35cd349e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd34a2:	10 92 00 00 	sts	0x0000, r1
35cd34a6:	00 c0       	rjmp	.+0      	; 0x35cd34a8 <cu_IsKingCastling+0x7fa40c8>
35cd34a8:	c1 30       	cpi	r28, 0x01	; 1
35cd34aa:	01 f4       	brne	.+0      	; 0x35cd34ac <cu_IsKingCastling+0x7fa40cc>
35cd34ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd34b0:	c0 93 00 00 	sts	0x0000, r28
35cd34b4:	84 e0       	ldi	r24, 0x04	; 4
35cd34b6:	00 c0       	rjmp	.+0      	; 0x35cd34b8 <cu_IsKingCastling+0x7fa40d8>
35cd34b8:	c2 30       	cpi	r28, 0x02	; 2
35cd34ba:	01 f4       	brne	.+0      	; 0x35cd34bc <cu_IsKingCastling+0x7fa40dc>
35cd34bc:	80 91 00 00 	lds	r24, 0x0000
35cd34c0:	82 30       	cpi	r24, 0x02	; 2
35cd34c2:	00 f4       	brcc	.+0      	; 0x35cd34c4 <cu_IsKingCastling+0x7fa40e4>
35cd34c4:	00 c0       	rjmp	.+0      	; 0x35cd34c6 <cu_IsKingCastling+0x7fa40e6>
35cd34c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd34ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd34ce:	80 91 00 00 	lds	r24, 0x0000
35cd34d2:	82 50       	subi	r24, 0x02	; 2
35cd34d4:	80 93 00 00 	sts	0x0000, r24
35cd34d8:	81 11       	cpse	r24, r1
35cd34da:	00 c0       	rjmp	.+0      	; 0x35cd34dc <cu_IsKingCastling+0x7fa40fc>
35cd34dc:	10 92 00 00 	sts	0x0000, r1
35cd34e0:	00 c0       	rjmp	.+0      	; 0x35cd34e2 <cu_IsKingCastling+0x7fa4102>
35cd34e2:	c3 30       	cpi	r28, 0x03	; 3
35cd34e4:	01 f0       	breq	.+0      	; 0x35cd34e6 <cu_IsKingCastling+0x7fa4106>
35cd34e6:	00 c0       	rjmp	.+0      	; 0x35cd34e8 <cu_IsKingCastling+0x7fa4108>
35cd34e8:	00 c0       	rjmp	.+0      	; 0x35cd34ea <cu_IsKingCastling+0x7fa410a>
35cd34ea:	c0 91 00 00 	lds	r28, 0x0000
35cd34ee:	c1 30       	cpi	r28, 0x01	; 1
35cd34f0:	01 f4       	brne	.+0      	; 0x35cd34f2 <cu_IsKingCastling+0x7fa4112>
35cd34f2:	60 e0       	ldi	r22, 0x00	; 0
35cd34f4:	00 c0       	rjmp	.+0      	; 0x35cd34f6 <cu_IsKingCastling+0x7fa4116>
35cd34f6:	c2 30       	cpi	r28, 0x02	; 2
35cd34f8:	01 f4       	brne	.+0      	; 0x35cd34fa <cu_IsKingCastling+0x7fa411a>
35cd34fa:	61 e0       	ldi	r22, 0x01	; 1
35cd34fc:	80 91 00 00 	lds	r24, 0x0000
35cd3500:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3504:	80 93 00 00 	sts	0x0000, r24
35cd3508:	00 c0       	rjmp	.+0      	; 0x35cd350a <cu_IsKingCastling+0x7fa412a>
35cd350a:	c3 30       	cpi	r28, 0x03	; 3
35cd350c:	01 f0       	breq	.+0      	; 0x35cd350e <cu_IsKingCastling+0x7fa412e>
35cd350e:	00 c0       	rjmp	.+0      	; 0x35cd3510 <cu_IsKingCastling+0x7fa4130>
35cd3510:	80 91 00 00 	lds	r24, 0x0000
35cd3514:	8f 3f       	cpi	r24, 0xFF	; 255
35cd3516:	01 f4       	brne	.+0      	; 0x35cd3518 <cu_IsKingCastling+0x7fa4138>
35cd3518:	10 92 00 00 	sts	0x0000, r1
35cd351c:	00 c0       	rjmp	.+0      	; 0x35cd351e <cu_IsKingCastling+0x7fa413e>
35cd351e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3522:	80 91 00 00 	lds	r24, 0x0000
35cd3526:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd352a:	60 e0       	ldi	r22, 0x00	; 0
35cd352c:	8f ef       	ldi	r24, 0xFF	; 255
35cd352e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3532:	80 93 00 00 	sts	0x0000, r24
35cd3536:	c0 93 00 00 	sts	0x0000, r28
35cd353a:	00 c0       	rjmp	.+0      	; 0x35cd353c <cu_IsKingCastling+0x7fa415c>
35cd353c:	80 91 00 00 	lds	r24, 0x0000
35cd3540:	81 30       	cpi	r24, 0x01	; 1
35cd3542:	01 f4       	brne	.+0      	; 0x35cd3544 <cu_IsKingCastling+0x7fa4164>
35cd3544:	60 e0       	ldi	r22, 0x00	; 0
35cd3546:	00 c0       	rjmp	.+0      	; 0x35cd3548 <cu_IsKingCastling+0x7fa4168>
35cd3548:	82 30       	cpi	r24, 0x02	; 2
35cd354a:	01 f4       	brne	.+0      	; 0x35cd354c <cu_IsKingCastling+0x7fa416c>
35cd354c:	61 e0       	ldi	r22, 0x01	; 1
35cd354e:	80 91 00 00 	lds	r24, 0x0000
35cd3552:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3556:	80 93 00 00 	sts	0x0000, r24
35cd355a:	00 c0       	rjmp	.+0      	; 0x35cd355c <cu_IsKingCastling+0x7fa417c>
35cd355c:	84 30       	cpi	r24, 0x04	; 4
35cd355e:	01 f4       	brne	.+0      	; 0x35cd3560 <cu_IsKingCastling+0x7fa4180>
35cd3560:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3564:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3568:	8f ef       	ldi	r24, 0xFF	; 255
35cd356a:	80 93 00 00 	sts	0x0000, r24
35cd356e:	82 e0       	ldi	r24, 0x02	; 2
35cd3570:	00 c0       	rjmp	.+0      	; 0x35cd3572 <cu_IsKingCastling+0x7fa4192>
35cd3572:	83 30       	cpi	r24, 0x03	; 3
35cd3574:	01 f4       	brne	.+0      	; 0x35cd3576 <cu_IsKingCastling+0x7fa4196>
35cd3576:	60 91 00 00 	lds	r22, 0x0000
35cd357a:	80 91 00 00 	lds	r24, 0x0000
35cd357e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd3582:	80 91 00 00 	lds	r24, 0x0000
35cd3586:	88 23       	and	r24, r24
35cd3588:	01 f0       	breq	.+0      	; 0x35cd358a <cu_IsKingCastling+0x7fa41aa>
35cd358a:	85 e0       	ldi	r24, 0x05	; 5
35cd358c:	00 c0       	rjmp	.+0      	; 0x35cd358e <cu_IsKingCastling+0x7fa41ae>
35cd358e:	84 e0       	ldi	r24, 0x04	; 4
35cd3590:	80 93 00 00 	sts	0x0000, r24
35cd3594:	8f ef       	ldi	r24, 0xFF	; 255
35cd3596:	80 93 00 00 	sts	0x0000, r24
35cd359a:	80 93 00 00 	sts	0x0000, r24
35cd359e:	cf 91       	pop	r28
35cd35a0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
35cd35a4:	82 e0       	ldi	r24, 0x02	; 2
35cd35a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
35cd35aa:	80 91 00 00 	lds	r24, 0x0000
35cd35ae:	88 23       	and	r24, r24
35cd35b0:	01 f0       	breq	.+0      	; 0x35cd35b2 <cu_IsKingCastling+0x7fa41d2>
35cd35b2:	85 e0       	ldi	r24, 0x05	; 5
35cd35b4:	00 c0       	rjmp	.+0      	; 0x35cd35b6 <cu_IsKingCastling+0x7fa41d6>
35cd35b6:	81 e0       	ldi	r24, 0x01	; 1
35cd35b8:	80 93 00 00 	sts	0x0000, r24
35cd35bc:	00 c0       	rjmp	.+0      	; 0x35cd35be <cu_IsKingCastling+0x7fa41de>
35cd35be:	80 91 00 00 	lds	r24, 0x0000
35cd35c2:	88 23       	and	r24, r24
35cd35c4:	01 f0       	breq	.+0      	; 0x35cd35c6 <cu_IsKingCastling+0x7fa41e6>
35cd35c6:	10 92 00 00 	sts	0x0000, r1
35cd35ca:	cf 91       	pop	r28
35cd35cc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
35cd35d0:	cf 91       	pop	r28
35cd35d2:	08 95       	ret

u8g_bitmap.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c3c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000182d  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_DrawHBitmap 0000005c  00000000  00000000  0000249d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_DrawBitmap 0000006c  00000000  00000000  000024f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_DrawHBitmapP 00000060  00000000  00000000  00002565  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_DrawBitmapP 0000006c  00000000  00000000  000025c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_DrawXBM 0000010c  00000000  00000000  00002631  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_DrawXBMP 00000110  00000000  00000000  0000273d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  0000284d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_DrawHBitmap:

00000000 <u8g_DrawHBitmap>:
    } while ( w > 0 );
  }
}

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	1f 92       	push	r1
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	7c 01       	movw	r14, r24
  1c:	36 2f       	mov	r19, r22
  1e:	c4 2e       	mov	r12, r20
  20:	d2 2e       	mov	r13, r18
  22:	58 01       	movw	r10, r16
  24:	dd 20       	and	r13, r13
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_DrawHBitmap+0x28>
  28:	f5 01       	movw	r30, r10
  2a:	01 91       	ld	r16, Z+
  2c:	5f 01       	movw	r10, r30
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	4c 2d       	mov	r20, r12
  32:	63 2f       	mov	r22, r19
  34:	c7 01       	movw	r24, r14
  36:	39 83       	std	Y+1, r19	; 0x01
  u8g_uint_t b;
  b = w;
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
  38:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawHBitmap>
  3c:	da 94       	dec	r13
  3e:	39 81       	ldd	r19, Y+1	; 0x01
  40:	38 5f       	subi	r19, 0xF8	; 248
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_DrawHBitmap+0x44>
  44:	0f 90       	pop	r0

void u8g_DrawXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
  u8g_uint_t b;
  b = w;
  b += 7;
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  b >>= 3;
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	ff 90       	pop	r15
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  {
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
  50:	ef 90       	pop	r14
  52:	df 90       	pop	r13
  54:	cf 90       	pop	r12
}

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  56:	bf 90       	pop	r11
  58:	af 90       	pop	r10
  5a:	08 95       	ret

Disassembly of section .text.u8g_DrawBitmap:

0000005c <u8g_DrawBitmap>:
  5c:	8f 92       	push	r8
  5e:	9f 92       	push	r9
  60:	af 92       	push	r10
  62:	bf 92       	push	r11
  64:	cf 92       	push	r12
  66:	df 92       	push	r13
  68:	ef 92       	push	r14
  6a:	ff 92       	push	r15
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
    x+=8;
  }
  if ( w > 0 )
  {
    d = u8g_pgm_read(bitmap);
    x -= 7;
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	ec 01       	movw	r28, r24
  76:	96 2e       	mov	r9, r22
  78:	b4 2e       	mov	r11, r20
  7a:	a2 2e       	mov	r10, r18
  7c:	d0 2e       	mov	r13, r16
  7e:	22 0f       	add	r18, r18
  80:	22 0f       	add	r18, r18
  82:	22 0f       	add	r18, r18
  84:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  b += 7;
  b >>= 3;
  
  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
    return;
  while( h > 0 )
  88:	88 23       	and	r24, r24
  8a:	01 f0       	breq	.+0      	; 0x8c <u8g_DrawBitmap+0x30>
}

static void u8g_DrawHXBMP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, const u8g_pgm_uint8_t *bitmap)
{
  uint8_t d;
  x+=7;
  8c:	8b 2c       	mov	r8, r11
  8e:	8d 0c       	add	r8, r13
  90:	ca 2c       	mov	r12, r10
  while( w >= 8 )
  92:	d1 2c       	mov	r13, r1
  94:	b8 14       	cp	r11, r8
  {
    u8g_Draw8Pixel(u8g, x, y, 2, u8g_pgm_read(bitmap));
  96:	01 f0       	breq	.+0      	; 0x98 <u8g_DrawBitmap+0x3c>
  98:	87 01       	movw	r16, r14
  9a:	2a 2d       	mov	r18, r10
  9c:	4b 2d       	mov	r20, r11
  9e:	69 2d       	mov	r22, r9
  a0:	ce 01       	movw	r24, r28
  a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  a6:	ec 0c       	add	r14, r12
  a8:	fd 1c       	adc	r15, r13
    bitmap++;
  aa:	b3 94       	inc	r11
  ac:	00 c0       	rjmp	.+0      	; 0xae <u8g_DrawBitmap+0x52>
  ae:	df 91       	pop	r29
    w-= 8;
    x+=8;
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	ff 90       	pop	r15
  b8:	ef 90       	pop	r14
  ba:	df 90       	pop	r13
  }
  if ( w > 0 )
  bc:	cf 90       	pop	r12
  be:	bf 90       	pop	r11
  {
    d = u8g_pgm_read(bitmap);
  c0:	af 90       	pop	r10
    x -= 7;
  c2:	9f 90       	pop	r9
    do
    {
      if ( d & 1 )
  c4:	8f 90       	pop	r8
  c6:	08 95       	ret

Disassembly of section .text.u8g_DrawHBitmapP:

00000124 <u8g_DrawHBitmapP>:
    u8g_DrawHXBMP(u8g, x, y, w, bitmap);
    bitmap += b;
    y++;
    h--;
  }
}
 124:	af 92       	push	r10
 126:	bf 92       	push	r11
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	1f 92       	push	r1
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	7c 01       	movw	r14, r24
 140:	36 2f       	mov	r19, r22
 142:	c4 2e       	mov	r12, r20
 144:	d2 2e       	mov	r13, r18
 146:	58 01       	movw	r10, r16
 148:	dd 20       	and	r13, r13
 14a:	01 f0       	breq	.+0      	; 0x14c <u8g_DrawHBitmapP+0x28>
 14c:	f5 01       	movw	r30, r10
 14e:	04 91       	lpm	r16, Z
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	4c 2d       	mov	r20, r12
 154:	63 2f       	mov	r22, r19
 156:	c7 01       	movw	r24, r14
 158:	39 83       	std	Y+1, r19	; 0x01
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	ff ef       	ldi	r31, 0xFF	; 255
 160:	af 1a       	sub	r10, r31
 162:	bf 0a       	sbc	r11, r31
 164:	da 94       	dec	r13
 166:	39 81       	ldd	r19, Y+1	; 0x01
 168:	38 5f       	subi	r19, 0xF8	; 248
 16a:	00 c0       	rjmp	.+0      	; 0x16c <u8g_DrawHBitmapP+0x48>
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	df 90       	pop	r13
 17c:	cf 90       	pop	r12
 17e:	bf 90       	pop	r11
 180:	af 90       	pop	r10
 182:	08 95       	ret

Disassembly of section .text.u8g_DrawBitmapP:

000002a8 <u8g_DrawBitmapP>:
 2a8:	8f 92       	push	r8
 2aa:	9f 92       	push	r9
 2ac:	af 92       	push	r10
 2ae:	bf 92       	push	r11
 2b0:	cf 92       	push	r12
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	ec 01       	movw	r28, r24
 2c2:	96 2e       	mov	r9, r22
 2c4:	b4 2e       	mov	r11, r20
 2c6:	a2 2e       	mov	r10, r18
 2c8:	d0 2e       	mov	r13, r16
 2ca:	22 0f       	add	r18, r18
 2cc:	22 0f       	add	r18, r18
 2ce:	22 0f       	add	r18, r18
 2d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2d4:	88 23       	and	r24, r24
 2d6:	01 f0       	breq	.+0      	; 0x2d8 <u8g_DrawBitmapP+0x30>
 2d8:	8b 2c       	mov	r8, r11
 2da:	8d 0c       	add	r8, r13
 2dc:	ca 2c       	mov	r12, r10
 2de:	d1 2c       	mov	r13, r1
 2e0:	b8 14       	cp	r11, r8
 2e2:	01 f0       	breq	.+0      	; 0x2e4 <u8g_DrawBitmapP+0x3c>
 2e4:	87 01       	movw	r16, r14
 2e6:	2a 2d       	mov	r18, r10
 2e8:	4b 2d       	mov	r20, r11
 2ea:	69 2d       	mov	r22, r9
 2ec:	ce 01       	movw	r24, r28
 2ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2f2:	ec 0c       	add	r14, r12
 2f4:	fd 1c       	adc	r15, r13
 2f6:	b3 94       	inc	r11
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <u8g_DrawBitmapP+0x52>
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	1f 91       	pop	r17
 300:	0f 91       	pop	r16
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	bf 90       	pop	r11
 30c:	af 90       	pop	r10
 30e:	9f 90       	pop	r9
 310:	8f 90       	pop	r8
 312:	08 95       	ret

Disassembly of section .text.u8g_DrawXBM:

000005bc <u8g_DrawXBM>:
 5bc:	2f 92       	push	r2
 5be:	3f 92       	push	r3
 5c0:	4f 92       	push	r4
 5c2:	5f 92       	push	r5
 5c4:	6f 92       	push	r6
 5c6:	7f 92       	push	r7
 5c8:	8f 92       	push	r8
 5ca:	9f 92       	push	r9
 5cc:	af 92       	push	r10
 5ce:	bf 92       	push	r11
 5d0:	cf 92       	push	r12
 5d2:	df 92       	push	r13
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <u8g_DrawXBM+0x26>
 5e2:	1f 92       	push	r1
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
 5e8:	9b 83       	std	Y+3, r25	; 0x03
 5ea:	8a 83       	std	Y+2, r24	; 0x02
 5ec:	36 2e       	mov	r3, r22
 5ee:	14 2f       	mov	r17, r20
 5f0:	32 2f       	mov	r19, r18
 5f2:	70 2e       	mov	r7, r16
 5f4:	39 83       	std	Y+1, r19	; 0x01
 5f6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5fa:	39 81       	ldd	r19, Y+1	; 0x01
 5fc:	88 23       	and	r24, r24
 5fe:	01 f4       	brne	.+0      	; 0x600 <u8g_DrawXBM+0x44>
 600:	00 c0       	rjmp	.+0      	; 0x602 <u8g_DrawXBM+0x46>
 602:	87 e0       	ldi	r24, 0x07	; 7
 604:	83 0f       	add	r24, r19
 606:	86 95       	lsr	r24
 608:	86 95       	lsr	r24
 60a:	86 95       	lsr	r24
 60c:	a8 2e       	mov	r10, r24
 60e:	b1 2c       	mov	r11, r1
 610:	71 0e       	add	r7, r17
 612:	27 e0       	ldi	r18, 0x07	; 7
 614:	32 0e       	add	r3, r18
 616:	83 2f       	mov	r24, r19
 618:	86 95       	lsr	r24
 61a:	86 95       	lsr	r24
 61c:	86 95       	lsr	r24
 61e:	88 2e       	mov	r8, r24
 620:	91 2c       	mov	r9, r1
 622:	e3 2d       	mov	r30, r3
 624:	98 e0       	ldi	r25, 0x08	; 8
 626:	89 9f       	mul	r24, r25
 628:	e0 0d       	add	r30, r0
 62a:	11 24       	eor	r1, r1
 62c:	99 ef       	ldi	r25, 0xF9	; 249
 62e:	69 2e       	mov	r6, r25
 630:	6e 0e       	add	r6, r30
 632:	53 2c       	mov	r5, r3
 634:	53 0e       	add	r5, r19
 636:	37 70       	andi	r19, 0x07	; 7
 638:	43 2e       	mov	r4, r19
 63a:	29 ef       	ldi	r18, 0xF9	; 249
 63c:	22 2e       	mov	r2, r18
 63e:	23 0e       	add	r2, r19
 640:	2e 0e       	add	r2, r30
 642:	17 15       	cp	r17, r7
 644:	01 f0       	breq	.+0      	; 0x646 <u8g_DrawXBM+0x8a>
 646:	67 01       	movw	r12, r14
 648:	33 2d       	mov	r19, r3
 64a:	85 2d       	mov	r24, r5
 64c:	83 1b       	sub	r24, r19
 64e:	88 30       	cpi	r24, 0x08	; 8
 650:	00 f0       	brcs	.+0      	; 0x652 <u8g_DrawXBM+0x96>
 652:	f6 01       	movw	r30, r12
 654:	01 91       	ld	r16, Z+
 656:	6f 01       	movw	r12, r30
 658:	22 e0       	ldi	r18, 0x02	; 2
 65a:	41 2f       	mov	r20, r17
 65c:	63 2f       	mov	r22, r19
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	9b 81       	ldd	r25, Y+3	; 0x03
 662:	39 83       	std	Y+1, r19	; 0x01
 664:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 668:	39 81       	ldd	r19, Y+1	; 0x01
 66a:	38 5f       	subi	r19, 0xF8	; 248
 66c:	00 c0       	rjmp	.+0      	; 0x66e <u8g_DrawXBM+0xb2>
 66e:	f7 01       	movw	r30, r14
 670:	e8 0d       	add	r30, r8
 672:	f9 1d       	adc	r31, r9
 674:	44 20       	and	r4, r4
 676:	01 f0       	breq	.+0      	; 0x678 <u8g_DrawXBM+0xbc>
 678:	c0 80       	ld	r12, Z
 67a:	d6 2c       	mov	r13, r6
 67c:	c0 fe       	sbrs	r12, 0
 67e:	00 c0       	rjmp	.+0      	; 0x680 <u8g_DrawXBM+0xc4>
 680:	41 2f       	mov	r20, r17
 682:	6d 2d       	mov	r22, r13
 684:	8a 81       	ldd	r24, Y+2	; 0x02
 686:	9b 81       	ldd	r25, Y+3	; 0x03
 688:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 68c:	d3 94       	inc	r13
 68e:	c6 94       	lsr	r12
 690:	2d 10       	cpse	r2, r13
 692:	00 c0       	rjmp	.+0      	; 0x694 <u8g_DrawXBM+0xd8>
 694:	ea 0c       	add	r14, r10
 696:	fb 1c       	adc	r15, r11
 698:	1f 5f       	subi	r17, 0xFF	; 255
 69a:	00 c0       	rjmp	.+0      	; 0x69c <u8g_DrawXBM+0xe0>
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	bf 90       	pop	r11
 6b4:	af 90       	pop	r10
 6b6:	9f 90       	pop	r9
 6b8:	8f 90       	pop	r8
 6ba:	7f 90       	pop	r7
 6bc:	6f 90       	pop	r6
 6be:	5f 90       	pop	r5
 6c0:	4f 90       	pop	r4
 6c2:	3f 90       	pop	r3
 6c4:	2f 90       	pop	r2
 6c6:	08 95       	ret

Disassembly of section .text.u8g_DrawXBMP:

00000c84 <u8g_DrawXBMP>:
 c84:	2f 92       	push	r2
 c86:	3f 92       	push	r3
 c88:	4f 92       	push	r4
 c8a:	5f 92       	push	r5
 c8c:	6f 92       	push	r6
 c8e:	7f 92       	push	r7
 c90:	8f 92       	push	r8
 c92:	9f 92       	push	r9
 c94:	af 92       	push	r10
 c96:	bf 92       	push	r11
 c98:	cf 92       	push	r12
 c9a:	df 92       	push	r13
 c9c:	ef 92       	push	r14
 c9e:	ff 92       	push	r15
 ca0:	0f 93       	push	r16
 ca2:	1f 93       	push	r17
 ca4:	cf 93       	push	r28
 ca6:	df 93       	push	r29
 ca8:	00 d0       	rcall	.+0      	; 0xcaa <u8g_DrawXBMP+0x26>
 caa:	1f 92       	push	r1
 cac:	cd b7       	in	r28, 0x3d	; 61
 cae:	de b7       	in	r29, 0x3e	; 62
 cb0:	9b 83       	std	Y+3, r25	; 0x03
 cb2:	8a 83       	std	Y+2, r24	; 0x02
 cb4:	36 2e       	mov	r3, r22
 cb6:	14 2f       	mov	r17, r20
 cb8:	32 2f       	mov	r19, r18
 cba:	70 2e       	mov	r7, r16
 cbc:	39 83       	std	Y+1, r19	; 0x01
 cbe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 cc2:	39 81       	ldd	r19, Y+1	; 0x01
 cc4:	88 23       	and	r24, r24
 cc6:	01 f4       	brne	.+0      	; 0xcc8 <u8g_DrawXBMP+0x44>
 cc8:	00 c0       	rjmp	.+0      	; 0xcca <u8g_DrawXBMP+0x46>
 cca:	87 e0       	ldi	r24, 0x07	; 7
 ccc:	83 0f       	add	r24, r19
 cce:	86 95       	lsr	r24
 cd0:	86 95       	lsr	r24
 cd2:	86 95       	lsr	r24
 cd4:	a8 2e       	mov	r10, r24
 cd6:	b1 2c       	mov	r11, r1
 cd8:	71 0e       	add	r7, r17
 cda:	27 e0       	ldi	r18, 0x07	; 7
 cdc:	32 0e       	add	r3, r18
 cde:	83 2f       	mov	r24, r19
 ce0:	86 95       	lsr	r24
 ce2:	86 95       	lsr	r24
 ce4:	86 95       	lsr	r24
 ce6:	88 2e       	mov	r8, r24
 ce8:	91 2c       	mov	r9, r1
 cea:	e3 2d       	mov	r30, r3
 cec:	98 e0       	ldi	r25, 0x08	; 8
 cee:	89 9f       	mul	r24, r25
 cf0:	e0 0d       	add	r30, r0
 cf2:	11 24       	eor	r1, r1
 cf4:	49 ef       	ldi	r20, 0xF9	; 249
 cf6:	64 2e       	mov	r6, r20
 cf8:	6e 0e       	add	r6, r30
 cfa:	53 2c       	mov	r5, r3
 cfc:	53 0e       	add	r5, r19
 cfe:	37 70       	andi	r19, 0x07	; 7
 d00:	43 2e       	mov	r4, r19
 d02:	59 ef       	ldi	r21, 0xF9	; 249
 d04:	25 2e       	mov	r2, r21
 d06:	23 0e       	add	r2, r19
 d08:	2e 0e       	add	r2, r30
 d0a:	17 15       	cp	r17, r7
 d0c:	01 f0       	breq	.+0      	; 0xd0e <u8g_DrawXBMP+0x8a>
 d0e:	67 01       	movw	r12, r14
 d10:	33 2d       	mov	r19, r3
 d12:	85 2d       	mov	r24, r5
 d14:	83 1b       	sub	r24, r19
 d16:	88 30       	cpi	r24, 0x08	; 8
 d18:	00 f0       	brcs	.+0      	; 0xd1a <u8g_DrawXBMP+0x96>
 d1a:	f6 01       	movw	r30, r12
 d1c:	04 91       	lpm	r16, Z
 d1e:	22 e0       	ldi	r18, 0x02	; 2
 d20:	41 2f       	mov	r20, r17
 d22:	63 2f       	mov	r22, r19
 d24:	8a 81       	ldd	r24, Y+2	; 0x02
 d26:	9b 81       	ldd	r25, Y+3	; 0x03
 d28:	39 83       	std	Y+1, r19	; 0x01
 d2a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 d2e:	ff ef       	ldi	r31, 0xFF	; 255
 d30:	cf 1a       	sub	r12, r31
 d32:	df 0a       	sbc	r13, r31
 d34:	39 81       	ldd	r19, Y+1	; 0x01
 d36:	38 5f       	subi	r19, 0xF8	; 248
 d38:	00 c0       	rjmp	.+0      	; 0xd3a <u8g_DrawXBMP+0xb6>
 d3a:	f7 01       	movw	r30, r14
 d3c:	e8 0d       	add	r30, r8
 d3e:	f9 1d       	adc	r31, r9
 d40:	44 20       	and	r4, r4
 d42:	01 f0       	breq	.+0      	; 0xd44 <u8g_DrawXBMP+0xc0>
 d44:	c4 90       	lpm	r12, Z
 d46:	d6 2c       	mov	r13, r6
 d48:	c0 fe       	sbrs	r12, 0
 d4a:	00 c0       	rjmp	.+0      	; 0xd4c <u8g_DrawXBMP+0xc8>
 d4c:	41 2f       	mov	r20, r17
 d4e:	6d 2d       	mov	r22, r13
 d50:	8a 81       	ldd	r24, Y+2	; 0x02
 d52:	9b 81       	ldd	r25, Y+3	; 0x03
 d54:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 d58:	d3 94       	inc	r13
 d5a:	c6 94       	lsr	r12
 d5c:	2d 10       	cpse	r2, r13
 d5e:	00 c0       	rjmp	.+0      	; 0xd60 <u8g_DrawXBMP+0xdc>
 d60:	ea 0c       	add	r14, r10
 d62:	fb 1c       	adc	r15, r11
 d64:	1f 5f       	subi	r17, 0xFF	; 255
 d66:	00 c0       	rjmp	.+0      	; 0xd68 <u8g_DrawXBMP+0xe4>
 d68:	0f 90       	pop	r0
 d6a:	0f 90       	pop	r0
 d6c:	0f 90       	pop	r0
 d6e:	df 91       	pop	r29
 d70:	cf 91       	pop	r28
 d72:	1f 91       	pop	r17
 d74:	0f 91       	pop	r16
 d76:	ff 90       	pop	r15
 d78:	ef 90       	pop	r14
 d7a:	df 90       	pop	r13
 d7c:	cf 90       	pop	r12
 d7e:	bf 90       	pop	r11
 d80:	af 90       	pop	r10
 d82:	9f 90       	pop	r9
 d84:	8f 90       	pop	r8
 d86:	7f 90       	pop	r7
 d88:	6f 90       	pop	r6
 d8a:	5f 90       	pop	r5
 d8c:	4f 90       	pop	r4
 d8e:	3f 90       	pop	r3
 d90:	2f 90       	pop	r2
 d92:	08 95       	ret

u8g_circle.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bdc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001847  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_draw_circle_section 000000b2  00000000  00000000  00002457  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_draw_disc_section 000000ca  00000000  00000000  00002509  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_draw_circle 00000080  00000000  00000000  000025d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_DrawCircle 0000004e  00000000  00000000  00002653  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_draw_disc 00000080  00000000  00000000  000026a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_DrawDisc 0000004e  00000000  00000000  00002721  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  0000276f  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_draw_circle_section:

00000000 <u8g_draw_circle_section>:
    u8g_draw_disc_section(u8g, x, y, x0, y0, option);    
  }
}

void u8g_DrawDisc(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rad, uint8_t option)
{
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	d6 2e       	mov	r13, r22
  12:	14 2f       	mov	r17, r20
  14:	f2 2e       	mov	r15, r18
  16:	e0 fe       	sbrs	r14, 0
  /* check for bounding box */
  {
    u8g_uint_t radp, radp2;
    
    radp = rad;
    radp++;
  18:	00 c0       	rjmp	.+0      	; 0x1a <u8g_draw_circle_section+0x1a>
  1a:	40 2f       	mov	r20, r16
    radp2 = radp;
    radp2 *= 2;
  1c:	41 1b       	sub	r20, r17
  1e:	62 2f       	mov	r22, r18
    
    if ( u8g_IsBBXIntersection(u8g, x0-radp, y0-radp, radp2, radp2) == 0)
  20:	6d 0d       	add	r22, r13
  22:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  26:	40 2f       	mov	r20, r16
  28:	4d 19       	sub	r20, r13
  2a:	61 2f       	mov	r22, r17
  2c:	6f 0d       	add	r22, r15
  2e:	ce 01       	movw	r24, r28
      return;    
  }
  
  /* draw disc */
  u8g_draw_disc(u8g, x0, y0, rad, option);
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  34:	e1 fe       	sbrs	r14, 1
  36:	00 c0       	rjmp	.+0      	; 0x38 <u8g_draw_circle_section+0x38>
  38:	40 2f       	mov	r20, r16
  3a:	41 1b       	sub	r20, r17
  3c:	6f 2d       	mov	r22, r15
}
  3e:	6d 19       	sub	r22, r13
  40:	ce 01       	movw	r24, r28
  42:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  46:	40 2f       	mov	r20, r16
  48:	4d 19       	sub	r20, r13
  4a:	6f 2d       	mov	r22, r15
  4c:	61 1b       	sub	r22, r17
  4e:	ce 01       	movw	r24, r28
  50:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  54:	e3 fe       	sbrs	r14, 3
  56:	00 c0       	rjmp	.+0      	; 0x58 <u8g_draw_circle_section+0x58>
  58:	40 2f       	mov	r20, r16
  5a:	41 0f       	add	r20, r17
  5c:	6f 2d       	mov	r22, r15
  5e:	6d 0d       	add	r22, r13
  60:	ce 01       	movw	r24, r28
  62:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  66:	40 2f       	mov	r20, r16
  68:	4d 0d       	add	r20, r13
  6a:	61 2f       	mov	r22, r17
  6c:	6f 0d       	add	r22, r15
  6e:	ce 01       	movw	r24, r28
  70:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  74:	e2 fe       	sbrs	r14, 2
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_draw_circle_section+0x78>
  78:	40 2f       	mov	r20, r16
  7a:	41 0f       	add	r20, r17
  7c:	6f 2d       	mov	r22, r15
  7e:	6d 19       	sub	r22, r13
  80:	ce 01       	movw	r24, r28
  82:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_circle_section>
  86:	40 2f       	mov	r20, r16
  88:	4d 0d       	add	r20, r13
  8a:	6f 2d       	mov	r22, r15
  8c:	61 1b       	sub	r22, r17
  8e:	ce 01       	movw	r24, r28
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	ff 90       	pop	r15
  9a:	ef 90       	pop	r14
  9c:	df 90       	pop	r13
  9e:	0c 94 00 00 	jmp	0	; 0x0 <u8g_draw_circle_section>
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	1f 91       	pop	r17
  a8:	0f 91       	pop	r16
  aa:	ff 90       	pop	r15
  ac:	ef 90       	pop	r14
  ae:	df 90       	pop	r13
  b0:	08 95       	ret

Disassembly of section .text.u8g_draw_disc_section:

000000b2 <u8g_draw_disc_section>:
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
  c2:	f6 2e       	mov	r15, r22
  c4:	14 2f       	mov	r17, r20
  c6:	d2 2e       	mov	r13, r18
  c8:	e0 fe       	sbrs	r14, 0
  ca:	00 c0       	rjmp	.+0      	; 0xcc <u8g_draw_disc_section+0x1a>
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	24 0f       	add	r18, r20
  d0:	40 2f       	mov	r20, r16
  d2:	41 1b       	sub	r20, r17
  d4:	6d 2d       	mov	r22, r13
  d6:	6f 0d       	add	r22, r15
  d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	2f 0d       	add	r18, r15
  e0:	40 2f       	mov	r20, r16
  e2:	4f 19       	sub	r20, r15
  e4:	61 2f       	mov	r22, r17
  e6:	6d 0d       	add	r22, r13
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ee:	e1 fe       	sbrs	r14, 1
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <u8g_draw_disc_section+0x40>
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	21 0f       	add	r18, r17
  f6:	40 2f       	mov	r20, r16
  f8:	41 1b       	sub	r20, r17
  fa:	6d 2d       	mov	r22, r13
  fc:	6f 19       	sub	r22, r15
  fe:	ce 01       	movw	r24, r28
 100:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	2f 0d       	add	r18, r15
 108:	40 2f       	mov	r20, r16
 10a:	4f 19       	sub	r20, r15
 10c:	6d 2d       	mov	r22, r13
 10e:	61 1b       	sub	r22, r17
 110:	ce 01       	movw	r24, r28
 112:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 116:	e3 fe       	sbrs	r14, 3
 118:	00 c0       	rjmp	.+0      	; 0x11a <u8g_draw_disc_section+0x68>
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	21 0f       	add	r18, r17
 11e:	40 2f       	mov	r20, r16
 120:	6d 2d       	mov	r22, r13
 122:	6f 0d       	add	r22, r15
 124:	ce 01       	movw	r24, r28
 126:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	2f 0d       	add	r18, r15
 12e:	40 2f       	mov	r20, r16
 130:	61 2f       	mov	r22, r17
 132:	6d 0d       	add	r22, r13
 134:	ce 01       	movw	r24, r28
 136:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 13a:	e2 fe       	sbrs	r14, 2
 13c:	00 c0       	rjmp	.+0      	; 0x13e <u8g_draw_disc_section+0x8c>
 13e:	21 e0       	ldi	r18, 0x01	; 1
 140:	21 0f       	add	r18, r17
 142:	6d 2d       	mov	r22, r13
 144:	6f 19       	sub	r22, r15
 146:	40 2f       	mov	r20, r16
 148:	ce 01       	movw	r24, r28
 14a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	2f 0d       	add	r18, r15
 152:	6d 2d       	mov	r22, r13
 154:	61 1b       	sub	r22, r17
 156:	40 2f       	mov	r20, r16
 158:	ce 01       	movw	r24, r28
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	ff 90       	pop	r15
 164:	ef 90       	pop	r14
 166:	df 90       	pop	r13
 168:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	08 95       	ret

Disassembly of section .text.u8g_draw_circle:

0000022e <u8g_draw_circle>:
 22e:	9f 92       	push	r9
 230:	af 92       	push	r10
 232:	bf 92       	push	r11
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
 246:	b6 2e       	mov	r11, r22
 248:	a4 2e       	mov	r10, r20
 24a:	12 2f       	mov	r17, r18
 24c:	90 2e       	mov	r9, r16
 24e:	ff 24       	eor	r15, r15
 250:	f3 94       	inc	r15
 252:	f2 1a       	sub	r15, r18
 254:	c2 2e       	mov	r12, r18
 256:	c1 94       	neg	r12
 258:	cc 0c       	add	r12, r12
 25a:	e0 2e       	mov	r14, r16
 25c:	04 2f       	mov	r16, r20
 25e:	26 2f       	mov	r18, r22
 260:	41 2f       	mov	r20, r17
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 268:	d1 2c       	mov	r13, r1
 26a:	d1 16       	cp	r13, r17
 26c:	00 f4       	brcc	.+0      	; 0x26e <u8g_draw_circle+0x40>
 26e:	f7 fc       	sbrc	r15, 7
 270:	00 c0       	rjmp	.+0      	; 0x272 <u8g_draw_circle+0x44>
 272:	11 50       	subi	r17, 0x01	; 1
 274:	c3 94       	inc	r12
 276:	c3 94       	inc	r12
 278:	fc 0c       	add	r15, r12
 27a:	d3 94       	inc	r13
 27c:	8d 2d       	mov	r24, r13
 27e:	88 0f       	add	r24, r24
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	f8 0e       	add	r15, r24
 284:	e9 2c       	mov	r14, r9
 286:	0a 2d       	mov	r16, r10
 288:	2b 2d       	mov	r18, r11
 28a:	41 2f       	mov	r20, r17
 28c:	6d 2d       	mov	r22, r13
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 294:	00 c0       	rjmp	.+0      	; 0x296 <u8g_draw_circle+0x68>
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	af 90       	pop	r10
 2aa:	9f 90       	pop	r9
 2ac:	08 95       	ret

Disassembly of section .text.u8g_DrawCircle:

000004dc <u8g_DrawCircle>:
 4dc:	df 92       	push	r13
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	16 2f       	mov	r17, r22
 4ee:	f4 2e       	mov	r15, r20
 4f0:	e2 2e       	mov	r14, r18
 4f2:	d0 2e       	mov	r13, r16
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	82 0f       	add	r24, r18
 4f8:	28 2f       	mov	r18, r24
 4fa:	22 0f       	add	r18, r18
 4fc:	48 1b       	sub	r20, r24
 4fe:	68 1b       	sub	r22, r24
 500:	02 2f       	mov	r16, r18
 502:	ce 01       	movw	r24, r28
 504:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 508:	88 23       	and	r24, r24
 50a:	01 f0       	breq	.+0      	; 0x50c <u8g_DrawCircle+0x30>
 50c:	0d 2d       	mov	r16, r13
 50e:	2e 2d       	mov	r18, r14
 510:	4f 2d       	mov	r20, r15
 512:	61 2f       	mov	r22, r17
 514:	ce 01       	movw	r24, r28
 516:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	08 95       	ret

Disassembly of section .text.u8g_draw_disc:

00000a06 <u8g_draw_disc>:
 a06:	9f 92       	push	r9
 a08:	af 92       	push	r10
 a0a:	bf 92       	push	r11
 a0c:	cf 92       	push	r12
 a0e:	df 92       	push	r13
 a10:	ef 92       	push	r14
 a12:	ff 92       	push	r15
 a14:	0f 93       	push	r16
 a16:	1f 93       	push	r17
 a18:	cf 93       	push	r28
 a1a:	df 93       	push	r29
 a1c:	ec 01       	movw	r28, r24
 a1e:	b6 2e       	mov	r11, r22
 a20:	a4 2e       	mov	r10, r20
 a22:	12 2f       	mov	r17, r18
 a24:	90 2e       	mov	r9, r16
 a26:	ff 24       	eor	r15, r15
 a28:	f3 94       	inc	r15
 a2a:	f2 1a       	sub	r15, r18
 a2c:	c2 2e       	mov	r12, r18
 a2e:	c1 94       	neg	r12
 a30:	cc 0c       	add	r12, r12
 a32:	e0 2e       	mov	r14, r16
 a34:	04 2f       	mov	r16, r20
 a36:	26 2f       	mov	r18, r22
 a38:	41 2f       	mov	r20, r17
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a40:	d1 2c       	mov	r13, r1
 a42:	d1 16       	cp	r13, r17
 a44:	00 f4       	brcc	.+0      	; 0xa46 <u8g_draw_disc+0x40>
 a46:	f7 fc       	sbrc	r15, 7
 a48:	00 c0       	rjmp	.+0      	; 0xa4a <u8g_draw_disc+0x44>
 a4a:	11 50       	subi	r17, 0x01	; 1
 a4c:	c3 94       	inc	r12
 a4e:	c3 94       	inc	r12
 a50:	fc 0c       	add	r15, r12
 a52:	d3 94       	inc	r13
 a54:	8d 2d       	mov	r24, r13
 a56:	88 0f       	add	r24, r24
 a58:	8f 5f       	subi	r24, 0xFF	; 255
 a5a:	f8 0e       	add	r15, r24
 a5c:	e9 2c       	mov	r14, r9
 a5e:	0a 2d       	mov	r16, r10
 a60:	2b 2d       	mov	r18, r11
 a62:	41 2f       	mov	r20, r17
 a64:	6d 2d       	mov	r22, r13
 a66:	ce 01       	movw	r24, r28
 a68:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a6c:	00 c0       	rjmp	.+0      	; 0xa6e <u8g_draw_disc+0x68>
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	ff 90       	pop	r15
 a78:	ef 90       	pop	r14
 a7a:	df 90       	pop	r13
 a7c:	cf 90       	pop	r12
 a7e:	bf 90       	pop	r11
 a80:	af 90       	pop	r10
 a82:	9f 90       	pop	r9
 a84:	08 95       	ret

Disassembly of section .text.u8g_DrawDisc:

0000148c <u8g_DrawDisc>:
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	ec 01       	movw	r28, r24
    149c:	16 2f       	mov	r17, r22
    149e:	f4 2e       	mov	r15, r20
    14a0:	e2 2e       	mov	r14, r18
    14a2:	d0 2e       	mov	r13, r16
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	82 0f       	add	r24, r18
    14a8:	28 2f       	mov	r18, r24
    14aa:	22 0f       	add	r18, r18
    14ac:	48 1b       	sub	r20, r24
    14ae:	68 1b       	sub	r22, r24
    14b0:	02 2f       	mov	r16, r18
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    14b8:	88 23       	and	r24, r24
    14ba:	01 f0       	breq	.+0      	; 0x14bc <u8g_DrawDisc+0x30>
    14bc:	0d 2d       	mov	r16, r13
    14be:	2e 2d       	mov	r18, r14
    14c0:	4f 2d       	mov	r20, r15
    14c2:	61 2f       	mov	r22, r17
    14c4:	ce 01       	movw	r24, r28
    14c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	1f 91       	pop	r17
    14d0:	0f 91       	pop	r16
    14d2:	ff 90       	pop	r15
    14d4:	ef 90       	pop	r14
    14d6:	df 90       	pop	r13
    14d8:	08 95       	ret

u8g_clip.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000744  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001640  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_IsBBXIntersection 00000044  00000000  00000000  00001db8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_IsBBXIntersection:

00000000 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
   4:	01 50       	subi	r16, 0x01	; 1
  tmp--;
   6:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
   8:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
   a:	96 a9       	ldd	r25, Z+54	; 0x36
   c:	94 17       	cp	r25, r20
   e:	00 f0       	brcs	.+0      	; 0x10 <u8g_IsBBXIntersection+0x10>
  {
    if ( v1 >= a0 )
  10:	08 17       	cp	r16, r24
  12:	00 f4       	brcc	.+0      	; 0x14 <u8g_IsBBXIntersection+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <u8g_IsBBXIntersection+0x16>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
  16:	08 17       	cp	r16, r24
  18:	00 f0       	brcs	.+0      	; 0x1a <u8g_IsBBXIntersection+0x1a>
    {
      if ( v0 > v1 )
  1a:	04 17       	cp	r16, r20
  1c:	00 f4       	brcc	.+0      	; 0x1e <u8g_IsBBXIntersection+0x1e>
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  1e:	21 50       	subi	r18, 0x01	; 1
  tmp--;
  20:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
  22:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  24:	95 a9       	ldd	r25, Z+53	; 0x35
  26:	96 17       	cp	r25, r22
  28:	00 f4       	brcc	.+0      	; 0x2a <u8g_IsBBXIntersection+0x2a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
  2a:	28 17       	cp	r18, r24
  2c:	00 f4       	brcc	.+0      	; 0x2e <u8g_IsBBXIntersection+0x2e>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_IsBBXIntersection+0x32>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
  32:	28 17       	cp	r18, r24
  34:	00 f4       	brcc	.+0      	; 0x36 <u8g_IsBBXIntersection+0x36>
  }
  else
  {
    if ( v1 >= a0 )
    {
      if ( v0 > v1 )
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	26 17       	cp	r18, r22
  3a:	00 f0       	brcs	.+0      	; 0x3c <u8g_IsBBXIntersection+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <u8g_IsBBXIntersection+0x3e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
  3e:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
  40:	0f 91       	pop	r16
  42:	08 95       	ret

u8g_com_api.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a50  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001865  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_InitCom 00000012  00000000  00000000  000022e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_StopCom 00000014  00000000  00000000  000022fb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_SetChipSelect 00000012  00000000  00000000  0000230f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.u8g_SetResetLow 00000014  00000000  00000000  00002321  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.u8g_SetResetHigh 00000014  00000000  00000000  00002335  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.u8g_SetAddress 00000012  00000000  00000000  00002349  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.u8g_WriteByte 00000012  00000000  00000000  0000235b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.u8g_WriteSequence 0000000e  00000000  00000000  0000236d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.u8g_WriteSequenceP 0000000e  00000000  00000000  0000237b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.u8g_WriteEscSeqP 000000cc  00000000  00000000  00002389  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .comment      00000022  00000000  00000000  00002455  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_InitCom:

00000000 <u8g_InitCom>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
   0:	db 01       	movw	r26, r22
   2:	14 96       	adiw	r26, 0x04	; 4
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	15 97       	sbiw	r26, 0x05	; 5
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	30 e0       	ldi	r19, 0x00	; 0
   e:	61 e0       	ldi	r22, 0x01	; 1
  10:	09 94       	ijmp

Disassembly of section .text.u8g_StopCom:

00000012 <u8g_StopCom>:
  12:	db 01       	movw	r26, r22
  14:	14 96       	adiw	r26, 0x04	; 4
  16:	ed 91       	ld	r30, X+
  18:	fc 91       	ld	r31, X
  1a:	15 97       	sbiw	r26, 0x05	; 5
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	30 e0       	ldi	r19, 0x00	; 0
  uint8_t is_escape = 0;
  20:	40 e0       	ldi	r20, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	09 94       	ijmp

Disassembly of section .text.u8g_SetChipSelect:

00000038 <u8g_SetChipSelect>:
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
  38:	db 01       	movw	r26, r22
  3a:	14 96       	adiw	r26, 0x04	; 4
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
  3c:	ed 91       	ld	r30, X+
  3e:	fc 91       	ld	r31, X
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else if ( value == 254 )
  40:	15 97       	sbiw	r26, 0x05	; 5
  42:	20 e0       	ldi	r18, 0x00	; 0
      {
        break;
      }
      else if ( value >= 0x0f0 )
  44:	30 e0       	ldi	r19, 0x00	; 0
  46:	63 e0       	ldi	r22, 0x03	; 3
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
  48:	09 94       	ijmp

Disassembly of section .text.u8g_SetResetLow:

00000082 <u8g_SetResetLow>:
      {
        u8g_SetResetLow(u8g, dev);
        value &= 0x0f;
        value <<= 4;
        value+=2;
        u8g_Delay(value);
  82:	db 01       	movw	r26, r22
  84:	14 96       	adiw	r26, 0x04	; 4
  86:	ed 91       	ld	r30, X+
        u8g_SetResetHigh(u8g, dev);
  88:	fc 91       	ld	r31, X
  8a:	15 97       	sbiw	r26, 0x05	; 5
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
        u8g_Delay(value);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	09 94       	ijmp

Disassembly of section .text.u8g_SetResetHigh:

00000118 <u8g_SetResetHigh>:
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
}
 118:	db 01       	movw	r26, r22
 11a:	14 96       	adiw	r26, 0x04	; 4
 11c:	ed 91       	ld	r30, X+
 11e:	fc 91       	ld	r31, X
 120:	15 97       	sbiw	r26, 0x05	; 5
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	41 e0       	ldi	r20, 0x01	; 1
 128:	64 e0       	ldi	r22, 0x04	; 4
 12a:	09 94       	ijmp

Disassembly of section .text.u8g_SetAddress:

00000244 <u8g_SetAddress>:
 244:	db 01       	movw	r26, r22
 246:	14 96       	adiw	r26, 0x04	; 4
 248:	ed 91       	ld	r30, X+
 24a:	fc 91       	ld	r31, X
 24c:	15 97       	sbiw	r26, 0x05	; 5
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	09 94       	ijmp

Disassembly of section .text.u8g_WriteByte:

0000049a <u8g_WriteByte>:
 49a:	db 01       	movw	r26, r22
 49c:	14 96       	adiw	r26, 0x04	; 4
 49e:	ed 91       	ld	r30, X+
 4a0:	fc 91       	ld	r31, X
 4a2:	15 97       	sbiw	r26, 0x05	; 5
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	09 94       	ijmp

Disassembly of section .text.u8g_WriteSequence:

00000946 <u8g_WriteSequence>:
 946:	db 01       	movw	r26, r22
 948:	14 96       	adiw	r26, 0x04	; 4
 94a:	ed 91       	ld	r30, X+
 94c:	fc 91       	ld	r31, X
 94e:	15 97       	sbiw	r26, 0x05	; 5
 950:	66 e0       	ldi	r22, 0x06	; 6
 952:	09 94       	ijmp

Disassembly of section .text.u8g_WriteSequenceP:

0000129a <u8g_WriteSequenceP>:
    129a:	db 01       	movw	r26, r22
    129c:	14 96       	adiw	r26, 0x04	; 4
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	15 97       	sbiw	r26, 0x05	; 5
    12a4:	67 e0       	ldi	r22, 0x07	; 7
    12a6:	09 94       	ijmp

Disassembly of section .text.u8g_WriteEscSeqP:

00002542 <u8g_WriteEscSeqP>:
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	1f 92       	push	r1
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	5c 01       	movw	r10, r24
    255e:	8b 01       	movw	r16, r22
    2560:	7a 01       	movw	r14, r20
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	f7 01       	movw	r30, r14
    2566:	44 91       	lpm	r20, Z
    2568:	81 11       	cpse	r24, r1
    256a:	00 c0       	rjmp	.+0      	; 0x256c <u8g_WriteEscSeqP+0x2a>
    256c:	4f 3f       	cpi	r20, 0xFF	; 255
    256e:	01 f0       	breq	.+0      	; 0x2570 <u8g_WriteEscSeqP+0x2e>
    2570:	b8 01       	movw	r22, r16
    2572:	c5 01       	movw	r24, r10
    2574:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2578:	81 11       	cpse	r24, r1
    257a:	00 c0       	rjmp	.+0      	; 0x257c <u8g_WriteEscSeqP+0x3a>
    257c:	00 c0       	rjmp	.+0      	; 0x257e <u8g_WriteEscSeqP+0x3c>
    257e:	4f 3f       	cpi	r20, 0xFF	; 255
    2580:	01 f0       	breq	.+0      	; 0x2582 <u8g_WriteEscSeqP+0x40>
    2582:	4e 3f       	cpi	r20, 0xFE	; 254
    2584:	01 f0       	breq	.+0      	; 0x2586 <u8g_WriteEscSeqP+0x44>
    2586:	40 3f       	cpi	r20, 0xF0	; 240
    2588:	00 f4       	brcc	.+0      	; 0x258a <u8g_WriteEscSeqP+0x48>
    258a:	40 3e       	cpi	r20, 0xE0	; 224
    258c:	00 f0       	brcs	.+0      	; 0x258e <u8g_WriteEscSeqP+0x4c>
    258e:	4f 70       	andi	r20, 0x0F	; 15
    2590:	b8 01       	movw	r22, r16
    2592:	c5 01       	movw	r24, r10
    2594:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2598:	00 c0       	rjmp	.+0      	; 0x259a <u8g_WriteEscSeqP+0x58>
    259a:	40 3d       	cpi	r20, 0xD0	; 208
    259c:	00 f0       	brcs	.+0      	; 0x259e <u8g_WriteEscSeqP+0x5c>
    259e:	4f 70       	andi	r20, 0x0F	; 15
    25a0:	b8 01       	movw	r22, r16
    25a2:	c5 01       	movw	r24, r10
    25a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    25a8:	00 c0       	rjmp	.+0      	; 0x25aa <u8g_WriteEscSeqP+0x68>
    25aa:	40 3c       	cpi	r20, 0xC0	; 192
    25ac:	00 f0       	brcs	.+0      	; 0x25ae <u8g_WriteEscSeqP+0x6c>
    25ae:	b8 01       	movw	r22, r16
    25b0:	c5 01       	movw	r24, r10
    25b2:	49 83       	std	Y+1, r20	; 0x01
    25b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    25b8:	49 81       	ldd	r20, Y+1	; 0x01
    25ba:	42 95       	swap	r20
    25bc:	40 7f       	andi	r20, 0xF0	; 240
    25be:	4e 5f       	subi	r20, 0xFE	; 254
    25c0:	c4 2e       	mov	r12, r20
    25c2:	d1 2c       	mov	r13, r1
    25c4:	c6 01       	movw	r24, r12
    25c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    25ca:	b8 01       	movw	r22, r16
    25cc:	c5 01       	movw	r24, r10
    25ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    25d2:	c6 01       	movw	r24, r12
    25d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    25d8:	80 e0       	ldi	r24, 0x00	; 0
    25da:	00 c0       	rjmp	.+0      	; 0x25dc <u8g_WriteEscSeqP+0x9a>
    25dc:	47 fd       	sbrc	r20, 7
    25de:	00 c0       	rjmp	.+0      	; 0x25e0 <u8g_WriteEscSeqP+0x9e>
    25e0:	84 2f       	mov	r24, r20
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	00 c0       	rjmp	.+0      	; 0x25e6 <u8g_WriteEscSeqP+0xa4>
    25e6:	81 e0       	ldi	r24, 0x01	; 1
    25e8:	ff ef       	ldi	r31, 0xFF	; 255
    25ea:	ef 1a       	sub	r14, r31
    25ec:	ff 0a       	sbc	r15, r31
    25ee:	00 c0       	rjmp	.+0      	; 0x25f0 <u8g_WriteEscSeqP+0xae>
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	00 c0       	rjmp	.+0      	; 0x25f4 <u8g_WriteEscSeqP+0xb2>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	0f 90       	pop	r0
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
    2608:	bf 90       	pop	r11
    260a:	af 90       	pop	r10
    260c:	08 95       	ret

u8g_com_api_16gr.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000894  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001766  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_WriteByteBWTo16GrDevice 0000005e  00000000  00000000  0000202e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_WriteSequenceBWTo16GrDevice 00000042  00000000  00000000  0000208c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_WriteByte4LTo16GrDevice 00000060  00000000  00000000  000020ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_WriteSequence4LTo16GrDevice 00000042  00000000  00000000  0000212e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .rodata.map.3354 00000010  00000000  00000000  00002170  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .bss.buf.3339 00000004  00000000  00000000  00002180  2**0
                  ALLOC
 11 .rodata.map.3340 00000004  00000000  00000000  00002180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .comment      00000022  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_WriteByteBWTo16GrDevice:

00000000 <u8g_WriteByteBWTo16GrDevice>:
  dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, map[bb], NULL);
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, map[b], NULL);
}

uint8_t u8g_WriteSequence4LTo16GrDevice(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *ptr)
{
   0:	a4 2f       	mov	r26, r20
   2:	a3 70       	andi	r26, 0x03	; 3
   4:	b0 e0       	ldi	r27, 0x00	; 0
   6:	a0 50       	subi	r26, 0x00	; 0
   8:	b0 40       	sbci	r27, 0x00	; 0
   a:	2c 91       	ld	r18, X
   c:	20 93 00 00 	sts	0x0000, r18
  10:	e4 2f       	mov	r30, r20
  12:	e6 95       	lsr	r30
  14:	e6 95       	lsr	r30
  16:	ae 2f       	mov	r26, r30
  18:	a3 70       	andi	r26, 0x03	; 3
  do
  {
    if ( u8g_WriteByte4LTo16GrDevice(u8g, dev, *ptr++) == 0 )
  1a:	b0 e0       	ldi	r27, 0x00	; 0
  1c:	a0 50       	subi	r26, 0x00	; 0
  1e:	b0 40       	sbci	r27, 0x00	; 0
  20:	2c 91       	ld	r18, X
  22:	20 93 00 00 	sts	0x0000, r18
  26:	e6 95       	lsr	r30
      return 0;
    cnt--;
  } while( cnt != 0 );
  28:	e6 95       	lsr	r30
  2a:	ae 2f       	mov	r26, r30
  return 1;
  2c:	a3 70       	andi	r26, 0x03	; 3
  2e:	b0 e0       	ldi	r27, 0x00	; 0
uint8_t u8g_WriteSequence4LTo16GrDevice(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *ptr)
{
  do
  {
    if ( u8g_WriteByte4LTo16GrDevice(u8g, dev, *ptr++) == 0 )
      return 0;
  30:	a0 50       	subi	r26, 0x00	; 0
    cnt--;
  } while( cnt != 0 );
  return 1;
}
  32:	b0 40       	sbci	r27, 0x00	; 0
  34:	2c 91       	ld	r18, X
  36:	20 93 00 00 	sts	0x0000, r18
  3a:	e6 95       	lsr	r30
  3c:	e6 95       	lsr	r30
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	e0 50       	subi	r30, 0x00	; 0
  42:	f0 40       	sbci	r31, 0x00	; 0
  44:	20 81       	ld	r18, Z
  46:	20 93 00 00 	sts	0x0000, r18
  4a:	db 01       	movw	r26, r22
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	ed 91       	ld	r30, X+
  50:	fc 91       	ld	r31, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	20 e0       	ldi	r18, 0x00	; 0
  56:	30 e0       	ldi	r19, 0x00	; 0
  58:	44 e0       	ldi	r20, 0x04	; 4
  5a:	66 e0       	ldi	r22, 0x06	; 6
  5c:	09 94       	ijmp

Disassembly of section .text.u8g_WriteSequenceBWTo16GrDevice:

0000005e <u8g_WriteSequenceBWTo16GrDevice>:
  5e:	df 92       	push	r13
  60:	ef 92       	push	r14
  62:	ff 92       	push	r15
  64:	0f 93       	push	r16
  66:	1f 93       	push	r17
  68:	cf 93       	push	r28
  6a:	df 93       	push	r29
  6c:	8c 01       	movw	r16, r24
  6e:	7b 01       	movw	r14, r22
  70:	d4 2e       	mov	r13, r20
  72:	c2 2f       	mov	r28, r18
  74:	d3 2f       	mov	r29, r19
  76:	d2 0e       	add	r13, r18
  78:	49 91       	ld	r20, Y+
  7a:	b7 01       	movw	r22, r14
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <buf.3339>
  82:	88 23       	and	r24, r24
  84:	01 f0       	breq	.+0      	; 0x86 <u8g_WriteSequenceBWTo16GrDevice+0x28>
  86:	dc 12       	cpse	r13, r28
  88:	00 c0       	rjmp	.+0      	; 0x8a <u8g_WriteSequenceBWTo16GrDevice+0x2c>
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_WriteSequenceBWTo16GrDevice+0x30>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	df 91       	pop	r29
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	ff 90       	pop	r15
  9a:	ef 90       	pop	r14
  9c:	df 90       	pop	r13
  9e:	08 95       	ret

Disassembly of section .text.u8g_WriteByte4LTo16GrDevice:

000000fe <u8g_WriteByte4LTo16GrDevice>:
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	8c 01       	movw	r16, r24
 10e:	7b 01       	movw	r14, r22
 110:	d4 2e       	mov	r13, r20
 112:	c4 2f       	mov	r28, r20
 114:	cf 70       	andi	r28, 0x0F	; 15
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	c0 50       	subi	r28, 0x00	; 0
 11a:	d0 40       	sbci	r29, 0x00	; 0
 11c:	db 01       	movw	r26, r22
 11e:	14 96       	adiw	r26, 0x04	; 4
 120:	ed 91       	ld	r30, X+
 122:	fc 91       	ld	r31, X
 124:	15 97       	sbiw	r26, 0x05	; 5
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	48 81       	ld	r20, Y
 12c:	65 e0       	ldi	r22, 0x05	; 5
 12e:	09 95       	icall
 130:	d2 94       	swap	r13
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	d8 22       	and	r13, r24
 136:	ad 2d       	mov	r26, r13
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	a0 50       	subi	r26, 0x00	; 0
 13c:	b0 40       	sbci	r27, 0x00	; 0
 13e:	e7 01       	movw	r28, r14
 140:	ec 81       	ldd	r30, Y+4	; 0x04
 142:	fd 81       	ldd	r31, Y+5	; 0x05
 144:	20 e0       	ldi	r18, 0x00	; 0
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	4c 91       	ld	r20, X
 14a:	65 e0       	ldi	r22, 0x05	; 5
 14c:	c8 01       	movw	r24, r16
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	ff 90       	pop	r15
 158:	ef 90       	pop	r14
 15a:	df 90       	pop	r13
 15c:	09 94       	ijmp

Disassembly of section .text.u8g_WriteSequence4LTo16GrDevice:

0000025c <u8g_WriteSequence4LTo16GrDevice>:
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	8c 01       	movw	r16, r24
 26c:	7b 01       	movw	r14, r22
 26e:	d4 2e       	mov	r13, r20
 270:	c2 2f       	mov	r28, r18
 272:	d3 2f       	mov	r29, r19
 274:	d2 0e       	add	r13, r18
 276:	49 91       	ld	r20, Y+
 278:	b7 01       	movw	r22, r14
 27a:	c8 01       	movw	r24, r16
 27c:	0e 94 00 00 	call	0	; 0x0 <buf.3339>
 280:	88 23       	and	r24, r24
 282:	01 f0       	breq	.+0      	; 0x284 <u8g_WriteSequence4LTo16GrDevice+0x28>
 284:	dc 12       	cpse	r13, r28
 286:	00 c0       	rjmp	.+0      	; 0x288 <u8g_WriteSequence4LTo16GrDevice+0x2c>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	00 c0       	rjmp	.+0      	; 0x28c <u8g_WriteSequence4LTo16GrDevice+0x30>
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	ff 90       	pop	r15
 298:	ef 90       	pop	r14
 29a:	df 90       	pop	r13
 29c:	08 95       	ret

u8g_com_arduino_attiny85_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001681  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_ATtiny85_std_hw_spi_fn 00000004  00000000  00000000  00001d2d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_ATtiny85_std_hw_spi_fn:

00000000 <u8g_com_arduino_ATtiny85_std_hw_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_ATtiny85_std_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_common.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000624  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001604  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY

u8g_com_arduino_fast_parallel.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001677  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_fast_parallel_fn 00000004  00000000  00000000  00001d23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_fast_parallel_fn:

00000000 <u8g_com_arduino_fast_parallel_fn>:


uint8_t u8g_com_arduino_fast_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001662  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_hw_spi_fn 00000004  00000000  00000000  00001d0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_hw_spi_fn:

00000000 <u8g_com_arduino_hw_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_hw_usart_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001674  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_hw_usart_spi_fn 00000004  00000000  00000000  00001d20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_hw_usart_spi_fn:

00000000 <u8g_com_arduino_hw_usart_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_hw_usart_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_no_en_parallel.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000167a  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_no_en_parallel_fn 00000004  00000000  00000000  00001d26  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_no_en_parallel_fn:

00000000 <u8g_com_arduino_no_en_parallel_fn>:


uint8_t u8g_com_arduino_no_en_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_parallel.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001668  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_parallel_fn 00000004  00000000  00000000  00001d14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_parallel_fn:

00000000 <u8g_com_arduino_parallel_fn>:


uint8_t u8g_com_arduino_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_port_d_wr.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000166b  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_port_d_wr_fn 00000004  00000000  00000000  00001d17  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d1b  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_port_d_wr_fn:

00000000 <u8g_com_arduino_port_d_wr_fn>:


uint8_t u8g_com_arduino_port_d_wr_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_ssd_i2c.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000828  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000169b  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_ssd_start_sequence 00000038  00000000  00000000  00001ef7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_arduino_ssd_i2c_fn 000000ae  00000000  00000000  00001f2f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000022  00000000  00000000  00001fdd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_ssd_start_sequence:

00000000 <u8g_com_arduino_ssd_start_sequence>:
  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	8b a5       	ldd	r24, Y+43	; 0x2b
   8:	88 23       	and	r24, r24
  switch(msg)
   a:	01 f0       	breq	.+0      	; 0xc <u8g_com_arduino_ssd_start_sequence+0xc>
   c:	88 e7       	ldi	r24, 0x78	; 120
   e:	0e 94 00 00 	call	0	; 0x0 <u8g_com_arduino_ssd_start_sequence>
  12:	88 23       	and	r24, r24
  14:	01 f0       	breq	.+0      	; 0x16 <u8g_com_arduino_ssd_start_sequence+0x16>
  16:	8e a1       	ldd	r24, Y+38	; 0x26
  18:	81 11       	cpse	r24, r1
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
  1a:	00 c0       	rjmp	.+0      	; 0x1c <u8g_com_arduino_ssd_start_sequence+0x1c>
  1c:	0e 94 00 00 	call	0	; 0x0 <u8g_com_arduino_ssd_start_sequence>
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
  20:	88 23       	and	r24, r24
  22:	01 f0       	breq	.+0      	; 0x24 <u8g_com_arduino_ssd_start_sequence+0x24>
  return 1;
}

uint8_t u8g_com_arduino_ssd_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
  24:	1b a6       	std	Y+43, r1	; 0x2b
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_com_arduino_ssd_start_sequence+0x28>
  28:	80 e4       	ldi	r24, 0x40	; 64
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_com_arduino_ssd_start_sequence+0x2c>
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	00 c0       	rjmp	.+0      	; 0x30 <u8g_com_arduino_ssd_start_sequence+0x30>
  30:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text.u8g_com_arduino_ssd_i2c_fn:

00000038 <u8g_com_arduino_ssd_i2c_fn>:
  38:	1f 93       	push	r17
  3a:	cf 93       	push	r28
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
  3c:	df 93       	push	r29
  3e:	14 2f       	mov	r17, r20
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
  40:	e9 01       	movw	r28, r18
  42:	63 30       	cpi	r22, 0x03	; 3
      if ( arg_val == 0 )
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_com_arduino_ssd_i2c_fn+0xe>
  46:	00 f4       	brcc	.+0      	; 0x48 <u8g_com_arduino_ssd_i2c_fn+0x10>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
  48:	61 30       	cpi	r22, 0x01	; 1
  4a:	01 f0       	breq	.+0      	; 0x4c <u8g_com_arduino_ssd_i2c_fn+0x14>
  4c:	62 30       	cpi	r22, 0x02	; 2
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
  4e:	01 f0       	breq	.+0      	; 0x50 <u8g_com_arduino_ssd_i2c_fn+0x18>
  50:	00 c0       	rjmp	.+0      	; 0x52 <u8g_com_arduino_ssd_i2c_fn+0x1a>
  52:	fc 01       	movw	r30, r24
  54:	46 a3       	std	Z+38, r20	; 0x26
	return u8g_i2c_stop(), 0;
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	23 a7       	std	Z+43, r18	; 0x2b
  5a:	00 c0       	rjmp	.+0      	; 0x5c <u8g_com_arduino_ssd_i2c_fn+0x24>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
  5c:	66 30       	cpi	r22, 0x06	; 6
  5e:	01 f0       	breq	.+0      	; 0x60 <u8g_com_arduino_ssd_i2c_fn+0x28>
  60:	67 30       	cpi	r22, 0x07	; 7
  62:	01 f0       	breq	.+0      	; 0x64 <u8g_com_arduino_ssd_i2c_fn+0x2c>
  64:	65 30       	cpi	r22, 0x05	; 5
  66:	01 f4       	brne	.+0      	; 0x68 <u8g_com_arduino_ssd_i2c_fn+0x30>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_com_arduino_ssd_i2c_fn+0x32>
  6a:	fc 01       	movw	r30, r24
  6c:	86 a5       	ldd	r24, Z+46	; 0x2e
  6e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  72:	00 c0       	rjmp	.+0      	; 0x74 <u8g_com_arduino_ssd_i2c_fn+0x3c>
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
  74:	fc 01       	movw	r30, r24
  76:	16 a2       	std	Z+38, r1	; 0x26
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	23 a7       	std	Z+43, r18	; 0x2b
  7c:	41 11       	cpse	r20, r1
	    return u8g_i2c_stop(), 0;
          arg_val--;
  7e:	00 c0       	rjmp	.+0      	; 0x80 <u8g_com_arduino_ssd_i2c_fn+0x48>
  80:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_ssd_start_sequence(u8g) == 0 )
  84:	00 c0       	rjmp	.+0      	; 0x86 <u8g_com_arduino_ssd_i2c_fn+0x4e>
  86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  8a:	81 11       	cpse	r24, r1
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_com_arduino_ssd_i2c_fn+0x56>
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
  8e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  92:	00 c0       	rjmp	.+0      	; 0x94 <u8g_com_arduino_ssd_i2c_fn+0x5c>
  94:	81 2f       	mov	r24, r17
  96:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	    return 0;
          ptr++;
  9a:	81 11       	cpse	r24, r1
          arg_val--;
  9c:	00 c0       	rjmp	.+0      	; 0x9e <u8g_com_arduino_ssd_i2c_fn+0x66>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <u8g_com_arduino_ssd_i2c_fn+0x68>
      }
      */
#endif
      break;
  }
  return 1;
  a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
	    return 0;
  a4:	88 23       	and	r24, r24
      */
#endif
      break;
  }
  return 1;
}
  a6:	01 f0       	breq	.+0      	; 0xa8 <u8g_com_arduino_ssd_i2c_fn+0x70>
  a8:	11 23       	and	r17, r17
  aa:	01 f0       	breq	.+0      	; 0xac <u8g_com_arduino_ssd_i2c_fn+0x74>
  ac:	89 91       	ld	r24, Y+
  ae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  b2:	88 23       	and	r24, r24
  b4:	01 f0       	breq	.+0      	; 0xb6 <u8g_com_arduino_ssd_i2c_fn+0x7e>
  b6:	11 50       	subi	r17, 0x01	; 1
  b8:	00 c0       	rjmp	.+0      	; 0xba <u8g_com_arduino_ssd_i2c_fn+0x82>
  ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_com_arduino_ssd_i2c_fn+0x8a>
  c2:	11 23       	and	r17, r17
  c4:	01 f0       	breq	.+0      	; 0xc6 <u8g_com_arduino_ssd_i2c_fn+0x8e>
  c6:	fe 01       	movw	r30, r28
  c8:	84 91       	lpm	r24, Z
  ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ce:	88 23       	and	r24, r24
  d0:	01 f0       	breq	.+0      	; 0xd2 <u8g_com_arduino_ssd_i2c_fn+0x9a>
  d2:	21 96       	adiw	r28, 0x01	; 1
  d4:	11 50       	subi	r17, 0x01	; 1
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <u8g_com_arduino_ssd_i2c_fn+0xa0>
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	00 c0       	rjmp	.+0      	; 0xdc <u8g_com_arduino_ssd_i2c_fn+0xa4>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	08 95       	ret

u8g_com_arduino_st7920_custom.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001677  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_st7920_custom_fn 00000004  00000000  00000000  00001d23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_st7920_custom_fn:

00000000 <u8g_com_arduino_st7920_custom_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_st7920_custom_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_st7920_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001677  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_st7920_hw_spi_fn 00000004  00000000  00000000  00001d23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_st7920_hw_spi_fn:

00000000 <u8g_com_arduino_st7920_hw_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_st7920_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_st7920_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000166e  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_st7920_spi_fn 00000004  00000000  00000000  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_st7920_spi_fn:

00000000 <u8g_com_arduino_st7920_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_st7920_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_std_sw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000166e  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_std_sw_spi_fn 00000004  00000000  00000000  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_std_sw_spi_fn:

00000000 <u8g_com_arduino_std_sw_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_std_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_sw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001662  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_sw_spi_fn 00000004  00000000  00000000  00001d0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d12  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_sw_spi_fn:

00000000 <u8g_com_arduino_sw_spi_fn>:
#else /* ARDUINO */

uint8_t u8g_com_arduino_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_t6963.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000165f  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_t6963_fn 00000004  00000000  00000000  00001d0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_t6963_fn:

00000000 <u8g_com_arduino_t6963_fn>:


uint8_t u8g_com_arduino_t6963_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_arduino_uc_i2c.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000081c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001697  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_arduino_uc_start_sequence 00000030  00000000  00000000  00001ee7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_arduino_uc_i2c_fn 000000ae  00000000  00000000  00001f17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000022  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_arduino_uc_start_sequence:

00000000 <u8g_com_arduino_uc_start_sequence>:
  u8g->pin_list[U8G_PI_SET_A0] = 0;
  return 1;
}

uint8_t u8g_com_arduino_uc_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	8b a5       	ldd	r24, Y+43	; 0x2b
   8:	88 23       	and	r24, r24
  switch(msg)
   a:	01 f0       	breq	.+0      	; 0xc <u8g_com_arduino_uc_start_sequence+0xc>
   c:	8e a1       	ldd	r24, Y+38	; 0x26
   e:	81 11       	cpse	r24, r1
  10:	00 c0       	rjmp	.+0      	; 0x12 <u8g_com_arduino_uc_start_sequence+0x12>
  12:	80 e7       	ldi	r24, 0x70	; 112
  14:	0e 94 00 00 	call	0	; 0x0 <u8g_com_arduino_uc_start_sequence>
  18:	88 23       	and	r24, r24
      }
      // u8g_i2c_stop();
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
  1a:	01 f0       	breq	.+0      	; 0x1c <u8g_com_arduino_uc_start_sequence+0x1c>
  1c:	1b a6       	std	Y+43, r1	; 0x2b
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again */
  1e:	00 c0       	rjmp	.+0      	; 0x20 <u8g_com_arduino_uc_start_sequence+0x20>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <u8g_com_arduino_uc_start_sequence+0x24>
  return 1;
}

uint8_t u8g_com_arduino_uc_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
  24:	82 e7       	ldi	r24, 0x72	; 114
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_com_arduino_uc_start_sequence+0x28>
  28:	81 e0       	ldi	r24, 0x01	; 1
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text.u8g_com_arduino_uc_i2c_fn:

00000030 <u8g_com_arduino_uc_i2c_fn>:
  30:	1f 93       	push	r17
    case U8G_COM_MSG_INIT:
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SCL, HIGH);
      //u8g_com_arduino_digital_write(u8g, U8G_PI_SDA, HIGH);
      //u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: unknown mode */
    
      u8g_i2c_init(u8g->pin_list[U8G_PI_I2C_OPTION]);
  32:	cf 93       	push	r28
  34:	df 93       	push	r29
  36:	14 2f       	mov	r17, r20
  38:	e9 01       	movw	r28, r18
  3a:	63 30       	cpi	r22, 0x03	; 3
      /* Currently disabled, but it could be enable. Previous restrictions have been removed */
      /* u8g_com_arduino_digital_write(u8g, U8G_PI_RESET, arg_val); */
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      u8g->pin_list[U8G_PI_A0_STATE] = 0;
  3c:	01 f0       	breq	.+0      	; 0x3e <u8g_com_arduino_uc_i2c_fn+0xe>
  3e:	00 f4       	brcc	.+0      	; 0x40 <u8g_com_arduino_uc_i2c_fn+0x10>
      u8g->pin_list[U8G_PI_SET_A0] = 1;		/* force a0 to set again, also forces start condition */
  40:	61 30       	cpi	r22, 0x01	; 1
  42:	01 f0       	breq	.+0      	; 0x44 <u8g_com_arduino_uc_i2c_fn+0x14>
      if ( arg_val == 0 )
  44:	62 30       	cpi	r22, 0x02	; 2
  46:	01 f0       	breq	.+0      	; 0x48 <u8g_com_arduino_uc_i2c_fn+0x18>
      {
        /* disable chip, send stop condition */
	u8g_i2c_stop();
  48:	00 c0       	rjmp	.+0      	; 0x4a <u8g_com_arduino_uc_i2c_fn+0x1a>
  4a:	fc 01       	movw	r30, r24
  4c:	46 a3       	std	Z+38, r20	; 0x26
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_uc_start_sequence(u8g) == 0 )
  4e:	21 e0       	ldi	r18, 0x01	; 1
  50:	23 a7       	std	Z+43, r18	; 0x2b
  52:	00 c0       	rjmp	.+0      	; 0x54 <u8g_com_arduino_uc_i2c_fn+0x24>
  54:	66 30       	cpi	r22, 0x06	; 6
	return u8g_i2c_stop(), 0;
  56:	01 f0       	breq	.+0      	; 0x58 <u8g_com_arduino_uc_i2c_fn+0x28>
  58:	67 30       	cpi	r22, 0x07	; 7
  5a:	01 f0       	breq	.+0      	; 0x5c <u8g_com_arduino_uc_i2c_fn+0x2c>
      if ( u8g_i2c_send_byte(arg_val) == 0 )
  5c:	65 30       	cpi	r22, 0x05	; 5
  5e:	01 f4       	brne	.+0      	; 0x60 <u8g_com_arduino_uc_i2c_fn+0x30>
  60:	00 c0       	rjmp	.+0      	; 0x62 <u8g_com_arduino_uc_i2c_fn+0x32>
  62:	fc 01       	movw	r30, r24
  64:	86 a5       	ldd	r24, Z+46	; 0x2e
  66:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      // u8g_i2c_stop();
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_uc_start_sequence(u8g) == 0 )
  6a:	00 c0       	rjmp	.+0      	; 0x6c <u8g_com_arduino_uc_i2c_fn+0x3c>
  6c:	fc 01       	movw	r30, r24
  6e:	16 a2       	std	Z+38, r1	; 0x26
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	23 a7       	std	Z+43, r18	; 0x2b
        {
	  if ( u8g_i2c_send_byte(*ptr++) == 0 )
  74:	41 11       	cpse	r20, r1
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_com_arduino_uc_i2c_fn+0x48>
  78:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <u8g_com_arduino_uc_i2c_fn+0x4e>
	    return u8g_i2c_stop(), 0;
          arg_val--;
  7e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      // u8g_i2c_stop();
      break;

    case U8G_COM_MSG_WRITE_SEQ_P:
      //u8g->pin_list[U8G_PI_SET_A0] = 1;
      if ( u8g_com_arduino_uc_start_sequence(u8g) == 0 )
  82:	81 11       	cpse	r24, r1
  84:	00 c0       	rjmp	.+0      	; 0x86 <u8g_com_arduino_uc_i2c_fn+0x56>
  86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	return u8g_i2c_stop(), 0;
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  8a:	00 c0       	rjmp	.+0      	; 0x8c <u8g_com_arduino_uc_i2c_fn+0x5c>
  8c:	81 2f       	mov	r24, r17
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
  8e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  92:	81 11       	cpse	r24, r1
  94:	00 c0       	rjmp	.+0      	; 0x96 <u8g_com_arduino_uc_i2c_fn+0x66>
  96:	00 c0       	rjmp	.+0      	; 0x98 <u8g_com_arduino_uc_i2c_fn+0x68>
  98:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	    return 0;
          ptr++;
          arg_val--;
  9c:	88 23       	and	r24, r24
  9e:	01 f0       	breq	.+0      	; 0xa0 <u8g_com_arduino_uc_i2c_fn+0x70>
      }
      */
#endif
      break;
  }
  return 1;
  a0:	11 23       	and	r17, r17
	if ( u8g_i2c_send_byte(I2C_DATA_MODE) == 0 )
	  return 0;
      }
      */
#endif
      break;
  a2:	01 f0       	breq	.+0      	; 0xa4 <u8g_com_arduino_uc_i2c_fn+0x74>
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
	  if ( u8g_i2c_send_byte(u8g_pgm_read(ptr)) == 0 )
	    return 0;
  a4:	89 91       	ld	r24, Y+
      */
#endif
      break;
  }
  return 1;
}
  a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  aa:	88 23       	and	r24, r24
  ac:	01 f0       	breq	.+0      	; 0xae <u8g_com_arduino_uc_i2c_fn+0x7e>
  ae:	11 50       	subi	r17, 0x01	; 1
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <u8g_com_arduino_uc_i2c_fn+0x82>
  b2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  b6:	88 23       	and	r24, r24
  b8:	01 f0       	breq	.+0      	; 0xba <u8g_com_arduino_uc_i2c_fn+0x8a>
  ba:	11 23       	and	r17, r17
  bc:	01 f0       	breq	.+0      	; 0xbe <u8g_com_arduino_uc_i2c_fn+0x8e>
  be:	fe 01       	movw	r30, r28
  c0:	84 91       	lpm	r24, Z
  c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c6:	88 23       	and	r24, r24
  c8:	01 f0       	breq	.+0      	; 0xca <u8g_com_arduino_uc_i2c_fn+0x9a>
  ca:	21 96       	adiw	r28, 0x01	; 1
  cc:	11 50       	subi	r17, 0x01	; 1
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <u8g_com_arduino_uc_i2c_fn+0xa0>
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_com_arduino_uc_i2c_fn+0xa4>
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

u8g_com_atmega_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001685  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_atmega_spi_out 0000000c  00000000  00000000  00001eed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_atmega_hw_spi_fn 000000de  00000000  00000000  00001ef9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .progmem.gcc_sw_table.u8g_com_atmega_hw_spi_fn 0000000e  00000000  00000000  00001fd8  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  8 .comment      00000022  00000000  00000000  00001fe6  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_atmega_spi_out:

00000000 <u8g_atmega_spi_out>:
  return  SPDR;
}


uint8_t u8g_com_atmega_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	8e bd       	out	0x2e, r24	; 46
   2:	0d b4       	in	r0, 0x2d	; 45
   4:	07 fe       	sbrs	r0, 7
   6:	00 c0       	rjmp	.+0      	; 0x8 <u8g_atmega_spi_out+0x8>
   8:	8e b5       	in	r24, 0x2e	; 46
   a:	08 95       	ret

Disassembly of section .text.u8g_com_atmega_hw_spi_fn:

0000000c <u8g_com_atmega_hw_spi_fn>:
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  switch(msg)
  1a:	df 93       	push	r29
  1c:	1f 92       	push	r1
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	6c 01       	movw	r12, r24
  24:	79 01       	movw	r14, r18
  26:	06 2f       	mov	r16, r22
  28:	10 e0       	ldi	r17, 0x00	; 0
  2a:	f8 01       	movw	r30, r16
  2c:	31 97       	sbiw	r30, 0x01	; 1
  2e:	e7 30       	cpi	r30, 0x07	; 7
  30:	f1 05       	cpc	r31, r1
    case U8G_COM_MSG_STOP:
      break;
    
    case U8G_COM_MSG_INIT:

      u8g_SetPIOutput(u8g, U8G_PI_CS);
  32:	00 f0       	brcs	.+0      	; 0x34 <u8g_com_atmega_hw_spi_fn+0x28>
  34:	00 c0       	rjmp	.+0      	; 0x36 <u8g_com_atmega_hw_spi_fn+0x2a>
  36:	e0 50       	subi	r30, 0x00	; 0
      u8g_SetPIOutput(u8g, U8G_PI_A0);
  38:	f0 40       	sbci	r31, 0x00	; 0
  3a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  3e:	62 e0       	ldi	r22, 0x02	; 2
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
  40:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	c6 01       	movw	r24, r12
      
      U8G_ATOMIC_START();
  48:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	c6 01       	movw	r24, r12
      
      DDRB |= _BV(3);          /* D0, MOSI */
  50:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      DDRB |= _BV(5);          /* SCK */
      DDRB |= _BV(2);		/* slave select */
  54:	8f b7       	in	r24, 0x3f	; 63
    
      PORTB &= ~_BV(3);        /* D0, MOSI = 0 */
  56:	80 93 00 00 	sts	0x0000, r24
      PORTB &= ~_BV(5);        /* SCK = 0 */
      
      U8G_ATOMIC_END();
  5a:	f8 94       	cli
  5c:	23 9a       	sbi	0x04, 3	; 4
  5e:	25 9a       	sbi	0x04, 5	; 4
      
      u8g_SetPILevel(u8g, U8G_PI_CS, 1);
  60:	22 9a       	sbi	0x04, 2	; 4
  62:	2b 98       	cbi	0x05, 3	; 5
  64:	2d 98       	cbi	0x05, 5	; 5
  66:	80 91 00 00 	lds	r24, 0x0000
            0	0		fclk/4    x
            0	1		fclk/16
            1	0		fclk/64      
            1	1		fclk/128
      */
      SPCR = 0;
  6a:	8f bf       	out	0x3f, r24	; 63
      SPCR =  (1<<SPE) | (1<<MSTR)|(0<<SPR1)|(0<<SPR0)|(0<<CPOL)|(0<<CPHA);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	62 e0       	ldi	r22, 0x02	; 2
#ifdef U8G_HW_SPI_2X
      SPSR = (1 << SPI2X);  /* double speed, issue 89 */
#endif

      break;
  70:	c6 01       	movw	r24, r12
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_A0, arg_val);
  72:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;

    case U8G_COM_MSG_CHIP_SELECT:
      
      if ( arg_val == 0 )
  76:	1c bc       	out	0x2c, r1	; 44
  78:	80 e5       	ldi	r24, 0x50	; 80
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1);
  7a:	8c bd       	out	0x2c, r24	; 44
  7c:	00 c0       	rjmp	.+0      	; 0x7e <u8g_com_atmega_hw_spi_fn+0x72>
  7e:	61 e0       	ldi	r22, 0x01	; 1
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_com_atmega_hw_spi_fn+0x76>
  82:	41 11       	cpse	r20, r1
  84:	00 c0       	rjmp	.+0      	; 0x86 <u8g_com_atmega_hw_spi_fn+0x7a>
      }
      else
      {
        PORTB &= ~_BV(5);        /* SCK = 0 */
  86:	41 e0       	ldi	r20, 0x01	; 1
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0); /* CS = 0 (low active) */
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	c6 01       	movw	r24, r12
      }
      
      break;
      
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
  8c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
    
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_atmega_spi_out(arg_val);
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_com_atmega_hw_spi_fn+0x86>
  92:	2d 98       	cbi	0x05, 5	; 5
  94:	40 e0       	ldi	r20, 0x00	; 0
      break;
  96:	00 c0       	rjmp	.+0      	; 0x98 <u8g_com_atmega_hw_spi_fn+0x8c>
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	00 c0       	rjmp	.+0      	; 0x9c <u8g_com_atmega_hw_spi_fn+0x90>
        {
          u8g_atmega_spi_out(*ptr++);
  9c:	84 2f       	mov	r24, r20
  9e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <u8g_com_atmega_hw_spi_fn+0x98>
  a4:	44 23       	and	r20, r20
  a6:	01 f0       	breq	.+0      	; 0xa8 <u8g_com_atmega_hw_spi_fn+0x9c>
          arg_val--;
  a8:	f7 01       	movw	r30, r14
  aa:	81 91       	ld	r24, Z+
  ac:	7f 01       	movw	r14, r30
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  ae:	49 83       	std	Y+1, r20	; 0x01
  b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        {
          u8g_atmega_spi_out(u8g_pgm_read(ptr));
  b4:	49 81       	ldd	r20, Y+1	; 0x01
  b6:	41 50       	subi	r20, 0x01	; 1
  b8:	00 c0       	rjmp	.+0      	; 0xba <u8g_com_atmega_hw_spi_fn+0xae>
  ba:	44 23       	and	r20, r20
          ptr++;
  bc:	01 f0       	breq	.+0      	; 0xbe <u8g_com_atmega_hw_spi_fn+0xb2>
  be:	f7 01       	movw	r30, r14
  c0:	84 91       	lpm	r24, Z
          arg_val--;
  c2:	49 83       	std	Y+1, r20	; 0x01
  c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        }
      }
      break;
  }
  return 1;
}
  c8:	ff ef       	ldi	r31, 0xFF	; 255
  ca:	ef 1a       	sub	r14, r31
  cc:	ff 0a       	sbc	r15, r31
  ce:	49 81       	ldd	r20, Y+1	; 0x01
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_com_atmega_hw_spi_fn+0xc8>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0f 90       	pop	r0
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	1f 91       	pop	r17
  de:	0f 91       	pop	r16
  e0:	ff 90       	pop	r15
  e2:	ef 90       	pop	r14
  e4:	df 90       	pop	r13
  e6:	cf 90       	pop	r12
  e8:	08 95       	ret

u8g_com_atmega_parallel.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000093c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016a2  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_atmega_parallel_write 0000009a  00000000  00000000  00002012  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_atmega_parallel_fn 00000134  00000000  00000000  000020ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .progmem.gcc_sw_table.u8g_com_atmega_parallel_fn 0000000e  00000000  00000000  000021e0  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  8 .comment      00000022  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_atmega_parallel_write:

00000000 <u8g_com_atmega_parallel_write>:
  u8g_10MicroDelay(); /* ST7920 commands: 72us */
}


uint8_t u8g_com_atmega_parallel_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	46 2f       	mov	r20, r22
   c:	41 70       	andi	r20, 0x01	; 1
   e:	65 e0       	ldi	r22, 0x05	; 5
  10:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  14:	16 95       	lsr	r17
  16:	41 2f       	mov	r20, r17
  18:	41 70       	andi	r20, 0x01	; 1
  switch(msg)
  1a:	66 e0       	ldi	r22, 0x06	; 6
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  22:	16 95       	lsr	r17
  24:	41 2f       	mov	r20, r17
  26:	41 70       	andi	r20, 0x01	; 1
  28:	67 e0       	ldi	r22, 0x07	; 7
  2a:	ce 01       	movw	r24, r28
  2c:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  30:	16 95       	lsr	r17
  {
    case U8G_COM_MSG_INIT:
      /* setup the RW pin as output and force it to low */
      u8g_SetPIOutput(u8g, U8G_PI_RW);
  32:	41 2f       	mov	r20, r17
  34:	41 70       	andi	r20, 0x01	; 1
  36:	68 e0       	ldi	r22, 0x08	; 8
      u8g_SetPILevel(u8g, U8G_PI_RW, 0);
  38:	ce 01       	movw	r24, r28
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  3e:	16 95       	lsr	r17
  40:	41 2f       	mov	r20, r17

      u8g_SetPIOutput(u8g, U8G_PI_D0);
  42:	41 70       	andi	r20, 0x01	; 1
  44:	69 e0       	ldi	r22, 0x09	; 9
  46:	ce 01       	movw	r24, r28
  48:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
      u8g_SetPIOutput(u8g, U8G_PI_D1);
  4c:	16 95       	lsr	r17
  4e:	41 2f       	mov	r20, r17
  50:	41 70       	andi	r20, 0x01	; 1
      u8g_SetPIOutput(u8g, U8G_PI_D2);
  52:	6a e0       	ldi	r22, 0x0A	; 10
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
      u8g_SetPIOutput(u8g, U8G_PI_D3);
  5a:	16 95       	lsr	r17
  5c:	41 2f       	mov	r20, r17
  5e:	41 70       	andi	r20, 0x01	; 1
  60:	6b e0       	ldi	r22, 0x0B	; 11
      u8g_SetPIOutput(u8g, U8G_PI_D4);
  62:	ce 01       	movw	r24, r28
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  68:	41 2f       	mov	r20, r17
      u8g_SetPIOutput(u8g, U8G_PI_D5);
  6a:	46 95       	lsr	r20
  6c:	6c e0       	ldi	r22, 0x0C	; 12
  6e:	ce 01       	movw	r24, r28
  70:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
      u8g_SetPIOutput(u8g, U8G_PI_D6);
  74:	41 e0       	ldi	r20, 0x01	; 1
  76:	64 e0       	ldi	r22, 0x04	; 4
  78:	ce 01       	movw	r24, r28
      u8g_SetPIOutput(u8g, U8G_PI_D7);
  7a:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
      u8g_SetPIOutput(u8g, U8G_PI_EN);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	64 e0       	ldi	r22, 0x04	; 4
  86:	ce 01       	movw	r24, r28
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
      u8g_SetPIOutput(u8g, U8G_PI_CS1);
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_com_atmega_parallel_write>
  90:	df 91       	pop	r29
      u8g_SetPIOutput(u8g, U8G_PI_CS2);
  92:	cf 91       	pop	r28
  94:	1f 91       	pop	r17
  96:	0c 94 00 00 	jmp	0	; 0x0 <u8g_com_atmega_parallel_write>

Disassembly of section .text.u8g_com_atmega_parallel_fn:

0000009a <u8g_com_atmega_parallel_fn>:
      u8g_SetPIOutput(u8g, U8G_PI_DI);
  9a:	cf 92       	push	r12
  9c:	df 92       	push	r13
  9e:	ef 92       	push	r14
  a0:	ff 92       	push	r15
  a2:	0f 93       	push	r16

      break;
    case U8G_COM_MSG_STOP:
      break;
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
  a8:	df 93       	push	r29
  aa:	1f 92       	push	r1
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
      }
      else if ( arg_val == 1 )
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
  b0:	6c 01       	movw	r12, r24
  b2:	79 01       	movw	r14, r18
  b4:	06 2f       	mov	r16, r22
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	f8 01       	movw	r30, r16
        u8g_SetPILevel(u8g, U8G_PI_CS2, 1);
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	e7 30       	cpi	r30, 0x07	; 7
      }
      else if ( arg_val == 2 )
  be:	f1 05       	cpc	r31, r1
  c0:	00 f0       	brcs	.+0      	; 0xc2 <u8g_com_atmega_parallel_fn+0x28>
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 1);
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <u8g_com_atmega_parallel_fn+0x2a>
  c4:	e0 50       	subi	r30, 0x00	; 0
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
      }
      else
      {
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS1, 0);
  c6:	f0 40       	sbci	r31, 0x00	; 0
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  cc:	6d e0       	ldi	r22, 0x0D	; 13
  ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        u8g_SetPILevel(u8g, U8G_PI_CS2, 0);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	6d e0       	ldi	r22, 0x0D	; 13
      }
      break;
    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_parallel_write(u8g, arg_val);
  d6:	c6 01       	movw	r24, r12
  d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
  dc:	65 e0       	ldi	r22, 0x05	; 5
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  de:	c6 01       	movw	r24, r12
  e0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        {
          u8g_com_atmega_parallel_write(u8g, *ptr++);
  e4:	66 e0       	ldi	r22, 0x06	; 6
  e6:	c6 01       	movw	r24, r12
  e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ec:	67 e0       	ldi	r22, 0x07	; 7
  ee:	c6 01       	movw	r24, r12
          arg_val--;
  f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f4:	68 e0       	ldi	r22, 0x08	; 8
      }
      break;
    case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  f6:	c6 01       	movw	r24, r12
  f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        {
          u8g_com_atmega_parallel_write(u8g, u8g_pgm_read(ptr));
  fc:	69 e0       	ldi	r22, 0x09	; 9
  fe:	c6 01       	movw	r24, r12
 100:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 104:	6a e0       	ldi	r22, 0x0A	; 10
          ptr++;
 106:	c6 01       	movw	r24, r12
 108:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
          arg_val--;
 10c:	6b e0       	ldi	r22, 0x0B	; 11
 10e:	c6 01       	movw	r24, r12
 110:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        }
      }
      break;
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_DI, arg_val);
 114:	6c e0       	ldi	r22, 0x0C	; 12
      break;
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
 116:	c6 01       	movw	r24, r12
 118:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 11c:	64 e0       	ldi	r22, 0x04	; 4
      break;
  }
  return 1;
}
 11e:	c6 01       	movw	r24, r12
 120:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	c6 01       	movw	r24, r12
 128:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	c6 01       	movw	r24, r12
 130:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	c6 01       	movw	r24, r12
 138:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <u8g_com_atmega_parallel_fn+0xa4>
 13e:	41 11       	cpse	r20, r1
 140:	00 c0       	rjmp	.+0      	; 0x142 <u8g_com_atmega_parallel_fn+0xa8>
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_com_atmega_parallel_fn+0xac>
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	01 f4       	brne	.+0      	; 0x14a <u8g_com_atmega_parallel_fn+0xb0>
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	62 e0       	ldi	r22, 0x02	; 2
 14e:	c6 01       	movw	r24, r12
 150:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	00 c0       	rjmp	.+0      	; 0x158 <u8g_com_atmega_parallel_fn+0xbe>
 158:	42 30       	cpi	r20, 0x02	; 2
 15a:	01 f4       	brne	.+0      	; 0x15c <u8g_com_atmega_parallel_fn+0xc2>
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	00 c0       	rjmp	.+0      	; 0x160 <u8g_com_atmega_parallel_fn+0xc6>
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	c6 01       	movw	r24, r12
 166:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	63 e0       	ldi	r22, 0x03	; 3
 16e:	00 c0       	rjmp	.+0      	; 0x170 <u8g_com_atmega_parallel_fn+0xd6>
 170:	64 2f       	mov	r22, r20
 172:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 176:	00 c0       	rjmp	.+0      	; 0x178 <u8g_com_atmega_parallel_fn+0xde>
 178:	44 23       	and	r20, r20
 17a:	01 f0       	breq	.+0      	; 0x17c <u8g_com_atmega_parallel_fn+0xe2>
 17c:	f7 01       	movw	r30, r14
 17e:	61 91       	ld	r22, Z+
 180:	7f 01       	movw	r14, r30
 182:	c6 01       	movw	r24, r12
 184:	49 83       	std	Y+1, r20	; 0x01
 186:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 18a:	49 81       	ldd	r20, Y+1	; 0x01
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	00 c0       	rjmp	.+0      	; 0x190 <u8g_com_atmega_parallel_fn+0xf6>
 190:	44 23       	and	r20, r20
 192:	01 f0       	breq	.+0      	; 0x194 <u8g_com_atmega_parallel_fn+0xfa>
 194:	f7 01       	movw	r30, r14
 196:	64 91       	lpm	r22, Z
 198:	c6 01       	movw	r24, r12
 19a:	49 83       	std	Y+1, r20	; 0x01
 19c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a0:	ff ef       	ldi	r31, 0xFF	; 255
 1a2:	ef 1a       	sub	r14, r31
 1a4:	ff 0a       	sbc	r15, r31
 1a6:	49 81       	ldd	r20, Y+1	; 0x01
 1a8:	41 50       	subi	r20, 0x01	; 1
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <u8g_com_atmega_parallel_fn+0x112>
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <u8g_com_atmega_parallel_fn+0x116>
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	c6 01       	movw	r24, r12
 1b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0f 90       	pop	r0
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

u8g_com_atmega_st7920_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016fc  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_atmega_st7920_hw_spi_shift_out.isra.0 0000000c  00000000  00000000  00001ff4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_atmega_st7920_write_byte_hw_spi.isra.1 0000003a  00000000  00000000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_com_atmega_st7920_hw_spi_fn 000000dc  00000000  00000000  0000203a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .progmem.gcc_sw_table.u8g_com_atmega_st7920_hw_spi_fn 0000000e  00000000  00000000  00002116  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  9 .comment      00000022  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_atmega_st7920_hw_spi_shift_out.isra.0:

00000000 <u8g_atmega_st7920_hw_spi_shift_out.isra.0>:
    u8g_10MicroDelay();
}


uint8_t u8g_com_atmega_st7920_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	8e bd       	out	0x2e, r24	; 46
   2:	0d b4       	in	r0, 0x2d	; 45
   4:	07 fe       	sbrs	r0, 7
   6:	00 c0       	rjmp	.+0      	; 0x8 <u8g_atmega_st7920_hw_spi_shift_out.isra.0+0x8>
   8:	8e b5       	in	r24, 0x2e	; 46
   a:	08 95       	ret

Disassembly of section .text.u8g_com_atmega_st7920_write_byte_hw_spi.isra.1:

0000000c <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1>:
   c:	cf 93       	push	r28
   e:	c6 2f       	mov	r28, r22
  10:	81 11       	cpse	r24, r1
  12:	00 c0       	rjmp	.+0      	; 0x14 <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0x8>
  14:	88 ef       	ldi	r24, 0xF8	; 248
  16:	00 c0       	rjmp	.+0      	; 0x18 <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0xc>
  18:	81 30       	cpi	r24, 0x01	; 1
  switch(msg)
  1a:	01 f4       	brne	.+0      	; 0x1c <u8g_com_atmega_st7920_write_byte_hw_spi.isra.1+0x10>
  1c:	8a ef       	ldi	r24, 0xFA	; 250
  1e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  22:	8c 2f       	mov	r24, r28
  24:	80 7f       	andi	r24, 0xF0	; 240
  26:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  2a:	8c 2f       	mov	r24, r28
  2c:	82 95       	swap	r24
  2e:	80 7f       	andi	r24, 0xF0	; 240
  30:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_CS);
  34:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      //u8g_SetPIOutput(u8g, U8G_PI_A0);
      
      U8G_ATOMIC_START();
  38:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      
      DDRB |= _BV(3);          /* D0, MOSI */
  40:	cf 91       	pop	r28
      DDRB |= _BV(5);          /* SCK */
  42:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_com_atmega_st7920_hw_spi_fn:

00000052 <u8g_com_atmega_st7920_hw_spi_fn>:
    
      PORTB &= ~_BV(3);        /* D0, MOSI = 0 */
      PORTB &= ~_BV(5);        /* SCK = 0 */
      U8G_ATOMIC_END();
      
      u8g_SetPILevel(u8g, U8G_PI_CS, 1);
  52:	cf 92       	push	r12
  54:	df 92       	push	r13
  56:	ef 92       	push	r14
  58:	ff 92       	push	r15
            0	0		fclk/4
            0	1		fclk/16 
            1	0		fclk/64  
            1	1		fclk/128
      */
      SPCR = 0;
  5a:	0f 93       	push	r16
      
      /* maybe set CPOL and CPHA to 1 */
      /* 20 Dez 2012: did set CPOL and CPHA to 1 in Arduino variant! */
      /* 24 Jan 2014: implemented, see also issue 221 */
      SPCR =  (1<<SPE) | (1<<MSTR)|(0<<SPR1)|(0<<SPR0)|(1<<CPOL)|(1<<CPHA);
  5c:	1f 93       	push	r17
  5e:	cf 93       	push	r28
#ifdef U8G_HW_SPI_2X
      SPSR = (1 << SPI2X);  /* double speed, issue 89 */
#endif
      u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: command mode */
  60:	df 93       	push	r29
  62:	1f 92       	push	r1
      break;
  64:	cd b7       	in	r28, 0x3d	; 61
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
  66:	de b7       	in	r29, 0x3e	; 62
  68:	6c 01       	movw	r12, r24
      break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
  6a:	79 01       	movw	r14, r18
  6c:	06 2f       	mov	r16, r22
      break;
  6e:	10 e0       	ldi	r17, 0x00	; 0

    case U8G_COM_MSG_CHIP_SELECT:      
      if ( arg_val == 0 )
  70:	f8 01       	movw	r30, r16
  72:	31 97       	sbiw	r30, 0x01	; 1
      {
        /* disable, note: the st7920 has an active high chip select */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0);
  74:	e7 30       	cpi	r30, 0x07	; 7
  76:	f1 05       	cpc	r31, r1
  78:	00 f0       	brcs	.+0      	; 0x7a <u8g_com_atmega_st7920_hw_spi_fn+0x28>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <u8g_com_atmega_st7920_hw_spi_fn+0x2a>
  7c:	e0 50       	subi	r30, 0x00	; 0
      }
      else
      {
        /* u8g_SetPILevel(u8g, U8G_PI_SCK, 0 ); */
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1); /* CS = 1 (high active) */
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
      }
      break;
      

    case U8G_COM_MSG_WRITE_BYTE:
      u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], arg_val);
  84:	62 e0       	ldi	r22, 0x02	; 2
  86:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8a:	8f b7       	in	r24, 0x3f	; 63
      //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
      break;
  8c:	80 93 00 00 	sts	0x0000, r24
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  90:	f8 94       	cli
        {
          u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], *ptr++);
  92:	23 9a       	sbi	0x04, 3	; 4
  94:	25 9a       	sbi	0x04, 5	; 4
  96:	22 9a       	sbi	0x04, 2	; 4
  98:	2b 98       	cbi	0x05, 3	; 5
  9a:	2d 98       	cbi	0x05, 5	; 5
  9c:	80 91 00 00 	lds	r24, 0x0000
  a0:	8f bf       	out	0x3f, r24	; 63
	  //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
          arg_val--;
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	c6 01       	movw	r24, r12
      break;

      case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        {
          u8g_com_atmega_st7920_write_byte_hw_spi(u8g, u8g->pin_list[U8G_PI_A0_STATE], u8g_pgm_read(ptr));
  ac:	1c bc       	out	0x2c, r1	; 44
  ae:	8c e5       	ldi	r24, 0x5C	; 92
  b0:	8c bd       	out	0x2c, r24	; 44
  b2:	f6 01       	movw	r30, r12
  b4:	16 a2       	std	Z+38, r1	; 0x26
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <u8g_com_atmega_st7920_hw_spi_fn+0x66>
  b8:	60 e0       	ldi	r22, 0x00	; 0
	  //u8g->pin_list[U8G_PI_A0_STATE] = 2; 
          ptr++;
  ba:	00 c0       	rjmp	.+0      	; 0xbc <u8g_com_atmega_st7920_hw_spi_fn+0x6a>
  bc:	fc 01       	movw	r30, r24
  be:	46 a3       	std	Z+38, r20	; 0x26
          arg_val--;
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <u8g_com_atmega_st7920_hw_spi_fn+0x70>
  c2:	41 11       	cpse	r20, r1
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <u8g_com_atmega_st7920_hw_spi_fn+0x74>
        }
      }
      break;
  }
  return 1;
}
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	c6 01       	movw	r24, r12
  ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <u8g_com_atmega_st7920_hw_spi_fn+0x7e>
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_com_atmega_st7920_hw_spi_fn+0x82>
  d4:	64 2f       	mov	r22, r20
  d6:	fc 01       	movw	r30, r24
  d8:	86 a1       	ldd	r24, Z+38	; 0x26
  da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <u8g_com_atmega_st7920_hw_spi_fn+0x8e>
  e0:	44 23       	and	r20, r20
  e2:	01 f0       	breq	.+0      	; 0xe4 <u8g_com_atmega_st7920_hw_spi_fn+0x92>
  e4:	f7 01       	movw	r30, r14
  e6:	61 91       	ld	r22, Z+
  e8:	7f 01       	movw	r14, r30
  ea:	f6 01       	movw	r30, r12
  ec:	86 a1       	ldd	r24, Z+38	; 0x26
  ee:	49 83       	std	Y+1, r20	; 0x01
  f0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f4:	49 81       	ldd	r20, Y+1	; 0x01
  f6:	41 50       	subi	r20, 0x01	; 1
  f8:	00 c0       	rjmp	.+0      	; 0xfa <u8g_com_atmega_st7920_hw_spi_fn+0xa8>
  fa:	44 23       	and	r20, r20
  fc:	01 f0       	breq	.+0      	; 0xfe <u8g_com_atmega_st7920_hw_spi_fn+0xac>
  fe:	f7 01       	movw	r30, r14
 100:	64 91       	lpm	r22, Z
 102:	f6 01       	movw	r30, r12
 104:	86 a1       	ldd	r24, Z+38	; 0x26
 106:	49 83       	std	Y+1, r20	; 0x01
 108:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 10c:	ff ef       	ldi	r31, 0xFF	; 255
 10e:	ef 1a       	sub	r14, r31
 110:	ff 0a       	sbc	r15, r31
 112:	49 81       	ldd	r20, Y+1	; 0x01
 114:	41 50       	subi	r20, 0x01	; 1
 116:	00 c0       	rjmp	.+0      	; 0x118 <u8g_com_atmega_st7920_hw_spi_fn+0xc6>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	08 95       	ret

u8g_com_atmega_st7920_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000924  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016fa  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_atmega_st7920_sw_spi_shift_out 00000046  00000000  00000000  00002052  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_atmega_st7920_write_byte 0000004a  00000000  00000000  00002098  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_com_atmega_st7920_sw_spi_fn 000000e2  00000000  00000000  000020e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .progmem.gcc_sw_table.u8g_com_atmega_st7920_sw_spi_fn 0000000e  00000000  00000000  000021c4  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  9 .comment      00000022  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_atmega_st7920_sw_spi_shift_out:

00000000 <u8g_atmega_st7920_sw_spi_shift_out>:
    u8g_10MicroDelay();
}


uint8_t u8g_com_atmega_st7920_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	06 2f       	mov	r16, r22
   c:	18 e0       	ldi	r17, 0x08	; 8
   e:	40 2f       	mov	r20, r16
  10:	40 78       	andi	r20, 0x80	; 128
  12:	65 e0       	ldi	r22, 0x05	; 5
  switch(msg)
  14:	ce 01       	movw	r24, r28
  16:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_st7920_sw_spi_shift_out>
  1a:	00 0f       	add	r16, r16
  1c:	41 e0       	ldi	r20, 0x01	; 1
  1e:	64 e0       	ldi	r22, 0x04	; 4
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_st7920_sw_spi_shift_out>
  26:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_st7920_sw_spi_shift_out>
  2a:	40 e0       	ldi	r20, 0x00	; 0
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_st7920_write_byte(u8g, u8g->pin_list[U8G_PI_A0_STATE], *ptr++);
	  u8g->pin_list[U8G_PI_A0_STATE] = 2; 
  2c:	64 e0       	ldi	r22, 0x04	; 4
  2e:	ce 01       	movw	r24, r28
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
        {
          u8g_com_atmega_st7920_write_byte(u8g, u8g->pin_list[U8G_PI_A0_STATE], u8g_pgm_read(ptr));
	  u8g->pin_list[U8G_PI_A0_STATE] = 2; 
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_st7920_sw_spi_shift_out>
uint8_t u8g_com_atmega_st7920_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  switch(msg)
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_SCK);
  34:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_st7920_sw_spi_shift_out>
  38:	11 50       	subi	r17, 0x01	; 1
      u8g_SetPIOutput(u8g, U8G_PI_MOSI);
  3a:	01 f4       	brne	.+0      	; 0x3c <u8g_atmega_st7920_sw_spi_shift_out+0x3c>
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
  40:	1f 91       	pop	r17
      /* u8g_SetPIOutput(u8g, U8G_PI_A0); */
      u8g_SetPIOutput(u8g, U8G_PI_CS);
  42:	0f 91       	pop	r16
  44:	08 95       	ret

Disassembly of section .text.u8g_com_atmega_st7920_write_byte:

00000046 <u8g_com_atmega_st7920_write_byte>:
  46:	1f 93       	push	r17
  48:	cf 93       	push	r28
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
  4a:	df 93       	push	r29
  4c:	ec 01       	movw	r28, r24
  4e:	14 2f       	mov	r17, r20
  50:	61 11       	cpse	r22, r1
      
      u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
  52:	00 c0       	rjmp	.+0      	; 0x54 <u8g_com_atmega_st7920_write_byte+0xe>
  54:	68 ef       	ldi	r22, 0xF8	; 248
  56:	00 c0       	rjmp	.+0      	; 0x58 <u8g_com_atmega_st7920_write_byte+0x12>
  58:	61 30       	cpi	r22, 0x01	; 1
  5a:	01 f4       	brne	.+0      	; 0x5c <u8g_com_atmega_st7920_write_byte+0x16>
      u8g_SetPILevel(u8g, U8G_PI_MOSI, 0 );
  5c:	6a ef       	ldi	r22, 0xFA	; 250
  5e:	ce 01       	movw	r24, r28
  60:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  64:	61 2f       	mov	r22, r17
      u8g_SetPILevel(u8g, U8G_PI_CS, 0 );
  66:	60 7f       	andi	r22, 0xF0	; 240
  68:	ce 01       	movw	r24, r28
  6a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  6e:	61 2f       	mov	r22, r17
      /* u8g_SetPILevel(u8g, U8G_PI_A0, 0); */
    
      u8g->pin_list[U8G_PI_A0_STATE] = 0;       /* inital RS state: command mode */
  70:	62 95       	swap	r22
      break;
  72:	60 7f       	andi	r22, 0xF0	; 240
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
  74:	ce 01       	movw	r24, r28
  76:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
    
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g->pin_list[U8G_PI_A0_STATE] = arg_val;
      break;
  7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>

    case U8G_COM_MSG_CHIP_SELECT:      
      if ( arg_val == 0 )
  7e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      {
        /* disable, note: the st7920 has an active high chip select */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0);
  82:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
      }
      else
      {
        /* u8g_SetPILevel(u8g, U8G_PI_SCK, 0 ); */
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1); /* CS = 1 (high active) */
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_com_atmega_st7920_sw_spi_fn:

000000d6 <u8g_com_atmega_st7920_sw_spi_fn>:
        }
      }
      break;
  }
  return 1;
}
  d6:	df 92       	push	r13
  d8:	ef 92       	push	r14
  da:	ff 92       	push	r15
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	ec 01       	movw	r28, r24
  e6:	d4 2e       	mov	r13, r20
  e8:	79 01       	movw	r14, r18
  ea:	06 2f       	mov	r16, r22
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	f8 01       	movw	r30, r16
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	e7 30       	cpi	r30, 0x07	; 7
  f4:	f1 05       	cpc	r31, r1
  f6:	00 f0       	brcs	.+0      	; 0xf8 <u8g_com_atmega_st7920_sw_spi_fn+0x22>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <u8g_com_atmega_st7920_sw_spi_fn+0x24>
  fa:	e0 50       	subi	r30, 0x00	; 0
  fc:	f0 40       	sbci	r31, 0x00	; 0
  fe:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 102:	12 e0       	ldi	r17, 0x02	; 2
 104:	00 c0       	rjmp	.+0      	; 0x106 <u8g_com_atmega_st7920_sw_spi_fn+0x30>
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	00 c0       	rjmp	.+0      	; 0x10a <u8g_com_atmega_st7920_sw_spi_fn+0x34>
 10a:	64 e0       	ldi	r22, 0x04	; 4
 10c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 110:	65 e0       	ldi	r22, 0x05	; 5
 112:	ce 01       	movw	r24, r28
 114:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 118:	62 e0       	ldi	r22, 0x02	; 2
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	ce 01       	movw	r24, r28
 124:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	64 e0       	ldi	r22, 0x04	; 4
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	65 e0       	ldi	r22, 0x05	; 5
 136:	ce 01       	movw	r24, r28
 138:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	ce 01       	movw	r24, r28
 142:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 146:	1e a2       	std	Y+38, r1	; 0x26
 148:	00 c0       	rjmp	.+0      	; 0x14a <u8g_com_atmega_st7920_sw_spi_fn+0x74>
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	00 c0       	rjmp	.+0      	; 0x14e <u8g_com_atmega_st7920_sw_spi_fn+0x78>
 14e:	4e a3       	std	Y+38, r20	; 0x26
 150:	00 c0       	rjmp	.+0      	; 0x152 <u8g_com_atmega_st7920_sw_spi_fn+0x7c>
 152:	41 11       	cpse	r20, r1
 154:	00 c0       	rjmp	.+0      	; 0x156 <u8g_com_atmega_st7920_sw_spi_fn+0x80>
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	62 e0       	ldi	r22, 0x02	; 2
 15a:	ce 01       	movw	r24, r28
 15c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 160:	00 c0       	rjmp	.+0      	; 0x162 <u8g_com_atmega_st7920_sw_spi_fn+0x8c>
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	00 c0       	rjmp	.+0      	; 0x166 <u8g_com_atmega_st7920_sw_spi_fn+0x90>
 166:	6e a1       	ldd	r22, Y+38	; 0x26
 168:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	8e a3       	std	Y+38, r24	; 0x26
 170:	00 c0       	rjmp	.+0      	; 0x172 <u8g_com_atmega_st7920_sw_spi_fn+0x9c>
 172:	dd 20       	and	r13, r13
 174:	01 f0       	breq	.+0      	; 0x176 <u8g_com_atmega_st7920_sw_spi_fn+0xa0>
 176:	f7 01       	movw	r30, r14
 178:	41 91       	ld	r20, Z+
 17a:	7f 01       	movw	r14, r30
 17c:	6e a1       	ldd	r22, Y+38	; 0x26
 17e:	ce 01       	movw	r24, r28
 180:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 184:	1e a3       	std	Y+38, r17	; 0x26
 186:	da 94       	dec	r13
 188:	00 c0       	rjmp	.+0      	; 0x18a <u8g_com_atmega_st7920_sw_spi_fn+0xb4>
 18a:	dd 20       	and	r13, r13
 18c:	01 f0       	breq	.+0      	; 0x18e <u8g_com_atmega_st7920_sw_spi_fn+0xb8>
 18e:	f7 01       	movw	r30, r14
 190:	44 91       	lpm	r20, Z
 192:	6e a1       	ldd	r22, Y+38	; 0x26
 194:	ce 01       	movw	r24, r28
 196:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 19a:	1e a3       	std	Y+38, r17	; 0x26
 19c:	ff ef       	ldi	r31, 0xFF	; 255
 19e:	ef 1a       	sub	r14, r31
 1a0:	ff 0a       	sbc	r15, r31
 1a2:	da 94       	dec	r13
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <u8g_com_atmega_st7920_sw_spi_fn+0xd0>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	df 90       	pop	r13
 1b6:	08 95       	ret

u8g_com_atmega_sw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000169a  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_atmega_sw_spi_shift_out 00000046  00000000  00000000  00001f0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_atmega_sw_spi_fn 000000ee  00000000  00000000  00001f54  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .progmem.gcc_sw_table.u8g_com_atmega_sw_spi_fn 0000000e  00000000  00000000  00002042  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  8 .comment      00000022  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_atmega_sw_spi_shift_out:

00000000 <u8g_atmega_sw_spi_shift_out>:
    i--;
  } while( i != 0 );
}

uint8_t u8g_com_atmega_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	06 2f       	mov	r16, r22
   c:	18 e0       	ldi	r17, 0x08	; 8
   e:	40 2f       	mov	r20, r16
  10:	40 78       	andi	r20, 0x80	; 128
  12:	65 e0       	ldi	r22, 0x05	; 5
  14:	ce 01       	movw	r24, r28
  16:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_sw_spi_shift_out>
  switch(msg)
  1a:	00 0f       	add	r16, r16
  1c:	41 e0       	ldi	r20, 0x01	; 1
  1e:	64 e0       	ldi	r22, 0x04	; 4
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_sw_spi_shift_out>
  26:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_sw_spi_shift_out>
  2a:	40 e0       	ldi	r20, 0x00	; 0
  2c:	64 e0       	ldi	r22, 0x04	; 4
  2e:	ce 01       	movw	r24, r28
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_sw_spi_shift_out>
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_SCK);
  34:	0e 94 00 00 	call	0	; 0x0 <u8g_atmega_sw_spi_shift_out>
      u8g_SetPIOutput(u8g, U8G_PI_MOSI);
  38:	11 50       	subi	r17, 0x01	; 1
  3a:	01 f4       	brne	.+0      	; 0x3c <u8g_atmega_sw_spi_shift_out+0x3c>
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
      u8g_SetPIOutput(u8g, U8G_PI_A0);
  40:	1f 91       	pop	r17
  42:	0f 91       	pop	r16
  44:	08 95       	ret

Disassembly of section .text.u8g_com_atmega_sw_spi_fn:

00000046 <u8g_com_atmega_sw_spi_fn>:
  46:	cf 92       	push	r12
      u8g_SetPIOutput(u8g, U8G_PI_CS);
  48:	df 92       	push	r13
  4a:	ef 92       	push	r14
  4c:	ff 92       	push	r15
  4e:	0f 93       	push	r16
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
  50:	1f 93       	push	r17
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	1f 92       	push	r1
      
      u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
  58:	cd b7       	in	r28, 0x3d	; 61
  5a:	de b7       	in	r29, 0x3e	; 62
  5c:	6c 01       	movw	r12, r24
  5e:	79 01       	movw	r14, r18
  60:	06 2f       	mov	r16, r22
      u8g_SetPILevel(u8g, U8G_PI_MOSI, 0 );
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	f8 01       	movw	r30, r16
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	e7 30       	cpi	r30, 0x07	; 7
  6a:	f1 05       	cpc	r31, r1
      u8g_SetPILevel(u8g, U8G_PI_CS, 1 );
  6c:	00 f0       	brcs	.+0      	; 0x6e <u8g_com_atmega_sw_spi_fn+0x28>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <u8g_com_atmega_sw_spi_fn+0x2a>
  70:	e0 50       	subi	r30, 0x00	; 0
  72:	f0 40       	sbci	r31, 0x00	; 0
  74:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_A0, arg_val);
  78:	64 e0       	ldi	r22, 0x04	; 4
  7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;

    case U8G_COM_MSG_CHIP_SELECT:
      
      if ( arg_val == 0 )
  7e:	65 e0       	ldi	r22, 0x05	; 5
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1);
  80:	c6 01       	movw	r24, r12
  82:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  86:	61 e0       	ldi	r22, 0x01	; 1
  88:	c6 01       	movw	r24, r12
  8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      }
      else
      {
        u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	c6 01       	movw	r24, r12
  92:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0); /* CS = 0 (low active) */
  96:	60 e0       	ldi	r22, 0x00	; 0
      }
      break;
      
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
  98:	c6 01       	movw	r24, r12
  9a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
    

    case U8G_COM_MSG_WRITE_BYTE:
      u8g_atmega_sw_spi_shift_out(u8g, arg_val);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	64 e0       	ldi	r22, 0x04	; 4
      break;
  a2:	c6 01       	movw	r24, r12
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        {
          u8g_atmega_sw_spi_shift_out(u8g, *ptr++);
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	65 e0       	ldi	r22, 0x05	; 5
  ac:	c6 01       	movw	r24, r12
  ae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
          arg_val--;
  b6:	c6 01       	movw	r24, r12
  b8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;

      case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  bc:	40 e0       	ldi	r20, 0x00	; 0
  be:	61 e0       	ldi	r22, 0x01	; 1
        {
          u8g_atmega_sw_spi_shift_out(u8g, u8g_pgm_read(ptr));
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <u8g_com_atmega_sw_spi_fn+0x7c>
  c2:	41 11       	cpse	r20, r1
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <u8g_com_atmega_sw_spi_fn+0x80>
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	c6 01       	movw	r24, r12
          ptr++;
  cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_com_atmega_sw_spi_fn+0x8c>
          arg_val--;
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	64 e0       	ldi	r22, 0x04	; 4
  d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
        }
      }
      break;
  }
  return 1;
}
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <u8g_com_atmega_sw_spi_fn+0x98>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <u8g_com_atmega_sw_spi_fn+0x9c>
  e2:	64 2f       	mov	r22, r20
  e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  e8:	00 c0       	rjmp	.+0      	; 0xea <u8g_com_atmega_sw_spi_fn+0xa4>
  ea:	44 23       	and	r20, r20
  ec:	01 f0       	breq	.+0      	; 0xee <u8g_com_atmega_sw_spi_fn+0xa8>
  ee:	f7 01       	movw	r30, r14
  f0:	61 91       	ld	r22, Z+
  f2:	7f 01       	movw	r14, r30
  f4:	c6 01       	movw	r24, r12
  f6:	49 83       	std	Y+1, r20	; 0x01
  f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  fc:	49 81       	ldd	r20, Y+1	; 0x01
  fe:	41 50       	subi	r20, 0x01	; 1
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_com_atmega_sw_spi_fn+0xbc>
 102:	44 23       	and	r20, r20
 104:	01 f0       	breq	.+0      	; 0x106 <u8g_com_atmega_sw_spi_fn+0xc0>
 106:	f7 01       	movw	r30, r14
 108:	64 91       	lpm	r22, Z
 10a:	c6 01       	movw	r24, r12
 10c:	49 83       	std	Y+1, r20	; 0x01
 10e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 112:	ff ef       	ldi	r31, 0xFF	; 255
 114:	ef 1a       	sub	r14, r31
 116:	ff 0a       	sbc	r15, r31
 118:	49 81       	ldd	r20, Y+1	; 0x01
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_com_atmega_sw_spi_fn+0xd8>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0f 90       	pop	r0
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	df 90       	pop	r13
 130:	cf 90       	pop	r12
 132:	08 95       	ret

u8g_com_i2c.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001764  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_i2c_set_error 00000012  00000000  00000000  00002194  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_i2c_clear_error 0000000a  00000000  00000000  000021a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_i2c_get_error 00000006  00000000  00000000  000021b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_i2c_get_err_pos 00000006  00000000  00000000  000021b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_i2c_init 0000001a  00000000  00000000  000021bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_i2c_wait 0000004a  00000000  00000000  000021d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_i2c_start 00000062  00000000  00000000  00002220  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.u8g_i2c_send_byte 00000038  00000000  00000000  00002282  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.u8g_i2c_stop 0000000e  00000000  00000000  000022ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .bss.u8g_i2c_err_pos 00000001  00000000  00000000  000022c8  2**0
                  ALLOC
 15 .bss.u8g_i2c_opt 00000001  00000000  00000000  000022c8  2**0
                  ALLOC
 16 .bss.u8g_i2c_err_code 00000001  00000000  00000000  000022c8  2**0
                  ALLOC
 17 .comment      00000022  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_i2c_set_error:

00000000 <u8g_i2c_set_error>:
}

void u8g_i2c_stop(void)
{
  /* write stop */
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
   0:	90 91 00 00 	lds	r25, 0x0000
   4:	91 11       	cpse	r25, r1

  /* no error is checked for the stop condition */  
  u8g_i2c_wait(_BV(TWSTO), 4);
   6:	00 c0       	rjmp	.+0      	; 0x8 <u8g_i2c_set_error+0x8>
   8:	80 93 00 00 	sts	0x0000, r24
   c:	60 93 00 00 	sts	0x0000, r22
  10:	08 95       	ret

Disassembly of section .text.u8g_i2c_clear_error:

00000012 <u8g_i2c_clear_error>:
  12:	10 92 00 00 	sts	0x0000, r1
  16:	10 92 00 00 	sts	0x0000, r1
  1a:	08 95       	ret

Disassembly of section .text.u8g_i2c_get_error:

0000002e <u8g_i2c_get_error>:
  2e:	80 91 00 00 	lds	r24, 0x0000
  32:	08 95       	ret

Disassembly of section .text.u8g_i2c_get_err_pos:

00000062 <u8g_i2c_get_err_pos>:
  62:	80 91 00 00 	lds	r24, 0x0000
  66:	08 95       	ret

Disassembly of section .text.u8g_i2c_init:

000000ca <u8g_i2c_init>:
  ca:	80 93 00 00 	sts	0x0000, r24
  ce:	10 92 b9 00 	sts	0x00B9, r1
  d2:	84 ff       	sbrs	r24, 4
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <u8g_i2c_init+0xc>
  d6:	8c e0       	ldi	r24, 0x0C	; 12
  d8:	00 c0       	rjmp	.+0      	; 0xda <u8g_i2c_init+0x10>
  da:	88 e4       	ldi	r24, 0x48	; 72
  dc:	80 93 b8 00 	sts	0x00B8, r24
  e0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_i2c_wait:

000001ae <u8g_i2c_wait>:
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <u8g_i2c_wait+0x6>
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
 1b8:	20 ed       	ldi	r18, 0xD0	; 208
 1ba:	37 e0       	ldi	r19, 0x07	; 7
 1bc:	3a 83       	std	Y+2, r19	; 0x02
 1be:	29 83       	std	Y+1, r18	; 0x01
 1c0:	90 91 bc 00 	lds	r25, 0x00BC
 1c4:	98 23       	and	r25, r24
 1c6:	01 f4       	brne	.+0      	; 0x1c8 <u8g_i2c_wait+0x1a>
 1c8:	29 81       	ldd	r18, Y+1	; 0x01
 1ca:	3a 81       	ldd	r19, Y+2	; 0x02
 1cc:	23 2b       	or	r18, r19
 1ce:	01 f4       	brne	.+0      	; 0x1d0 <u8g_i2c_wait+0x22>
 1d0:	80 91 00 00 	lds	r24, 0x0000
 1d4:	81 fd       	sbrc	r24, 1
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <u8g_i2c_wait+0x2a>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <u8g_i2c_wait+0x34>
 1e2:	29 81       	ldd	r18, Y+1	; 0x01
 1e4:	3a 81       	ldd	r19, Y+2	; 0x02
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	31 09       	sbc	r19, r1
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <u8g_i2c_wait+0x3e>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

Disassembly of section .text.u8g_i2c_start:

000003a6 <u8g_i2c_start>:
 3a6:	cf 93       	push	r28
 3a8:	c8 2f       	mov	r28, r24
 3aa:	84 ea       	ldi	r24, 0xA4	; 164
 3ac:	80 93 bc 00 	sts	0x00BC, r24
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	80 e8       	ldi	r24, 0x80	; 128
 3b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3b8:	88 23       	and	r24, r24
 3ba:	01 f0       	breq	.+0      	; 0x3bc <u8g_i2c_start+0x16>
 3bc:	90 91 b9 00 	lds	r25, 0x00B9
 3c0:	98 7f       	andi	r25, 0xF8	; 248
 3c2:	98 30       	cpi	r25, 0x08	; 8
 3c4:	01 f0       	breq	.+0      	; 0x3c6 <u8g_i2c_start+0x20>
 3c6:	90 31       	cpi	r25, 0x10	; 16
 3c8:	01 f0       	breq	.+0      	; 0x3ca <u8g_i2c_start+0x24>
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <u8g_i2c_start+0x28>
 3ce:	c0 93 bb 00 	sts	0x00BB, r28
 3d2:	84 e8       	ldi	r24, 0x84	; 132
 3d4:	80 93 bc 00 	sts	0x00BC, r24
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	80 e8       	ldi	r24, 0x80	; 128
 3dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3e0:	88 23       	and	r24, r24
 3e2:	01 f0       	breq	.+0      	; 0x3e4 <u8g_i2c_start+0x3e>
 3e4:	80 91 00 00 	lds	r24, 0x0000
 3e8:	81 fd       	sbrc	r24, 1
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <u8g_i2c_start+0x46>
 3ec:	80 91 b9 00 	lds	r24, 0x00B9
 3f0:	88 7f       	andi	r24, 0xF8	; 248
 3f2:	88 31       	cpi	r24, 0x18	; 24
 3f4:	01 f0       	breq	.+0      	; 0x3f6 <u8g_i2c_start+0x50>
 3f6:	62 e0       	ldi	r22, 0x02	; 2
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	00 c0       	rjmp	.+0      	; 0x402 <u8g_i2c_start+0x5c>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	cf 91       	pop	r28
 406:	08 95       	ret

Disassembly of section .text.u8g_i2c_send_byte:

000007ae <u8g_i2c_send_byte>:
 7ae:	80 93 bb 00 	sts	0x00BB, r24
 7b2:	84 e8       	ldi	r24, 0x84	; 132
 7b4:	80 93 bc 00 	sts	0x00BC, r24
 7b8:	63 e0       	ldi	r22, 0x03	; 3
 7ba:	80 e8       	ldi	r24, 0x80	; 128
 7bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 7c0:	88 23       	and	r24, r24
 7c2:	01 f0       	breq	.+0      	; 0x7c4 <u8g_i2c_send_byte+0x16>
 7c4:	80 91 00 00 	lds	r24, 0x0000
 7c8:	81 fd       	sbrc	r24, 1
 7ca:	00 c0       	rjmp	.+0      	; 0x7cc <u8g_i2c_send_byte+0x1e>
 7cc:	80 91 b9 00 	lds	r24, 0x00B9
 7d0:	88 7f       	andi	r24, 0xF8	; 248
 7d2:	88 32       	cpi	r24, 0x28	; 40
 7d4:	01 f0       	breq	.+0      	; 0x7d6 <u8g_i2c_send_byte+0x28>
 7d6:	63 e0       	ldi	r22, 0x03	; 3
 7d8:	82 e0       	ldi	r24, 0x02	; 2
 7da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 7de:	80 e0       	ldi	r24, 0x00	; 0
 7e0:	08 95       	ret
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	08 95       	ret

Disassembly of section .text.u8g_i2c_stop:

00000f94 <u8g_i2c_stop>:
 f94:	84 e9       	ldi	r24, 0x94	; 148
 f96:	80 93 bc 00 	sts	0x00BC, r24
 f9a:	64 e0       	ldi	r22, 0x04	; 4
 f9c:	80 e1       	ldi	r24, 0x10	; 16
 f9e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_com_io.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009f0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001875  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_get_avr_io_ptr 0000002e  00000000  00000000  00002299  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_Pin 0000000c  00000000  00000000  000022c7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_SetPinOutput 0000002e  00000000  00000000  000022d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_SetPinInput 00000030  00000000  00000000  00002301  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_SetPinLevel 00000056  00000000  00000000  00002331  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_GetPinLevel 0000002e  00000000  00000000  00002387  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_SetPIOutput 00000012  00000000  00000000  000023b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.u8g_SetPILevel 00000014  00000000  00000000  000023c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .progmem.data.u8g_avr_pin_P 00000008  00000000  00000000  000023db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.u8g_avr_port_P 00000008  00000000  00000000  000023e3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .progmem.data.u8g_avr_ddr_P 00000008  00000000  00000000  000023eb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      00000022  00000000  00000000  000023f3  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_get_avr_io_ptr:

00000000 <u8g_get_avr_io_ptr>:
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <u8g_get_avr_io_ptr+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
  if ( pin != U8G_PIN_NONE )
   8:	de b7       	in	r29, 0x3e	; 62
   a:	86 0f       	add	r24, r22
    u8g_SetPinLevel(pin, level);
   c:	91 1d       	adc	r25, r1
   e:	86 0f       	add	r24, r22
  10:	91 1d       	adc	r25, r1
  12:	42 e0       	ldi	r20, 0x02	; 2
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	bc 01       	movw	r22, r24
  18:	ce 01       	movw	r24, r28
  1a:	01 96       	adiw	r24, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <u8g_get_avr_io_ptr>
  20:	89 81       	ldd	r24, Y+1	; 0x01
  22:	9a 81       	ldd	r25, Y+2	; 0x02
  24:	0f 90       	pop	r0
  26:	0f 90       	pop	r0
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text.u8g_Pin:

0000002e <u8g_Pin>:
  2e:	98 e0       	ldi	r25, 0x08	; 8
  30:	89 9f       	mul	r24, r25
  32:	60 0d       	add	r22, r0
  34:	11 24       	eor	r1, r1
  36:	86 2f       	mov	r24, r22
  38:	08 95       	ret

Disassembly of section .text.u8g_SetPinOutput:

00000068 <u8g_SetPinOutput>:
  68:	cf 93       	push	r28
  6a:	c8 2f       	mov	r28, r24
  6c:	68 2f       	mov	r22, r24
  6e:	66 95       	lsr	r22
  70:	66 95       	lsr	r22
  72:	66 95       	lsr	r22
  74:	80 e0       	ldi	r24, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7c:	fc 01       	movw	r30, r24
  7e:	90 81       	ld	r25, Z
  80:	c7 70       	andi	r28, 0x07	; 7
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	00 c0       	rjmp	.+0      	; 0x88 <u8g_SetPinOutput+0x20>
  88:	22 0f       	add	r18, r18
  8a:	ca 95       	dec	r28
  8c:	02 f4       	brpl	.+0      	; 0x8e <u8g_SetPinOutput+0x26>
  8e:	92 2b       	or	r25, r18
  90:	90 83       	st	Z, r25
  92:	cf 91       	pop	r28
  94:	08 95       	ret

Disassembly of section .text.u8g_SetPinInput:

000000fe <u8g_SetPinInput>:
  fe:	cf 93       	push	r28
 100:	c8 2f       	mov	r28, r24
 102:	68 2f       	mov	r22, r24
 104:	66 95       	lsr	r22
 106:	66 95       	lsr	r22
 108:	66 95       	lsr	r22
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 112:	fc 01       	movw	r30, r24
 114:	90 81       	ld	r25, Z
 116:	c7 70       	andi	r28, 0x07	; 7
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_SetPinInput+0x20>
 11e:	22 0f       	add	r18, r18
 120:	ca 95       	dec	r28
 122:	02 f4       	brpl	.+0      	; 0x124 <u8g_SetPinInput+0x26>
 124:	20 95       	com	r18
 126:	92 23       	and	r25, r18
 128:	90 83       	st	Z, r25
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

Disassembly of section .text.u8g_SetPinLevel:

0000022c <u8g_SetPinLevel>:
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	c8 2f       	mov	r28, r24
 232:	d6 2f       	mov	r29, r22
 234:	68 2f       	mov	r22, r24
 236:	66 95       	lsr	r22
 238:	66 95       	lsr	r22
 23a:	66 95       	lsr	r22
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 244:	fc 01       	movw	r30, r24
 246:	c7 70       	andi	r28, 0x07	; 7
 248:	8f b7       	in	r24, 0x3f	; 63
 24a:	d1 11       	cpse	r29, r1
 24c:	00 c0       	rjmp	.+0      	; 0x24e <u8g_SetPinLevel+0x22>
 24e:	f8 94       	cli
 250:	90 81       	ld	r25, Z
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	0c 2e       	mov	r0, r28
 258:	00 c0       	rjmp	.+0      	; 0x25a <u8g_SetPinLevel+0x2e>
 25a:	22 0f       	add	r18, r18
 25c:	0a 94       	dec	r0
 25e:	02 f4       	brpl	.+0      	; 0x260 <u8g_SetPinLevel+0x34>
 260:	20 95       	com	r18
 262:	92 23       	and	r25, r18
 264:	00 c0       	rjmp	.+0      	; 0x266 <u8g_SetPinLevel+0x3a>
 266:	f8 94       	cli
 268:	90 81       	ld	r25, Z
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	00 c0       	rjmp	.+0      	; 0x270 <u8g_SetPinLevel+0x44>
 270:	22 0f       	add	r18, r18
 272:	ca 95       	dec	r28
 274:	02 f4       	brpl	.+0      	; 0x276 <u8g_SetPinLevel+0x4a>
 276:	92 2b       	or	r25, r18
 278:	90 83       	st	Z, r25
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

Disassembly of section .text.u8g_GetPinLevel:

000004ae <u8g_GetPinLevel>:
 4ae:	cf 93       	push	r28
 4b0:	c8 2f       	mov	r28, r24
 4b2:	68 2f       	mov	r22, r24
 4b4:	66 95       	lsr	r22
 4b6:	66 95       	lsr	r22
 4b8:	66 95       	lsr	r22
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4c2:	fc 01       	movw	r30, r24
 4c4:	20 81       	ld	r18, Z
 4c6:	82 2f       	mov	r24, r18
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	c7 70       	andi	r28, 0x07	; 7
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <u8g_GetPinLevel+0x20>
 4ce:	95 95       	asr	r25
 4d0:	87 95       	ror	r24
 4d2:	ca 95       	dec	r28
 4d4:	02 f4       	brpl	.+0      	; 0x4d6 <u8g_GetPinLevel+0x28>
 4d6:	81 70       	andi	r24, 0x01	; 1
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

Disassembly of section .text.u8g_SetPIOutput:

0000098a <u8g_SetPIOutput>:
 98a:	86 0f       	add	r24, r22
 98c:	91 1d       	adc	r25, r1
 98e:	fc 01       	movw	r30, r24
 990:	83 a1       	ldd	r24, Z+35	; 0x23
 992:	8f 3f       	cpi	r24, 0xFF	; 255
 994:	01 f0       	breq	.+0      	; 0x996 <u8g_SetPIOutput+0xc>
 996:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 99a:	08 95       	ret

Disassembly of section .text.u8g_SetPILevel:

00001326 <u8g_SetPILevel>:
    1326:	86 0f       	add	r24, r22
    1328:	91 1d       	adc	r25, r1
    132a:	fc 01       	movw	r30, r24
    132c:	83 a1       	ldd	r24, Z+35	; 0x23
    132e:	8f 3f       	cpi	r24, 0xFF	; 255
    1330:	01 f0       	breq	.+0      	; 0x1332 <u8g_SetPILevel+0xc>
    1332:	64 2f       	mov	r22, r20
    1334:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    1338:	08 95       	ret

u8g_com_msp430_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000165f  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_msp430_hw_spi_fn 00000004  00000000  00000000  00001d0b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_msp430_hw_spi_fn:

00000000 <u8g_com_msp430_hw_spi_fn>:
#else

uint8_t u8g_com_msp430_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_null.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001644  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_null_fn 00000004  00000000  00000000  00001cf0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_null_fn:

00000000 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_raspberrypi_hw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000166e  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_com_raspberrypi_hw_spi_fn 00000004  00000000  00000000  00001d1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_com_raspberrypi_hw_spi_fn:

00000000 <u8g_com_raspberrypi_hw_spi_fn>:
#else

uint8_t u8g_com_raspberrypi_hw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_com_raspberrypi_ssd_i2c.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000624  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000160e  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  00001c66  2**0
                  CONTENTS, READONLY

u8g_com_std_sw_spi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000858  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000169d  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_sw_spi_shift_out 0000004c  00000000  00000000  00001f29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_com_std_sw_spi_fn 000000d0  00000000  00000000  00001f75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .progmem.gcc_sw_table.u8g_com_std_sw_spi_fn 0000000e  00000000  00000000  00002046  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
  8 .comment      00000022  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_sw_spi_shift_out:

00000000 <u8g_sw_spi_shift_out>:
    i--;
  } while( i != 0 );
}

uint8_t u8g_com_std_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	08 2f       	mov	r16, r24
   a:	16 2f       	mov	r17, r22
   c:	d4 2f       	mov	r29, r20
   e:	c8 e0       	ldi	r28, 0x08	; 8
  10:	d7 ff       	sbrs	r29, 7
  12:	00 c0       	rjmp	.+0      	; 0x14 <u8g_sw_spi_shift_out+0x14>
  switch(msg)
  14:	61 e0       	ldi	r22, 0x01	; 1
  16:	00 c0       	rjmp	.+0      	; 0x18 <u8g_sw_spi_shift_out+0x18>
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	80 2f       	mov	r24, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
  20:	dd 0f       	add	r29, r29
  22:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
  26:	61 e0       	ldi	r22, 0x01	; 1
  28:	81 2f       	mov	r24, r17
  2a:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_SCK);
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
      u8g_SetPIOutput(u8g, U8G_PI_MOSI);
  32:	60 e0       	ldi	r22, 0x00	; 0
  34:	81 2f       	mov	r24, r17
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_sw_spi_shift_out>
  3e:	c1 50       	subi	r28, 0x01	; 1
  40:	01 f4       	brne	.+0      	; 0x42 <u8g_sw_spi_shift_out+0x42>
      u8g_SetPIOutput(u8g, U8G_PI_CS);
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
      u8g_SetPIOutput(u8g, U8G_PI_A0);
  4a:	08 95       	ret

Disassembly of section .text.u8g_com_std_sw_spi_fn:

0000004c <u8g_com_std_sw_spi_fn>:
  4c:	df 92       	push	r13
  4e:	ef 92       	push	r14
  50:	ff 92       	push	r15
      u8g_SetPILevel(u8g, U8G_PI_SCK, 0);
  52:	0f 93       	push	r16
  54:	1f 93       	push	r17
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	ec 01       	movw	r28, r24
      u8g_SetPILevel(u8g, U8G_PI_MOSI, 0);
  5c:	d4 2e       	mov	r13, r20
  5e:	79 01       	movw	r14, r18
  60:	06 2f       	mov	r16, r22
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	f8 01       	movw	r30, r16
      break;
      
    case U8G_COM_MSG_CHIP_SELECT:
      if ( arg_val == 0 )
  66:	31 97       	sbiw	r30, 0x01	; 1
  68:	e7 30       	cpi	r30, 0x07	; 7
      {
        /* disable */
	u8g_SetPILevel(u8g, U8G_PI_CS, 1);
  6a:	f1 05       	cpc	r31, r1
  6c:	00 f0       	brcs	.+0      	; 0x6e <u8g_com_std_sw_spi_fn+0x22>
      }
      else
      {
        /* enable */
	u8g_SetPILevel(u8g, U8G_PI_SCK, 0);
  6e:	00 c0       	rjmp	.+0      	; 0x70 <u8g_com_std_sw_spi_fn+0x24>
  70:	e0 50       	subi	r30, 0x00	; 0
  72:	f0 40       	sbci	r31, 0x00	; 0
  74:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
	u8g_SetPILevel(u8g, U8G_PI_CS, 0);
  78:	64 e0       	ldi	r22, 0x04	; 4
  7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      }
      break;

    case U8G_COM_MSG_WRITE_BYTE:
      u8g_sw_spi_shift_out(u8g->pin_list[U8G_PI_MOSI], u8g->pin_list[U8G_PI_SCK], arg_val);
  7e:	65 e0       	ldi	r22, 0x05	; 5
  80:	ce 01       	movw	r24, r28
  82:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	ce 01       	movw	r24, r28
        {
          u8g_sw_spi_shift_out(u8g->pin_list[U8G_PI_MOSI], u8g->pin_list[U8G_PI_SCK], *ptr++);
  8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	ce 01       	movw	r24, r28
  92:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  96:	61 e0       	ldi	r22, 0x01	; 1
          arg_val--;
  98:	ce 01       	movw	r24, r28
  9a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;

      case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
  9e:	40 e0       	ldi	r20, 0x00	; 0
        {
          u8g_sw_spi_shift_out(u8g->pin_list[U8G_PI_MOSI], u8g->pin_list[U8G_PI_SCK], u8g_pgm_read(ptr));
  a0:	64 e0       	ldi	r22, 0x04	; 4
  a2:	ce 01       	movw	r24, r28
  a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	65 e0       	ldi	r22, 0x05	; 5
          ptr++;
  ac:	00 c0       	rjmp	.+0      	; 0xae <u8g_com_std_sw_spi_fn+0x62>
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <u8g_com_std_sw_spi_fn+0x66>
          arg_val--;
  b2:	41 11       	cpse	r20, r1
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <u8g_com_std_sw_spi_fn+0x6a>
        }
      }
      break;
      
    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_A0, arg_val);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	00 c0       	rjmp	.+0      	; 0xba <u8g_com_std_sw_spi_fn+0x6e>
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	64 e0       	ldi	r22, 0x04	; 4
      break;
  }
  return 1;
}
  be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <u8g_com_std_sw_spi_fn+0x7c>
  c8:	6f a1       	ldd	r22, Y+39	; 0x27
  ca:	88 a5       	ldd	r24, Y+40	; 0x28
  cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_com_std_sw_spi_fn+0x86>
  d2:	dd 20       	and	r13, r13
  d4:	01 f0       	breq	.+0      	; 0xd6 <u8g_com_std_sw_spi_fn+0x8a>
  d6:	f7 01       	movw	r30, r14
  d8:	41 91       	ld	r20, Z+
  da:	7f 01       	movw	r14, r30
  dc:	6f a1       	ldd	r22, Y+39	; 0x27
  de:	88 a5       	ldd	r24, Y+40	; 0x28
  e0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  e4:	da 94       	dec	r13
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <u8g_com_std_sw_spi_fn+0x9c>
  e8:	dd 20       	and	r13, r13
  ea:	01 f0       	breq	.+0      	; 0xec <u8g_com_std_sw_spi_fn+0xa0>
  ec:	f7 01       	movw	r30, r14
  ee:	44 91       	lpm	r20, Z
  f0:	6f a1       	ldd	r22, Y+39	; 0x27
  f2:	88 a5       	ldd	r24, Y+40	; 0x28
  f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f8:	ff ef       	ldi	r31, 0xFF	; 255
  fa:	ef 1a       	sub	r14, r31
  fc:	ff 0a       	sbc	r15, r31
  fe:	da 94       	dec	r13
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_com_std_sw_spi_fn+0xb6>
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	ce 01       	movw	r24, r28
 106:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	08 95       	ret

u8g_cursor.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000894  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000176e  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_DrawCursor 00000064  00000000  00000000  00002036  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_SetCursorFont 00000008  00000000  00000000  0000209a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_SetCursorStyle 00000006  00000000  00000000  000020a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.u8g_SetCursorColor 00000008  00000000  00000000  000020a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.u8g_SetCursorPos 00000008  00000000  00000000  000020b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.u8g_EnableCursor 0000000c  00000000  00000000  000020b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_DisableCursor 00000008  00000000  00000000  000020c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .comment      00000022  00000000  00000000  000020cc  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_DrawCursor:

00000000 <u8g_DrawCursor>:
    u8g->cursor_fn = u8g_DrawCursor;
}

void u8g_DisableCursor(u8g_t *u8g)
{
    u8g->cursor_fn = (u8g_draw_cursor_fn)0;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	fa 84       	ldd	r15, Y+10	; 0x0a
  10:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawCursor>
  14:	e8 2e       	mov	r14, r24
  16:	0c 81       	ldd	r16, Y+4	; 0x04
  18:	1d 81       	ldd	r17, Y+5	; 0x05
  1a:	4e 81       	ldd	r20, Y+6	; 0x06
  1c:	5f 81       	ldd	r21, Y+7	; 0x07
  1e:	5d 83       	std	Y+5, r21	; 0x05
  20:	4c 83       	std	Y+4, r20	; 0x04
  22:	69 85       	ldd	r22, Y+9	; 0x09
  24:	ce 01       	movw	r24, r28
  26:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawCursor>
  2a:	21 e0       	ldi	r18, 0x01	; 1
  2c:	2f 0d       	add	r18, r15
  2e:	4d 85       	ldd	r20, Y+13	; 0x0d
  30:	6c 85       	ldd	r22, Y+12	; 0x0c
  32:	ce 01       	movw	r24, r28
  34:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawCursor>
  38:	68 85       	ldd	r22, Y+8	; 0x08
  3a:	ce 01       	movw	r24, r28
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawCursor>
  40:	2f 2d       	mov	r18, r15
  42:	4d 85       	ldd	r20, Y+13	; 0x0d
  44:	6c 85       	ldd	r22, Y+12	; 0x0c
  46:	ce 01       	movw	r24, r28
  48:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawCursor>
  4c:	1d 83       	std	Y+5, r17	; 0x05
  4e:	0c 83       	std	Y+4, r16	; 0x04
  50:	6e 2d       	mov	r22, r14
  52:	ce 01       	movw	r24, r28
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	0c 94 00 00 	jmp	0	; 0x0 <u8g_DrawCursor>

Disassembly of section .text.u8g_SetCursorFont:

00000064 <u8g_SetCursorFont>:
  64:	fc 01       	movw	r30, r24
  66:	77 83       	std	Z+7, r23	; 0x07
  68:	66 83       	std	Z+6, r22	; 0x06
  6a:	08 95       	ret

Disassembly of section .text.u8g_SetCursorStyle:

000000d0 <u8g_SetCursorStyle>:
  d0:	fc 01       	movw	r30, r24
  d2:	62 87       	std	Z+10, r22	; 0x0a
  d4:	08 95       	ret

Disassembly of section .text.u8g_SetCursorColor:

000001a6 <u8g_SetCursorColor>:
 1a6:	fc 01       	movw	r30, r24
 1a8:	41 87       	std	Z+9, r20	; 0x09
 1aa:	60 87       	std	Z+8, r22	; 0x08
 1ac:	08 95       	ret

Disassembly of section .text.u8g_SetCursorPos:

00000354 <u8g_SetCursorPos>:
 354:	fc 01       	movw	r30, r24
 356:	64 87       	std	Z+12, r22	; 0x0c
 358:	45 87       	std	Z+13, r20	; 0x0d
 35a:	08 95       	ret

Disassembly of section .text.u8g_EnableCursor:

000006b0 <u8g_EnableCursor>:
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	fc 01       	movw	r30, r24
 6b6:	37 87       	std	Z+15, r19	; 0x0f
 6b8:	26 87       	std	Z+14, r18	; 0x0e
 6ba:	08 95       	ret

Disassembly of section .text.u8g_DisableCursor:

00000d6c <u8g_DisableCursor>:
 d6c:	fc 01       	movw	r30, r24
 d6e:	17 86       	std	Z+15, r1	; 0x0f
 d70:	16 86       	std	Z+14, r1	; 0x0e
 d72:	08 95       	ret

u8g_delay.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000720  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016f4  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_Delay 00000014  00000000  00000000  00001e48  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_MicroDelay 0000000a  00000000  00000000  00001e5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_10MicroDelay 0000000a  00000000  00000000  00001e66  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .comment      00000022  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_Delay:

00000000 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
   0:	2e e9       	ldi	r18, 0x9E	; 158
   2:	3f e0       	ldi	r19, 0x0F	; 15
   4:	00 97       	sbiw	r24, 0x00	; 0
   6:	01 f0       	breq	.+0      	; 0x8 <u8g_Delay+0x8>
   8:	f9 01       	movw	r30, r18
   a:	31 97       	sbiw	r30, 0x01	; 1
   c:	01 f4       	brne	.+0      	; 0xe <u8g_Delay+0xe>
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	00 c0       	rjmp	.+0      	; 0x12 <u8g_Delay+0x12>
  12:	08 95       	ret

Disassembly of section .text.u8g_MicroDelay:

00000014 <u8g_MicroDelay>:
  14:	84 e0       	ldi	r24, 0x04	; 4
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	01 97       	sbiw	r24, 0x01	; 1
  1a:	01 f4       	brne	.+0      	; 0x1c <u8g_MicroDelay+0x8>
  1c:	08 95       	ret

Disassembly of section .text.u8g_10MicroDelay:

00000032 <u8g_10MicroDelay>:
  32:	88 e2       	ldi	r24, 0x28	; 40
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	01 97       	sbiw	r24, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <u8g_10MicroDelay+0x8>
  3a:	08 95       	ret

u8g_dev_a2_micro_printer.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000ba0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000197d  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_expand4 00000028  00000000  00000000  00002551  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_dev_a2_micro_printer_fn 00000140  00000000  00000000  00002579  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_a2_micro_printer_double_fn 000001be  00000000  00000000  000026b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_a2_micro_printer_192x120_ds 00000006  00000000  00000000  00002877  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_a2_micro_printer_192x120_ds_pb 00000008  00000000  00000000  0000287d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_a2_micro_printer_192x120_ds_buf 000000c0  00000000  00000000  00002885  2**0
                  ALLOC
 11 .data.u8g_dev_a2_micro_printer_192x720_ds 00000006  00000000  00000000  00002885  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_a2_micro_printer_192x720_ds_pb 00000008  00000000  00000000  0000288b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_a2_micro_printer_192x720_ds_buf 000000c0  00000000  00000000  00002893  2**0
                  ALLOC
 14 .data.u8g_dev_a2_micro_printer_192x360_ds 00000006  00000000  00000000  00002893  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_a2_micro_printer_192x360_ds_pb 00000008  00000000  00000000  00002899  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_a2_micro_printer_192x360_ds_buf 000000c0  00000000  00000000  000028a1  2**0
                  ALLOC
 17 .data.u8g_dev_a2_micro_printer_384x240 00000006  00000000  00000000  000028a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 18 .data.u8g_dev_a2_micro_printer_384x240_pb 00000008  00000000  00000000  000028a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .bss.u8g_dev_a2_micro_printer_384x240_buf 000000f0  00000000  00000000  000028af  2**0
                  ALLOC
 20 .comment      00000022  00000000  00000000  000028af  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_expand4:

00000000 <u8g_dev_expand4>:
  a |= a<<1;
  return a;
}

uint8_t u8g_dev_a2_micro_printer_double_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	38 2f       	mov	r19, r24
   2:	31 70       	andi	r19, 0x01	; 1
   4:	98 2f       	mov	r25, r24
   6:	92 70       	andi	r25, 0x02	; 2
   8:	99 0f       	add	r25, r25
   a:	28 2f       	mov	r18, r24
   c:	24 70       	andi	r18, 0x04	; 4
   e:	22 0f       	add	r18, r18
  10:	22 0f       	add	r18, r18
  12:	92 2b       	or	r25, r18
  14:	93 2b       	or	r25, r19
  16:	88 70       	andi	r24, 0x08	; 8
  18:	88 0f       	add	r24, r24
  1a:	88 0f       	add	r24, r24
  1c:	88 0f       	add	r24, r24
  1e:	98 2b       	or	r25, r24
  20:	89 2f       	mov	r24, r25
  22:	88 0f       	add	r24, r24
  24:	89 2b       	or	r24, r25
  switch(msg)
  26:	08 95       	ret

Disassembly of section .text.u8g_dev_a2_micro_printer_fn:

00000028 <u8g_dev_a2_micro_printer_fn>:
  28:	6f 92       	push	r6
  2a:	7f 92       	push	r7
  2c:	8f 92       	push	r8
  2e:	9f 92       	push	r9
  30:	af 92       	push	r10
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i, j;
        uint8_t *ptr;
        uint8_t *p2;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  32:	bf 92       	push	r11
  34:	cf 92       	push	r12
        
        y = pb->p.page_y0;
        ptr = pb->buf;
  36:	df 92       	push	r13
  38:	ef 92       	push	r14
  3a:	ff 92       	push	r15
	//u8g_WriteByte(u8g, dev, 18);      /* DC2 */
	//u8g_WriteByte(u8g, dev, 35 );      /* #  */
	//u8g_WriteByte(u8g, dev, 0x0ff );      /* max  */

	u8g_WriteByte(u8g, dev, 27);      /* ESC */
  3c:	0f 93       	push	r16
  3e:	1f 93       	push	r17
  40:	cf 93       	push	r28
  42:	df 93       	push	r29
	u8g_WriteByte(u8g, dev, 55 );      /* parameter command */
  44:	8c 01       	movw	r16, r24
  46:	eb 01       	movw	r28, r22
  48:	94 2e       	mov	r9, r20
  4a:	59 01       	movw	r10, r18
  4c:	8a e0       	ldi	r24, 0x0A	; 10
	u8g_WriteByte(u8g, dev, 7);      /* Max printing dots,Unit(8dots),Default:7(64 dots) 8*(x+1)*/
  4e:	48 17       	cp	r20, r24
  50:	01 f0       	breq	.+0      	; 0x52 <u8g_dev_a2_micro_printer_fn+0x2a>
  52:	e5 e1       	ldi	r30, 0x15	; 21
  54:	4e 13       	cpse	r20, r30
  56:	00 c0       	rjmp	.+0      	; 0x58 <u8g_dev_a2_micro_printer_fn+0x30>
	u8g_WriteByte(u8g, dev, 160);      /* 3-255 Heating time,Unit(10us),Default:80(800us) */
  58:	ca 80       	ldd	r12, Y+2	; 0x02
  5a:	db 80       	ldd	r13, Y+3	; 0x03
  5c:	f6 01       	movw	r30, r12
  5e:	86 80       	ldd	r8, Z+6	; 0x06
  60:	67 80       	ldd	r6, Z+7	; 0x07
	u8g_WriteByte(u8g, dev, 20);      /* 0-255 Heating interval,Unit(10us),Default:2(20us)*/
  62:	4b e1       	ldi	r20, 0x1B	; 27
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  6a:	47 e3       	ldi	r20, 0x37	; 55
	
	u8g_WriteByte(u8g, dev, 18);      /* DC2 */
  6c:	be 01       	movw	r22, r28
  6e:	c8 01       	movw	r24, r16
  70:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  74:	47 e0       	ldi	r20, 0x07	; 7
	u8g_WriteByte(u8g, dev, 42 );      /* *  */
  76:	be 01       	movw	r22, r28
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  7e:	40 ea       	ldi	r20, 0xA0	; 160
	u8g_WriteByte(u8g, dev, pb->p.page_height*2 ); 
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  88:	44 e1       	ldi	r20, 0x14	; 20
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
	u8g_WriteByte(u8g, dev, pb->width/8*2 ); 
  8e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  92:	42 e1       	ldi	r20, 0x12	; 18
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  9c:	4a e2       	ldi	r20, 0x2A	; 42
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
	
        for( i = 0; i < pb->p.page_height; i ++ )
  a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
uint8_t u8g_dev_a2_micro_printer_double_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  a6:	f6 01       	movw	r30, r12
  a8:	40 81       	ld	r20, Z
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
      break;
  ae:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	  {
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 >> 4));
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 & 15));
	    p2++;
	  }
	  u8g_Delay(LINE_DELAY);
  b2:	f6 01       	movw	r30, r12
  b4:	45 81       	ldd	r20, Z+5	; 0x05
  b6:	46 95       	lsr	r20
	  ptr += pb->width/8;
  b8:	46 95       	lsr	r20
  ba:	46 95       	lsr	r20
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c4:	71 2c       	mov	r7, r1
	u8g_WriteByte(u8g, dev, 18);      /* DC2 */
	u8g_WriteByte(u8g, dev, 42 );      /* *  */
	u8g_WriteByte(u8g, dev, pb->p.page_height*2 ); 
	u8g_WriteByte(u8g, dev, pb->width/8*2 ); 
	
        for( i = 0; i < pb->p.page_height; i ++ )
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <u8g_dev_a2_micro_printer_fn+0xa0>
  c8:	4f ef       	ldi	r20, 0xFF	; 255
  ca:	c8 01       	movw	r24, r16
  cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_dev_a2_micro_printer_fn+0xaa>
  d2:	88 e2       	ldi	r24, 0x28	; 40
  d4:	90 e0       	ldi	r25, 0x00	; 0
        {
	  p2 = ptr;
	  for( j = 0; j < pb->width/8; j++ )
  d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  da:	73 94       	inc	r7
  dc:	8e 2c       	mov	r8, r14
  de:	6f 2c       	mov	r6, r15
  e0:	f6 01       	movw	r30, r12
  e2:	80 81       	ld	r24, Z
  e4:	78 16       	cp	r7, r24
  e6:	00 f4       	brcc	.+0      	; 0xe8 <u8g_dev_a2_micro_printer_fn+0xc0>
	  {
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 >> 4));
  e8:	e8 2c       	mov	r14, r8
  ea:	f6 2c       	mov	r15, r6
  ec:	f6 01       	movw	r30, r12
  ee:	85 81       	ldd	r24, Z+5	; 0x05
  f0:	86 95       	lsr	r24
  f2:	86 95       	lsr	r24
  f4:	86 95       	lsr	r24
  f6:	9e 2d       	mov	r25, r14
  f8:	98 19       	sub	r25, r8
  fa:	98 17       	cp	r25, r24
  fc:	00 f4       	brcc	.+0      	; 0xfe <u8g_dev_a2_micro_printer_fn+0xd6>
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 & 15));
  fe:	f7 01       	movw	r30, r14
 100:	41 91       	ld	r20, Z+
 102:	7f 01       	movw	r14, r30
 104:	be 01       	movw	r22, r28
 106:	c8 01       	movw	r24, r16
 108:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <u8g_dev_a2_micro_printer_fn+0xe6>
 10e:	4b e1       	ldi	r20, 0x1B	; 27
 110:	be 01       	movw	r22, r28
 112:	c8 01       	movw	r24, r16
 114:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	    p2++;
	  }
	  u8g_Delay(LINE_DELAY);
 118:	47 e3       	ldi	r20, 0x37	; 55
 11a:	be 01       	movw	r22, r28
 11c:	c8 01       	movw	r24, r16
	  p2 = ptr;
 11e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	  for( j = 0; j < pb->width/8; j++ )
 122:	47 e0       	ldi	r20, 0x07	; 7
 124:	be 01       	movw	r22, r28
 126:	c8 01       	movw	r24, r16
 128:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 12c:	40 e5       	ldi	r20, 0x50	; 80
 12e:	be 01       	movw	r22, r28
 130:	c8 01       	movw	r24, r16
 132:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	  {
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 >> 4));
 136:	42 e0       	ldi	r20, 0x02	; 2
 138:	be 01       	movw	r22, r28
 13a:	c8 01       	movw	r24, r16
 13c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 140:	95 01       	movw	r18, r10
 142:	49 2d       	mov	r20, r9
 144:	be 01       	movw	r22, r28
 146:	c8 01       	movw	r24, r16
 148:	df 91       	pop	r29
	    u8g_WriteByte(u8g, dev, u8g_dev_expand4(*p2 & 15));
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	ff 90       	pop	r15
 152:	ef 90       	pop	r14
 154:	df 90       	pop	r13
 156:	cf 90       	pop	r12
 158:	bf 90       	pop	r11
 15a:	af 90       	pop	r10
 15c:	9f 90       	pop	r9
 15e:	8f 90       	pop	r8
 160:	7f 90       	pop	r7
	  ptr += pb->width/8;
          y++;
        }
	
	/* set parameters back to their default values */
	u8g_WriteByte(u8g, dev, 27);      /* ESC */
 162:	6f 90       	pop	r6
 164:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_dev_a2_micro_printer_double_fn:

00000190 <u8g_dev_a2_micro_printer_double_fn>:
	u8g_WriteByte(u8g, dev, 55 );      /* parameter command */
	u8g_WriteByte(u8g, dev, 7);      /* Max printing dots,Unit(8dots),Default:7(64 dots) 8*(x+1)*/
	u8g_WriteByte(u8g, dev, 80);      /* 3-255 Heating time,Unit(10us),Default:80(800us) */
	u8g_WriteByte(u8g, dev, 2);      /* 0-255 Heating interval,Unit(10us),Default:2(20us)*/
 190:	5f 92       	push	r5
 192:	6f 92       	push	r6
	
      }
      break;
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
 194:	7f 92       	push	r7
 196:	8f 92       	push	r8
 198:	9f 92       	push	r9
 19a:	af 92       	push	r10
}
 19c:	bf 92       	push	r11
 19e:	cf 92       	push	r12
 1a0:	df 92       	push	r13
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	8c 01       	movw	r16, r24
 1b0:	eb 01       	movw	r28, r22
 1b2:	74 2e       	mov	r7, r20
 1b4:	49 01       	movw	r8, r18
 1b6:	8a e0       	ldi	r24, 0x0A	; 10
 1b8:	48 17       	cp	r20, r24
	u8g_WriteByte(u8g, dev, 2);      /* 0-255 Heating interval,Unit(10us),Default:2(20us)*/
	
      }
      break;
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
 1ba:	01 f0       	breq	.+0      	; 0x1bc <u8g_dev_a2_micro_printer_double_fn+0x2c>
 1bc:	e5 e1       	ldi	r30, 0x15	; 21
 1be:	4e 13       	cpse	r20, r30
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <u8g_dev_a2_micro_printer_double_fn+0x32>
 1c2:	ea 80       	ldd	r14, Y+2	; 0x02
 1c4:	fb 80       	ldd	r15, Y+3	; 0x03
 1c6:	f7 01       	movw	r30, r14
 1c8:	c6 80       	ldd	r12, Z+6	; 0x06
 1ca:	d7 80       	ldd	r13, Z+7	; 0x07
 1cc:	4b e1       	ldi	r20, 0x1B	; 27
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1d4:	47 e3       	ldi	r20, 0x37	; 55
 1d6:	be 01       	movw	r22, r28
 1d8:	c8 01       	movw	r24, r16
 1da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1de:	47 e0       	ldi	r20, 0x07	; 7
 1e0:	be 01       	movw	r22, r28
 1e2:	c8 01       	movw	r24, r16
 1e4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1e8:	40 ea       	ldi	r20, 0xA0	; 160
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f2:	44 e1       	ldi	r20, 0x14	; 20
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	42 e1       	ldi	r20, 0x12	; 18
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 206:	4a e2       	ldi	r20, 0x2A	; 42
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	f7 01       	movw	r30, r14
 212:	40 81       	ld	r20, Z
 214:	44 0f       	add	r20, r20
 216:	be 01       	movw	r22, r28
 218:	c8 01       	movw	r24, r16
 21a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21e:	f7 01       	movw	r30, r14
 220:	45 81       	ldd	r20, Z+5	; 0x05
 222:	46 95       	lsr	r20
 224:	46 95       	lsr	r20
 226:	46 95       	lsr	r20
 228:	44 0f       	add	r20, r20
 22a:	be 01       	movw	r22, r28
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 232:	61 2c       	mov	r6, r1
 234:	00 c0       	rjmp	.+0      	; 0x236 <u8g_dev_a2_micro_printer_double_fn+0xa6>
 236:	4f ef       	ldi	r20, 0xFF	; 255
 238:	c8 01       	movw	r24, r16
 23a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <u8g_dev_a2_micro_printer_double_fn+0xb0>
 240:	88 e2       	ldi	r24, 0x28	; 40
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 248:	f7 01       	movw	r30, r14
 24a:	85 81       	ldd	r24, Z+5	; 0x05
 24c:	86 95       	lsr	r24
 24e:	86 95       	lsr	r24
 250:	86 95       	lsr	r24
 252:	c8 0e       	add	r12, r24
 254:	d1 1c       	adc	r13, r1
 256:	63 94       	inc	r6
 258:	f7 01       	movw	r30, r14
 25a:	80 81       	ld	r24, Z
 25c:	68 16       	cp	r6, r24
 25e:	00 f0       	brcs	.+0      	; 0x260 <u8g_dev_a2_micro_printer_double_fn+0xd0>
 260:	00 c0       	rjmp	.+0      	; 0x262 <u8g_dev_a2_micro_printer_double_fn+0xd2>
 262:	56 01       	movw	r10, r12
 264:	5c 2c       	mov	r5, r12
 266:	f7 01       	movw	r30, r14
 268:	85 81       	ldd	r24, Z+5	; 0x05
 26a:	86 95       	lsr	r24
 26c:	86 95       	lsr	r24
 26e:	86 95       	lsr	r24
 270:	9a 2d       	mov	r25, r10
 272:	9c 19       	sub	r25, r12
 274:	98 17       	cp	r25, r24
 276:	00 f4       	brcc	.+0      	; 0x278 <u8g_dev_a2_micro_printer_double_fn+0xe8>
 278:	f5 01       	movw	r30, r10
 27a:	80 81       	ld	r24, Z
 27c:	82 95       	swap	r24
 27e:	8f 70       	andi	r24, 0x0F	; 15
 280:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 284:	48 2f       	mov	r20, r24
 286:	be 01       	movw	r22, r28
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 28e:	f5 01       	movw	r30, r10
 290:	81 91       	ld	r24, Z+
 292:	5f 01       	movw	r10, r30
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 29a:	48 2f       	mov	r20, r24
 29c:	be 01       	movw	r22, r28
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <u8g_dev_a2_micro_printer_double_fn+0x116>
 2a6:	88 e2       	ldi	r24, 0x28	; 40
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2ae:	56 01       	movw	r10, r12
 2b0:	f7 01       	movw	r30, r14
 2b2:	85 81       	ldd	r24, Z+5	; 0x05
 2b4:	86 95       	lsr	r24
 2b6:	86 95       	lsr	r24
 2b8:	86 95       	lsr	r24
 2ba:	9a 2d       	mov	r25, r10
 2bc:	95 19       	sub	r25, r5
 2be:	98 17       	cp	r25, r24
 2c0:	00 f0       	brcs	.+0      	; 0x2c2 <u8g_dev_a2_micro_printer_double_fn+0x132>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <u8g_dev_a2_micro_printer_double_fn+0x134>
 2c4:	f5 01       	movw	r30, r10
 2c6:	80 81       	ld	r24, Z
 2c8:	82 95       	swap	r24
 2ca:	8f 70       	andi	r24, 0x0F	; 15
 2cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2d0:	48 2f       	mov	r20, r24
 2d2:	be 01       	movw	r22, r28
 2d4:	c8 01       	movw	r24, r16
 2d6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2da:	f5 01       	movw	r30, r10
 2dc:	81 91       	ld	r24, Z+
 2de:	5f 01       	movw	r10, r30
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2e6:	48 2f       	mov	r20, r24
 2e8:	be 01       	movw	r22, r28
 2ea:	c8 01       	movw	r24, r16
 2ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <u8g_dev_a2_micro_printer_double_fn+0x162>
 2f2:	4b e1       	ldi	r20, 0x1B	; 27
 2f4:	be 01       	movw	r22, r28
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2fc:	47 e3       	ldi	r20, 0x37	; 55
 2fe:	be 01       	movw	r22, r28
 300:	c8 01       	movw	r24, r16
 302:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 306:	47 e0       	ldi	r20, 0x07	; 7
 308:	be 01       	movw	r22, r28
 30a:	c8 01       	movw	r24, r16
 30c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 310:	40 e5       	ldi	r20, 0x50	; 80
 312:	be 01       	movw	r22, r28
 314:	c8 01       	movw	r24, r16
 316:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 31a:	42 e0       	ldi	r20, 0x02	; 2
 31c:	be 01       	movw	r22, r28
 31e:	c8 01       	movw	r24, r16
 320:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 324:	94 01       	movw	r18, r8
 326:	47 2d       	mov	r20, r7
 328:	be 01       	movw	r22, r28
 32a:	c8 01       	movw	r24, r16
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	af 90       	pop	r10
 340:	9f 90       	pop	r9
 342:	8f 90       	pop	r8
 344:	7f 90       	pop	r7
 346:	6f 90       	pop	r6
 348:	5f 90       	pop	r5
 34a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_dev_flipdisc_2x7.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000174c  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_flipdisc_2x7_bw_fn 00000090  00000000  00000000  00001ed0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_SetFlipDiscCallback 0000000a  00000000  00000000  00001f60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_flipdisc_2x7 00000006  00000000  00000000  00001f6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_flipdisc_2x7_bw_pb 00000008  00000000  00000000  00001f70  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .bss.u8g_dev_flipdisc_2x7_bw_buf 00000038  00000000  00000000  00001f78  2**0
                  ALLOC
 10 .comment      00000022  00000000  00000000  00001f78  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_flipdisc_2x7_bw_fn:

00000000 <u8g_dev_flipdisc_2x7_bw_fn>:

void (*u8g_write_flip_disc_matrix)(uint8_t id, uint8_t page, uint8_t width, uint8_t *row1, uint8_t *row2);

void u8g_SetFlipDiscCallback(u8g_t *u8g, void (*cb)(uint8_t id, uint8_t page, uint8_t width, uint8_t *row1, uint8_t *row2))
{
  u8g_write_flip_disc_matrix = cb;
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	1f 92       	push	r1
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	7c 01       	movw	r14, r24
  1c:	5b 01       	movw	r10, r22
  1e:	94 2f       	mov	r25, r20
  20:	69 01       	movw	r12, r18
  22:	4f 30       	cpi	r20, 0x0F	; 15
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_flipdisc_2x7_bw_fn+0x26>
  26:	45 31       	cpi	r20, 0x15	; 21
  28:	01 f4       	brne	.+0      	; 0x2a <u8g_dev_flipdisc_2x7_bw_fn+0x2a>
  2a:	fb 01       	movw	r30, r22
  2c:	a2 81       	ldd	r26, Z+2	; 0x02
  2e:	b3 81       	ldd	r27, Z+3	; 0x03
  30:	16 96       	adiw	r26, 0x06	; 6
  32:	2d 91       	ld	r18, X+
  34:	3c 91       	ld	r19, X
  36:	17 97       	sbiw	r26, 0x07	; 7
  38:	89 01       	movw	r16, r18
  3a:	04 5e       	subi	r16, 0xE4	; 228
  3c:	1f 4f       	sbci	r17, 0xFF	; 255
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	4c e1       	ldi	r20, 0x1C	; 28
  48:	14 96       	adiw	r26, 0x04	; 4
  4a:	6c 91       	ld	r22, X
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	99 83       	std	Y+1, r25	; 0x01
  50:	09 95       	icall
  52:	99 81       	ldd	r25, Y+1	; 0x01
  54:	96 01       	movw	r18, r12
  56:	49 2f       	mov	r20, r25
  58:	b5 01       	movw	r22, r10
  5a:	c7 01       	movw	r24, r14
  5c:	0f 90       	pop	r0
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	cf 90       	pop	r12
  6e:	bf 90       	pop	r11
  70:	af 90       	pop	r10
  72:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_flipdisc_2x7_bw_fn>
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	0f 90       	pop	r0
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	df 90       	pop	r13
  88:	cf 90       	pop	r12
  8a:	bf 90       	pop	r11
  8c:	af 90       	pop	r10
  8e:	08 95       	ret

Disassembly of section .text.u8g_SetFlipDiscCallback:

00000090 <u8g_SetFlipDiscCallback>:
  90:	70 93 00 00 	sts	0x0000, r23
  94:	60 93 00 00 	sts	0x0000, r22
  98:	08 95       	ret

u8g_dev_gprof.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016b3  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_gprof_fn 0000008e  00000000  00000000  00001e37  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_gprof 00000006  00000000  00000000  00001ec5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_pb_dev_gprof 00000008  00000000  00000000  00001ecb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .comment      00000022  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_gprof_fn:

00000000 <u8g_dev_gprof_fn>:
u8g_pb_t u8g_pb_dev_gprof = { {PAGE_HEIGHT, HEIGHT, 0, 0, 0},  WIDTH, u8g_pb_dev_gprof_buf };

u8g_dev_t u8g_dev_gprof = { u8g_dev_gprof_fn, &u8g_pb_dev_gprof, NULL };

uint8_t u8g_dev_gprof_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	6c 01       	movw	r12, r24
  14:	7b 01       	movw	r14, r22
  16:	b4 2e       	mov	r11, r20
  18:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  1a:	fb 01       	movw	r30, r22
  1c:	c2 81       	ldd	r28, Z+2	; 0x02
  1e:	d3 81       	ldd	r29, Z+3	; 0x03
  
  switch(msg)
  20:	f5 e1       	ldi	r31, 0x15	; 21
  22:	4f 17       	cp	r20, r31
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_gprof_fn+0x26>
  26:	87 e1       	ldi	r24, 0x17	; 23
  28:	48 17       	cp	r20, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_gprof_fn+0x2c>
  2c:	e4 e1       	ldi	r30, 0x14	; 20
  2e:	4e 13       	cpse	r20, r30
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_gprof_fn+0x32>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  32:	ce 01       	movw	r24, r28
  34:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_gprof_fn>
      u8g_page_First(&(pb->p));
  38:	ce 01       	movw	r24, r28
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_gprof_fn>
      break;
  3e:	00 c0       	rjmp	.+0      	; 0x40 <u8g_dev_gprof_fn+0x40>
          }
          printf("\n");
        }
      }
      */
      if ( u8g_page_Next(&(pb->p)) == 0 )
  40:	ce 01       	movw	r24, r28
  42:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_gprof_fn>
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <u8g_dev_gprof_fn+0x4a>
      {
        //printf("\n");
        return 0;
      }
      u8g_pb_Clear(pb);
  4a:	ce 01       	movw	r24, r28
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_gprof_fn>
      break;
  50:	00 c0       	rjmp	.+0      	; 0x52 <u8g_dev_gprof_fn+0x52>
          return 0;
      }
      return 1;
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  52:	b9 01       	movw	r22, r18
  54:	ce 01       	movw	r24, r28
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_gprof_fn>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  5a:	98 01       	movw	r18, r16
  5c:	4b 2d       	mov	r20, r11
  5e:	b7 01       	movw	r22, r14
  60:	c6 01       	movw	r24, r12
}
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	ff 90       	pop	r15
  6c:	ef 90       	pop	r14
  6e:	df 90       	pop	r13
  70:	cf 90       	pop	r12
  72:	bf 90       	pop	r11
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  74:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_gprof_fn>
}
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	df 90       	pop	r13
  88:	cf 90       	pop	r12
  8a:	bf 90       	pop	r11
  8c:	08 95       	ret

u8g_dev_ht1632.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001763  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ht1632_24x16_fn 0000000c  00000000  00000000  00001ee7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.ht1632_init 00000002  00000000  00000000  00001ef3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.ht1632_transfer_data 00000002  00000000  00000000  00001ef5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.ht1632_set_contrast 00000002  00000000  00000000  00001ef7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .data.u8g_dev_ht1632_24x16 00000006  00000000  00000000  00001ef9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ht1632_24x16_pb 00000008  00000000  00000000  00001eff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ht1632_24x16_buf 00000030  00000000  00000000  00001f07  2**0
                  ALLOC
 12 .comment      00000022  00000000  00000000  00001f07  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ht1632_24x16_fn:

00000000 <u8g_dev_ht1632_24x16_fn>:
void ht1632_transfer_data(u8g_t *u8g, uint8_t page, uint8_t cnt, uint8_t *data)
{
}

void ht1632_set_contrast(u8g_t *u8g, uint8_t value)
{
   0:	4f 30       	cpi	r20, 0x0F	; 15
   2:	01 f0       	breq	.+0      	; 0x4 <u8g_dev_ht1632_24x16_fn+0x4>
   4:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ht1632_24x16_fn>
   8:	81 e0       	ldi	r24, 0x01	; 1
   a:	08 95       	ret

Disassembly of section .text.ht1632_init:

0000000c <ht1632_init>:
   c:	08 95       	ret

Disassembly of section .text.ht1632_transfer_data:

0000001a <ht1632_transfer_data>:
  1a:	08 95       	ret

Disassembly of section .text.ht1632_set_contrast:

00000036 <ht1632_set_contrast>:
  36:	08 95       	ret

u8g_dev_ili9325d_320x240.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008c4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001791  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ili9325d_320x240_fn 00000156  00000000  00000000  00002089  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_ili9325d_320x240_8bit 00000006  00000000  00000000  000021df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_ili9325d_320x240_8h8_pb 00000008  00000000  00000000  000021e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_ili9325d_320x240_8h8_buf 000003c0  00000000  00000000  000021ed  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_ili9325d_320x240_page_seq 00000012  00000000  00000000  000021ed  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.data.u8g_dev_ili9325d_320x240_init_seq 000001e0  00000000  00000000  000021ff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .comment      00000022  00000000  00000000  000023df  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ili9325d_320x240_fn:

00000000 <u8g_dev_ili9325d_320x240_fn>:
  return l;  
}


uint8_t u8g_dev_ili9325d_320x240_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	8c 01       	movw	r16, r24
  26:	eb 01       	movw	r28, r22
  28:	54 2e       	mov	r5, r20
  2a:	19 01       	movw	r2, r18
  
  switch(msg)
  2c:	8a e0       	ldi	r24, 0x0A	; 10
  2e:	48 17       	cp	r20, r24
  30:	01 f0       	breq	.+0      	; 0x32 <u8g_dev_ili9325d_320x240_fn+0x32>
  32:	e5 e1       	ldi	r30, 0x15	; 21
  34:	4e 13       	cpse	r20, r30
  36:	00 c0       	rjmp	.+0      	; 0x38 <u8g_dev_ili9325d_320x240_fn+0x38>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t i;
        uint16_t y, j;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  38:	ca 80       	ldd	r12, Y+2	; 0x02
  3a:	db 80       	ldd	r13, Y+3	; 0x03
        
        y = pb->p.page_y0;
  3c:	f6 01       	movw	r30, r12
  3e:	42 80       	ldd	r4, Z+2	; 0x02
  40:	64 2c       	mov	r6, r4
  42:	71 2c       	mov	r7, r1
        ptr = pb->buf;
  44:	a6 80       	ldd	r10, Z+6	; 0x06
  46:	b7 80       	ldd	r11, Z+7	; 0x07
        for( i = 0; i < pb->p.page_height; i ++ )
  48:	e1 2c       	mov	r14, r1
  4a:	f1 2c       	mov	r15, r1
  4c:	00 c0       	rjmp	.+0      	; 0x4e <u8g_dev_ili9325d_320x240_fn+0x4e>
{
  
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_50NS);
  4e:	41 e0       	ldi	r20, 0x01	; 1
  50:	c8 01       	movw	r24, r16
  52:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
      //for(;;)
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ili9325d_320x240_init_seq);
  56:	40 e0       	ldi	r20, 0x00	; 0
  58:	50 e0       	ldi	r21, 0x00	; 0
  5a:	be 01       	movw	r22, r28
  5c:	c8 01       	movw	r24, r16
  5e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
    
      break;
  62:	00 c0       	rjmp	.+0      	; 0x64 <u8g_dev_ili9325d_320x240_fn+0x64>
  64:	ff ef       	ldi	r31, 0xFF	; 255
  66:	ef 1a       	sub	r14, r31
  68:	ff 0a       	sbc	r15, r31
          u8g_WriteByte(u8g, dev, 0 );  
          u8g_WriteByte(u8g, dev, 0x022 );      /* start gram data */  
          
          u8g_SetAddress(u8g, dev, 1);           /* data mode */
          
          for( j = 0; j < pb->width; j++ )
  6a:	54 01       	movw	r10, r8
  6c:	47 01       	movw	r8, r14
  6e:	86 0c       	add	r8, r6
  70:	97 1c       	adc	r9, r7
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < pb->p.page_height; i ++ )
  72:	f6 01       	movw	r30, r12
  74:	80 81       	ld	r24, Z
  76:	e8 16       	cp	r14, r24
  78:	00 f0       	brcs	.+0      	; 0x7a <u8g_dev_ili9325d_320x240_fn+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <u8g_dev_ili9325d_320x240_fn+0x7c>
        {
          u8g_WriteEscSeqP(u8g, dev, u8g_dev_ili9325d_320x240_page_seq);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
          u8g_WriteByte(u8g, dev, y >> 8 );      /* display ram (cursor) address high byte */
  88:	49 2d       	mov	r20, r9
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
  92:	44 2d       	mov	r20, r4
  94:	4e 0d       	add	r20, r14
          u8g_WriteByte(u8g, dev, y & 255 );      /* display ram (cursor) address low byte */
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>

          u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	be 01       	movw	r22, r28
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
          u8g_WriteByte(u8g, dev, 0 );  
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
          u8g_WriteByte(u8g, dev, 0x022 );      /* start gram data */  
  b2:	42 e2       	ldi	r20, 0x22	; 34
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
          
          u8g_SetAddress(u8g, dev, 1);           /* data mode */
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	be 01       	movw	r22, r28
  c0:	c8 01       	movw	r24, r16
  c2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
          
          for( j = 0; j < pb->width; j++ )
  c6:	45 01       	movw	r8, r10
  c8:	f6 01       	movw	r30, r12
  ca:	85 81       	ldd	r24, Z+5	; 0x05
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	94 01       	movw	r18, r8
  d0:	2a 19       	sub	r18, r10
  d2:	3b 09       	sbc	r19, r11
  d4:	28 17       	cp	r18, r24
  d6:	39 07       	cpc	r19, r25
  d8:	00 f4       	brcc	.+0      	; 0xda <u8g_dev_ili9325d_320x240_fn+0xda>
          {
            u8g_WriteByte(u8g, dev, u8g_dev_ili9325d_get_65K_high_byte(*ptr) );  
  da:	f4 01       	movw	r30, r8
  dc:	80 81       	ld	r24, Z
/* convert the internal RGB 332 to 65K high byte */
static uint8_t u8g_dev_ili9325d_get_65K_high_byte(uint8_t color)
{
  uint8_t h;
  h = color;
  h &= 0x0e0;
  de:	98 2f       	mov	r25, r24
  e0:	90 7e       	andi	r25, 0xE0	; 224
  h |= h>>3;
  e2:	49 2f       	mov	r20, r25
  e4:	46 95       	lsr	r20
  e6:	46 95       	lsr	r20
  e8:	46 95       	lsr	r20
  ea:	49 2b       	or	r20, r25
  h &= 0x0f8;
  ec:	48 7f       	andi	r20, 0xF8	; 248
  color>>=2;
  ee:	86 95       	lsr	r24
  f0:	86 95       	lsr	r24
  color &= 7;
  f2:	87 70       	andi	r24, 0x07	; 7
  h |= color;
  f4:	48 2b       	or	r20, r24
          
          u8g_SetAddress(u8g, dev, 1);           /* data mode */
          
          for( j = 0; j < pb->width; j++ )
          {
            u8g_WriteByte(u8g, dev, u8g_dev_ili9325d_get_65K_high_byte(*ptr) );  
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
            u8g_WriteByte(u8g, dev, u8g_dev_ili9325d_get_65K_low_byte(*ptr) );  
  fe:	f4 01       	movw	r30, r8
 100:	41 91       	ld	r20, Z+
 102:	4f 01       	movw	r8, r30
/* convert the internal RGB 332 to 65K high byte */
static uint8_t u8g_dev_ili9325d_get_65K_low_byte(uint8_t color)
{
  uint8_t l;
  l = color;
  l <<= 3;
 104:	84 2f       	mov	r24, r20
 106:	88 0f       	add	r24, r24
 108:	88 0f       	add	r24, r24
 10a:	88 0f       	add	r24, r24
  color &= 3;
 10c:	43 70       	andi	r20, 0x03	; 3
  color <<= 1;
 10e:	44 0f       	add	r20, r20
  l |= color;
 110:	48 2b       	or	r20, r24
          u8g_SetAddress(u8g, dev, 1);           /* data mode */
          
          for( j = 0; j < pb->width; j++ )
          {
            u8g_WriteByte(u8g, dev, u8g_dev_ili9325d_get_65K_high_byte(*ptr) );  
            u8g_WriteByte(u8g, dev, u8g_dev_ili9325d_get_65K_low_byte(*ptr) );  
 112:	be 01       	movw	r22, r28
 114:	c8 01       	movw	r24, r16
 116:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <u8g_dev_ili9325d_320x240_fn+0x11c>
              
            ptr++;
          }
          y++;
        }
        u8g_SetChipSelect(u8g, dev, 0);
 11c:	40 e0       	ldi	r20, 0x00	; 0
 11e:	be 01       	movw	r22, r28
 120:	c8 01       	movw	r24, r16
 122:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>
      }
      break;
  }
  return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 126:	91 01       	movw	r18, r2
 128:	45 2d       	mov	r20, r5
 12a:	be 01       	movw	r22, r28
 12c:	c8 01       	movw	r24, r16
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	bf 90       	pop	r11
 140:	af 90       	pop	r10
 142:	9f 90       	pop	r9
 144:	8f 90       	pop	r8
 146:	7f 90       	pop	r7
 148:	6f 90       	pop	r6
 14a:	5f 90       	pop	r5
 14c:	4f 90       	pop	r4
 14e:	3f 90       	pop	r3
 150:	2f 90       	pop	r2
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 152:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ili9325d_320x240_fn>

u8g_dev_ks0108_128x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000178a  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ks0108_128x64_fn 00000102  00000000  00000000  00001faa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_ks0108_128x64_fast 00000006  00000000  00000000  000020ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_ks0108_128x64_fast_pb 00000008  00000000  00000000  000020b2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_ks0108_128x64_fast_buf 00000080  00000000  00000000  000020ba  2**0
                  ALLOC
  9 .data.u8g_dev_ks0108_128x64 00000006  00000000  00000000  000020ba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ks0108_128x64_pb 00000008  00000000  00000000  000020c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ks0108_128x64_buf 00000080  00000000  00000000  000020c8  2**0
                  ALLOC
 12 .progmem.data.u8g_dev_ks0108_128x64_init_seq 00000016  00000000  00000000  000020c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .comment      00000022  00000000  00000000  000020de  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ks0108_128x64_fn:

00000000 <u8g_dev_ks0108_128x64_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_ks0108_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	69 01       	movw	r12, r18
  
  switch(msg)
  1a:	8a e0       	ldi	r24, 0x0A	; 10
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_ks0108_128x64_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_ks0108_128x64_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 13       	cpse	r20, r30
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_dev_ks0108_128x64_fn+0x28>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  28:	ea 80       	ldd	r14, Y+2	; 0x02
  2a:	fb 80       	ldd	r15, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  2c:	40 e0       	ldi	r20, 0x00	; 0
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 2);
  34:	42 e0       	ldi	r20, 0x02	; 2
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
  3e:	f7 01       	movw	r30, r14
  40:	44 81       	ldd	r20, Z+4	; 0x04
  42:	48 6b       	ori	r20, 0xB8	; 184
  44:	be 01       	movw	r22, r28
  46:	c8 01       	movw	r24, r16
  48:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
  4c:	40 e4       	ldi	r20, 0x40	; 64
  4e:	be 01       	movw	r22, r28
  50:	c8 01       	movw	r24, r16
  52:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  56:	41 e0       	ldi	r20, 0x01	; 1
  58:	be 01       	movw	r22, r28
  5a:	c8 01       	movw	r24, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteSequence(u8g, dev, 64, pb->buf);
  60:	f7 01       	movw	r30, r14
  62:	26 81       	ldd	r18, Z+6	; 0x06
  64:	37 81       	ldd	r19, Z+7	; 0x07
  66:	40 e4       	ldi	r20, 0x40	; 64
  68:	be 01       	movw	r22, r28
  6a:	c8 01       	movw	r24, r16
  6c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	be 01       	movw	r22, r28
  74:	c8 01       	movw	r24, r16
  76:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	be 01       	movw	r22, r28
  7e:	c8 01       	movw	r24, r16
  80:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	be 01       	movw	r22, r28
  88:	c8 01       	movw	r24, r16
  8a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (KS0108b) */
  8e:	f7 01       	movw	r30, r14
  90:	44 81       	ldd	r20, Z+4	; 0x04
  92:	48 6b       	ori	r20, 0xB8	; 184
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x040 );		/* set address 0 */
  9c:	40 e4       	ldi	r20, 0x40	; 64
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	be 01       	movw	r22, r28
  aa:	c8 01       	movw	r24, r16
  ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_WriteSequence(u8g, dev, 64, 64+(uint8_t *)pb->buf);
  b0:	f7 01       	movw	r30, r14
  b2:	26 81       	ldd	r18, Z+6	; 0x06
  b4:	37 81       	ldd	r19, Z+7	; 0x07
  b6:	20 5c       	subi	r18, 0xC0	; 192
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	40 e4       	ldi	r20, 0x40	; 64
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	be 01       	movw	r22, r28
  c8:	c8 01       	movw	r24, r16
  ca:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        
      }
      break;
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <u8g_dev_ks0108_128x64_fn+0xd0>
{
  
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	c8 01       	movw	r24, r16
  d4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ks0108_128x64_init_seq);
  d8:	40 e0       	ldi	r20, 0x00	; 0
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	be 01       	movw	r22, r28
  de:	c8 01       	movw	r24, r16
  e0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ks0108_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e4:	96 01       	movw	r18, r12
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
        u8g_SetChipSelect(u8g, dev, 0);
        
      }
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ks0108_128x64_fn>

u8g_dev_lc7981_160x80.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001747  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_lc7981_160x80_fn 00000134  00000000  00000000  00001fc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_lc7981_160x80_8bit 00000006  00000000  00000000  000020fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_lc7981_160x80_8bit_pb 00000008  00000000  00000000  00002101  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_lc7981_160x80_8bit_buf 000000a0  00000000  00000000  00002109  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_lc7981_160x80_init_seq 00000034  00000000  00000000  00002109  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_lc7981_160x80_fn:

00000000 <u8g_dev_lc7981_160x80_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_lc7981_160x80_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_lc7981_160x80_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_lc7981_160x80_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	f4 e1       	ldi	r31, 0x14	; 20
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 ea       	ldi	r24, 0xA0	; 160
  58:	88 0e       	add	r8, r24
  5a:	91 1c       	adc	r9, r1
  5c:	ce 18       	sub	r12, r14
  5e:	df 08       	sbc	r13, r15
  60:	00 c0       	rjmp	.+0      	; 0x62 <u8g_dev_lc7981_160x80_fn+0x62>
uint8_t u8g_dev_lc7981_160x80_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  62:	4f ef       	ldi	r20, 0xFF	; 255
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_lc7981_160x80_init_seq);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	be 01       	movw	r22, r28
  70:	c8 01       	movw	r24, r16
  72:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
      break;
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_lc7981_160x80_fn+0x78>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
        {
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	be 01       	movw	r22, r28
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_WriteByte(u8g, dev, 0x00a );      /* display ram (cursor) address low byte */
  82:	4a e0       	ldi	r20, 0x0A	; 10
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	be 01       	movw	r22, r28
  90:	c8 01       	movw	r24, r16
  92:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr & 0x0ff );  
  96:	4e 2d       	mov	r20, r14
  98:	be 01       	movw	r22, r28
  9a:	c8 01       	movw	r24, r16
  9c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>

          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_WriteByte(u8g, dev, 0x00b );      /* display ram (cursor) address hight byte */
  aa:	4b e0       	ldi	r20, 0x0B	; 11
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	be 01       	movw	r22, r28
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr >> 8 );  
  be:	4f 2d       	mov	r20, r15
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_WriteByte(u8g, dev, 0x00c );      /* write data */
  d2:	4c e0       	ldi	r20, 0x0C	; 12
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
  e6:	96 01       	movw	r18, r12
  e8:	2e 0d       	add	r18, r14
  ea:	3f 1d       	adc	r19, r15
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  ec:	44 e1       	ldi	r20, 0x14	; 20
  ee:	be 01       	movw	r22, r28
  f0:	c8 01       	movw	r24, r16
  f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  f6:	e4 e1       	ldi	r30, 0x14	; 20
  f8:	ee 0e       	add	r14, r30
  fa:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
  fc:	e8 14       	cp	r14, r8
  fe:	f9 04       	cpc	r15, r9
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_lc7981_160x80_fn+0x102>
 102:	00 c0       	rjmp	.+0      	; 0x104 <u8g_dev_lc7981_160x80_fn+0x104>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
        u8g_SetChipSelect(u8g, dev, 0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_160x80_fn>
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 10e:	95 01       	movw	r18, r10
 110:	47 2d       	mov	r20, r7
 112:	be 01       	movw	r22, r28
 114:	c8 01       	movw	r24, r16
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	7f 90       	pop	r7
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 130:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_lc7981_160x80_fn>

u8g_dev_lc7981_240x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000174e  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_lc7981_240x128_fn 00000134  00000000  00000000  00001fce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_lc7981_240x128_8bit 00000006  00000000  00000000  00002102  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_lc7981_240x128_8bit_pb 00000008  00000000  00000000  00002108  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_lc7981_240x128_8bit_buf 000000f0  00000000  00000000  00002110  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_lc7981_240x128_init_seq 00000034  00000000  00000000  00002110  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_lc7981_240x128_fn:

00000000 <u8g_dev_lc7981_240x128_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_lc7981_240x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_lc7981_240x128_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_lc7981_240x128_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	fe e1       	ldi	r31, 0x1E	; 30
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 ef       	ldi	r24, 0xF0	; 240
  58:	88 0e       	add	r8, r24
  5a:	91 1c       	adc	r9, r1
  5c:	ce 18       	sub	r12, r14
  5e:	df 08       	sbc	r13, r15
  60:	00 c0       	rjmp	.+0      	; 0x62 <u8g_dev_lc7981_240x128_fn+0x62>
uint8_t u8g_dev_lc7981_240x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  62:	4f ef       	ldi	r20, 0xFF	; 255
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_lc7981_240x128_init_seq);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	be 01       	movw	r22, r28
  70:	c8 01       	movw	r24, r16
  72:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
      break;
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_lc7981_240x128_fn+0x78>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
        {
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	be 01       	movw	r22, r28
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_WriteByte(u8g, dev, 0x00a );      /* display ram (cursor) address low byte */
  82:	4a e0       	ldi	r20, 0x0A	; 10
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	be 01       	movw	r22, r28
  90:	c8 01       	movw	r24, r16
  92:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr & 0x0ff );  
  96:	4e 2d       	mov	r20, r14
  98:	be 01       	movw	r22, r28
  9a:	c8 01       	movw	r24, r16
  9c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>

          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_WriteByte(u8g, dev, 0x00b );      /* display ram (cursor) address hight byte */
  aa:	4b e0       	ldi	r20, 0x0B	; 11
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	be 01       	movw	r22, r28
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr >> 8 );  
  be:	4f 2d       	mov	r20, r15
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_WriteByte(u8g, dev, 0x00c );      /* write data */
  d2:	4c e0       	ldi	r20, 0x0C	; 12
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
  e6:	96 01       	movw	r18, r12
  e8:	2e 0d       	add	r18, r14
  ea:	3f 1d       	adc	r19, r15
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  ec:	4e e1       	ldi	r20, 0x1E	; 30
  ee:	be 01       	movw	r22, r28
  f0:	c8 01       	movw	r24, r16
  f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  f6:	ee e1       	ldi	r30, 0x1E	; 30
  f8:	ee 0e       	add	r14, r30
  fa:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
  fc:	e8 14       	cp	r14, r8
  fe:	f9 04       	cpc	r15, r9
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_lc7981_240x128_fn+0x102>
 102:	00 c0       	rjmp	.+0      	; 0x104 <u8g_dev_lc7981_240x128_fn+0x104>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
        u8g_SetChipSelect(u8g, dev, 0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x128_fn>
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 10e:	95 01       	movw	r18, r10
 110:	47 2d       	mov	r20, r7
 112:	be 01       	movw	r22, r28
 114:	c8 01       	movw	r24, r16
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	7f 90       	pop	r7
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 130:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_lc7981_240x128_fn>

u8g_dev_lc7981_240x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001747  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_lc7981_240x64_fn 00000134  00000000  00000000  00001fc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_lc7981_240x64_8bit 00000006  00000000  00000000  000020fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_lc7981_240x64_8bit_pb 00000008  00000000  00000000  00002101  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_lc7981_240x64_8bit_buf 000000f0  00000000  00000000  00002109  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_lc7981_240x64_init_seq 00000034  00000000  00000000  00002109  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_lc7981_240x64_fn:

00000000 <u8g_dev_lc7981_240x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_lc7981_240x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_lc7981_240x64_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_lc7981_240x64_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	fe e1       	ldi	r31, 0x1E	; 30
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 ef       	ldi	r24, 0xF0	; 240
  58:	88 0e       	add	r8, r24
  5a:	91 1c       	adc	r9, r1
  5c:	ce 18       	sub	r12, r14
  5e:	df 08       	sbc	r13, r15
  60:	00 c0       	rjmp	.+0      	; 0x62 <u8g_dev_lc7981_240x64_fn+0x62>
uint8_t u8g_dev_lc7981_240x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  62:	4f ef       	ldi	r20, 0xFF	; 255
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_lc7981_240x64_init_seq);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	be 01       	movw	r22, r28
  70:	c8 01       	movw	r24, r16
  72:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
      break;
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_lc7981_240x64_fn+0x78>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
        {
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	be 01       	movw	r22, r28
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_WriteByte(u8g, dev, 0x00a );      /* display ram (cursor) address low byte */
  82:	4a e0       	ldi	r20, 0x0A	; 10
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	be 01       	movw	r22, r28
  90:	c8 01       	movw	r24, r16
  92:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr & 0x0ff );  
  96:	4e 2d       	mov	r20, r14
  98:	be 01       	movw	r22, r28
  9a:	c8 01       	movw	r24, r16
  9c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>

          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_WriteByte(u8g, dev, 0x00b );      /* display ram (cursor) address hight byte */
  aa:	4b e0       	ldi	r20, 0x0B	; 11
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	be 01       	movw	r22, r28
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr >> 8 );  
  be:	4f 2d       	mov	r20, r15
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_WriteByte(u8g, dev, 0x00c );      /* write data */
  d2:	4c e0       	ldi	r20, 0x0C	; 12
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
  e6:	96 01       	movw	r18, r12
  e8:	2e 0d       	add	r18, r14
  ea:	3f 1d       	adc	r19, r15
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  ec:	4e e1       	ldi	r20, 0x1E	; 30
  ee:	be 01       	movw	r22, r28
  f0:	c8 01       	movw	r24, r16
  f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  f6:	ee e1       	ldi	r30, 0x1E	; 30
  f8:	ee 0e       	add	r14, r30
  fa:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
  fc:	e8 14       	cp	r14, r8
  fe:	f9 04       	cpc	r15, r9
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_lc7981_240x64_fn+0x102>
 102:	00 c0       	rjmp	.+0      	; 0x104 <u8g_dev_lc7981_240x64_fn+0x104>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
        u8g_SetChipSelect(u8g, dev, 0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_240x64_fn>
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 10e:	95 01       	movw	r18, r10
 110:	47 2d       	mov	r20, r7
 112:	be 01       	movw	r22, r28
 114:	c8 01       	movw	r24, r16
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	7f 90       	pop	r7
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 130:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_lc7981_240x64_fn>

u8g_dev_lc7981_320x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001747  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_lc7981_320x64_fn 00000134  00000000  00000000  00001fc7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_lc7981_320x64_8bit 00000006  00000000  00000000  000020fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_lc7981_320x64_8bit_pb 00000008  00000000  00000000  00002101  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_lc7981_320x64_8bit_buf 000000f0  00000000  00000000  00002109  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_lc7981_320x64_init_seq 00000034  00000000  00000000  00002109  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  0000213d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_lc7981_320x64_fn:

00000000 <u8g_dev_lc7981_320x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_lc7981_320x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_lc7981_320x64_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_lc7981_320x64_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	fe e1       	ldi	r31, 0x1E	; 30
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 ef       	ldi	r24, 0xF0	; 240
  58:	88 0e       	add	r8, r24
  5a:	91 1c       	adc	r9, r1
  5c:	ce 18       	sub	r12, r14
  5e:	df 08       	sbc	r13, r15
  60:	00 c0       	rjmp	.+0      	; 0x62 <u8g_dev_lc7981_320x64_fn+0x62>
uint8_t u8g_dev_lc7981_320x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  62:	4f ef       	ldi	r20, 0xFF	; 255
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_lc7981_320x64_init_seq);
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	50 e0       	ldi	r21, 0x00	; 0
  6e:	be 01       	movw	r22, r28
  70:	c8 01       	movw	r24, r16
  72:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
      break;
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_lc7981_320x64_fn+0x78>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
        {
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  78:	41 e0       	ldi	r20, 0x01	; 1
  7a:	be 01       	movw	r22, r28
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_WriteByte(u8g, dev, 0x00a );      /* display ram (cursor) address low byte */
  82:	4a e0       	ldi	r20, 0x0A	; 10
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	be 01       	movw	r22, r28
  90:	c8 01       	movw	r24, r16
  92:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr & 0x0ff );  
  96:	4e 2d       	mov	r20, r14
  98:	be 01       	movw	r22, r28
  9a:	c8 01       	movw	r24, r16
  9c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>

          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_WriteByte(u8g, dev, 0x00b );      /* display ram (cursor) address hight byte */
  aa:	4b e0       	ldi	r20, 0x0B	; 11
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	be 01       	movw	r22, r28
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr >> 8 );  
  be:	4f 2d       	mov	r20, r15
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_WriteByte(u8g, dev, 0x00c );      /* write data */
  d2:	4c e0       	ldi	r20, 0x0C	; 12
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
  e6:	96 01       	movw	r18, r12
  e8:	2e 0d       	add	r18, r14
  ea:	3f 1d       	adc	r19, r15
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  ec:	4e e1       	ldi	r20, 0x1E	; 30
  ee:	be 01       	movw	r22, r28
  f0:	c8 01       	movw	r24, r16
  f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  f6:	ee e1       	ldi	r30, 0x1E	; 30
  f8:	ee 0e       	add	r14, r30
  fa:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < 8; i ++ )
  fc:	e8 14       	cp	r14, r8
  fe:	f9 04       	cpc	r15, r9
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_lc7981_320x64_fn+0x102>
 102:	00 c0       	rjmp	.+0      	; 0x104 <u8g_dev_lc7981_320x64_fn+0x104>
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
        u8g_SetChipSelect(u8g, dev, 0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_lc7981_320x64_fn>
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 10e:	95 01       	movw	r18, r10
 110:	47 2d       	mov	r20, r7
 112:	be 01       	movw	r22, r28
 114:	c8 01       	movw	r24, r16
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	af 90       	pop	r10
 12a:	9f 90       	pop	r9
 12c:	8f 90       	pop	r8
 12e:	7f 90       	pop	r7
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h1f_base_fn(u8g, dev, msg, arg);
 130:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_lc7981_320x64_fn>

u8g_dev_ld7032_60x32.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008b8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001951  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ld7032_60x32_fn 0000012a  00000000  00000000  0000223d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_ld7032_60x32_hw_usart_spi 00000006  00000000  00000000  00002367  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_ld7032_60x32_hw_usart_spi_pb 00000008  00000000  00000000  0000236d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_ld7032_60x32_hw_usart_spi_buf 00000040  00000000  00000000  00002375  2**0
                  ALLOC
  9 .data.u8g_dev_ld7032_60x32_parallel 00000006  00000000  00000000  00002375  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ld7032_60x32_parallel_pb 00000008  00000000  00000000  0000237b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ld7032_60x32_parallel_buf 00000040  00000000  00000000  00002383  2**0
                  ALLOC
 12 .data.u8g_dev_ld7032_60x32_hw_spi 00000006  00000000  00000000  00002383  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ld7032_60x32_hw_spi_pb 00000008  00000000  00000000  00002389  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ld7032_60x32_hw_spi_buf 00000040  00000000  00000000  00002391  2**0
                  ALLOC
 15 .data.u8g_dev_ld7032_60x32_sw_spi 00000006  00000000  00000000  00002391  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ld7032_60x32_sw_spi_pb 00000008  00000000  00000000  00002397  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ld7032_60x32_sw_spi_buf 00000040  00000000  00000000  0000239f  2**0
                  ALLOC
 18 .progmem.data.u8g_dev_ld7032_60x32_sleep_off 0000000a  00000000  00000000  0000239f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_ld7032_60x32_sleep_on 00000008  00000000  00000000  000023a9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_ld7032_60x32_data_start 0000001d  00000000  00000000  000023b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .progmem.data.u8g_dev_ld7032_60x32_init_seq 00000073  00000000  00000000  000023ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .comment      00000022  00000000  00000000  00002441  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ld7032_60x32_fn:

00000000 <u8g_dev_ld7032_60x32_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ld7032_60x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_ld7032_60x32_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_ld7032_60x32_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_ld7032_60x32_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_ld7032_60x32_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_ld7032_60x32_fn+0x32>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      u8g_WriteByte(u8g, dev, 0x081);
  44:	41 e8       	ldi	r20, 0x81	; 129
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  4e:	f7 01       	movw	r30, r14
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      u8g_SetChipSelect(u8g, dev, 0);      
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_ld7032_60x32_fn+0x6a>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ld7032_60x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6a:	81 e1       	ldi	r24, 0x11	; 17
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_ld7032_60x32_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_ld7032_60x32_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_ld7032_60x32_fn+0x78>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  78:	43 e0       	ldi	r20, 0x03	; 3
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_init_seq);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      break;
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_ld7032_60x32_fn+0x8e>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
        u8g_WriteByte(u8g, dev, pb->p.page_y0); /* y start */
  9c:	f6 01       	movw	r30, r12
  9e:	42 81       	ldd	r20, Z+2	; 0x02
  a0:	be 01       	movw	r22, r28
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
	u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
	u8g_WriteByte(u8g, dev, 0x008);
  b2:	48 e0       	ldi	r20, 0x08	; 8
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	be 01       	movw	r22, r28
  c0:	c8 01       	movw	r24, r16
  c2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  c6:	ae 01       	movw	r20, r28
  c8:	b8 01       	movw	r22, r16
  ca:	c6 01       	movw	r24, r12
  cc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
  d0:	88 23       	and	r24, r24
  d2:	01 f0       	breq	.+0      	; 0xd4 <u8g_dev_ld7032_60x32_fn+0xd4>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	be 01       	movw	r22, r28
  d8:	c8 01       	movw	r24, r16
  da:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      }
      break;
  de:	00 c0       	rjmp	.+0      	; 0xe0 <u8g_dev_ld7032_60x32_fn+0xe0>
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_on);    
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <u8g_dev_ld7032_60x32_fn+0xe6>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_off);    
  e6:	40 e0       	ldi	r20, 0x00	; 0
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	be 01       	movw	r22, r28
  ec:	c8 01       	movw	r24, r16
  ee:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
      return 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <u8g_dev_ld7032_60x32_fn+0xf6>
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
  f6:	97 01       	movw	r18, r14
  f8:	4b 2d       	mov	r20, r11
  fa:	be 01       	movw	r22, r28
  fc:	c8 01       	movw	r24, r16
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	ff 90       	pop	r15
 108:	ef 90       	pop	r14
 10a:	df 90       	pop	r13
 10c:	cf 90       	pop	r12
 10e:	bf 90       	pop	r11
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
 110:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ld7032_60x32_fn>
        u8g_WriteByte(u8g, dev, pb->p.page_y0); /* y start */
	u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
	u8g_WriteByte(u8g, dev, 0x008);
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
 114:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ld7032_60x32_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	ff 90       	pop	r15
 120:	ef 90       	pop	r14
 122:	df 90       	pop	r13
 124:	cf 90       	pop	r12
 126:	bf 90       	pop	r11
 128:	08 95       	ret

u8g_dev_null.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000678  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000163a  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_null 00000004  00000000  00000000  00001ce6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_null:

00000000 <u8g_dev_null>:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
  }
  return 1;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

u8g_dev_pcd8544_84x48.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000870  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000180d  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_pcd8544_fn 00000136  00000000  00000000  000020b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_pcd8544_84x48_hw_spi 00000006  00000000  00000000  000021e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_pcd8544_84x48_hw_spi_pb 00000008  00000000  00000000  000021ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_pcd8544_84x48_hw_spi_buf 00000054  00000000  00000000  000021f5  2**0
                  ALLOC
  9 .data.u8g_dev_pcd8544_84x48_sw_spi 00000006  00000000  00000000  000021f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_pcd8544_84x48_sw_spi_pb 00000008  00000000  00000000  000021fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_pcd8544_84x48_sw_spi_buf 00000054  00000000  00000000  00002203  2**0
                  ALLOC
 12 .progmem.data.u8g_dev_pcd8544_sleep_off 0000000d  00000000  00000000  00002203  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.u8g_dev_pcd8544_sleep_on 0000000a  00000000  00000000  00002210  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.u8g_dev_pcd8544_init_seq 0000001e  00000000  00000000  0000221a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      00000022  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_pcd8544_fn:

00000000 <u8g_dev_pcd8544_fn>:
  U8G_ESC_END                	/* end of sequence */
};


uint8_t u8g_dev_pcd8544_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_pcd8544_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_pcd8544_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_pcd8544_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_pcd8544_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_pcd8544_fn+0x32>
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      /* the contrast adjustment does not work, needs to be analysed */
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      u8g_WriteByte(u8g, dev, 0x021);        /* command mode, extended function set */
  44:	41 e2       	ldi	r20, 0x21	; 33
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
  4e:	f7 01       	movw	r30, r14
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	40 68       	ori	r20, 0x80	; 128
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      u8g_SetChipSelect(u8g, dev, 0);
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_pcd8544_fn+0x6a>
};


uint8_t u8g_dev_pcd8544_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6a:	81 e1       	ldi	r24, 0x11	; 17
  6c:	48 17       	cp	r20, r24
  6e:	01 f4       	brne	.+0      	; 0x70 <u8g_dev_pcd8544_fn+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <u8g_dev_pcd8544_fn+0x72>
  72:	e5 e1       	ldi	r30, 0x15	; 21
  74:	4e 17       	cp	r20, r30
  76:	01 f0       	breq	.+0      	; 0x78 <u8g_dev_pcd8544_fn+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <u8g_dev_pcd8544_fn+0x7a>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  7a:	43 e0       	ldi	r20, 0x03	; 3
  7c:	c8 01       	movw	r24, r16
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcd8544_init_seq);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	be 01       	movw	r22, r28
  88:	c8 01       	movw	r24, r16
  8a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      break;
  8e:	00 c0       	rjmp	.+0      	; 0x90 <u8g_dev_pcd8544_fn+0x90>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  90:	ca 80       	ldd	r12, Y+2	; 0x02
  92:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
  a6:	40 e2       	ldi	r20, 0x20	; 32
  a8:	be 01       	movw	r22, r28
  aa:	c8 01       	movw	r24, r16
  ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
  b0:	40 e8       	ldi	r20, 0x80	; 128
  b2:	be 01       	movw	r22, r28
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
  ba:	f6 01       	movw	r30, r12
  bc:	44 81       	ldd	r20, Z+4	; 0x04
  be:	40 64       	ori	r20, 0x40	; 64
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  d2:	ae 01       	movw	r20, r28
  d4:	b8 01       	movw	r22, r16
  d6:	c6 01       	movw	r24, r12
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
  dc:	88 23       	and	r24, r24
  de:	01 f0       	breq	.+0      	; 0xe0 <u8g_dev_pcd8544_fn+0xe0>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	be 01       	movw	r22, r28
  e4:	c8 01       	movw	r24, r16
  e6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      }
      break;
  ea:	00 c0       	rjmp	.+0      	; 0xec <u8g_dev_pcd8544_fn+0xec>
      u8g_WriteByte(u8g, dev, 0x021);        /* command mode, extended function set */
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcd8544_sleep_on);    
  ec:	40 e0       	ldi	r20, 0x00	; 0
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <u8g_dev_pcd8544_fn+0xf2>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcd8544_sleep_off);    
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
  fa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcd8544_fn>
      return 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_dev_pcd8544_fn+0x102>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 102:	97 01       	movw	r18, r14
 104:	4b 2d       	mov	r20, r11
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	df 90       	pop	r13
 118:	cf 90       	pop	r12
 11a:	bf 90       	pop	r11
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcd8544_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 11c:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_pcd8544_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
 120:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcd8544_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	ef 90       	pop	r14
 12e:	df 90       	pop	r13
 130:	cf 90       	pop	r12
 132:	bf 90       	pop	r11
 134:	08 95       	ret

u8g_dev_pcf8812_96x65.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000834  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017a3  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_pcf8812_fn 0000010e  00000000  00000000  0000200b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_pcf8812_96x65_hw_spi 00000006  00000000  00000000  00002119  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_pcf8812_96x65_hw_spi_pb 00000008  00000000  00000000  0000211f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_pcf8812_96x65_hw_spi_buf 00000060  00000000  00000000  00002127  2**0
                  ALLOC
  9 .data.u8g_dev_pcf8812_96x65_sw_spi 00000006  00000000  00000000  00002127  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_pcf8812_96x65_sw_spi_pb 00000008  00000000  00000000  0000212d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_pcf8812_96x65_sw_spi_buf 00000060  00000000  00000000  00002135  2**0
                  ALLOC
 12 .progmem.data.u8g_dev_pcf8812_init_seq 0000001e  00000000  00000000  00002135  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .comment      00000022  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_pcf8812_fn:

00000000 <u8g_dev_pcf8812_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_pcf8812_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_pcf8812_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_pcf8812_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 17       	cp	r20, r30
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_pcf8812_fn+0x28>
  28:	fa e0       	ldi	r31, 0x0A	; 10
  2a:	4f 13       	cpse	r20, r31
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_pcf8812_fn+0x2e>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  2e:	43 e0       	ldi	r20, 0x03	; 3
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_pcf8812_init_seq);
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	be 01       	movw	r22, r28
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      break;
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_dev_pcf8812_fn+0x44>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	ca 80       	ldd	r12, Y+2	; 0x02
  46:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  50:	41 e0       	ldi	r20, 0x01	; 1
  52:	be 01       	movw	r22, r28
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
  5a:	40 e2       	ldi	r20, 0x20	; 32
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
  64:	40 e8       	ldi	r20, 0x80	; 128
  66:	be 01       	movw	r22, r28
  68:	c8 01       	movw	r24, r16
  6a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
  6e:	f6 01       	movw	r30, r12
  70:	44 81       	ldd	r20, Z+4	; 0x04
  72:	40 64       	ori	r20, 0x40	; 64
  74:	be 01       	movw	r22, r28
  76:	c8 01       	movw	r24, r16
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	be 01       	movw	r22, r28
  80:	c8 01       	movw	r24, r16
  82:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  86:	ae 01       	movw	r20, r28
  88:	b8 01       	movw	r22, r16
  8a:	c6 01       	movw	r24, r12
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
  90:	88 23       	and	r24, r24
  92:	01 f0       	breq	.+0      	; 0x94 <u8g_dev_pcf8812_fn+0x94>
	  }
	}
	*/
	
	
        u8g_SetChipSelect(u8g, dev, 0);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      }
      break;
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <u8g_dev_pcf8812_fn+0xa0>
    case U8G_DEV_MSG_CONTRAST:
      /* the contrast adjustment does not work, needs to be analysed */
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      u8g_SetChipSelect(u8g, dev, 1);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      u8g_WriteByte(u8g, dev, 0x021);        /* command mode, extended function set */
  b2:	41 e2       	ldi	r20, 0x21	; 33
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
  bc:	f7 01       	movw	r30, r14
  be:	40 81       	ld	r20, Z
  c0:	46 95       	lsr	r20
  c2:	40 68       	ori	r20, 0x80	; 128
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      u8g_SetChipSelect(u8g, dev, 0);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	be 01       	movw	r22, r28
  d0:	c8 01       	movw	r24, r16
  d2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_pcf8812_fn>
      return 1;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	00 c0       	rjmp	.+0      	; 0xda <u8g_dev_pcf8812_fn+0xda>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  da:	97 01       	movw	r18, r14
  dc:	4b 2d       	mov	r20, r11
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	bf 90       	pop	r11
      u8g_WriteByte(u8g, dev, 0x021);        /* command mode, extended function set */
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  f4:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_pcf8812_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
  f8:	80 e0       	ldi	r24, 0x00	; 0
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	1f 91       	pop	r17
 100:	0f 91       	pop	r16
 102:	ff 90       	pop	r15
 104:	ef 90       	pop	r14
 106:	df 90       	pop	r13
 108:	cf 90       	pop	r12
 10a:	bf 90       	pop	r11
 10c:	08 95       	ret

u8g_dev_sbn1661_122x32.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007bc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001722  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_sbn1661_122x32_fn 000000f8  00000000  00000000  00001f12  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_sbn1661_122x32 00000006  00000000  00000000  0000200a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_sbn1661_122x32_pb 00000008  00000000  00000000  00002010  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_sbn1661_122x32_buf 0000007a  00000000  00000000  00002018  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_sbn1661_122x32_init_seq 00000016  00000000  00000000  00002018  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_sbn1661_122x32_fn:

00000000 <u8g_dev_sbn1661_122x32_fn>:
  
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_sbn1661_122x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	69 01       	movw	r12, r18
  switch(msg)
  1a:	8a e0       	ldi	r24, 0x0A	; 10
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_sbn1661_122x32_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_sbn1661_122x32_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 13       	cpse	r20, r30
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_dev_sbn1661_122x32_fn+0x28>
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  28:	ea 80       	ldd	r14, Y+2	; 0x02
  2a:	fb 80       	ldd	r15, Y+3	; 0x03
	
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  2c:	40 e0       	ldi	r20, 0x00	; 0
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  34:	41 e0       	ldi	r20, 0x01	; 1
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (SBN1661/SED1520) */
  3e:	f7 01       	movw	r30, r14
  40:	44 81       	ldd	r20, Z+4	; 0x04
  42:	48 6b       	ori	r20, 0xB8	; 184
  44:	be 01       	movw	r22, r28
  46:	c8 01       	movw	r24, r16
  48:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteByte(u8g, dev, 0x000 ); /* set X address */
  4c:	40 e0       	ldi	r20, 0x00	; 0
  4e:	be 01       	movw	r22, r28
  50:	c8 01       	movw	r24, r16
  52:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  56:	41 e0       	ldi	r20, 0x01	; 1
  58:	be 01       	movw	r22, r28
  5a:	c8 01       	movw	r24, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteSequence(u8g, dev, WIDTH/2, pb->buf);
  60:	f7 01       	movw	r30, r14
  62:	26 81       	ldd	r18, Z+6	; 0x06
  64:	37 81       	ldd	r19, Z+7	; 0x07
  66:	4d e3       	ldi	r20, 0x3D	; 61
  68:	be 01       	movw	r22, r28
  6a:	c8 01       	movw	r24, r16
  6c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
	
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  70:	40 e0       	ldi	r20, 0x00	; 0
  72:	be 01       	movw	r22, r28
  74:	c8 01       	movw	r24, r16
  76:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_SetChipSelect(u8g, dev, 2);
  7a:	42 e0       	ldi	r20, 0x02	; 2
  7c:	be 01       	movw	r22, r28
  7e:	c8 01       	movw	r24, r16
  80:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteByte(u8g, dev, 0x0b8 | pb->p.page); /* select current page (SBN1661/SED1520) */
  84:	f7 01       	movw	r30, r14
  86:	44 81       	ldd	r20, Z+4	; 0x04
  88:	48 6b       	ori	r20, 0xB8	; 184
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteByte(u8g, dev, 0x000 ); /* set X address */
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
        u8g_WriteSequence(u8g, dev, WIDTH/2, WIDTH/2+(uint8_t *)pb->buf);
  a6:	f7 01       	movw	r30, r14
  a8:	26 81       	ldd	r18, Z+6	; 0x06
  aa:	37 81       	ldd	r19, Z+7	; 0x07
  ac:	23 5c       	subi	r18, 0xC3	; 195
  ae:	3f 4f       	sbci	r19, 0xFF	; 255
  b0:	4d e3       	ldi	r20, 0x3D	; 61
  b2:	be 01       	movw	r22, r28
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
	
        u8g_SetChipSelect(u8g, dev, 0);
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
	
      }
      break;
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <u8g_dev_sbn1661_122x32_fn+0xc6>
uint8_t u8g_dev_sbn1661_122x32_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);
  c6:	4f ef       	ldi	r20, 0xFF	; 255
  c8:	c8 01       	movw	r24, r16
  ca:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_sbn1661_122x32_init_seq);
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	be 01       	movw	r22, r28
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  da:	96 01       	movw	r18, r12
  dc:	4b 2d       	mov	r20, r11
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	cf 90       	pop	r12
  f2:	bf 90       	pop	r11
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      break;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  f4:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_sbn1661_122x32_fn>

u8g_dev_ssd1306_128x32.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001a0d  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1306_128x32_fn 000000d6  00000000  00000000  0000243d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1306_128x32_2x_fn 00000120  00000000  00000000  00002513  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_ssd1306_128x32_2x_i2c 00000006  00000000  00000000  00002633  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_ssd1306_128x32_2x_hw_spi 00000006  00000000  00000000  00002639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1306_128x32_2x_sw_spi 00000006  00000000  00000000  0000263f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1306_128x32_2x_pb 00000008  00000000  00000000  00002645  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1306_128x32_2x_buf 00000100  00000000  00000000  0000264d  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1306_128x32_i2c 00000006  00000000  00000000  0000264d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1306_128x32_i2c_pb 00000008  00000000  00000000  00002653  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1306_128x32_i2c_buf 00000080  00000000  00000000  0000265b  2**0
                  ALLOC
 15 .data.u8g_dev_ssd1306_128x32_hw_spi 00000006  00000000  00000000  0000265b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1306_128x32_hw_spi_pb 00000008  00000000  00000000  00002661  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ssd1306_128x32_hw_spi_buf 00000080  00000000  00000000  00002669  2**0
                  ALLOC
 18 .data.u8g_dev_ssd1306_128x32_sw_spi 00000006  00000000  00000000  00002669  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_ssd1306_128x32_sw_spi_pb 00000008  00000000  00000000  0000266f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_ssd1306_128x32_sw_spi_buf 00000080  00000000  00000000  00002677  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  00002677  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  00002682  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_ssd1306_128x32_data_start 00000008  00000000  00000000  0000268b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_ssd1306_128x32_adafruit3_init_seq 00000026  00000000  00000000  00002693  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  000026b9  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1306_128x32_fn:

00000000 <u8g_dev_ssd1306_128x32_fn>:
  
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_128x32_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	69 01       	movw	r12, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_ssd1306_128x32_fn+0x20>
  20:	84 17       	cp	r24, r20
  22:	00 f0       	brcs	.+0      	; 0x24 <u8g_dev_ssd1306_128x32_fn+0x24>
  24:	ea e0       	ldi	r30, 0x0A	; 10
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_ssd1306_128x32_fn+0x2a>
  2a:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  32:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_init_seq);
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <u8g_dev_ssd1306_128x32_fn+0x40>
      break;
  40:	f1 e1       	ldi	r31, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_128x32_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  42:	4f 17       	cp	r20, r31
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_dev_ssd1306_128x32_fn+0x46>
  46:	85 e1       	ldi	r24, 0x15	; 21
  48:	48 13       	cpse	r20, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <u8g_dev_ssd1306_128x32_fn+0x4c>
  4c:	ea 80       	ldd	r14, Y+2	; 0x02
  4e:	fb 80       	ldd	r15, Y+3	; 0x03
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  5a:	f7 01       	movw	r30, r14
  5c:	44 81       	ldd	r20, Z+4	; 0x04
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2));	/* select current page (SSD1306) */
  5e:	40 6b       	ori	r20, 0xB0	; 176
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	be 01       	movw	r22, r28
  6c:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  72:	ae 01       	movw	r20, r28
  74:	b8 01       	movw	r22, r16
  76:	c7 01       	movw	r24, r14
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <u8g_dev_ssd1306_128x32_fn+0x80>
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	be 01       	movw	r22, r28
  84:	c8 01       	movw	r24, r16
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  8a:	00 c0       	rjmp	.+0      	; 0x8c <u8g_dev_ssd1306_128x32_fn+0x8c>
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_dev_ssd1306_128x32_fn+0x92>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x32_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1));	/* select current page (SSD1306) */
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <u8g_dev_ssd1306_128x32_fn+0xa2>
  a2:	96 01       	movw	r18, r12
  a4:	4b 2d       	mov	r20, r11
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
  b0:	0f 91       	pop	r16
  b2:	ff 90       	pop	r15
  b4:	ef 90       	pop	r14
  b6:	df 90       	pop	r13
  b8:	cf 90       	pop	r12
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ba:	bf 90       	pop	r11
  bc:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1306_128x32_fn>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	bf 90       	pop	r11
  d4:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1306_128x32_2x_fn:

000000d6 <u8g_dev_ssd1306_128x32_2x_fn>:
  d6:	bf 92       	push	r11
      }
      break;
  d8:	cf 92       	push	r12
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
  ea:	eb 01       	movw	r28, r22
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
  ec:	b4 2e       	mov	r11, r20
  ee:	69 01       	movw	r12, r18
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	48 17       	cp	r20, r24
  f4:	01 f4       	brne	.+0      	; 0xf6 <u8g_dev_ssd1306_128x32_2x_fn+0x20>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <u8g_dev_ssd1306_128x32_2x_fn+0x22>
  f8:	84 17       	cp	r24, r20
  fa:	00 f0       	brcs	.+0      	; 0xfc <u8g_dev_ssd1306_128x32_2x_fn+0x26>
  fc:	ea e0       	ldi	r30, 0x0A	; 10
  fe:	4e 13       	cpse	r20, r30
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_dev_ssd1306_128x32_2x_fn+0x2c>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 102:	42 e0       	ldi	r20, 0x02	; 2
 104:	c8 01       	movw	r24, r16
 106:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
}
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	be 01       	movw	r22, r28
 110:	c8 01       	movw	r24, r16
 112:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 116:	00 c0       	rjmp	.+0      	; 0x118 <u8g_dev_ssd1306_128x32_2x_fn+0x42>
 118:	f1 e1       	ldi	r31, 0x11	; 17
 11a:	4f 17       	cp	r20, r31
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 11c:	01 f4       	brne	.+0      	; 0x11e <u8g_dev_ssd1306_128x32_2x_fn+0x48>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <u8g_dev_ssd1306_128x32_2x_fn+0x4a>
 120:	85 e1       	ldi	r24, 0x15	; 21
 122:	48 13       	cpse	r20, r24
 124:	00 c0       	rjmp	.+0      	; 0x126 <u8g_dev_ssd1306_128x32_2x_fn+0x50>
 126:	ea 80       	ldd	r14, Y+2	; 0x02
 128:	fb 80       	ldd	r15, Y+3	; 0x03
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 134:	f7 01       	movw	r30, r14
 136:	44 81       	ldd	r20, Z+4	; 0x04
 138:	44 0f       	add	r20, r20
 13a:	40 6b       	ori	r20, 0xB0	; 176
 13c:	be 01       	movw	r22, r28
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	be 01       	movw	r22, r28
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 14e:	f7 01       	movw	r30, r14
 150:	26 81       	ldd	r18, Z+6	; 0x06
 152:	37 81       	ldd	r19, Z+7	; 0x07
 154:	45 81       	ldd	r20, Z+5	; 0x05
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	be 01       	movw	r22, r28
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 174:	f7 01       	movw	r30, r14
 176:	44 81       	ldd	r20, Z+4	; 0x04
 178:	44 0f       	add	r20, r20
 17a:	4f 5f       	subi	r20, 0xFF	; 255
 17c:	40 6b       	ori	r20, 0xB0	; 176
 17e:	be 01       	movw	r22, r28
 180:	c8 01       	movw	r24, r16
 182:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	be 01       	movw	r22, r28
 18a:	c8 01       	movw	r24, r16
 18c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 190:	f7 01       	movw	r30, r14
 192:	45 81       	ldd	r20, Z+5	; 0x05
 194:	26 81       	ldd	r18, Z+6	; 0x06
 196:	37 81       	ldd	r19, Z+7	; 0x07
 198:	24 0f       	add	r18, r20
 19a:	31 1d       	adc	r19, r1
 19c:	be 01       	movw	r22, r28
 19e:	c8 01       	movw	r24, r16
 1a0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	be 01       	movw	r22, r28
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <u8g_dev_ssd1306_128x32_2x_fn+0xda>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <u8g_dev_ssd1306_128x32_2x_fn+0xe0>
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	be 01       	movw	r22, r28
 1bc:	c8 01       	movw	r24, r16
 1be:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	08 95       	ret
 1d8:	96 01       	movw	r18, r12
 1da:	4b 2d       	mov	r20, r11
 1dc:	be 01       	movw	r22, r28
 1de:	c8 01       	movw	r24, r16
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1306_128x32_hw_spi_buf>

u8g_dev_ssd1306_128x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000fa8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001f5a  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1306_128x64_fn 000000d6  00000000  00000000  00002f36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1306_adafruit_128x64_fn 000000d6  00000000  00000000  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_sh1106_128x64_fn 000000d6  00000000  00000000  000030e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_dev_ssd1306_128x64_2x_fn 00000120  00000000  00000000  000031b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_sh1106_128x64_2x_fn 00000120  00000000  00000000  000032d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .data.u8g_dev_sh1106_128x64_2x_i2c 00000006  00000000  00000000  000033f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .data.u8g_dev_sh1106_128x64_2x_hw_spi 00000006  00000000  00000000  000033fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_sh1106_128x64_2x_sw_spi 00000006  00000000  00000000  00003404  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_sh1106_128x64_2x_pb 00000008  00000000  00000000  0000340a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_sh1106_128x64_2x_buf 00000100  00000000  00000000  00003412  2**0
                  ALLOC
 15 .data.u8g_dev_sh1106_128x64_i2c 00000006  00000000  00000000  00003412  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_sh1106_128x64_i2c_pb 00000008  00000000  00000000  00003418  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_sh1106_128x64_i2c_buf 00000080  00000000  00000000  00003420  2**0
                  ALLOC
 18 .data.u8g_dev_sh1106_128x64_hw_spi 00000006  00000000  00000000  00003420  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_sh1106_128x64_hw_spi_pb 00000008  00000000  00000000  00003426  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_sh1106_128x64_hw_spi_buf 00000080  00000000  00000000  0000342e  2**0
                  ALLOC
 21 .data.u8g_dev_sh1106_128x64_sw_spi 00000006  00000000  00000000  0000342e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 22 .data.u8g_dev_sh1106_128x64_sw_spi_pb 00000008  00000000  00000000  00003434  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 23 .bss.u8g_dev_sh1106_128x64_sw_spi_buf 00000080  00000000  00000000  0000343c  2**0
                  ALLOC
 24 .data.u8g_dev_ssd1306_128x64_2x_i2c 00000006  00000000  00000000  0000343c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 25 .data.u8g_dev_ssd1306_128x64_2x_hw_spi 00000006  00000000  00000000  00003442  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 26 .data.u8g_dev_ssd1306_128x64_2x_sw_spi 00000006  00000000  00000000  00003448  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 27 .data.u8g_dev_ssd1306_128x64_2x_pb 00000008  00000000  00000000  0000344e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 28 .bss.u8g_dev_ssd1306_128x64_2x_buf 00000100  00000000  00000000  00003456  2**0
                  ALLOC
 29 .data.u8g_dev_ssd1306_adafruit_128x64_i2c 00000006  00000000  00000000  00003456  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 30 .data.u8g_dev_ssd1306_adafruit_128x64_i2c_pb 00000008  00000000  00000000  0000345c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 31 .bss.u8g_dev_ssd1306_adafruit_128x64_i2c_buf 00000080  00000000  00000000  00003464  2**0
                  ALLOC
 32 .data.u8g_dev_ssd1306_adafruit_128x64_hw_spi 00000006  00000000  00000000  00003464  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 33 .data.u8g_dev_ssd1306_adafruit_128x64_hw_spi_pb 00000008  00000000  00000000  0000346a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 34 .bss.u8g_dev_ssd1306_adafruit_128x64_hw_spi_buf 00000080  00000000  00000000  00003472  2**0
                  ALLOC
 35 .data.u8g_dev_ssd1306_adafruit_128x64_sw_spi 00000006  00000000  00000000  00003472  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 36 .data.u8g_dev_ssd1306_adafruit_128x64_sw_spi_pb 00000008  00000000  00000000  00003478  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 37 .bss.u8g_dev_ssd1306_adafruit_128x64_sw_spi_buf 00000080  00000000  00000000  00003480  2**0
                  ALLOC
 38 .data.u8g_dev_ssd1306_128x64_i2c 00000006  00000000  00000000  00003480  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 39 .data.u8g_dev_ssd1306_128x64_i2c_pb 00000008  00000000  00000000  00003486  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 40 .bss.u8g_dev_ssd1306_128x64_i2c_buf 00000080  00000000  00000000  0000348e  2**0
                  ALLOC
 41 .data.u8g_dev_ssd1306_128x64_hw_spi 00000006  00000000  00000000  0000348e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 42 .data.u8g_dev_ssd1306_128x64_hw_spi_pb 00000008  00000000  00000000  00003494  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 43 .bss.u8g_dev_ssd1306_128x64_hw_spi_buf 00000080  00000000  00000000  0000349c  2**0
                  ALLOC
 44 .data.u8g_dev_ssd1306_128x64_sw_spi 00000006  00000000  00000000  0000349c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 45 .data.u8g_dev_ssd1306_128x64_sw_spi_pb 00000008  00000000  00000000  000034a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 46 .bss.u8g_dev_ssd1306_128x64_sw_spi_buf 00000080  00000000  00000000  000034aa  2**0
                  ALLOC
 47 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  000034aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 48 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  000034b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 49 .progmem.data.u8g_dev_sh1106_128x64_data_start 00000008  00000000  00000000  000034be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 50 .progmem.data.u8g_dev_ssd1306_128x64_data_start 00000008  00000000  00000000  000034c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 51 .progmem.data.u8g_dev_ssd1306_128x64_adafruit3_init_seq 00000026  00000000  00000000  000034ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 52 .progmem.data.u8g_dev_ssd1306_128x64_adafruit2_init_seq 00000026  00000000  00000000  000034f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 53 .comment      00000022  00000000  00000000  0000351a  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1306_128x64_fn:

00000000 <u8g_dev_ssd1306_128x64_fn>:
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	69 01       	movw	r12, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_ssd1306_128x64_fn+0x20>
  20:	84 17       	cp	r24, r20
  22:	00 f0       	brcs	.+0      	; 0x24 <u8g_dev_ssd1306_128x64_fn+0x24>
  24:	ea e0       	ldi	r30, 0x0A	; 10
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_ssd1306_128x64_fn+0x2a>
  2a:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  32:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <u8g_dev_ssd1306_128x64_fn+0x40>
      break;
  40:	f1 e1       	ldi	r31, 0x11	; 17
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  42:	4f 17       	cp	r20, r31
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_dev_ssd1306_128x64_fn+0x46>
  46:	85 e1       	ldi	r24, 0x15	; 21
  48:	48 13       	cpse	r20, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <u8g_dev_ssd1306_128x64_fn+0x4c>
  4c:	ea 80       	ldd	r14, Y+2	; 0x02
  4e:	fb 80       	ldd	r15, Y+3	; 0x03
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  5a:	f7 01       	movw	r30, r14
  5c:	44 81       	ldd	r20, Z+4	; 0x04
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2)); /* select current page (SSD1306) */
  5e:	40 6b       	ori	r20, 0xB0	; 176
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	be 01       	movw	r22, r28
  6c:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  72:	ae 01       	movw	r20, r28
  74:	b8 01       	movw	r22, r16
  76:	c7 01       	movw	r24, r14
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <u8g_dev_ssd1306_128x64_fn+0x80>
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	be 01       	movw	r22, r28
  84:	c8 01       	movw	r24, r16
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  8a:	00 c0       	rjmp	.+0      	; 0x8c <u8g_dev_ssd1306_128x64_fn+0x8c>
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_dev_ssd1306_128x64_fn+0x92>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1)); /* select current page (SSD1306) */
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <u8g_dev_ssd1306_128x64_fn+0xa2>
  a2:	96 01       	movw	r18, r12
  a4:	4b 2d       	mov	r20, r11
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  b0:	0f 91       	pop	r16
  b2:	ff 90       	pop	r15
  b4:	ef 90       	pop	r14
  b6:	df 90       	pop	r13
  b8:	cf 90       	pop	r12
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ba:	bf 90       	pop	r11
  bc:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1306_128x64_fn>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	bf 90       	pop	r11
  d4:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1306_adafruit_128x64_fn:

000000d6 <u8g_dev_ssd1306_adafruit_128x64_fn>:
  d6:	bf 92       	push	r11
      }
      break;
  d8:	cf 92       	push	r12
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
  ea:	eb 01       	movw	r28, r22
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
  ec:	b4 2e       	mov	r11, r20
  ee:	69 01       	movw	r12, r18
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	48 17       	cp	r20, r24
  f4:	01 f0       	breq	.+0      	; 0xf6 <u8g_dev_ssd1306_adafruit_128x64_fn+0x20>
  f6:	84 17       	cp	r24, r20
  f8:	00 f0       	brcs	.+0      	; 0xfa <u8g_dev_ssd1306_adafruit_128x64_fn+0x24>
  fa:	ea e0       	ldi	r30, 0x0A	; 10
  fc:	4e 13       	cpse	r20, r30
  fe:	00 c0       	rjmp	.+0      	; 0x100 <u8g_dev_ssd1306_adafruit_128x64_fn+0x2a>
 100:	42 e0       	ldi	r20, 0x02	; 2
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 102:	c8 01       	movw	r24, r16
 104:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 108:	40 e0       	ldi	r20, 0x00	; 0
}
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	be 01       	movw	r22, r28
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 114:	00 c0       	rjmp	.+0      	; 0x116 <u8g_dev_ssd1306_adafruit_128x64_fn+0x40>
 116:	f1 e1       	ldi	r31, 0x11	; 17
 118:	4f 17       	cp	r20, r31
 11a:	01 f0       	breq	.+0      	; 0x11c <u8g_dev_ssd1306_adafruit_128x64_fn+0x46>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 11c:	85 e1       	ldi	r24, 0x15	; 21
 11e:	48 13       	cpse	r20, r24
 120:	00 c0       	rjmp	.+0      	; 0x122 <u8g_dev_ssd1306_adafruit_128x64_fn+0x4c>
 122:	ea 80       	ldd	r14, Y+2	; 0x02
 124:	fb 80       	ldd	r15, Y+3	; 0x03
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	c8 01       	movw	r24, r16
 12c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 130:	f7 01       	movw	r30, r14
 132:	44 81       	ldd	r20, Z+4	; 0x04
 134:	40 6b       	ori	r20, 0xB0	; 176
 136:	be 01       	movw	r22, r28
 138:	c8 01       	movw	r24, r16
 13a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	be 01       	movw	r22, r28
 142:	c8 01       	movw	r24, r16
 144:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 148:	ae 01       	movw	r20, r28
 14a:	b8 01       	movw	r22, r16
 14c:	c7 01       	movw	r24, r14
 14e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 152:	88 23       	and	r24, r24
 154:	01 f0       	breq	.+0      	; 0x156 <u8g_dev_ssd1306_adafruit_128x64_fn+0x80>
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	be 01       	movw	r22, r28
 15a:	c8 01       	movw	r24, r16
 15c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 160:	00 c0       	rjmp	.+0      	; 0x162 <u8g_dev_ssd1306_adafruit_128x64_fn+0x8c>
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	00 c0       	rjmp	.+0      	; 0x168 <u8g_dev_ssd1306_adafruit_128x64_fn+0x92>
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	be 01       	movw	r22, r28
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	00 c0       	rjmp	.+0      	; 0x178 <u8g_dev_ssd1306_adafruit_128x64_fn+0xa2>
 178:	96 01       	movw	r18, r12
 17a:	4b 2d       	mov	r20, r11
 17c:	be 01       	movw	r22, r28
 17e:	c8 01       	movw	r24, r16
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	cf 90       	pop	r12
 190:	bf 90       	pop	r11
 192:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	08 95       	ret

Disassembly of section .text.u8g_dev_sh1106_128x64_fn:

00000282 <u8g_dev_sh1106_128x64_fn>:
 282:	bf 92       	push	r11
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	8c 01       	movw	r16, r24
 296:	eb 01       	movw	r28, r22
 298:	b4 2e       	mov	r11, r20
 29a:	69 01       	movw	r12, r18
 29c:	80 e1       	ldi	r24, 0x10	; 16
 29e:	48 17       	cp	r20, r24
 2a0:	01 f0       	breq	.+0      	; 0x2a2 <u8g_dev_sh1106_128x64_fn+0x20>
 2a2:	84 17       	cp	r24, r20
 2a4:	00 f0       	brcs	.+0      	; 0x2a6 <u8g_dev_sh1106_128x64_fn+0x24>
 2a6:	ea e0       	ldi	r30, 0x0A	; 10
 2a8:	4e 13       	cpse	r20, r30
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <u8g_dev_sh1106_128x64_fn+0x2a>
 2ac:	42 e0       	ldi	r20, 0x02	; 2
 2ae:	c8 01       	movw	r24, r16
 2b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2b4:	40 e0       	ldi	r20, 0x00	; 0
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	be 01       	movw	r22, r28
 2ba:	c8 01       	movw	r24, r16
 2bc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <u8g_dev_sh1106_128x64_fn+0x40>
 2c2:	f1 e1       	ldi	r31, 0x11	; 17
 2c4:	4f 17       	cp	r20, r31
 2c6:	01 f0       	breq	.+0      	; 0x2c8 <u8g_dev_sh1106_128x64_fn+0x46>
 2c8:	85 e1       	ldi	r24, 0x15	; 21
 2ca:	48 13       	cpse	r20, r24
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <u8g_dev_sh1106_128x64_fn+0x4c>
 2ce:	ea 80       	ldd	r14, Y+2	; 0x02
 2d0:	fb 80       	ldd	r15, Y+3	; 0x03
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2dc:	f7 01       	movw	r30, r14
 2de:	44 81       	ldd	r20, Z+4	; 0x04
 2e0:	40 6b       	ori	r20, 0xB0	; 176
 2e2:	be 01       	movw	r22, r28
 2e4:	c8 01       	movw	r24, r16
 2e6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2ea:	41 e0       	ldi	r20, 0x01	; 1
 2ec:	be 01       	movw	r22, r28
 2ee:	c8 01       	movw	r24, r16
 2f0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2f4:	ae 01       	movw	r20, r28
 2f6:	b8 01       	movw	r22, r16
 2f8:	c7 01       	movw	r24, r14
 2fa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 2fe:	88 23       	and	r24, r24
 300:	01 f0       	breq	.+0      	; 0x302 <u8g_dev_sh1106_128x64_fn+0x80>
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	be 01       	movw	r22, r28
 306:	c8 01       	movw	r24, r16
 308:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <u8g_dev_sh1106_128x64_fn+0x8c>
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	50 e0       	ldi	r21, 0x00	; 0
 312:	00 c0       	rjmp	.+0      	; 0x314 <u8g_dev_sh1106_128x64_fn+0x92>
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	be 01       	movw	r22, r28
 31a:	c8 01       	movw	r24, r16
 31c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	00 c0       	rjmp	.+0      	; 0x324 <u8g_dev_sh1106_128x64_fn+0xa2>
 324:	96 01       	movw	r18, r12
 326:	4b 2d       	mov	r20, r11
 328:	be 01       	movw	r22, r28
 32a:	c8 01       	movw	r24, r16
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	df 90       	pop	r13
 33a:	cf 90       	pop	r12
 33c:	bf 90       	pop	r11
 33e:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	bf 90       	pop	r11
 356:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1306_128x64_2x_fn:

000005da <u8g_dev_ssd1306_128x64_2x_fn>:
 5da:	bf 92       	push	r11
 5dc:	cf 92       	push	r12
 5de:	df 92       	push	r13
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	8c 01       	movw	r16, r24
 5ee:	eb 01       	movw	r28, r22
 5f0:	b4 2e       	mov	r11, r20
 5f2:	69 01       	movw	r12, r18
 5f4:	80 e1       	ldi	r24, 0x10	; 16
 5f6:	48 17       	cp	r20, r24
 5f8:	01 f4       	brne	.+0      	; 0x5fa <u8g_dev_ssd1306_128x64_2x_fn+0x20>
 5fa:	00 c0       	rjmp	.+0      	; 0x5fc <u8g_dev_ssd1306_128x64_2x_fn+0x22>
 5fc:	84 17       	cp	r24, r20
 5fe:	00 f0       	brcs	.+0      	; 0x600 <u8g_dev_ssd1306_128x64_2x_fn+0x26>
 600:	ea e0       	ldi	r30, 0x0A	; 10
 602:	4e 13       	cpse	r20, r30
 604:	00 c0       	rjmp	.+0      	; 0x606 <u8g_dev_ssd1306_128x64_2x_fn+0x2c>
 606:	42 e0       	ldi	r20, 0x02	; 2
 608:	c8 01       	movw	r24, r16
 60a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	be 01       	movw	r22, r28
 614:	c8 01       	movw	r24, r16
 616:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <u8g_dev_ssd1306_128x64_2x_fn+0x42>
 61c:	f1 e1       	ldi	r31, 0x11	; 17
 61e:	4f 17       	cp	r20, r31
 620:	01 f4       	brne	.+0      	; 0x622 <u8g_dev_ssd1306_128x64_2x_fn+0x48>
 622:	00 c0       	rjmp	.+0      	; 0x624 <u8g_dev_ssd1306_128x64_2x_fn+0x4a>
 624:	85 e1       	ldi	r24, 0x15	; 21
 626:	48 13       	cpse	r20, r24
 628:	00 c0       	rjmp	.+0      	; 0x62a <u8g_dev_ssd1306_128x64_2x_fn+0x50>
 62a:	ea 80       	ldd	r14, Y+2	; 0x02
 62c:	fb 80       	ldd	r15, Y+3	; 0x03
 62e:	40 e0       	ldi	r20, 0x00	; 0
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	c8 01       	movw	r24, r16
 634:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 638:	f7 01       	movw	r30, r14
 63a:	44 81       	ldd	r20, Z+4	; 0x04
 63c:	44 0f       	add	r20, r20
 63e:	40 6b       	ori	r20, 0xB0	; 176
 640:	be 01       	movw	r22, r28
 642:	c8 01       	movw	r24, r16
 644:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	be 01       	movw	r22, r28
 64c:	c8 01       	movw	r24, r16
 64e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 652:	f7 01       	movw	r30, r14
 654:	26 81       	ldd	r18, Z+6	; 0x06
 656:	37 81       	ldd	r19, Z+7	; 0x07
 658:	45 81       	ldd	r20, Z+5	; 0x05
 65a:	be 01       	movw	r22, r28
 65c:	c8 01       	movw	r24, r16
 65e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	be 01       	movw	r22, r28
 666:	c8 01       	movw	r24, r16
 668:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 66c:	40 e0       	ldi	r20, 0x00	; 0
 66e:	50 e0       	ldi	r21, 0x00	; 0
 670:	be 01       	movw	r22, r28
 672:	c8 01       	movw	r24, r16
 674:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 678:	f7 01       	movw	r30, r14
 67a:	44 81       	ldd	r20, Z+4	; 0x04
 67c:	44 0f       	add	r20, r20
 67e:	4f 5f       	subi	r20, 0xFF	; 255
 680:	40 6b       	ori	r20, 0xB0	; 176
 682:	be 01       	movw	r22, r28
 684:	c8 01       	movw	r24, r16
 686:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 68a:	41 e0       	ldi	r20, 0x01	; 1
 68c:	be 01       	movw	r22, r28
 68e:	c8 01       	movw	r24, r16
 690:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 694:	f7 01       	movw	r30, r14
 696:	45 81       	ldd	r20, Z+5	; 0x05
 698:	26 81       	ldd	r18, Z+6	; 0x06
 69a:	37 81       	ldd	r19, Z+7	; 0x07
 69c:	24 0f       	add	r18, r20
 69e:	31 1d       	adc	r19, r1
 6a0:	be 01       	movw	r22, r28
 6a2:	c8 01       	movw	r24, r16
 6a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 6a8:	40 e0       	ldi	r20, 0x00	; 0
 6aa:	be 01       	movw	r22, r28
 6ac:	c8 01       	movw	r24, r16
 6ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <u8g_dev_ssd1306_128x64_2x_fn+0xda>
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	00 c0       	rjmp	.+0      	; 0x6ba <u8g_dev_ssd1306_128x64_2x_fn+0xe0>
 6ba:	40 e0       	ldi	r20, 0x00	; 0
 6bc:	50 e0       	ldi	r21, 0x00	; 0
 6be:	be 01       	movw	r22, r28
 6c0:	c8 01       	movw	r24, r16
 6c2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	08 95       	ret
 6dc:	96 01       	movw	r18, r12
 6de:	4b 2d       	mov	r20, r11
 6e0:	be 01       	movw	r22, r28
 6e2:	c8 01       	movw	r24, r16
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	df 90       	pop	r13
 6f2:	cf 90       	pop	r12
 6f4:	bf 90       	pop	r11
 6f6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>

Disassembly of section .text.u8g_dev_sh1106_128x64_2x_fn:

00000cd4 <u8g_dev_sh1106_128x64_2x_fn>:
 cd4:	bf 92       	push	r11
 cd6:	cf 92       	push	r12
 cd8:	df 92       	push	r13
 cda:	ef 92       	push	r14
 cdc:	ff 92       	push	r15
 cde:	0f 93       	push	r16
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	8c 01       	movw	r16, r24
 ce8:	eb 01       	movw	r28, r22
 cea:	b4 2e       	mov	r11, r20
 cec:	69 01       	movw	r12, r18
 cee:	80 e1       	ldi	r24, 0x10	; 16
 cf0:	48 17       	cp	r20, r24
 cf2:	01 f4       	brne	.+0      	; 0xcf4 <u8g_dev_sh1106_128x64_2x_fn+0x20>
 cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <u8g_dev_sh1106_128x64_2x_fn+0x22>
 cf6:	84 17       	cp	r24, r20
 cf8:	00 f0       	brcs	.+0      	; 0xcfa <u8g_dev_sh1106_128x64_2x_fn+0x26>
 cfa:	ea e0       	ldi	r30, 0x0A	; 10
 cfc:	4e 13       	cpse	r20, r30
 cfe:	00 c0       	rjmp	.+0      	; 0xd00 <u8g_dev_sh1106_128x64_2x_fn+0x2c>
 d00:	42 e0       	ldi	r20, 0x02	; 2
 d02:	c8 01       	movw	r24, r16
 d04:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d08:	40 e0       	ldi	r20, 0x00	; 0
 d0a:	50 e0       	ldi	r21, 0x00	; 0
 d0c:	be 01       	movw	r22, r28
 d0e:	c8 01       	movw	r24, r16
 d10:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d14:	00 c0       	rjmp	.+0      	; 0xd16 <u8g_dev_sh1106_128x64_2x_fn+0x42>
 d16:	f1 e1       	ldi	r31, 0x11	; 17
 d18:	4f 17       	cp	r20, r31
 d1a:	01 f4       	brne	.+0      	; 0xd1c <u8g_dev_sh1106_128x64_2x_fn+0x48>
 d1c:	00 c0       	rjmp	.+0      	; 0xd1e <u8g_dev_sh1106_128x64_2x_fn+0x4a>
 d1e:	85 e1       	ldi	r24, 0x15	; 21
 d20:	48 13       	cpse	r20, r24
 d22:	00 c0       	rjmp	.+0      	; 0xd24 <u8g_dev_sh1106_128x64_2x_fn+0x50>
 d24:	ea 80       	ldd	r14, Y+2	; 0x02
 d26:	fb 80       	ldd	r15, Y+3	; 0x03
 d28:	40 e0       	ldi	r20, 0x00	; 0
 d2a:	50 e0       	ldi	r21, 0x00	; 0
 d2c:	c8 01       	movw	r24, r16
 d2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d32:	f7 01       	movw	r30, r14
 d34:	44 81       	ldd	r20, Z+4	; 0x04
 d36:	44 0f       	add	r20, r20
 d38:	40 6b       	ori	r20, 0xB0	; 176
 d3a:	be 01       	movw	r22, r28
 d3c:	c8 01       	movw	r24, r16
 d3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d42:	41 e0       	ldi	r20, 0x01	; 1
 d44:	be 01       	movw	r22, r28
 d46:	c8 01       	movw	r24, r16
 d48:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d4c:	f7 01       	movw	r30, r14
 d4e:	26 81       	ldd	r18, Z+6	; 0x06
 d50:	37 81       	ldd	r19, Z+7	; 0x07
 d52:	45 81       	ldd	r20, Z+5	; 0x05
 d54:	be 01       	movw	r22, r28
 d56:	c8 01       	movw	r24, r16
 d58:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d5c:	40 e0       	ldi	r20, 0x00	; 0
 d5e:	be 01       	movw	r22, r28
 d60:	c8 01       	movw	r24, r16
 d62:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d66:	40 e0       	ldi	r20, 0x00	; 0
 d68:	50 e0       	ldi	r21, 0x00	; 0
 d6a:	be 01       	movw	r22, r28
 d6c:	c8 01       	movw	r24, r16
 d6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d72:	f7 01       	movw	r30, r14
 d74:	44 81       	ldd	r20, Z+4	; 0x04
 d76:	44 0f       	add	r20, r20
 d78:	4f 5f       	subi	r20, 0xFF	; 255
 d7a:	40 6b       	ori	r20, 0xB0	; 176
 d7c:	be 01       	movw	r22, r28
 d7e:	c8 01       	movw	r24, r16
 d80:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d84:	41 e0       	ldi	r20, 0x01	; 1
 d86:	be 01       	movw	r22, r28
 d88:	c8 01       	movw	r24, r16
 d8a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 d8e:	f7 01       	movw	r30, r14
 d90:	45 81       	ldd	r20, Z+5	; 0x05
 d92:	26 81       	ldd	r18, Z+6	; 0x06
 d94:	37 81       	ldd	r19, Z+7	; 0x07
 d96:	24 0f       	add	r18, r20
 d98:	31 1d       	adc	r19, r1
 d9a:	be 01       	movw	r22, r28
 d9c:	c8 01       	movw	r24, r16
 d9e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 da2:	40 e0       	ldi	r20, 0x00	; 0
 da4:	be 01       	movw	r22, r28
 da6:	c8 01       	movw	r24, r16
 da8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 dac:	00 c0       	rjmp	.+0      	; 0xdae <u8g_dev_sh1106_128x64_2x_fn+0xda>
 dae:	40 e0       	ldi	r20, 0x00	; 0
 db0:	50 e0       	ldi	r21, 0x00	; 0
 db2:	00 c0       	rjmp	.+0      	; 0xdb4 <u8g_dev_sh1106_128x64_2x_fn+0xe0>
 db4:	40 e0       	ldi	r20, 0x00	; 0
 db6:	50 e0       	ldi	r21, 0x00	; 0
 db8:	be 01       	movw	r22, r28
 dba:	c8 01       	movw	r24, r16
 dbc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>
 dc0:	81 e0       	ldi	r24, 0x01	; 1
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	1f 91       	pop	r17
 dc8:	0f 91       	pop	r16
 dca:	ff 90       	pop	r15
 dcc:	ef 90       	pop	r14
 dce:	df 90       	pop	r13
 dd0:	cf 90       	pop	r12
 dd2:	bf 90       	pop	r11
 dd4:	08 95       	ret
 dd6:	96 01       	movw	r18, r12
 dd8:	4b 2d       	mov	r20, r11
 dda:	be 01       	movw	r22, r28
 ddc:	c8 01       	movw	r24, r16
 dde:	df 91       	pop	r29
 de0:	cf 91       	pop	r28
 de2:	1f 91       	pop	r17
 de4:	0f 91       	pop	r16
 de6:	ff 90       	pop	r15
 de8:	ef 90       	pop	r14
 dea:	df 90       	pop	r13
 dec:	cf 90       	pop	r12
 dee:	bf 90       	pop	r11
 df0:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_sh1106_128x64_i2c_buf>

u8g_dev_ssd1306_64x48.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009fc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000019ee  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1306_64x48_fn 000000d6  00000000  00000000  0000241e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1306_64x48_2x_fn 00000120  00000000  00000000  000024f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_ssd1306_64x48_2x_i2c 00000006  00000000  00000000  00002614  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_ssd1306_64x48_2x_hw_spi 00000006  00000000  00000000  0000261a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1306_64x48_2x_sw_spi 00000006  00000000  00000000  00002620  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1306_64x48_2x_pb 00000008  00000000  00000000  00002626  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1306_64x48_2x_buf 00000080  00000000  00000000  0000262e  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1306_64x48_i2c 00000006  00000000  00000000  0000262e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1306_64x48_i2c_pb 00000008  00000000  00000000  00002634  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1306_64x48_i2c_buf 00000040  00000000  00000000  0000263c  2**0
                  ALLOC
 15 .data.u8g_dev_ssd1306_64x48_hw_spi 00000006  00000000  00000000  0000263c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1306_64x48_hw_spi_pb 00000008  00000000  00000000  00002642  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ssd1306_64x48_hw_spi_buf 00000040  00000000  00000000  0000264a  2**0
                  ALLOC
 18 .data.u8g_dev_ssd1306_64x48_sw_spi 00000006  00000000  00000000  0000264a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_ssd1306_64x48_sw_spi_pb 00000008  00000000  00000000  00002650  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_ssd1306_64x48_sw_spi_buf 00000040  00000000  00000000  00002658  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  00002658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  00002663  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_ssd1306_64x48_data_start 00000008  00000000  00000000  0000266c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_ssd1306_64x48_init_seq 00000024  00000000  00000000  00002674  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1306_64x48_fn:

00000000 <u8g_dev_ssd1306_64x48_fn>:
  
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_64x48_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	69 01       	movw	r12, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_ssd1306_64x48_fn+0x20>
  20:	84 17       	cp	r24, r20
  22:	00 f0       	brcs	.+0      	; 0x24 <u8g_dev_ssd1306_64x48_fn+0x24>
  24:	ea e0       	ldi	r30, 0x0A	; 10
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_ssd1306_64x48_fn+0x2a>
  2a:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  32:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_64x48_init_seq);
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <u8g_dev_ssd1306_64x48_fn+0x40>
      break;
  40:	f1 e1       	ldi	r31, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1306_64x48_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  42:	4f 17       	cp	r20, r31
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_dev_ssd1306_64x48_fn+0x46>
  46:	85 e1       	ldi	r24, 0x15	; 21
  48:	48 13       	cpse	r20, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <u8g_dev_ssd1306_64x48_fn+0x4c>
  4c:	ea 80       	ldd	r14, Y+2	; 0x02
  4e:	fb 80       	ldd	r15, Y+3	; 0x03
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_64x48_data_start);    
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  5a:	f7 01       	movw	r30, r14
  5c:	44 81       	ldd	r20, Z+4	; 0x04
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2));	/* select current page (SSD1306) */
  5e:	40 6b       	ori	r20, 0xB0	; 176
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  68:	41 e0       	ldi	r20, 0x01	; 1
  6a:	be 01       	movw	r22, r28
  6c:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  72:	ae 01       	movw	r20, r28
  74:	b8 01       	movw	r22, r16
  76:	c7 01       	movw	r24, r14
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  7c:	88 23       	and	r24, r24
  7e:	01 f0       	breq	.+0      	; 0x80 <u8g_dev_ssd1306_64x48_fn+0x80>
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	be 01       	movw	r22, r28
  84:	c8 01       	movw	r24, r16
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  8a:	00 c0       	rjmp	.+0      	; 0x8c <u8g_dev_ssd1306_64x48_fn+0x8c>
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_dev_ssd1306_64x48_fn+0x92>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_64x48_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (pb->p.page*2+1));	/* select current page (SSD1306) */
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <u8g_dev_ssd1306_64x48_fn+0xa2>
  a2:	96 01       	movw	r18, r12
  a4:	4b 2d       	mov	r20, r11
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	1f 91       	pop	r17
        u8g_SetAddress(u8g, dev, 1);					/* data mode */
  b0:	0f 91       	pop	r16
  b2:	ff 90       	pop	r15
  b4:	ef 90       	pop	r14
  b6:	df 90       	pop	r13
  b8:	cf 90       	pop	r12
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ba:	bf 90       	pop	r11
  bc:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1306_64x48_fn>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	bf 90       	pop	r11
  d4:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1306_64x48_2x_fn:

000000d6 <u8g_dev_ssd1306_64x48_2x_fn>:
  d6:	bf 92       	push	r11
      }
      break;
  d8:	cf 92       	push	r12
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	8c 01       	movw	r16, r24
  ea:	eb 01       	movw	r28, r22
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
  ec:	b4 2e       	mov	r11, r20
  ee:	69 01       	movw	r12, r18
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	48 17       	cp	r20, r24
  f4:	01 f4       	brne	.+0      	; 0xf6 <u8g_dev_ssd1306_64x48_2x_fn+0x20>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <u8g_dev_ssd1306_64x48_2x_fn+0x22>
  f8:	84 17       	cp	r24, r20
  fa:	00 f0       	brcs	.+0      	; 0xfc <u8g_dev_ssd1306_64x48_2x_fn+0x26>
  fc:	ea e0       	ldi	r30, 0x0A	; 10
  fe:	4e 13       	cpse	r20, r30
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_dev_ssd1306_64x48_2x_fn+0x2c>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 102:	42 e0       	ldi	r20, 0x02	; 2
 104:	c8 01       	movw	r24, r16
 106:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
}
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	be 01       	movw	r22, r28
 110:	c8 01       	movw	r24, r16
 112:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 116:	00 c0       	rjmp	.+0      	; 0x118 <u8g_dev_ssd1306_64x48_2x_fn+0x42>
 118:	f1 e1       	ldi	r31, 0x11	; 17
 11a:	4f 17       	cp	r20, r31
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 11c:	01 f4       	brne	.+0      	; 0x11e <u8g_dev_ssd1306_64x48_2x_fn+0x48>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <u8g_dev_ssd1306_64x48_2x_fn+0x4a>
 120:	85 e1       	ldi	r24, 0x15	; 21
 122:	48 13       	cpse	r20, r24
 124:	00 c0       	rjmp	.+0      	; 0x126 <u8g_dev_ssd1306_64x48_2x_fn+0x50>
 126:	ea 80       	ldd	r14, Y+2	; 0x02
 128:	fb 80       	ldd	r15, Y+3	; 0x03
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	50 e0       	ldi	r21, 0x00	; 0
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 134:	f7 01       	movw	r30, r14
 136:	44 81       	ldd	r20, Z+4	; 0x04
 138:	44 0f       	add	r20, r20
 13a:	40 6b       	ori	r20, 0xB0	; 176
 13c:	be 01       	movw	r22, r28
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	be 01       	movw	r22, r28
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 14e:	f7 01       	movw	r30, r14
 150:	26 81       	ldd	r18, Z+6	; 0x06
 152:	37 81       	ldd	r19, Z+7	; 0x07
 154:	45 81       	ldd	r20, Z+5	; 0x05
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	be 01       	movw	r22, r28
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 174:	f7 01       	movw	r30, r14
 176:	44 81       	ldd	r20, Z+4	; 0x04
 178:	44 0f       	add	r20, r20
 17a:	4f 5f       	subi	r20, 0xFF	; 255
 17c:	40 6b       	ori	r20, 0xB0	; 176
 17e:	be 01       	movw	r22, r28
 180:	c8 01       	movw	r24, r16
 182:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	be 01       	movw	r22, r28
 18a:	c8 01       	movw	r24, r16
 18c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 190:	f7 01       	movw	r30, r14
 192:	45 81       	ldd	r20, Z+5	; 0x05
 194:	26 81       	ldd	r18, Z+6	; 0x06
 196:	37 81       	ldd	r19, Z+7	; 0x07
 198:	24 0f       	add	r18, r20
 19a:	31 1d       	adc	r19, r1
 19c:	be 01       	movw	r22, r28
 19e:	c8 01       	movw	r24, r16
 1a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	be 01       	movw	r22, r28
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <u8g_dev_ssd1306_64x48_2x_fn+0xda>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <u8g_dev_ssd1306_64x48_2x_fn+0xe0>
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	be 01       	movw	r22, r28
 1bc:	c8 01       	movw	r24, r16
 1be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	08 95       	ret
 1d8:	96 01       	movw	r18, r12
 1da:	4b 2d       	mov	r20, r11
 1dc:	be 01       	movw	r22, r28
 1de:	c8 01       	movw	r24, r16
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_dev_ssd1309_128x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000087c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018d0  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1309_128x64_fn 00000114  00000000  00000000  00002180  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_ssd1309_128x64_i2c 00000006  00000000  00000000  00002294  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_ssd1309_128x64_i2c_pb 00000008  00000000  00000000  0000229a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_ssd1309_128x64_i2c_buf 00000080  00000000  00000000  000022a2  2**0
                  ALLOC
  9 .data.u8g_dev_ssd1309_128x64_sw_spi 00000006  00000000  00000000  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1309_128x64_sw_spi_pb 00000008  00000000  00000000  000022a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1309_128x64_sw_spi_buf 00000080  00000000  00000000  000022b0  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1309_128x64_hw_spi 00000006  00000000  00000000  000022b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1309_128x64_hw_spi_pb 00000008  00000000  00000000  000022b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1309_128x64_hw_spi_buf 00000080  00000000  00000000  000022be  2**0
                  ALLOC
 15 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  000022be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  000022c9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .progmem.data.u8g_dev_ssd1309_128x64_data_start 00000008  00000000  00000000  000022d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_ssd1309_128x64_init_seq 00000029  00000000  00000000  000022da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      00000022  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1309_128x64_fn:

00000000 <u8g_dev_ssd1309_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1309_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_ssd1309_128x64_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_ssd1309_128x64_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_ssd1309_128x64_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_ssd1309_128x64_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_ssd1309_128x64_fn+0x32>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      u8g_WriteByte(u8g, dev, 0x081);
  44:	41 e8       	ldi	r20, 0x81	; 129
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) ); /* 11 Jul 2015: fixed contrast calculation */
  4e:	f7 01       	movw	r30, r14
  50:	40 81       	ld	r20, Z
  52:	be 01       	movw	r22, r28
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      u8g_SetChipSelect(u8g, dev, 0);      
  5a:	40 e0       	ldi	r20, 0x00	; 0
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
  64:	00 c0       	rjmp	.+0      	; 0x66 <u8g_dev_ssd1309_128x64_fn+0x66>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1309_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  66:	81 e1       	ldi	r24, 0x11	; 17
  68:	48 17       	cp	r20, r24
  6a:	01 f0       	breq	.+0      	; 0x6c <u8g_dev_ssd1309_128x64_fn+0x6c>
  6c:	e5 e1       	ldi	r30, 0x15	; 21
  6e:	4e 17       	cp	r20, r30
  70:	01 f0       	breq	.+0      	; 0x72 <u8g_dev_ssd1309_128x64_fn+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <u8g_dev_ssd1309_128x64_fn+0x74>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  74:	42 e0       	ldi	r20, 0x02	; 2
  76:	c8 01       	movw	r24, r16
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_init_seq);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      break;
  88:	00 c0       	rjmp	.+0      	; 0x8a <u8g_dev_ssd1309_128x64_fn+0x8a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8a:	ca 80       	ldd	r12, Y+2	; 0x02
  8c:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_data_start);    
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
  98:	f6 01       	movw	r30, r12
  9a:	44 81       	ldd	r20, Z+4	; 0x04
  9c:	40 6b       	ori	r20, 0xB0	; 176
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a6:	41 e0       	ldi	r20, 0x01	; 1
  a8:	be 01       	movw	r22, r28
  aa:	c8 01       	movw	r24, r16
  ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  b0:	ae 01       	movw	r20, r28
  b2:	b8 01       	movw	r22, r16
  b4:	c6 01       	movw	r24, r12
  b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
  ba:	88 23       	and	r24, r24
  bc:	01 f0       	breq	.+0      	; 0xbe <u8g_dev_ssd1309_128x64_fn+0xbe>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
  c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      }
      break;
  c8:	00 c0       	rjmp	.+0      	; 0xca <u8g_dev_ssd1309_128x64_fn+0xca>
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) ); /* 11 Jul 2015: fixed contrast calculation */
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1; 
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <u8g_dev_ssd1309_128x64_fn+0xd0>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
      return 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	00 c0       	rjmp	.+0      	; 0xe0 <u8g_dev_ssd1309_128x64_fn+0xe0>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e0:	97 01       	movw	r18, r14
  e2:	4b 2d       	mov	r20, r11
  e4:	be 01       	movw	r22, r28
  e6:	c8 01       	movw	r24, r16
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	ef 90       	pop	r14
  f4:	df 90       	pop	r13
  f6:	cf 90       	pop	r12
  f8:	bf 90       	pop	r11
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  fa:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1309_128x64_fn>
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1309_128x64_data_start);    
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
  fe:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	df 90       	pop	r13
 10e:	cf 90       	pop	r12
 110:	bf 90       	pop	r11
 112:	08 95       	ret

u8g_dev_ssd1322_nhd31oled_bw.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001b17  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1322_1bit_prepare_row 00000066  00000000  00000000  000027e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1322_nhd31oled_bw_fn 0000017c  00000000  00000000  0000284d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1322_nhd31oled_2x_bw_fn 00000178  00000000  00000000  000029c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_ssd1322_nhd31oled_2x_bw_hw_spi 00000006  00000000  00000000  00002b41  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1322_nhd31oled_2x_bw_sw_spi 00000006  00000000  00000000  00002b47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1322_nhd31oled_2x_bw_pb 00000008  00000000  00000000  00002b4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1322_nhd31oled_2x_bw_buf 000001f0  00000000  00000000  00002b55  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1322_nhd31oled_bw_parallel 00000006  00000000  00000000  00002b55  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1322_nhd31oled_bw_parallel_pb 00000008  00000000  00000000  00002b5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1322_nhd31oled_bw_parallel_buf 000000f8  00000000  00000000  00002b63  2**0
                  ALLOC
 15 .data.u8g_dev_ssd1322_nhd31oled_bw_hw_spi 00000006  00000000  00000000  00002b63  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1322_nhd31oled_bw_hw_spi_pb 00000008  00000000  00000000  00002b69  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf 000000f8  00000000  00000000  00002b71  2**0
                  ALLOC
 18 .data.u8g_dev_ssd1322_nhd31oled_bw_sw_spi 00000006  00000000  00000000  00002b71  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_ssd1322_nhd31oled_bw_sw_spi_pb 00000008  00000000  00000000  00002b77  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_ssd1322_nhd31oled_bw_sw_spi_buf 000000f8  00000000  00000000  00002b7f  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  00002b7f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  00002b8a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_ssd1322_1bit_nhd_312_prepare_page_seq 00000010  00000000  00000000  00002b93  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_ssd1322_1bit_nhd_312_init_seq 0000007e  00000000  00000000  00002ba3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  00002c21  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1322_1bit_prepare_row:

00000000 <u8g_dev_ssd1322_1bit_prepare_row>:
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}


uint8_t u8g_dev_ssd1322_nhd31oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	8c 01       	movw	r16, r24
   c:	eb 01       	movw	r28, r22
   e:	f4 2e       	mov	r15, r20
  10:	ea 81       	ldd	r30, Y+2	; 0x02
  12:	fb 81       	ldd	r31, Y+3	; 0x03
  14:	94 81       	ldd	r25, Z+4	; 0x04
  16:	80 81       	ld	r24, Z
  18:	98 9f       	mul	r25, r24
  1a:	f0 0c       	add	r15, r0
  1c:	11 24       	eor	r1, r1
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>
  switch(msg)
  28:	4f 2d       	mov	r20, r15
  2a:	be 01       	movw	r22, r28
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	4f 0d       	add	r20, r15
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>
	  p+=cnt;
	}
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  3e:	40 e0       	ldi	r20, 0x00	; 0
  40:	be 01       	movw	r22, r28
  42:	c8 01       	movw	r24, r16
  44:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  48:	4c e5       	ldi	r20, 0x5C	; 92
  4a:	be 01       	movw	r22, r28
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>
      u8g_WriteByte(u8g, dev, 0x0c1);	/* 21 May 2013, fixed contrast command */
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	be 01       	movw	r22, r28
  56:	c8 01       	movw	r24, r16
  58:	df 91       	pop	r29
      u8g_SetAddress(u8g, dev, 1);          /* data mode */
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1322_1bit_prepare_row>

Disassembly of section .text.u8g_dev_ssd1322_nhd31oled_bw_fn:

00000066 <u8g_dev_ssd1322_nhd31oled_bw_fn>:
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
  66:	5f 92       	push	r5
  68:	6f 92       	push	r6
  6a:	7f 92       	push	r7
  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
      u8g_SetChipSelect(u8g, dev, 0);      
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
      break;
  7c:	0f 93       	push	r16
}


uint8_t u8g_dev_ssd1322_nhd31oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	8c 01       	movw	r16, r24
  86:	eb 01       	movw	r28, r22
  88:	74 2e       	mov	r7, r20
  8a:	59 01       	movw	r10, r18
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
	uint8_t i;
	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	48 17       	cp	r20, r24
	uint8_t *p = pb->buf;
  90:	01 f4       	brne	.+0      	; 0x92 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x2c>
  92:	00 c0       	rjmp	.+0      	; 0x94 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x2e>
  94:	84 17       	cp	r24, r20
	u8g_uint_t cnt;
	cnt = pb->width;
  96:	00 f0       	brcs	.+0      	; 0x98 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x32>
	cnt >>= 3;
  98:	ea e0       	ldi	r30, 0x0A	; 10
  9a:	4e 17       	cp	r20, r30
  9c:	01 f0       	breq	.+0      	; 0x9e <u8g_dev_ssd1322_nhd31oled_bw_fn+0x38>

	for( i = 0; i < pb->p.page_height; i++ )
  9e:	ff e0       	ldi	r31, 0x0F	; 15
	  u8g_WriteByte(u8g, dev, 0x0ff);
	  u8g_WriteByte(u8g, dev, 0x0ff);
#endif
	  u8g_MicroDelay();	// for DUE?	  
	  u8g_SetChipSelect(u8g, dev, 0);        
	  p+=cnt;
  a0:	4f 13       	cpse	r20, r31
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x3e>
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
  a4:	41 e0       	ldi	r20, 0x01	; 1
uint8_t u8g_dev_ssd1322_nhd31oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
  ac:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1322_1bit_nhd_312_init_seq);
  ae:	be 01       	movw	r22, r28
  b0:	c8 01       	movw	r24, r16
  b2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
  b6:	41 e8       	ldi	r20, 0x81	; 129
  b8:	be 01       	movw	r22, r28
      break;
  ba:	c8 01       	movw	r24, r16
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
  bc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	be 01       	movw	r22, r28
  c4:	c8 01       	movw	r24, r16
	{
	  u8g_dev_ssd1322_1bit_prepare_row(u8g, dev, i);		/* this will also enable chip select */
  c6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
  ca:	f5 01       	movw	r30, r10
  cc:	40 81       	ld	r20, Z
  ce:	46 95       	lsr	r20
#if !defined(U8G_16BIT)
	  u8g_WriteByte(u8g, dev, 0x0ff);
  d0:	be 01       	movw	r22, r28
  d2:	c8 01       	movw	r24, r16
  d4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
	  u8g_WriteByte(u8g, dev, 0x0ff);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
#endif
	  u8g_WriteSequenceBWTo16GrDevice(u8g, dev, cnt, p);
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x82>
  e8:	81 e1       	ldi	r24, 0x11	; 17
  ea:	48 17       	cp	r20, r24
  ec:	01 f4       	brne	.+0      	; 0xee <u8g_dev_ssd1322_nhd31oled_bw_fn+0x88>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x8a>
#if !defined(U8G_16BIT)
	  u8g_WriteByte(u8g, dev, 0x0ff);
  f0:	e5 e1       	ldi	r30, 0x15	; 21
  f2:	4e 13       	cpse	r20, r30
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x90>
  f6:	ca 80       	ldd	r12, Y+2	; 0x02
  f8:	db 80       	ldd	r13, Y+3	; 0x03
	  u8g_WriteByte(u8g, dev, 0x0ff);
  fa:	f6 01       	movw	r30, r12
  fc:	e6 80       	ldd	r14, Z+6	; 0x06
  fe:	f7 80       	ldd	r15, Z+7	; 0x07
 100:	55 80       	ldd	r5, Z+5	; 0x05
 102:	56 94       	lsr	r5
#endif
	  u8g_MicroDelay();	// for DUE?	  
 104:	56 94       	lsr	r5
 106:	56 94       	lsr	r5
	  u8g_SetChipSelect(u8g, dev, 0);        
 108:	61 2c       	mov	r6, r1
 10a:	85 2c       	mov	r8, r5
 10c:	91 2c       	mov	r9, r1
 10e:	00 c0       	rjmp	.+0      	; 0x110 <u8g_dev_ssd1322_nhd31oled_bw_fn+0xaa>
 110:	42 e0       	ldi	r20, 0x02	; 2
	  p+=cnt;
 112:	c8 01       	movw	r24, r16
 114:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
 118:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 1);          /* data mode */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
      break;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	be 01       	movw	r22, r28
 11e:	c8 01       	movw	r24, r16
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 120:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 124:	00 c0       	rjmp	.+0      	; 0x126 <u8g_dev_ssd1322_nhd31oled_bw_fn+0xc0>
 126:	f6 01       	movw	r30, r12
 128:	80 81       	ld	r24, Z
 12a:	68 16       	cp	r6, r24
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
}
 12c:	00 f0       	brcs	.+0      	; 0x12e <u8g_dev_ssd1322_nhd31oled_bw_fn+0xc8>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <u8g_dev_ssd1322_nhd31oled_bw_fn+0xca>
 130:	46 2d       	mov	r20, r6
 132:	be 01       	movw	r22, r28
 134:	c8 01       	movw	r24, r16
 136:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 13a:	4f ef       	ldi	r20, 0xFF	; 255
 13c:	be 01       	movw	r22, r28
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 144:	4f ef       	ldi	r20, 0xFF	; 255
 146:	be 01       	movw	r22, r28
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
 14e:	97 01       	movw	r18, r14
 150:	45 2d       	mov	r20, r5
 152:	be 01       	movw	r22, r28
 154:	c8 01       	movw	r24, r16
}
 156:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 15a:	4f ef       	ldi	r20, 0xFF	; 255
 15c:	be 01       	movw	r22, r28
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 164:	4f ef       	ldi	r20, 0xFF	; 255
 166:	be 01       	movw	r22, r28
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 16e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 172:	40 e0       	ldi	r20, 0x00	; 0
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
 174:	be 01       	movw	r22, r28
 176:	c8 01       	movw	r24, r16
 178:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 17c:	e8 0c       	add	r14, r8
 17e:	f9 1c       	adc	r15, r9
 180:	63 94       	inc	r6
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_ssd1322_nhd31oled_bw_fn+0x11e>
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	00 c0       	rjmp	.+0      	; 0x18a <u8g_dev_ssd1322_nhd31oled_bw_fn+0x124>
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	be 01       	movw	r22, r28
 190:	c8 01       	movw	r24, r16
 192:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	ef 90       	pop	r14
 1a4:	df 90       	pop	r13
 1a6:	cf 90       	pop	r12
 1a8:	bf 90       	pop	r11
 1aa:	af 90       	pop	r10
 1ac:	9f 90       	pop	r9
 1ae:	8f 90       	pop	r8
 1b0:	7f 90       	pop	r7
 1b2:	6f 90       	pop	r6
 1b4:	5f 90       	pop	r5
 1b6:	08 95       	ret
 1b8:	95 01       	movw	r18, r10
 1ba:	47 2d       	mov	r20, r7
 1bc:	be 01       	movw	r22, r28
 1be:	c8 01       	movw	r24, r16
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	ef 90       	pop	r14
 1cc:	df 90       	pop	r13
 1ce:	cf 90       	pop	r12
 1d0:	bf 90       	pop	r11
 1d2:	af 90       	pop	r10
 1d4:	9f 90       	pop	r9
 1d6:	8f 90       	pop	r8
 1d8:	7f 90       	pop	r7
 1da:	6f 90       	pop	r6
 1dc:	5f 90       	pop	r5
 1de:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>

Disassembly of section .text.u8g_dev_ssd1322_nhd31oled_2x_bw_fn:

00000248 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn>:
 248:	5f 92       	push	r5
 24a:	6f 92       	push	r6
 24c:	7f 92       	push	r7
 24e:	8f 92       	push	r8
 250:	9f 92       	push	r9
 252:	af 92       	push	r10
 254:	bf 92       	push	r11
 256:	cf 92       	push	r12
 258:	df 92       	push	r13
 25a:	ef 92       	push	r14
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	8c 01       	movw	r16, r24
 268:	eb 01       	movw	r28, r22
 26a:	74 2e       	mov	r7, r20
 26c:	59 01       	movw	r10, r18
 26e:	80 e1       	ldi	r24, 0x10	; 16
 270:	48 17       	cp	r20, r24
 272:	01 f4       	brne	.+0      	; 0x274 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x2c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x2e>
 276:	84 17       	cp	r24, r20
 278:	00 f0       	brcs	.+0      	; 0x27a <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x32>
 27a:	ea e0       	ldi	r30, 0x0A	; 10
 27c:	4e 17       	cp	r20, r30
 27e:	01 f0       	breq	.+0      	; 0x280 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x38>
 280:	ff e0       	ldi	r31, 0x0F	; 15
 282:	4f 13       	cpse	r20, r31
 284:	00 c0       	rjmp	.+0      	; 0x286 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x3e>
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 28e:	40 e0       	ldi	r20, 0x00	; 0
 290:	be 01       	movw	r22, r28
 292:	c8 01       	movw	r24, r16
 294:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 298:	41 ec       	ldi	r20, 0xC1	; 193
 29a:	be 01       	movw	r22, r28
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 2a2:	41 e0       	ldi	r20, 0x01	; 1
 2a4:	be 01       	movw	r22, r28
 2a6:	c8 01       	movw	r24, r16
 2a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 2ac:	f5 01       	movw	r30, r10
 2ae:	40 81       	ld	r20, Z
 2b0:	46 95       	lsr	r20
 2b2:	be 01       	movw	r22, r28
 2b4:	c8 01       	movw	r24, r16
 2b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	be 01       	movw	r22, r28
 2be:	c8 01       	movw	r24, r16
 2c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x7e>
 2c6:	81 e1       	ldi	r24, 0x11	; 17
 2c8:	48 17       	cp	r20, r24
 2ca:	01 f4       	brne	.+0      	; 0x2cc <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x84>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x86>
 2ce:	e5 e1       	ldi	r30, 0x15	; 21
 2d0:	4e 13       	cpse	r20, r30
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x8c>
 2d4:	ca 80       	ldd	r12, Y+2	; 0x02
 2d6:	db 80       	ldd	r13, Y+3	; 0x03
 2d8:	f6 01       	movw	r30, r12
 2da:	e6 80       	ldd	r14, Z+6	; 0x06
 2dc:	f7 80       	ldd	r15, Z+7	; 0x07
 2de:	55 80       	ldd	r5, Z+5	; 0x05
 2e0:	56 94       	lsr	r5
 2e2:	56 94       	lsr	r5
 2e4:	56 94       	lsr	r5
 2e6:	61 2c       	mov	r6, r1
 2e8:	85 2c       	mov	r8, r5
 2ea:	91 2c       	mov	r9, r1
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0xa6>
 2ee:	42 e0       	ldi	r20, 0x02	; 2
 2f0:	c8 01       	movw	r24, r16
 2f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	be 01       	movw	r22, r28
 2fc:	c8 01       	movw	r24, r16
 2fe:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 302:	00 c0       	rjmp	.+0      	; 0x304 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0xbc>
 304:	f6 01       	movw	r30, r12
 306:	80 81       	ld	r24, Z
 308:	68 16       	cp	r6, r24
 30a:	00 f0       	brcs	.+0      	; 0x30c <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0xc4>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0xc6>
 30e:	46 2d       	mov	r20, r6
 310:	be 01       	movw	r22, r28
 312:	c8 01       	movw	r24, r16
 314:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 318:	4f ef       	ldi	r20, 0xFF	; 255
 31a:	be 01       	movw	r22, r28
 31c:	c8 01       	movw	r24, r16
 31e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 322:	4f ef       	ldi	r20, 0xFF	; 255
 324:	be 01       	movw	r22, r28
 326:	c8 01       	movw	r24, r16
 328:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 32c:	97 01       	movw	r18, r14
 32e:	45 2d       	mov	r20, r5
 330:	be 01       	movw	r22, r28
 332:	c8 01       	movw	r24, r16
 334:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 338:	4f ef       	ldi	r20, 0xFF	; 255
 33a:	be 01       	movw	r22, r28
 33c:	c8 01       	movw	r24, r16
 33e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 342:	4f ef       	ldi	r20, 0xFF	; 255
 344:	be 01       	movw	r22, r28
 346:	c8 01       	movw	r24, r16
 348:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 34c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	be 01       	movw	r22, r28
 354:	c8 01       	movw	r24, r16
 356:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 35a:	e8 0c       	add	r14, r8
 35c:	f9 1c       	adc	r15, r9
 35e:	63 94       	inc	r6
 360:	00 c0       	rjmp	.+0      	; 0x362 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x11a>
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	00 c0       	rjmp	.+0      	; 0x368 <u8g_dev_ssd1322_nhd31oled_2x_bw_fn+0x120>
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	be 01       	movw	r22, r28
 36e:	c8 01       	movw	r24, r16
 370:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	bf 90       	pop	r11
 388:	af 90       	pop	r10
 38a:	9f 90       	pop	r9
 38c:	8f 90       	pop	r8
 38e:	7f 90       	pop	r7
 390:	6f 90       	pop	r6
 392:	5f 90       	pop	r5
 394:	08 95       	ret
 396:	95 01       	movw	r18, r10
 398:	47 2d       	mov	r20, r7
 39a:	be 01       	movw	r22, r28
 39c:	c8 01       	movw	r24, r16
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	df 90       	pop	r13
 3ac:	cf 90       	pop	r12
 3ae:	bf 90       	pop	r11
 3b0:	af 90       	pop	r10
 3b2:	9f 90       	pop	r9
 3b4:	8f 90       	pop	r8
 3b6:	7f 90       	pop	r7
 3b8:	6f 90       	pop	r6
 3ba:	5f 90       	pop	r5
 3bc:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1322_nhd31oled_bw_hw_spi_buf>

u8g_dev_ssd1322_nhd31oled_gr.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c9c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001b17  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1322_2bit_prepare_row 00000066  00000000  00000000  000027e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1322_nhd31oled_gr_fn 0000017a  00000000  00000000  0000284d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1322_nhd31oled_2x_gr_fn 00000176  00000000  00000000  000029c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_ssd1322_nhd31oled_2x_gr_hw_spi 00000006  00000000  00000000  00002b3d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1322_nhd31oled_2x_gr_sw_spi 00000006  00000000  00000000  00002b43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1322_nhd31oled_2x_gr_pb 00000008  00000000  00000000  00002b49  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1322_nhd31oled_2x_gr_buf 000001f0  00000000  00000000  00002b51  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1322_nhd31oled_gr_parallel 00000006  00000000  00000000  00002b51  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1322_nhd31oled_gr_parallel_pb 00000008  00000000  00000000  00002b57  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1322_nhd31oled_gr_parallel_buf 000000f8  00000000  00000000  00002b5f  2**0
                  ALLOC
 15 .data.u8g_dev_ssd1322_nhd31oled_gr_hw_spi 00000006  00000000  00000000  00002b5f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1322_nhd31oled_gr_hw_spi_pb 00000008  00000000  00000000  00002b65  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ssd1322_nhd31oled_gr_hw_spi_buf 000000f8  00000000  00000000  00002b6d  2**0
                  ALLOC
 18 .data.u8g_dev_ssd1322_nhd31oled_gr_sw_spi 00000006  00000000  00000000  00002b6d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_ssd1322_nhd31oled_gr_sw_spi_pb 00000008  00000000  00000000  00002b73  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_ssd1322_nhd31oled_gr_sw_spi_buf 000000f8  00000000  00000000  00002b7b  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  00002b7b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  00002b86  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_ssd1322_2bit_nhd_312_prepare_page_seq 00000010  00000000  00000000  00002b8f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_ssd1322_2bit_nhd_312_init_seq 0000007e  00000000  00000000  00002b9f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  00002c1d  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1322_2bit_prepare_row:

00000000 <u8g_dev_ssd1322_2bit_prepare_row>:
  return u8g_dev_pb8h2_base_fn(u8g, dev, msg, arg);
}


uint8_t u8g_dev_ssd1322_nhd31oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	8c 01       	movw	r16, r24
   c:	eb 01       	movw	r28, r22
   e:	f4 2e       	mov	r15, r20
  10:	ea 81       	ldd	r30, Y+2	; 0x02
  12:	fb 81       	ldd	r31, Y+3	; 0x03
  14:	94 81       	ldd	r25, Z+4	; 0x04
  16:	80 81       	ld	r24, Z
  18:	98 9f       	mul	r25, r24
  1a:	f0 0c       	add	r15, r0
  1c:	11 24       	eor	r1, r1
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>
  switch(msg)
  28:	4f 2d       	mov	r20, r15
  2a:	be 01       	movw	r22, r28
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	4f 0d       	add	r20, r15
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>
	  p+=cnt;
	}
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  3e:	40 e0       	ldi	r20, 0x00	; 0
  40:	be 01       	movw	r22, r28
  42:	c8 01       	movw	r24, r16
  44:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  48:	4c e5       	ldi	r20, 0x5C	; 92
  4a:	be 01       	movw	r22, r28
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>
      u8g_WriteByte(u8g, dev, 0x081);
  52:	41 e0       	ldi	r20, 0x01	; 1
  54:	be 01       	movw	r22, r28
  56:	c8 01       	movw	r24, r16
  58:	df 91       	pop	r29
      u8g_SetAddress(u8g, dev, 1);          /* data mode */
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1322_2bit_prepare_row>

Disassembly of section .text.u8g_dev_ssd1322_nhd31oled_gr_fn:

00000066 <u8g_dev_ssd1322_nhd31oled_gr_fn>:
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
  66:	5f 92       	push	r5
  68:	6f 92       	push	r6
  6a:	7f 92       	push	r7
  6c:	8f 92       	push	r8
  6e:	9f 92       	push	r9
  70:	af 92       	push	r10
      u8g_SetChipSelect(u8g, dev, 0);      
  72:	bf 92       	push	r11
  74:	cf 92       	push	r12
  76:	df 92       	push	r13
  78:	ef 92       	push	r14
  7a:	ff 92       	push	r15
      break;
  7c:	0f 93       	push	r16
}


uint8_t u8g_dev_ssd1322_nhd31oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  7e:	1f 93       	push	r17
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	8c 01       	movw	r16, r24
  86:	eb 01       	movw	r28, r22
  88:	74 2e       	mov	r7, r20
  8a:	59 01       	movw	r10, r18
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
	uint8_t i;
	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8c:	80 e1       	ldi	r24, 0x10	; 16
  8e:	48 17       	cp	r20, r24
	uint8_t *p = pb->buf;
  90:	01 f4       	brne	.+0      	; 0x92 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x2c>
  92:	00 c0       	rjmp	.+0      	; 0x94 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x2e>
  94:	84 17       	cp	r24, r20
	u8g_uint_t cnt;
	cnt = pb->width;
  96:	00 f0       	brcs	.+0      	; 0x98 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x32>
	cnt >>= 2;    /* 23 Oct 2013, changed to 2 */
  98:	ea e0       	ldi	r30, 0x0A	; 10
  9a:	4e 17       	cp	r20, r30

	for( i = 0; i < pb->p.page_height; i++ )
  9c:	01 f0       	breq	.+0      	; 0x9e <u8g_dev_ssd1322_nhd31oled_gr_fn+0x38>
	  u8g_WriteByte(u8g, dev, 0x00);
	  u8g_WriteByte(u8g, dev, 0x00);
#endif
	  u8g_MicroDelay();	// for DUE?
	  u8g_SetChipSelect(u8g, dev, 0);        
	  p+=cnt;
  9e:	ff e0       	ldi	r31, 0x0F	; 15
  a0:	4f 13       	cpse	r20, r31
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 2;    /* 23 Oct 2013, changed to 2 */

	for( i = 0; i < pb->p.page_height; i++ )
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x3e>
uint8_t u8g_dev_ssd1322_nhd31oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1322_2bit_nhd_312_init_seq);
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	be 01       	movw	r22, r28
  b0:	c8 01       	movw	r24, r16
  b2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  b6:	41 e8       	ldi	r20, 0x81	; 129
      break;
  b8:	be 01       	movw	r22, r28
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 2;    /* 23 Oct 2013, changed to 2 */

	for( i = 0; i < pb->p.page_height; i++ )
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	be 01       	movw	r22, r28
	{
	  u8g_dev_ssd1322_2bit_prepare_row(u8g, dev, i);		/* this will also enable chip select */
  c4:	c8 01       	movw	r24, r16
  c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ca:	f5 01       	movw	r30, r10
  cc:	40 81       	ld	r20, Z
#if !defined(U8G_16BIT)
	  u8g_WriteByte(u8g, dev, 0x00);
  ce:	46 95       	lsr	r20
  d0:	be 01       	movw	r22, r28
  d2:	c8 01       	movw	r24, r16
  d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	  u8g_WriteByte(u8g, dev, 0x00);
  d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
#endif
	  u8g_WriteSequence4LTo16GrDevice(u8g, dev, cnt, p);
  e2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x82>
  e8:	81 e1       	ldi	r24, 0x11	; 17
  ea:	48 17       	cp	r20, r24
  ec:	01 f4       	brne	.+0      	; 0xee <u8g_dev_ssd1322_nhd31oled_gr_fn+0x88>
#if !defined(U8G_16BIT)
	  u8g_WriteByte(u8g, dev, 0x00);
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x8a>
  f0:	e5 e1       	ldi	r30, 0x15	; 21
  f2:	4e 13       	cpse	r20, r30
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x90>
  f6:	ca 80       	ldd	r12, Y+2	; 0x02
	  u8g_WriteByte(u8g, dev, 0x00);
  f8:	db 80       	ldd	r13, Y+3	; 0x03
  fa:	f6 01       	movw	r30, r12
  fc:	e6 80       	ldd	r14, Z+6	; 0x06
  fe:	f7 80       	ldd	r15, Z+7	; 0x07
 100:	55 80       	ldd	r5, Z+5	; 0x05
#endif
	  u8g_MicroDelay();	// for DUE?
 102:	56 94       	lsr	r5
 104:	56 94       	lsr	r5
	  u8g_SetChipSelect(u8g, dev, 0);        
 106:	61 2c       	mov	r6, r1
 108:	85 2c       	mov	r8, r5
 10a:	91 2c       	mov	r9, r1
 10c:	00 c0       	rjmp	.+0      	; 0x10e <u8g_dev_ssd1322_nhd31oled_gr_fn+0xa8>
 10e:	42 e0       	ldi	r20, 0x02	; 2
	  p+=cnt;
 110:	c8 01       	movw	r24, r16
 112:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 2;    /* 23 Oct 2013, changed to 2 */

	for( i = 0; i < pb->p.page_height; i++ )
 116:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 1);          /* data mode */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
      break;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 118:	50 e0       	ldi	r21, 0x00	; 0
 11a:	be 01       	movw	r22, r28
 11c:	c8 01       	movw	r24, r16
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 11e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 122:	00 c0       	rjmp	.+0      	; 0x124 <u8g_dev_ssd1322_nhd31oled_gr_fn+0xbe>
 124:	f6 01       	movw	r30, r12
 126:	80 81       	ld	r24, Z
 128:	68 16       	cp	r6, r24
      return 1;
  }
  return u8g_dev_pb16h2_base_fn(u8g, dev, msg, arg);
}
 12a:	00 f0       	brcs	.+0      	; 0x12c <u8g_dev_ssd1322_nhd31oled_gr_fn+0xc6>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <u8g_dev_ssd1322_nhd31oled_gr_fn+0xc8>
 12e:	46 2d       	mov	r20, r6
 130:	be 01       	movw	r22, r28
 132:	c8 01       	movw	r24, r16
 134:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	be 01       	movw	r22, r28
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	be 01       	movw	r22, r28
 146:	c8 01       	movw	r24, r16
 148:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h2_base_fn(u8g, dev, msg, arg);
 14c:	97 01       	movw	r18, r14
 14e:	45 2d       	mov	r20, r5
 150:	be 01       	movw	r22, r28
 152:	c8 01       	movw	r24, r16
}
 154:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	be 01       	movw	r22, r28
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	be 01       	movw	r22, r28
 166:	c8 01       	movw	r24, r16
 168:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 170:	40 e0       	ldi	r20, 0x00	; 0
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h2_base_fn(u8g, dev, msg, arg);
 172:	be 01       	movw	r22, r28
 174:	c8 01       	movw	r24, r16
 176:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 17a:	e8 0c       	add	r14, r8
 17c:	f9 1c       	adc	r15, r9
 17e:	63 94       	inc	r6
 180:	00 c0       	rjmp	.+0      	; 0x182 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x11c>
 182:	40 e0       	ldi	r20, 0x00	; 0
 184:	50 e0       	ldi	r21, 0x00	; 0
 186:	00 c0       	rjmp	.+0      	; 0x188 <u8g_dev_ssd1322_nhd31oled_gr_fn+0x122>
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	bf 90       	pop	r11
 1a8:	af 90       	pop	r10
 1aa:	9f 90       	pop	r9
 1ac:	8f 90       	pop	r8
 1ae:	7f 90       	pop	r7
 1b0:	6f 90       	pop	r6
 1b2:	5f 90       	pop	r5
 1b4:	08 95       	ret
 1b6:	95 01       	movw	r18, r10
 1b8:	47 2d       	mov	r20, r7
 1ba:	be 01       	movw	r22, r28
 1bc:	c8 01       	movw	r24, r16
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	af 90       	pop	r10
 1d2:	9f 90       	pop	r9
 1d4:	8f 90       	pop	r8
 1d6:	7f 90       	pop	r7
 1d8:	6f 90       	pop	r6
 1da:	5f 90       	pop	r5
 1dc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_dev_ssd1322_nhd31oled_2x_gr_fn:

00000246 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn>:
 246:	5f 92       	push	r5
 248:	6f 92       	push	r6
 24a:	7f 92       	push	r7
 24c:	8f 92       	push	r8
 24e:	9f 92       	push	r9
 250:	af 92       	push	r10
 252:	bf 92       	push	r11
 254:	cf 92       	push	r12
 256:	df 92       	push	r13
 258:	ef 92       	push	r14
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	8c 01       	movw	r16, r24
 266:	eb 01       	movw	r28, r22
 268:	74 2e       	mov	r7, r20
 26a:	59 01       	movw	r10, r18
 26c:	80 e1       	ldi	r24, 0x10	; 16
 26e:	48 17       	cp	r20, r24
 270:	01 f4       	brne	.+0      	; 0x272 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x2c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x2e>
 274:	84 17       	cp	r24, r20
 276:	00 f0       	brcs	.+0      	; 0x278 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x32>
 278:	ea e0       	ldi	r30, 0x0A	; 10
 27a:	4e 17       	cp	r20, r30
 27c:	01 f0       	breq	.+0      	; 0x27e <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x38>
 27e:	ff e0       	ldi	r31, 0x0F	; 15
 280:	4f 13       	cpse	r20, r31
 282:	00 c0       	rjmp	.+0      	; 0x284 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x3e>
 284:	41 e0       	ldi	r20, 0x01	; 1
 286:	c8 01       	movw	r24, r16
 288:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	be 01       	movw	r22, r28
 290:	c8 01       	movw	r24, r16
 292:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 296:	41 e8       	ldi	r20, 0x81	; 129
 298:	be 01       	movw	r22, r28
 29a:	c8 01       	movw	r24, r16
 29c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	be 01       	movw	r22, r28
 2a4:	c8 01       	movw	r24, r16
 2a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2aa:	f5 01       	movw	r30, r10
 2ac:	40 81       	ld	r20, Z
 2ae:	46 95       	lsr	r20
 2b0:	be 01       	movw	r22, r28
 2b2:	c8 01       	movw	r24, r16
 2b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	be 01       	movw	r22, r28
 2bc:	c8 01       	movw	r24, r16
 2be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x7e>
 2c4:	81 e1       	ldi	r24, 0x11	; 17
 2c6:	48 17       	cp	r20, r24
 2c8:	01 f4       	brne	.+0      	; 0x2ca <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x84>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x86>
 2cc:	e5 e1       	ldi	r30, 0x15	; 21
 2ce:	4e 13       	cpse	r20, r30
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x8c>
 2d2:	ca 80       	ldd	r12, Y+2	; 0x02
 2d4:	db 80       	ldd	r13, Y+3	; 0x03
 2d6:	f6 01       	movw	r30, r12
 2d8:	e6 80       	ldd	r14, Z+6	; 0x06
 2da:	f7 80       	ldd	r15, Z+7	; 0x07
 2dc:	55 80       	ldd	r5, Z+5	; 0x05
 2de:	56 94       	lsr	r5
 2e0:	56 94       	lsr	r5
 2e2:	61 2c       	mov	r6, r1
 2e4:	85 2c       	mov	r8, r5
 2e6:	91 2c       	mov	r9, r1
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0xa4>
 2ea:	42 e0       	ldi	r20, 0x02	; 2
 2ec:	c8 01       	movw	r24, r16
 2ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2f2:	40 e0       	ldi	r20, 0x00	; 0
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	be 01       	movw	r22, r28
 2f8:	c8 01       	movw	r24, r16
 2fa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0xba>
 300:	f6 01       	movw	r30, r12
 302:	80 81       	ld	r24, Z
 304:	68 16       	cp	r6, r24
 306:	00 f0       	brcs	.+0      	; 0x308 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0xc2>
 308:	00 c0       	rjmp	.+0      	; 0x30a <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0xc4>
 30a:	46 2d       	mov	r20, r6
 30c:	be 01       	movw	r22, r28
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	be 01       	movw	r22, r28
 318:	c8 01       	movw	r24, r16
 31a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	be 01       	movw	r22, r28
 322:	c8 01       	movw	r24, r16
 324:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 328:	97 01       	movw	r18, r14
 32a:	45 2d       	mov	r20, r5
 32c:	be 01       	movw	r22, r28
 32e:	c8 01       	movw	r24, r16
 330:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	be 01       	movw	r22, r28
 338:	c8 01       	movw	r24, r16
 33a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	be 01       	movw	r22, r28
 342:	c8 01       	movw	r24, r16
 344:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 348:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	be 01       	movw	r22, r28
 350:	c8 01       	movw	r24, r16
 352:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 356:	e8 0c       	add	r14, r8
 358:	f9 1c       	adc	r15, r9
 35a:	63 94       	inc	r6
 35c:	00 c0       	rjmp	.+0      	; 0x35e <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x118>
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	00 c0       	rjmp	.+0      	; 0x364 <u8g_dev_ssd1322_nhd31oled_2x_gr_fn+0x11e>
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	be 01       	movw	r22, r28
 36a:	c8 01       	movw	r24, r16
 36c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	bf 90       	pop	r11
 384:	af 90       	pop	r10
 386:	9f 90       	pop	r9
 388:	8f 90       	pop	r8
 38a:	7f 90       	pop	r7
 38c:	6f 90       	pop	r6
 38e:	5f 90       	pop	r5
 390:	08 95       	ret
 392:	95 01       	movw	r18, r10
 394:	47 2d       	mov	r20, r7
 396:	be 01       	movw	r22, r28
 398:	c8 01       	movw	r24, r16
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	1f 91       	pop	r17
 3a0:	0f 91       	pop	r16
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	bf 90       	pop	r11
 3ac:	af 90       	pop	r10
 3ae:	9f 90       	pop	r9
 3b0:	8f 90       	pop	r8
 3b2:	7f 90       	pop	r7
 3b4:	6f 90       	pop	r6
 3b6:	5f 90       	pop	r5
 3b8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_dev_ssd1325_nhd27oled_bw.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000264  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000074e  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY

u8g_dev_ssd1325_nhd27oled_bw_new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bf4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001b3a  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1325_prepare_row 00000052  00000000  00000000  00002762  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1325_nhd27oled_bw_fn 0000013e  00000000  00000000  000027b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1325_nhd27oled_2x_bw_fn 0000013e  00000000  00000000  000028f2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_ssd1325_nhd27oled_2x_bw_parallel 00000006  00000000  00000000  00002a30  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1325_nhd27oled_2x_bw_hw_spi 00000006  00000000  00000000  00002a36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1325_nhd27oled_2x_bw_sw_spi 00000006  00000000  00000000  00002a3c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .data.u8g_dev_ssd1325_nhd27oled_2x_bw_pb 00000008  00000000  00000000  00002a42  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .bss.u8g_dev_ssd1325_nhd27oled_2x_bw_buf 00000100  00000000  00000000  00002a4a  2**0
                  ALLOC
 13 .data.u8g_dev_ssd1325_nhd27oled_bw_parallel 00000006  00000000  00000000  00002a4a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .data.u8g_dev_ssd1325_nhd27oled_bw_parallel_pb 00000008  00000000  00000000  00002a50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .bss.u8g_dev_ssd1325_nhd27oled_bw_parallel_buf 00000080  00000000  00000000  00002a58  2**0
                  ALLOC
 16 .data.u8g_dev_ssd1325_nhd27oled_bw_hw_spi 00000006  00000000  00000000  00002a58  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .data.u8g_dev_ssd1325_nhd27oled_bw_hw_spi_pb 00000008  00000000  00000000  00002a5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 18 .bss.u8g_dev_ssd1325_nhd27oled_bw_hw_spi_buf 00000080  00000000  00000000  00002a66  2**0
                  ALLOC
 19 .data.u8g_dev_ssd1325_nhd27oled_bw_sw_spi 00000006  00000000  00000000  00002a66  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .data.u8g_dev_ssd1325_nhd27oled_bw_sw_spi_pb 00000008  00000000  00000000  00002a6c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 21 .bss.u8g_dev_ssd1325_nhd27oled_bw_sw_spi_buf 00000080  00000000  00000000  00002a74  2**0
                  ALLOC
 22 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  00002a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  00002a7f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_ssd1325_prepare_row_seq 0000000a  00000000  00000000  00002a88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .progmem.data.u8g_dev_ssd1325_nhd_27_12864_init_seq 00000039  00000000  00000000  00002a92  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 26 .comment      00000022  00000000  00000000  00002acb  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1325_prepare_row:

00000000 <u8g_dev_ssd1325_prepare_row>:
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}

static uint8_t u8g_dev_ssd1325_nhd27oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	8c 01       	movw	r16, r24
   c:	eb 01       	movw	r28, r22
   e:	f4 2e       	mov	r15, r20
  10:	ea 81       	ldd	r30, Y+2	; 0x02
  12:	fb 81       	ldd	r31, Y+3	; 0x03
  14:	94 81       	ldd	r25, Z+4	; 0x04
  16:	80 81       	ld	r24, Z
  18:	98 9f       	mul	r25, r24
  1a:	f0 0c       	add	r15, r0
  1c:	11 24       	eor	r1, r1
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_prepare_row>
  switch(msg)
  28:	4f 2d       	mov	r20, r15
  2a:	be 01       	movw	r22, r28
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_prepare_row>
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	4f 0d       	add	r20, r15
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_prepare_row>
	  p+=cnt;
	}
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	be 01       	movw	r22, r28
  42:	c8 01       	movw	r24, r16
  44:	df 91       	pop	r29
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1325_prepare_row>

Disassembly of section .text.u8g_dev_ssd1325_nhd27oled_bw_fn:

00000052 <u8g_dev_ssd1325_nhd27oled_bw_fn>:
      u8g_WriteByte(u8g, dev, 0x081);
  52:	5f 92       	push	r5
  54:	6f 92       	push	r6
  56:	7f 92       	push	r7
  58:	8f 92       	push	r8
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
  5a:	9f 92       	push	r9
  5c:	af 92       	push	r10
  5e:	bf 92       	push	r11
  60:	cf 92       	push	r12
  62:	df 92       	push	r13
  64:	ef 92       	push	r14
  66:	ff 92       	push	r15
      u8g_SetChipSelect(u8g, dev, 0);      
  68:	0f 93       	push	r16
  6a:	1f 93       	push	r17
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	8c 01       	movw	r16, r24
      break;
  72:	eb 01       	movw	r28, r22
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}

static uint8_t u8g_dev_ssd1325_nhd27oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  74:	74 2e       	mov	r7, r20
  76:	59 01       	movw	r10, r18
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	48 17       	cp	r20, r24
  7c:	01 f4       	brne	.+0      	; 0x7e <u8g_dev_ssd1325_nhd27oled_bw_fn+0x2c>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <u8g_dev_ssd1325_nhd27oled_bw_fn+0x2e>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
	uint8_t i;
	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  80:	84 17       	cp	r24, r20
  82:	00 f0       	brcs	.+0      	; 0x84 <u8g_dev_ssd1325_nhd27oled_bw_fn+0x32>
	uint8_t *p = pb->buf;
  84:	ea e0       	ldi	r30, 0x0A	; 10
  86:	4e 17       	cp	r20, r30
  88:	01 f0       	breq	.+0      	; 0x8a <u8g_dev_ssd1325_nhd27oled_bw_fn+0x38>
	u8g_uint_t cnt;
	cnt = pb->width;
  8a:	ff e0       	ldi	r31, 0x0F	; 15
	cnt >>= 3;
  8c:	4f 13       	cpse	r20, r31
  8e:	00 c0       	rjmp	.+0      	; 0x90 <u8g_dev_ssd1325_nhd27oled_bw_fn+0x3e>
  90:	41 e0       	ldi	r20, 0x01	; 1

	for( i = 0; i < pb->p.page_height; i++ )
  92:	c8 01       	movw	r24, r16
	{
	  u8g_dev_ssd1325_prepare_row(u8g, dev, i);		/* this will also enable chip select */
	  u8g_WriteSequenceBWTo16GrDevice(u8g, dev, cnt, p);
	  u8g_SetChipSelect(u8g, dev, 0);        
	  p+=cnt;
  94:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
  98:	40 e0       	ldi	r20, 0x00	; 0
static uint8_t u8g_dev_ssd1325_nhd27oled_2x_bw_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  9a:	be 01       	movw	r22, r28
  9c:	c8 01       	movw	r24, r16
  9e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1325_nhd_27_12864_init_seq);
  a2:	41 e8       	ldi	r20, 0x81	; 129
  a4:	be 01       	movw	r22, r28
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
  ac:	f5 01       	movw	r30, r10
      break;
  ae:	40 81       	ld	r20, Z
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
  b0:	46 95       	lsr	r20
  b2:	be 01       	movw	r22, r28
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
	{
	  u8g_dev_ssd1325_prepare_row(u8g, dev, i);		/* this will also enable chip select */
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
	  u8g_WriteSequenceBWTo16GrDevice(u8g, dev, cnt, p);
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <u8g_dev_ssd1325_nhd27oled_bw_fn+0x74>
  c6:	81 e1       	ldi	r24, 0x11	; 17
  c8:	48 17       	cp	r20, r24
  ca:	01 f0       	breq	.+0      	; 0xcc <u8g_dev_ssd1325_nhd27oled_bw_fn+0x7a>
  cc:	e5 e1       	ldi	r30, 0x15	; 21
	  u8g_SetChipSelect(u8g, dev, 0);        
  ce:	4e 13       	cpse	r20, r30
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_dev_ssd1325_nhd27oled_bw_fn+0x80>
  d2:	ca 80       	ldd	r12, Y+2	; 0x02
  d4:	db 80       	ldd	r13, Y+3	; 0x03
  d6:	f6 01       	movw	r30, r12
	  p+=cnt;
  d8:	e6 80       	ldd	r14, Z+6	; 0x06
  da:	f7 80       	ldd	r15, Z+7	; 0x07
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 3;

	for( i = 0; i < pb->p.page_height; i++ )
  dc:	55 80       	ldd	r5, Z+5	; 0x05
  de:	56 94       	lsr	r5
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
      break;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  e0:	56 94       	lsr	r5
  e2:	56 94       	lsr	r5
  e4:	61 2c       	mov	r6, r1
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  e6:	85 2c       	mov	r8, r5
  e8:	91 2c       	mov	r9, r1
  ea:	00 c0       	rjmp	.+0      	; 0xec <u8g_dev_ssd1325_nhd27oled_bw_fn+0x9a>
  ec:	42 e0       	ldi	r20, 0x02	; 2
  ee:	c8 01       	movw	r24, r16
  f0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
}
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	be 01       	movw	r22, r28
  fa:	c8 01       	movw	r24, r16
  fc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 100:	00 c0       	rjmp	.+0      	; 0x102 <u8g_dev_ssd1325_nhd27oled_bw_fn+0xb0>
 102:	f6 01       	movw	r30, r12
 104:	80 81       	ld	r24, Z
 106:	68 16       	cp	r6, r24
 108:	00 f4       	brcc	.+0      	; 0x10a <u8g_dev_ssd1325_nhd27oled_bw_fn+0xb8>
 10a:	46 2d       	mov	r20, r6
 10c:	be 01       	movw	r22, r28
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
 114:	97 01       	movw	r18, r14
 116:	45 2d       	mov	r20, r5
 118:	be 01       	movw	r22, r28
 11a:	c8 01       	movw	r24, r16
}
 11c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	be 01       	movw	r22, r28
 124:	c8 01       	movw	r24, r16
 126:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 12a:	e8 0c       	add	r14, r8
 12c:	f9 1c       	adc	r15, r9
 12e:	63 94       	inc	r6
 130:	00 c0       	rjmp	.+0      	; 0x132 <u8g_dev_ssd1325_nhd27oled_bw_fn+0xe0>
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	50 e0       	ldi	r21, 0x00	; 0
 136:	00 c0       	rjmp	.+0      	; 0x138 <u8g_dev_ssd1325_nhd27oled_bw_fn+0xe6>
 138:	40 e0       	ldi	r20, 0x00	; 0
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	be 01       	movw	r22, r28
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	bf 90       	pop	r11
 158:	af 90       	pop	r10
 15a:	9f 90       	pop	r9
 15c:	8f 90       	pop	r8
 15e:	7f 90       	pop	r7
 160:	6f 90       	pop	r6
 162:	5f 90       	pop	r5
 164:	08 95       	ret
 166:	95 01       	movw	r18, r10
 168:	47 2d       	mov	r20, r7
 16a:	be 01       	movw	r22, r28
 16c:	c8 01       	movw	r24, r16
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	ff 90       	pop	r15
 178:	ef 90       	pop	r14
 17a:	df 90       	pop	r13
 17c:	cf 90       	pop	r12
 17e:	bf 90       	pop	r11
 180:	af 90       	pop	r10
 182:	9f 90       	pop	r9
 184:	8f 90       	pop	r8
 186:	7f 90       	pop	r7
 188:	6f 90       	pop	r6
 18a:	5f 90       	pop	r5
 18c:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>

Disassembly of section .text.u8g_dev_ssd1325_nhd27oled_2x_bw_fn:

000001e2 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn>:
 1e2:	5f 92       	push	r5
 1e4:	6f 92       	push	r6
 1e6:	7f 92       	push	r7
 1e8:	8f 92       	push	r8
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	8c 01       	movw	r16, r24
 202:	eb 01       	movw	r28, r22
 204:	74 2e       	mov	r7, r20
 206:	59 01       	movw	r10, r18
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	48 17       	cp	r20, r24
 20c:	01 f4       	brne	.+0      	; 0x20e <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x2c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x2e>
 210:	84 17       	cp	r24, r20
 212:	00 f0       	brcs	.+0      	; 0x214 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x32>
 214:	ea e0       	ldi	r30, 0x0A	; 10
 216:	4e 17       	cp	r20, r30
 218:	01 f0       	breq	.+0      	; 0x21a <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x38>
 21a:	ff e0       	ldi	r31, 0x0F	; 15
 21c:	4f 13       	cpse	r20, r31
 21e:	00 c0       	rjmp	.+0      	; 0x220 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x3e>
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	c8 01       	movw	r24, r16
 224:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	be 01       	movw	r22, r28
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 232:	41 e8       	ldi	r20, 0x81	; 129
 234:	be 01       	movw	r22, r28
 236:	c8 01       	movw	r24, r16
 238:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 23c:	f5 01       	movw	r30, r10
 23e:	40 81       	ld	r20, Z
 240:	46 95       	lsr	r20
 242:	be 01       	movw	r22, r28
 244:	c8 01       	movw	r24, r16
 246:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	be 01       	movw	r22, r28
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 254:	00 c0       	rjmp	.+0      	; 0x256 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x74>
 256:	81 e1       	ldi	r24, 0x11	; 17
 258:	48 17       	cp	r20, r24
 25a:	01 f0       	breq	.+0      	; 0x25c <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x7a>
 25c:	e5 e1       	ldi	r30, 0x15	; 21
 25e:	4e 13       	cpse	r20, r30
 260:	00 c0       	rjmp	.+0      	; 0x262 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x80>
 262:	ca 80       	ldd	r12, Y+2	; 0x02
 264:	db 80       	ldd	r13, Y+3	; 0x03
 266:	f6 01       	movw	r30, r12
 268:	e6 80       	ldd	r14, Z+6	; 0x06
 26a:	f7 80       	ldd	r15, Z+7	; 0x07
 26c:	55 80       	ldd	r5, Z+5	; 0x05
 26e:	56 94       	lsr	r5
 270:	56 94       	lsr	r5
 272:	56 94       	lsr	r5
 274:	61 2c       	mov	r6, r1
 276:	85 2c       	mov	r8, r5
 278:	91 2c       	mov	r9, r1
 27a:	00 c0       	rjmp	.+0      	; 0x27c <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0x9a>
 27c:	42 e0       	ldi	r20, 0x02	; 2
 27e:	c8 01       	movw	r24, r16
 280:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	be 01       	movw	r22, r28
 28a:	c8 01       	movw	r24, r16
 28c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 290:	00 c0       	rjmp	.+0      	; 0x292 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0xb0>
 292:	f6 01       	movw	r30, r12
 294:	80 81       	ld	r24, Z
 296:	68 16       	cp	r6, r24
 298:	00 f4       	brcc	.+0      	; 0x29a <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0xb8>
 29a:	46 2d       	mov	r20, r6
 29c:	be 01       	movw	r22, r28
 29e:	c8 01       	movw	r24, r16
 2a0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 2a4:	97 01       	movw	r18, r14
 2a6:	45 2d       	mov	r20, r5
 2a8:	be 01       	movw	r22, r28
 2aa:	c8 01       	movw	r24, r16
 2ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	be 01       	movw	r22, r28
 2b4:	c8 01       	movw	r24, r16
 2b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 2ba:	e8 0c       	add	r14, r8
 2bc:	f9 1c       	adc	r15, r9
 2be:	63 94       	inc	r6
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0xe0>
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <u8g_dev_ssd1325_nhd27oled_2x_bw_fn+0xe6>
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	be 01       	movw	r22, r28
 2ce:	c8 01       	movw	r24, r16
 2d0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16
 2de:	ff 90       	pop	r15
 2e0:	ef 90       	pop	r14
 2e2:	df 90       	pop	r13
 2e4:	cf 90       	pop	r12
 2e6:	bf 90       	pop	r11
 2e8:	af 90       	pop	r10
 2ea:	9f 90       	pop	r9
 2ec:	8f 90       	pop	r8
 2ee:	7f 90       	pop	r7
 2f0:	6f 90       	pop	r6
 2f2:	5f 90       	pop	r5
 2f4:	08 95       	ret
 2f6:	95 01       	movw	r18, r10
 2f8:	47 2d       	mov	r20, r7
 2fa:	be 01       	movw	r22, r28
 2fc:	c8 01       	movw	r24, r16
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	bf 90       	pop	r11
 310:	af 90       	pop	r10
 312:	9f 90       	pop	r9
 314:	8f 90       	pop	r8
 316:	7f 90       	pop	r7
 318:	6f 90       	pop	r6
 31a:	5f 90       	pop	r5
 31c:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1325_nhd27oled_bw_parallel_buf>

u8g_dev_ssd1325_nhd27oled_gr.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000264  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000074e  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000022  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY

u8g_dev_ssd1325_nhd27oled_gr_new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bdc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001a97  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1325_gr_prepare_row 00000052  00000000  00000000  000026a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1325_nhd27oled_gr_fn 0000013e  00000000  00000000  000026f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1325_nhd27oled_2x_gr_fn 0000013e  00000000  00000000  00002837  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_ssd1325_nhd27oled_2x_gr_hw_spi 00000006  00000000  00000000  00002975  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1325_nhd27oled_2x_gr_sw_spi 00000006  00000000  00000000  0000297b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1325_nhd27oled_2x_pb 00000008  00000000  00000000  00002981  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_ssd1325_nhd27oled_2x_buf 00000100  00000000  00000000  00002989  2**0
                  ALLOC
 12 .data.u8g_dev_ssd1325_nhd27oled_gr_hw_spi 00000006  00000000  00000000  00002989  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1325_nhd27oled_gr_hw_spi_pb 00000008  00000000  00000000  0000298f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1325_nhd27oled_gr_hw_spi_buf 00000080  00000000  00000000  00002997  2**0
                  ALLOC
 15 .data.u8g_dev_ssd1325_nhd27oled_gr_sw_spi 00000006  00000000  00000000  00002997  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1325_nhd27oled_gr_sw_spi_pb 00000008  00000000  00000000  0000299d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_ssd1325_nhd27oled_gr_sw_spi_buf 00000080  00000000  00000000  000029a5  2**0
                  ALLOC
 18 .progmem.data.u8g_dev_ssd13xx_sleep_off 0000000b  00000000  00000000  000029a5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_ssd13xx_sleep_on 00000009  00000000  00000000  000029b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_ssd1325_2bit_nhd_27_12864ucy3_prepare_page_seq 0000000a  00000000  00000000  000029b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .progmem.data.u8g_dev_ssd1325_2bit_nhd_27_12864ucy3_init_seq 00000039  00000000  00000000  000029c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .comment      00000022  00000000  00000000  000029fc  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1325_gr_prepare_row:

00000000 <u8g_dev_ssd1325_gr_prepare_row>:
}



static uint8_t u8g_dev_ssd1325_nhd27oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	8c 01       	movw	r16, r24
   c:	eb 01       	movw	r28, r22
   e:	f4 2e       	mov	r15, r20
  10:	ea 81       	ldd	r30, Y+2	; 0x02
  12:	fb 81       	ldd	r31, Y+3	; 0x03
  14:	94 81       	ldd	r25, Z+4	; 0x04
  16:	80 81       	ld	r24, Z
  18:	98 9f       	mul	r25, r24
  1a:	f0 0c       	add	r15, r0
  1c:	11 24       	eor	r1, r1
  1e:	40 e0       	ldi	r20, 0x00	; 0
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	c8 01       	movw	r24, r16
  24:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_gr_prepare_row>
  switch(msg)
  28:	4f 2d       	mov	r20, r15
  2a:	be 01       	movw	r22, r28
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_gr_prepare_row>
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	4f 0d       	add	r20, r15
  36:	be 01       	movw	r22, r28
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1325_gr_prepare_row>
	  p+=cnt;
	}
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	be 01       	movw	r22, r28
  42:	c8 01       	movw	r24, r16
  44:	df 91       	pop	r29
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1325_gr_prepare_row>

Disassembly of section .text.u8g_dev_ssd1325_nhd27oled_gr_fn:

00000052 <u8g_dev_ssd1325_nhd27oled_gr_fn>:
      u8g_WriteByte(u8g, dev, 0x081);
  52:	5f 92       	push	r5
  54:	6f 92       	push	r6
  56:	7f 92       	push	r7
  58:	8f 92       	push	r8
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
  5a:	9f 92       	push	r9
  5c:	af 92       	push	r10
  5e:	bf 92       	push	r11
  60:	cf 92       	push	r12
  62:	df 92       	push	r13
  64:	ef 92       	push	r14
  66:	ff 92       	push	r15
      u8g_SetChipSelect(u8g, dev, 0);      
  68:	0f 93       	push	r16
  6a:	1f 93       	push	r17
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	8c 01       	movw	r16, r24
      return 1;
  72:	eb 01       	movw	r28, r22



static uint8_t u8g_dev_ssd1325_nhd27oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  74:	74 2e       	mov	r7, r20
  76:	59 01       	movw	r10, r18
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	48 17       	cp	r20, r24
  7c:	01 f4       	brne	.+0      	; 0x7e <u8g_dev_ssd1325_nhd27oled_gr_fn+0x2c>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <u8g_dev_ssd1325_nhd27oled_gr_fn+0x2e>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
	uint8_t i;
	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  80:	84 17       	cp	r24, r20
  82:	00 f0       	brcs	.+0      	; 0x84 <u8g_dev_ssd1325_nhd27oled_gr_fn+0x32>
	uint8_t *p = pb->buf;
  84:	ea e0       	ldi	r30, 0x0A	; 10
  86:	4e 17       	cp	r20, r30
  88:	01 f0       	breq	.+0      	; 0x8a <u8g_dev_ssd1325_nhd27oled_gr_fn+0x38>
	u8g_uint_t cnt;
	cnt = pb->width;
  8a:	ff e0       	ldi	r31, 0x0F	; 15
	cnt >>= 2;
  8c:	4f 13       	cpse	r20, r31
  8e:	00 c0       	rjmp	.+0      	; 0x90 <u8g_dev_ssd1325_nhd27oled_gr_fn+0x3e>

	for( i = 0; i < pb->p.page_height; i++ )
  90:	41 e0       	ldi	r20, 0x01	; 1
	{
	  u8g_dev_ssd1325_gr_prepare_row(u8g, dev, i);		/* this will also enable chip select */
	  u8g_WriteSequence4LTo16GrDevice(u8g, dev, cnt, p);
	  u8g_SetChipSelect(u8g, dev, 0);        
	  p+=cnt;
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
static uint8_t u8g_dev_ssd1325_nhd27oled_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	be 01       	movw	r22, r28
  9c:	c8 01       	movw	r24, r16
  9e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1325_2bit_nhd_27_12864ucy3_init_seq);
  a2:	41 e8       	ldi	r20, 0x81	; 129
  a4:	be 01       	movw	r22, r28
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      break;
  ac:	f5 01       	movw	r30, r10
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 2;

	for( i = 0; i < pb->p.page_height; i++ )
  ae:	40 81       	ld	r20, Z
  b0:	46 95       	lsr	r20
  b2:	be 01       	movw	r22, r28
  b4:	c8 01       	movw	r24, r16
	{
	  u8g_dev_ssd1325_gr_prepare_row(u8g, dev, i);		/* this will also enable chip select */
  b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
	  u8g_WriteSequence4LTo16GrDevice(u8g, dev, cnt, p);
  c0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <u8g_dev_ssd1325_nhd27oled_gr_fn+0x74>
  c6:	81 e1       	ldi	r24, 0x11	; 17
  c8:	48 17       	cp	r20, r24
  ca:	01 f0       	breq	.+0      	; 0xcc <u8g_dev_ssd1325_nhd27oled_gr_fn+0x7a>
	  u8g_SetChipSelect(u8g, dev, 0);        
  cc:	e5 e1       	ldi	r30, 0x15	; 21
  ce:	4e 13       	cpse	r20, r30
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_dev_ssd1325_nhd27oled_gr_fn+0x80>
  d2:	ca 80       	ldd	r12, Y+2	; 0x02
  d4:	db 80       	ldd	r13, Y+3	; 0x03
	  p+=cnt;
  d6:	f6 01       	movw	r30, r12
  d8:	e6 80       	ldd	r14, Z+6	; 0x06
	uint8_t *p = pb->buf;
	u8g_uint_t cnt;
	cnt = pb->width;
	cnt >>= 2;

	for( i = 0; i < pb->p.page_height; i++ )
  da:	f7 80       	ldd	r15, Z+7	; 0x07
  dc:	55 80       	ldd	r5, Z+5	; 0x05
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
  de:	56 94       	lsr	r5
  e0:	56 94       	lsr	r5
  e2:	61 2c       	mov	r6, r1
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
  e4:	85 2c       	mov	r8, r5
  e6:	91 2c       	mov	r9, r1
  e8:	00 c0       	rjmp	.+0      	; 0xea <u8g_dev_ssd1325_nhd27oled_gr_fn+0x98>
  ea:	42 e0       	ldi	r20, 0x02	; 2
  ec:	c8 01       	movw	r24, r16
  ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
      return 1;
  }
  return u8g_dev_pb16h2_base_fn(u8g, dev, msg, arg);
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	be 01       	movw	r22, r28
  f8:	c8 01       	movw	r24, r16
}
  fa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <u8g_dev_ssd1325_nhd27oled_gr_fn+0xae>
 100:	f6 01       	movw	r30, r12
 102:	80 81       	ld	r24, Z
 104:	68 16       	cp	r6, r24
 106:	00 f4       	brcc	.+0      	; 0x108 <u8g_dev_ssd1325_nhd27oled_gr_fn+0xb6>
 108:	46 2d       	mov	r20, r6
 10a:	be 01       	movw	r22, r28
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 112:	97 01       	movw	r18, r14
 114:	45 2d       	mov	r20, r5
 116:	be 01       	movw	r22, r28
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16h2_base_fn(u8g, dev, msg, arg);
 118:	c8 01       	movw	r24, r16
 11a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
}
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	be 01       	movw	r22, r28
 122:	c8 01       	movw	r24, r16
 124:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 128:	e8 0c       	add	r14, r8
 12a:	f9 1c       	adc	r15, r9
 12c:	63 94       	inc	r6
 12e:	00 c0       	rjmp	.+0      	; 0x130 <u8g_dev_ssd1325_nhd27oled_gr_fn+0xde>
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	00 c0       	rjmp	.+0      	; 0x136 <u8g_dev_ssd1325_nhd27oled_gr_fn+0xe4>
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	be 01       	movw	r22, r28
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 142:	00 c0       	rjmp	.+0      	; 0x144 <u8g_dev_ssd1325_nhd27oled_gr_fn+0xf2>
 144:	95 01       	movw	r18, r10
 146:	47 2d       	mov	r20, r7
 148:	be 01       	movw	r22, r28
 14a:	c8 01       	movw	r24, r16
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	ef 90       	pop	r14
 158:	df 90       	pop	r13
 15a:	cf 90       	pop	r12
 15c:	bf 90       	pop	r11
 15e:	af 90       	pop	r10
 160:	9f 90       	pop	r9
 162:	8f 90       	pop	r8
 164:	7f 90       	pop	r7
 166:	6f 90       	pop	r6
 168:	5f 90       	pop	r5
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	af 90       	pop	r10
 184:	9f 90       	pop	r9
 186:	8f 90       	pop	r8
 188:	7f 90       	pop	r7
 18a:	6f 90       	pop	r6
 18c:	5f 90       	pop	r5
 18e:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1325_nhd27oled_2x_gr_fn:

000001e2 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn>:
 1e2:	5f 92       	push	r5
 1e4:	6f 92       	push	r6
 1e6:	7f 92       	push	r7
 1e8:	8f 92       	push	r8
 1ea:	9f 92       	push	r9
 1ec:	af 92       	push	r10
 1ee:	bf 92       	push	r11
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	8c 01       	movw	r16, r24
 202:	eb 01       	movw	r28, r22
 204:	74 2e       	mov	r7, r20
 206:	59 01       	movw	r10, r18
 208:	80 e1       	ldi	r24, 0x10	; 16
 20a:	48 17       	cp	r20, r24
 20c:	01 f4       	brne	.+0      	; 0x20e <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x2c>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x2e>
 210:	84 17       	cp	r24, r20
 212:	00 f0       	brcs	.+0      	; 0x214 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x32>
 214:	ea e0       	ldi	r30, 0x0A	; 10
 216:	4e 17       	cp	r20, r30
 218:	01 f0       	breq	.+0      	; 0x21a <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x38>
 21a:	ff e0       	ldi	r31, 0x0F	; 15
 21c:	4f 13       	cpse	r20, r31
 21e:	00 c0       	rjmp	.+0      	; 0x220 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x3e>
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	c8 01       	movw	r24, r16
 224:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	be 01       	movw	r22, r28
 22c:	c8 01       	movw	r24, r16
 22e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 232:	41 e8       	ldi	r20, 0x81	; 129
 234:	be 01       	movw	r22, r28
 236:	c8 01       	movw	r24, r16
 238:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 23c:	f5 01       	movw	r30, r10
 23e:	40 81       	ld	r20, Z
 240:	46 95       	lsr	r20
 242:	be 01       	movw	r22, r28
 244:	c8 01       	movw	r24, r16
 246:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	be 01       	movw	r22, r28
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 254:	00 c0       	rjmp	.+0      	; 0x256 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x74>
 256:	81 e1       	ldi	r24, 0x11	; 17
 258:	48 17       	cp	r20, r24
 25a:	01 f0       	breq	.+0      	; 0x25c <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x7a>
 25c:	e5 e1       	ldi	r30, 0x15	; 21
 25e:	4e 13       	cpse	r20, r30
 260:	00 c0       	rjmp	.+0      	; 0x262 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x80>
 262:	ca 80       	ldd	r12, Y+2	; 0x02
 264:	db 80       	ldd	r13, Y+3	; 0x03
 266:	f6 01       	movw	r30, r12
 268:	e6 80       	ldd	r14, Z+6	; 0x06
 26a:	f7 80       	ldd	r15, Z+7	; 0x07
 26c:	55 80       	ldd	r5, Z+5	; 0x05
 26e:	56 94       	lsr	r5
 270:	56 94       	lsr	r5
 272:	61 2c       	mov	r6, r1
 274:	85 2c       	mov	r8, r5
 276:	91 2c       	mov	r9, r1
 278:	00 c0       	rjmp	.+0      	; 0x27a <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0x98>
 27a:	42 e0       	ldi	r20, 0x02	; 2
 27c:	c8 01       	movw	r24, r16
 27e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 282:	40 e0       	ldi	r20, 0x00	; 0
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	be 01       	movw	r22, r28
 288:	c8 01       	movw	r24, r16
 28a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0xae>
 290:	f6 01       	movw	r30, r12
 292:	80 81       	ld	r24, Z
 294:	68 16       	cp	r6, r24
 296:	00 f4       	brcc	.+0      	; 0x298 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0xb6>
 298:	46 2d       	mov	r20, r6
 29a:	be 01       	movw	r22, r28
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a2:	97 01       	movw	r18, r14
 2a4:	45 2d       	mov	r20, r5
 2a6:	be 01       	movw	r22, r28
 2a8:	c8 01       	movw	r24, r16
 2aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	be 01       	movw	r22, r28
 2b2:	c8 01       	movw	r24, r16
 2b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2b8:	e8 0c       	add	r14, r8
 2ba:	f9 1c       	adc	r15, r9
 2bc:	63 94       	inc	r6
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0xde>
 2c0:	40 e0       	ldi	r20, 0x00	; 0
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0xe4>
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	be 01       	movw	r22, r28
 2cc:	c8 01       	movw	r24, r16
 2ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <u8g_dev_ssd1325_nhd27oled_2x_gr_fn+0xf2>
 2d4:	95 01       	movw	r18, r10
 2d6:	47 2d       	mov	r20, r7
 2d8:	be 01       	movw	r22, r28
 2da:	c8 01       	movw	r24, r16
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	ff 90       	pop	r15
 2e6:	ef 90       	pop	r14
 2e8:	df 90       	pop	r13
 2ea:	cf 90       	pop	r12
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	9f 90       	pop	r9
 2f2:	8f 90       	pop	r8
 2f4:	7f 90       	pop	r7
 2f6:	6f 90       	pop	r6
 2f8:	5f 90       	pop	r5
 2fa:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	1f 91       	pop	r17
 306:	0f 91       	pop	r16
 308:	ff 90       	pop	r15
 30a:	ef 90       	pop	r14
 30c:	df 90       	pop	r13
 30e:	cf 90       	pop	r12
 310:	bf 90       	pop	r11
 312:	af 90       	pop	r10
 314:	9f 90       	pop	r9
 316:	8f 90       	pop	r8
 318:	7f 90       	pop	r7
 31a:	6f 90       	pop	r6
 31c:	5f 90       	pop	r5
 31e:	08 95       	ret

u8g_dev_ssd1327_96x96_gr.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001aed  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1327_2bit_2x_prepare_page 00000054  00000000  00000000  000027a5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1327_2bit_write_4_pixel 0000004c  00000000  00000000  000027f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1327_2bit_2x_write_buffer 00000050  00000000  00000000  00002845  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_dev_ssd1327_96x96_2x_gr_fn 000000ce  00000000  00000000  00002895  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_ssd1327_96x96_gr_fn 00000116  00000000  00000000  00002963  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .bss.buf.3356 00000004  00000000  00000000  00002a79  2**0
                  ALLOC
 11 .data.u8g_dev_ssd1327_96x96_2x_gr_i2c 00000006  00000000  00000000  00002a79  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_ssd1327_96x96_2x_gr_hw_spi 00000006  00000000  00000000  00002a7f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1327_96x96_2x_gr_sw_spi 00000006  00000000  00000000  00002a85  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .data.u8g_dev_ssd1327_96x96_2x_pb 00000008  00000000  00000000  00002a8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .bss.u8g_dev_ssd1327_96x96_2x_buf 000000c0  00000000  00000000  00002a93  2**0
                  ALLOC
 16 .data.u8g_dev_ssd1327_96x96_gr_i2c 00000006  00000000  00000000  00002a93  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .data.u8g_dev_ssd1327_96x96_gr_i2c_pb 00000008  00000000  00000000  00002a99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 18 .bss.u8g_dev_ssd1327_96x96_gr_i2c_buf 00000060  00000000  00000000  00002aa1  2**0
                  ALLOC
 19 .data.u8g_dev_ssd1327_96x96_gr_hw_spi 00000006  00000000  00000000  00002aa1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .data.u8g_dev_ssd1327_96x96_gr_hw_spi_pb 00000008  00000000  00000000  00002aa7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 21 .bss.u8g_dev_ssd1327_96x96_gr_hw_spi_buf 00000060  00000000  00000000  00002aaf  2**0
                  ALLOC
 22 .data.u8g_dev_ssd1327_96x96_gr_sw_spi 00000006  00000000  00000000  00002aaf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 23 .data.u8g_dev_ssd1327_96x96_gr_sw_spi_pb 00000008  00000000  00000000  00002ab5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 24 .bss.u8g_dev_ssd1327_96x96_gr_sw_spi_buf 00000060  00000000  00000000  00002abd  2**0
                  ALLOC
 25 .progmem.data.u8g_dev_ssd1327_2bit_96x96_prepare_page_seq 0000000a  00000000  00000000  00002abd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 26 .progmem.data.u8g_dev_ssd1327_2bit_96x96_init_seq 0000005e  00000000  00000000  00002ac7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 27 .comment      00000022  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1327_2bit_2x_prepare_page:

00000000 <u8g_dev_ssd1327_2bit_2x_prepare_page>:
    cnt--;
  } while( cnt > 0 );
}

uint8_t u8g_dev_ssd1327_96x96_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	eb 01       	movw	r28, r22
  10:	f4 2e       	mov	r15, r20
  12:	ea 81       	ldd	r30, Y+2	; 0x02
  14:	fb 81       	ldd	r31, Y+3	; 0x03
  16:	e4 80       	ldd	r14, Z+4	; 0x04
  18:	40 e0       	ldi	r20, 0x00	; 0
  1a:	50 e0       	ldi	r21, 0x00	; 0
  switch(msg)
  1c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_2bit_2x_prepare_page>
  20:	ee 0c       	add	r14, r14
  22:	fe 0c       	add	r15, r14
  24:	ff 0c       	add	r15, r15
  26:	ff 0c       	add	r15, r15
  28:	4f 2d       	mov	r20, r15
  2a:	be 01       	movw	r22, r28
  2c:	c8 01       	movw	r24, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_2bit_2x_prepare_page>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  32:	43 e0       	ldi	r20, 0x03	; 3
  34:	4f 0d       	add	r20, r15
  36:	be 01       	movw	r22, r28
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_init_seq);
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_2bit_2x_prepare_page>
  3e:	41 e0       	ldi	r20, 0x01	; 1
  40:	be 01       	movw	r22, r28
  42:	c8 01       	movw	r24, r16
      break;
  44:	df 91       	pop	r29
};


static void u8g_dev_ssd1327_2bit_prepare_page(u8g_t *u8g, u8g_dev_t *dev)
{
  uint8_t page = ((u8g_pb_t *)(dev->dev_mem))->p.page;
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  
  u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1327_2bit_96x96_prepare_page_seq);
  4c:	ff 90       	pop	r15
  4e:	ef 90       	pop	r14
  50:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1327_2bit_2x_prepare_page>

Disassembly of section .text.u8g_dev_ssd1327_2bit_write_4_pixel:

00000054 <u8g_dev_ssd1327_2bit_write_4_pixel>:
  54:	10 92 00 00 	sts	0x0000, r1
  
  page <<= 2;
  58:	10 92 00 00 	sts	0x0000, r1
  u8g_WriteByte(u8g, dev, page);       /* start at the selected page */
  5c:	10 92 00 00 	sts	0x0000, r1
  60:	10 92 00 00 	sts	0x0000, r1
  page += 3;
  64:	e0 e0       	ldi	r30, 0x00	; 0
  66:	f0 e0       	ldi	r31, 0x00	; 0
  u8g_WriteByte(u8g, dev, page);       /* end within the selected page */  
  68:	41 11       	cpse	r20, r1
  6a:	00 c0       	rjmp	.+0      	; 0x6c <u8g_dev_ssd1327_2bit_write_4_pixel+0x18>
  6c:	21 11       	cpse	r18, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <u8g_dev_ssd1327_2bit_write_4_pixel+0x1c>
  
  u8g_SetAddress(u8g, dev, 1);          /* data mode */
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	44 e0       	ldi	r20, 0x04	; 4
  76:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>

static void u8g_dev_ssd1327_2bit_write_buffer(u8g_t *u8g, u8g_dev_t *dev)
{
  uint8_t cnt, left, right;
  uint8_t *ptr;
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	34 2f       	mov	r19, r20
  7c:	33 70       	andi	r19, 0x03	; 3
  
  cnt = pb->width;
  7e:	32 95       	swap	r19
  cnt >>= 1;
  80:	30 7f       	andi	r19, 0xF0	; 240
  82:	52 2f       	mov	r21, r18
  84:	53 70       	andi	r21, 0x03	; 3
  ptr = pb->buf;
  do
  {
    left = *ptr++;
    right = *ptr++;
    u8g_dev_ssd1327_2bit_write_4_pixel(u8g, dev, left, right);
  86:	35 2b       	or	r19, r21
  88:	33 0f       	add	r19, r19
  8a:	33 0f       	add	r19, r19
  8c:	31 93       	st	Z+, r19
  8e:	46 95       	lsr	r20
  90:	46 95       	lsr	r20
  92:	26 95       	lsr	r18
    cnt--;
  94:	26 95       	lsr	r18
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	e0 30       	cpi	r30, 0x00	; 0
  9a:	f3 07       	cpc	r31, r19
  } while( cnt > 0 );
  9c:	01 f4       	brne	.+0      	; 0x9e <u8g_dev_ssd1327_2bit_write_4_pixel+0x4a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <u8g_dev_ssd1327_2bit_write_4_pixel+0x4c>

Disassembly of section .text.u8g_dev_ssd1327_2bit_2x_write_buffer:

000000f4 <u8g_dev_ssd1327_2bit_2x_write_buffer>:
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
      return 1;
  }
  return u8g_dev_pb8v2_base_fn(u8g, dev, msg, arg);
}
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	7c 01       	movw	r14, r24
 104:	8b 01       	movw	r16, r22
 106:	db 01       	movw	r26, r22
 108:	12 96       	adiw	r26, 0x02	; 2
 10a:	ed 91       	ld	r30, X+
 10c:	fc 91       	ld	r31, X
 10e:	13 97       	sbiw	r26, 0x03	; 3
 110:	c6 81       	ldd	r28, Z+6	; 0x06
 112:	d7 81       	ldd	r29, Z+7	; 0x07
 114:	d5 80       	ldd	r13, Z+5	; 0x05
 116:	44 23       	and	r20, r20
 118:	01 f0       	breq	.+0      	; 0x11a <u8g_dev_ssd1327_2bit_2x_write_buffer+0x26>
 11a:	cd 0d       	add	r28, r13
 11c:	d1 1d       	adc	r29, r1
 11e:	d6 94       	lsr	r13
 120:	29 81       	ldd	r18, Y+1	; 0x01
 122:	48 81       	ld	r20, Y
 124:	b8 01       	movw	r22, r16
 126:	c7 01       	movw	r24, r14
 128:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 12c:	da 94       	dec	r13
 12e:	22 96       	adiw	r28, 0x02	; 2
 130:	d1 10       	cpse	r13, r1
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_ssd1327_2bit_2x_write_buffer+0x40>
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1327_96x96_2x_gr_fn:

00000238 <u8g_dev_ssd1327_96x96_2x_gr_fn>:
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ec 01       	movw	r28, r24
 248:	8b 01       	movw	r16, r22
 24a:	d4 2e       	mov	r13, r20
 24c:	79 01       	movw	r14, r18
 24e:	8f e0       	ldi	r24, 0x0F	; 15
 250:	48 17       	cp	r20, r24
 252:	01 f0       	breq	.+0      	; 0x254 <u8g_dev_ssd1327_96x96_2x_gr_fn+0x1c>
 254:	e5 e1       	ldi	r30, 0x15	; 21
 256:	4e 17       	cp	r20, r30
 258:	01 f0       	breq	.+0      	; 0x25a <u8g_dev_ssd1327_96x96_2x_gr_fn+0x22>
 25a:	fa e0       	ldi	r31, 0x0A	; 10
 25c:	4f 13       	cpse	r20, r31
 25e:	00 c0       	rjmp	.+0      	; 0x260 <u8g_dev_ssd1327_96x96_2x_gr_fn+0x28>
 260:	42 e0       	ldi	r20, 0x02	; 2
 262:	ce 01       	movw	r24, r28
 264:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	b8 01       	movw	r22, r16
 26e:	ce 01       	movw	r24, r28
 270:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 274:	00 c0       	rjmp	.+0      	; 0x276 <u8g_dev_ssd1327_96x96_2x_gr_fn+0x3e>
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	ce 01       	movw	r24, r28
 27a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	b8 01       	movw	r22, r16
 282:	ce 01       	movw	r24, r28
 284:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	b8 01       	movw	r22, r16
 28c:	ce 01       	movw	r24, r28
 28e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	b8 01       	movw	r22, r16
 296:	ce 01       	movw	r24, r28
 298:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	b8 01       	movw	r22, r16
 2a0:	ce 01       	movw	r24, r28
 2a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2a6:	97 01       	movw	r18, r14
 2a8:	4d 2d       	mov	r20, r13
 2aa:	b8 01       	movw	r22, r16
 2ac:	ce 01       	movw	r24, r28
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	b8 01       	movw	r22, r16
 2cc:	ce 01       	movw	r24, r28
 2ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2d2:	41 e8       	ldi	r20, 0x81	; 129
 2d4:	b8 01       	movw	r22, r16
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2dc:	f7 01       	movw	r30, r14
 2de:	40 81       	ld	r20, Z
 2e0:	46 95       	lsr	r20
 2e2:	b8 01       	movw	r22, r16
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2ea:	40 e0       	ldi	r20, 0x00	; 0
 2ec:	b8 01       	movw	r22, r16
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1327_96x96_gr_fn:

0000053e <u8g_dev_ssd1327_96x96_gr_fn>:
 53e:	af 92       	push	r10
 540:	bf 92       	push	r11
 542:	cf 92       	push	r12
 544:	df 92       	push	r13
 546:	ef 92       	push	r14
 548:	ff 92       	push	r15
 54a:	0f 93       	push	r16
 54c:	1f 93       	push	r17
 54e:	cf 93       	push	r28
 550:	df 93       	push	r29
 552:	8c 01       	movw	r16, r24
 554:	eb 01       	movw	r28, r22
 556:	a4 2e       	mov	r10, r20
 558:	69 01       	movw	r12, r18
 55a:	8f e0       	ldi	r24, 0x0F	; 15
 55c:	48 17       	cp	r20, r24
 55e:	01 f4       	brne	.+0      	; 0x560 <u8g_dev_ssd1327_96x96_gr_fn+0x22>
 560:	00 c0       	rjmp	.+0      	; 0x562 <u8g_dev_ssd1327_96x96_gr_fn+0x24>
 562:	e5 e1       	ldi	r30, 0x15	; 21
 564:	4e 17       	cp	r20, r30
 566:	01 f0       	breq	.+0      	; 0x568 <u8g_dev_ssd1327_96x96_gr_fn+0x2a>
 568:	fa e0       	ldi	r31, 0x0A	; 10
 56a:	4f 13       	cpse	r20, r31
 56c:	00 c0       	rjmp	.+0      	; 0x56e <u8g_dev_ssd1327_96x96_gr_fn+0x30>
 56e:	42 e0       	ldi	r20, 0x02	; 2
 570:	c8 01       	movw	r24, r16
 572:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 576:	40 e0       	ldi	r20, 0x00	; 0
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	be 01       	movw	r22, r28
 57c:	c8 01       	movw	r24, r16
 57e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 582:	00 c0       	rjmp	.+0      	; 0x584 <u8g_dev_ssd1327_96x96_gr_fn+0x46>
 584:	ea 81       	ldd	r30, Y+2	; 0x02
 586:	fb 81       	ldd	r31, Y+3	; 0x03
 588:	f4 80       	ldd	r15, Z+4	; 0x04
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	c8 01       	movw	r24, r16
 590:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 594:	ff 0c       	add	r15, r15
 596:	ff 0c       	add	r15, r15
 598:	4f 2d       	mov	r20, r15
 59a:	be 01       	movw	r22, r28
 59c:	c8 01       	movw	r24, r16
 59e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 5a2:	43 e0       	ldi	r20, 0x03	; 3
 5a4:	4f 0d       	add	r20, r15
 5a6:	be 01       	movw	r22, r28
 5a8:	c8 01       	movw	r24, r16
 5aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	be 01       	movw	r22, r28
 5b2:	c8 01       	movw	r24, r16
 5b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 5b8:	ea 81       	ldd	r30, Y+2	; 0x02
 5ba:	fb 81       	ldd	r31, Y+3	; 0x03
 5bc:	b5 80       	ldd	r11, Z+5	; 0x05
 5be:	b6 94       	lsr	r11
 5c0:	e6 80       	ldd	r14, Z+6	; 0x06
 5c2:	f7 80       	ldd	r15, Z+7	; 0x07
 5c4:	f7 01       	movw	r30, r14
 5c6:	21 81       	ldd	r18, Z+1	; 0x01
 5c8:	40 81       	ld	r20, Z
 5ca:	be 01       	movw	r22, r28
 5cc:	c8 01       	movw	r24, r16
 5ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 5d2:	ba 94       	dec	r11
 5d4:	f2 e0       	ldi	r31, 0x02	; 2
 5d6:	ef 0e       	add	r14, r31
 5d8:	f1 1c       	adc	r15, r1
 5da:	b1 10       	cpse	r11, r1
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <u8g_dev_ssd1327_96x96_gr_fn+0xa0>
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	be 01       	movw	r22, r28
 5e2:	c8 01       	movw	r24, r16
 5e4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 5e8:	96 01       	movw	r18, r12
 5ea:	4a 2d       	mov	r20, r10
 5ec:	be 01       	movw	r22, r28
 5ee:	c8 01       	movw	r24, r16
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	ff 90       	pop	r15
 5fa:	ef 90       	pop	r14
 5fc:	df 90       	pop	r13
 5fe:	cf 90       	pop	r12
 600:	bf 90       	pop	r11
 602:	af 90       	pop	r10
 604:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	c8 01       	movw	r24, r16
 60c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	be 01       	movw	r22, r28
 614:	c8 01       	movw	r24, r16
 616:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 61a:	41 e8       	ldi	r20, 0x81	; 129
 61c:	be 01       	movw	r22, r28
 61e:	c8 01       	movw	r24, r16
 620:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 624:	f6 01       	movw	r30, r12
 626:	40 81       	ld	r20, Z
 628:	46 95       	lsr	r20
 62a:	be 01       	movw	r22, r28
 62c:	c8 01       	movw	r24, r16
 62e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 632:	40 e0       	ldi	r20, 0x00	; 0
 634:	be 01       	movw	r22, r28
 636:	c8 01       	movw	r24, r16
 638:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1327_96x96_gr_sw_spi_buf>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	bf 90       	pop	r11
 650:	af 90       	pop	r10
 652:	08 95       	ret

u8g_dev_ssd1351_128x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00001170  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001e4f  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_ssd1351_to_stream 00000038  00000000  00000000  00002ff3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1351_128x128_332_fn 0000010c  00000000  00000000  0000302b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1351_128x128gh_332_fn 0000010c  00000000  00000000  00003137  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_dev_ssd1351_128x128_idx_fn 00000156  00000000  00000000  00003243  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_ssd1351_hicolor_to_stream 0000003e  00000000  00000000  00003399  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_ssd1351_128x128_hicolor_fn 00000116  00000000  00000000  000033d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_ssd1351_128x128gh_hicolor_fn 00000116  00000000  00000000  000034ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .data.u8g_dev_ssd1351_128x128gh_4x_hicolor_hw_spi 00000006  00000000  00000000  00003603  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1351_128x128gh_4x_hicolor_sw_spi 00000006  00000000  00000000  00003609  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .data.u8g_dev_ssd1351_128x128_4x_hicolor_hw_spi 00000006  00000000  00000000  0000360f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_ssd1351_128x128_4x_hicolor_sw_spi 00000006  00000000  00000000  00003615  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_ssd1351_128x128_4x_hicolor_byte_pb 00000008  00000000  00000000  0000361b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .data.u8g_dev_ssd1351_128x128gh_4x_332_hw_spi 00000006  00000000  00000000  00003623  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 18 .data.u8g_dev_ssd1351_128x128gh_4x_332_sw_spi 00000006  00000000  00000000  00003629  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_ssd1351_128x128_4x_332_hw_spi 00000006  00000000  00000000  0000362f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .data.u8g_dev_ssd1351_128x128_4x_332_sw_spi 00000006  00000000  00000000  00003635  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 21 .data.u8g_dev_ssd1351_128x128_4x_332_byte_pb 00000008  00000000  00000000  0000363b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 22 .bss.u8g_dev_ssd1351_128x128_4x_byte_buf 00001000  00000000  00000000  00003643  2**0
                  ALLOC
 23 .data.u8g_dev_ssd1351_128x128gh_hicolor_hw_spi 00000006  00000000  00000000  00003643  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 24 .data.u8g_dev_ssd1351_128x128gh_hicolor_sw_spi 00000006  00000000  00000000  00003649  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 25 .data.u8g_dev_ssd1351_128x128_hicolor_hw_spi 00000006  00000000  00000000  0000364f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 26 .data.u8g_dev_ssd1351_128x128_hicolor_sw_spi 00000006  00000000  00000000  00003655  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 27 .data.u8g_dev_ssd1351_128x128_hicolor_byte_pb 00000008  00000000  00000000  0000365b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 28 .data.u8g_dev_ssd1351_128x128gh_332_hw_spi 00000006  00000000  00000000  00003663  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 29 .data.u8g_dev_ssd1351_128x128gh_332_sw_spi 00000006  00000000  00000000  00003669  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 30 .data.u8g_dev_ssd1351_128x128_332_hw_spi 00000006  00000000  00000000  0000366f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 31 .data.u8g_dev_ssd1351_128x128_332_sw_spi 00000006  00000000  00000000  00003675  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 32 .data.u8g_dev_ssd1351_128x128_byte_pb 00000008  00000000  00000000  0000367b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 33 .bss.u8g_dev_ssd1351_128x128_byte_buf 00000400  00000000  00000000  00003683  2**0
                  ALLOC
 34 .bss.u8g_dev_ssd1351_128x128_b 00000100  00000000  00000000  00003683  2**0
                  ALLOC
 35 .bss.u8g_dev_ssd1351_128x128_g 00000100  00000000  00000000  00003683  2**0
                  ALLOC
 36 .bss.u8g_dev_ssd1351_128x128_r 00000100  00000000  00000000  00003683  2**0
                  ALLOC
 37 .bss.u8g_ssd1351_stream_bytes 00000018  00000000  00000000  00003683  2**0
                  ALLOC
 38 .progmem.data.u8g_dev_ssd1351_128x128_column_seq 00000019  00000000  00000000  00003683  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 39 .progmem.data.u8g_dev_ssd1351_128x128gh_init_seq 000000d2  00000000  00000000  0000369c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 40 .progmem.data.u8g_dev_ssd1351_128x128_init_seq 000000d2  00000000  00000000  0000376e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 41 .comment      00000022  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_ssd1351_to_stream:

00000000 <u8g_ssd1351_to_stream>:
  }
  return u8g_dev_pbxh16_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1351_128x128gh_hicolor_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	e0 e0       	ldi	r30, 0x00	; 0
   2:	f0 e0       	ldi	r31, 0x00	; 0
   4:	dc 01       	movw	r26, r24
   6:	4d 91       	ld	r20, X+
   8:	cd 01       	movw	r24, r26
   a:	24 2f       	mov	r18, r20
   c:	20 7e       	andi	r18, 0xE0	; 224
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	35 95       	asr	r19
  12:	27 95       	ror	r18
  14:	35 95       	asr	r19
  16:	27 95       	ror	r18
  18:	20 83       	st	Z, r18
  1a:	24 2f       	mov	r18, r20
  1c:	2c 71       	andi	r18, 0x1C	; 28
  1e:	22 0f       	add	r18, r18
  20:	21 83       	std	Z+1, r18	; 0x01
  22:	24 2f       	mov	r18, r20
  24:	23 70       	andi	r18, 0x03	; 3
  26:	22 95       	swap	r18
  28:	20 7f       	andi	r18, 0xF0	; 240
  2a:	22 83       	std	Z+2, r18	; 0x02
  switch(msg)
  2c:	33 96       	adiw	r30, 0x03	; 3
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 30       	cpi	r30, 0x00	; 0
  32:	fb 07       	cpc	r31, r27
  34:	01 f4       	brne	.+0      	; 0x36 <u8g_ssd1351_to_stream+0x36>
  36:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1351_128x128_332_fn:

00000038 <u8g_dev_ssd1351_128x128_332_fn>:
  38:	5f 92       	push	r5
  3a:	6f 92       	push	r6
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_50NS);
  3c:	7f 92       	push	r7
  3e:	8f 92       	push	r8
  40:	9f 92       	push	r9
  42:	af 92       	push	r10
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1351_128x128gh_init_seq);
  44:	bf 92       	push	r11
  46:	cf 92       	push	r12
  48:	df 92       	push	r13
  return u8g_dev_pbxh16_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_ssd1351_128x128gh_hicolor_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  4a:	ef 92       	push	r14
  4c:	ff 92       	push	r15
  4e:	0f 93       	push	r16
  50:	1f 93       	push	r17
  52:	cf 93       	push	r28
  54:	df 93       	push	r29
  56:	7c 01       	movw	r14, r24
  58:	eb 01       	movw	r28, r22
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1351_128x128gh_init_seq);
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1351_128x128_column_seq);
  5a:	94 2e       	mov	r9, r20
  5c:	59 01       	movw	r10, r18
  5e:	84 e1       	ldi	r24, 0x14	; 20
  60:	48 17       	cp	r20, r24
  62:	01 f0       	breq	.+0      	; 0x64 <u8g_dev_ssd1351_128x128_332_fn+0x2c>
  64:	84 17       	cp	r24, r20
      break;
  66:	00 f0       	brcs	.+0      	; 0x68 <u8g_dev_ssd1351_128x128_332_fn+0x30>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  68:	ea e0       	ldi	r30, 0x0A	; 10
  6a:	4e 13       	cpse	r20, r30
  6c:	00 c0       	rjmp	.+0      	; 0x6e <u8g_dev_ssd1351_128x128_332_fn+0x36>
        uint8_t i, j;
        uint8_t page_height;
	uint8_t *ptr = pb->buf;
  6e:	41 e0       	ldi	r20, 0x01	; 1
  70:	c7 01       	movw	r24, r14
  72:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>

	u8g_SetChipSelect(u8g, dev, 1);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	00 c0       	rjmp	.+0      	; 0x7c <u8g_dev_ssd1351_128x128_332_fn+0x44>

        page_height = pb->p.page_y1;
  7c:	f5 e1       	ldi	r31, 0x15	; 21
  7e:	4f 17       	cp	r20, r31
        page_height -= pb->p.page_y0;
  80:	01 f0       	breq	.+0      	; 0x82 <u8g_dev_ssd1351_128x128_332_fn+0x4a>
        page_height++;
  82:	88 e4       	ldi	r24, 0x48	; 72
  84:	48 17       	cp	r20, r24
        for( j = 0; j < page_height; j++ )
  86:	01 f4       	brne	.+0      	; 0x88 <u8g_dev_ssd1351_128x128_332_fn+0x50>
  88:	00 c0       	rjmp	.+0      	; 0x8a <u8g_dev_ssd1351_128x128_332_fn+0x52>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <u8g_dev_ssd1351_128x128_332_fn+0x54>
  8c:	40 e0       	ldi	r20, 0x00	; 0
        {
	    for (i = 0; i < pb->width; i+=RGB332_STREAM_BYTES)
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	be 01       	movw	r22, r28
  92:	c7 01       	movw	r24, r14
  94:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	    {
	      u8g_ssd1351_hicolor_to_stream(ptr);
  98:	00 c0       	rjmp	.+0      	; 0x9a <u8g_dev_ssd1351_128x128_332_fn+0x62>
  9a:	ca 80       	ldd	r12, Y+2	; 0x02
  9c:	db 80       	ldd	r13, Y+3	; 0x03
	      u8g_WriteSequence(u8g, dev, RGB332_STREAM_BYTES*3, u8g_ssd1351_stream_bytes);
  9e:	f6 01       	movw	r30, r12
  a0:	76 80       	ldd	r7, Z+6	; 0x06
  a2:	57 80       	ldd	r5, Z+7	; 0x07
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	c7 01       	movw	r24, r14
  a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
	      ptr += RGB332_STREAM_BYTES*2;
  ac:	f6 01       	movw	r30, r12
  ae:	83 80       	ldd	r8, Z+3	; 0x03
  b0:	83 94       	inc	r8
        page_height = pb->p.page_y1;
        page_height -= pb->p.page_y0;
        page_height++;
        for( j = 0; j < page_height; j++ )
        {
	    for (i = 0; i < pb->width; i+=RGB332_STREAM_BYTES)
  b2:	82 81       	ldd	r24, Z+2	; 0x02
  b4:	88 1a       	sub	r8, r24
  b6:	61 2c       	mov	r6, r1
	u8g_SetChipSelect(u8g, dev, 1);

        page_height = pb->p.page_y1;
        page_height -= pb->p.page_y0;
        page_height++;
        for( j = 0; j < page_height; j++ )
  b8:	68 14       	cp	r6, r8
  ba:	01 f0       	breq	.+0      	; 0xbc <u8g_dev_ssd1351_128x128_332_fn+0x84>
	      ptr += RGB332_STREAM_BYTES*2;
	    }
	  
        }

	u8g_SetChipSelect(u8g, dev, 0);
  bc:	07 2d       	mov	r16, r7
  be:	15 2d       	mov	r17, r5
  c0:	f6 01       	movw	r30, r12
  c2:	85 81       	ldd	r24, Z+5	; 0x05
  c4:	90 2f       	mov	r25, r16
      }
      break;    /* continue to base fn */
    case U8G_DEV_MSG_GET_MODE:
     return U8G_MODE_HICOLOR;
  }
  return u8g_dev_pbxh16_base_fn(u8g, dev, msg, arg);
  c6:	97 19       	sub	r25, r7
  c8:	98 17       	cp	r25, r24
  ca:	00 f4       	brcc	.+0      	; 0xcc <u8g_dev_ssd1351_128x128_332_fn+0x94>
  cc:	c8 01       	movw	r24, r16
}
  ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	48 e1       	ldi	r20, 0x18	; 24
  d8:	be 01       	movw	r22, r28
  da:	c7 01       	movw	r24, r14
  dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  e0:	08 5f       	subi	r16, 0xF8	; 248
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <u8g_dev_ssd1351_128x128_332_fn+0xae>
  e6:	63 94       	inc	r6
  e8:	70 2e       	mov	r7, r16
  ea:	51 2e       	mov	r5, r17
  ec:	00 c0       	rjmp	.+0      	; 0xee <u8g_dev_ssd1351_128x128_332_fn+0xb6>
      }
      break;    /* continue to base fn */
    case U8G_DEV_MSG_GET_MODE:
     return U8G_MODE_HICOLOR;
  }
  return u8g_dev_pbxh16_base_fn(u8g, dev, msg, arg);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	be 01       	movw	r22, r28
}
  f2:	c7 01       	movw	r24, r14
  f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f8:	95 01       	movw	r18, r10
  fa:	49 2d       	mov	r20, r9
  fc:	be 01       	movw	r22, r28
  fe:	c7 01       	movw	r24, r14
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	0f 91       	pop	r16
 108:	ff 90       	pop	r15
 10a:	ef 90       	pop	r14
 10c:	df 90       	pop	r13
 10e:	cf 90       	pop	r12
 110:	bf 90       	pop	r11
 112:	af 90       	pop	r10
 114:	9f 90       	pop	r9
 116:	8f 90       	pop	r8
 118:	7f 90       	pop	r7
 11a:	6f 90       	pop	r6
 11c:	5f 90       	pop	r5
 11e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
 138:	9f 90       	pop	r9
 13a:	8f 90       	pop	r8
 13c:	7f 90       	pop	r7
 13e:	6f 90       	pop	r6
 140:	5f 90       	pop	r5
 142:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1351_128x128gh_332_fn:

0000017c <u8g_dev_ssd1351_128x128gh_332_fn>:
 17c:	5f 92       	push	r5
 17e:	6f 92       	push	r6
 180:	7f 92       	push	r7
 182:	8f 92       	push	r8
 184:	9f 92       	push	r9
 186:	af 92       	push	r10
 188:	bf 92       	push	r11
 18a:	cf 92       	push	r12
 18c:	df 92       	push	r13
 18e:	ef 92       	push	r14
 190:	ff 92       	push	r15
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	7c 01       	movw	r14, r24
 19c:	eb 01       	movw	r28, r22
 19e:	94 2e       	mov	r9, r20
 1a0:	59 01       	movw	r10, r18
 1a2:	84 e1       	ldi	r24, 0x14	; 20
 1a4:	48 17       	cp	r20, r24
 1a6:	01 f0       	breq	.+0      	; 0x1a8 <u8g_dev_ssd1351_128x128gh_332_fn+0x2c>
 1a8:	84 17       	cp	r24, r20
 1aa:	00 f0       	brcs	.+0      	; 0x1ac <u8g_dev_ssd1351_128x128gh_332_fn+0x30>
 1ac:	ea e0       	ldi	r30, 0x0A	; 10
 1ae:	4e 13       	cpse	r20, r30
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <u8g_dev_ssd1351_128x128gh_332_fn+0x36>
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	c7 01       	movw	r24, r14
 1b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <u8g_dev_ssd1351_128x128gh_332_fn+0x44>
 1c0:	f5 e1       	ldi	r31, 0x15	; 21
 1c2:	4f 17       	cp	r20, r31
 1c4:	01 f0       	breq	.+0      	; 0x1c6 <u8g_dev_ssd1351_128x128gh_332_fn+0x4a>
 1c6:	88 e4       	ldi	r24, 0x48	; 72
 1c8:	48 17       	cp	r20, r24
 1ca:	01 f4       	brne	.+0      	; 0x1cc <u8g_dev_ssd1351_128x128gh_332_fn+0x50>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <u8g_dev_ssd1351_128x128gh_332_fn+0x52>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <u8g_dev_ssd1351_128x128gh_332_fn+0x54>
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	be 01       	movw	r22, r28
 1d6:	c7 01       	movw	r24, r14
 1d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <u8g_dev_ssd1351_128x128gh_332_fn+0x62>
 1de:	ca 80       	ldd	r12, Y+2	; 0x02
 1e0:	db 80       	ldd	r13, Y+3	; 0x03
 1e2:	f6 01       	movw	r30, r12
 1e4:	76 80       	ldd	r7, Z+6	; 0x06
 1e6:	57 80       	ldd	r5, Z+7	; 0x07
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	c7 01       	movw	r24, r14
 1ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f0:	f6 01       	movw	r30, r12
 1f2:	83 80       	ldd	r8, Z+3	; 0x03
 1f4:	83 94       	inc	r8
 1f6:	82 81       	ldd	r24, Z+2	; 0x02
 1f8:	88 1a       	sub	r8, r24
 1fa:	61 2c       	mov	r6, r1
 1fc:	68 14       	cp	r6, r8
 1fe:	01 f0       	breq	.+0      	; 0x200 <u8g_dev_ssd1351_128x128gh_332_fn+0x84>
 200:	07 2d       	mov	r16, r7
 202:	15 2d       	mov	r17, r5
 204:	f6 01       	movw	r30, r12
 206:	85 81       	ldd	r24, Z+5	; 0x05
 208:	90 2f       	mov	r25, r16
 20a:	97 19       	sub	r25, r7
 20c:	98 17       	cp	r25, r24
 20e:	00 f4       	brcc	.+0      	; 0x210 <u8g_dev_ssd1351_128x128gh_332_fn+0x94>
 210:	c8 01       	movw	r24, r16
 212:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	48 e1       	ldi	r20, 0x18	; 24
 21c:	be 01       	movw	r22, r28
 21e:	c7 01       	movw	r24, r14
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	08 5f       	subi	r16, 0xF8	; 248
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	00 c0       	rjmp	.+0      	; 0x22a <u8g_dev_ssd1351_128x128gh_332_fn+0xae>
 22a:	63 94       	inc	r6
 22c:	70 2e       	mov	r7, r16
 22e:	51 2e       	mov	r5, r17
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_ssd1351_128x128gh_332_fn+0xb6>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	be 01       	movw	r22, r28
 236:	c7 01       	movw	r24, r14
 238:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 23c:	95 01       	movw	r18, r10
 23e:	49 2d       	mov	r20, r9
 240:	be 01       	movw	r22, r28
 242:	c7 01       	movw	r24, r14
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	5f 90       	pop	r5
 262:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	df 90       	pop	r13
 276:	cf 90       	pop	r12
 278:	bf 90       	pop	r11
 27a:	af 90       	pop	r10
 27c:	9f 90       	pop	r9
 27e:	8f 90       	pop	r8
 280:	7f 90       	pop	r7
 282:	6f 90       	pop	r6
 284:	5f 90       	pop	r5
 286:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1351_128x128_idx_fn:

00000404 <u8g_dev_ssd1351_128x128_idx_fn>:
 404:	7f 92       	push	r7
 406:	8f 92       	push	r8
 408:	9f 92       	push	r9
 40a:	af 92       	push	r10
 40c:	bf 92       	push	r11
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	8c 01       	movw	r16, r24
 420:	eb 01       	movw	r28, r22
 422:	74 2e       	mov	r7, r20
 424:	79 01       	movw	r14, r18
 426:	85 e1       	ldi	r24, 0x15	; 21
 428:	48 17       	cp	r20, r24
 42a:	01 f0       	breq	.+0      	; 0x42c <u8g_dev_ssd1351_128x128_idx_fn+0x28>
 42c:	84 17       	cp	r24, r20
 42e:	00 f0       	brcs	.+0      	; 0x430 <u8g_dev_ssd1351_128x128_idx_fn+0x2c>
 430:	aa e0       	ldi	r26, 0x0A	; 10
 432:	4a 17       	cp	r20, r26
 434:	01 f0       	breq	.+0      	; 0x436 <u8g_dev_ssd1351_128x128_idx_fn+0x32>
 436:	b4 e1       	ldi	r27, 0x14	; 20
 438:	4b 13       	cpse	r20, r27
 43a:	00 c0       	rjmp	.+0      	; 0x43c <u8g_dev_ssd1351_128x128_idx_fn+0x38>
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	00 c0       	rjmp	.+0      	; 0x442 <u8g_dev_ssd1351_128x128_idx_fn+0x3e>
 442:	ec e3       	ldi	r30, 0x3C	; 60
 444:	4e 17       	cp	r20, r30
 446:	01 f0       	breq	.+0      	; 0x448 <u8g_dev_ssd1351_128x128_idx_fn+0x44>
 448:	f8 e4       	ldi	r31, 0x48	; 72
 44a:	4f 17       	cp	r20, r31
 44c:	01 f4       	brne	.+0      	; 0x44e <u8g_dev_ssd1351_128x128_idx_fn+0x4a>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <u8g_dev_ssd1351_128x128_idx_fn+0x4c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <u8g_dev_ssd1351_128x128_idx_fn+0x4e>
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	c8 01       	movw	r24, r16
 456:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 45a:	40 e0       	ldi	r20, 0x00	; 0
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	00 c0       	rjmp	.+0      	; 0x460 <u8g_dev_ssd1351_128x128_idx_fn+0x5c>
 460:	d9 01       	movw	r26, r18
 462:	8c 91       	ld	r24, X
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	e0 50       	subi	r30, 0x00	; 0
 46a:	f0 40       	sbci	r31, 0x00	; 0
 46c:	11 96       	adiw	r26, 0x01	; 1
 46e:	2c 91       	ld	r18, X
 470:	11 97       	sbiw	r26, 0x01	; 1
 472:	20 83       	st	Z, r18
 474:	fc 01       	movw	r30, r24
 476:	e0 50       	subi	r30, 0x00	; 0
 478:	f0 40       	sbci	r31, 0x00	; 0
 47a:	12 96       	adiw	r26, 0x02	; 2
 47c:	2c 91       	ld	r18, X
 47e:	12 97       	sbiw	r26, 0x02	; 2
 480:	20 83       	st	Z, r18
 482:	fc 01       	movw	r30, r24
 484:	e0 50       	subi	r30, 0x00	; 0
 486:	f0 40       	sbci	r31, 0x00	; 0
 488:	13 96       	adiw	r26, 0x03	; 3
 48a:	2c 91       	ld	r18, X
 48c:	20 83       	st	Z, r18
 48e:	00 c0       	rjmp	.+0      	; 0x490 <u8g_dev_ssd1351_128x128_idx_fn+0x8c>
 490:	be 01       	movw	r22, r28
 492:	c8 01       	movw	r24, r16
 494:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 498:	00 c0       	rjmp	.+0      	; 0x49a <u8g_dev_ssd1351_128x128_idx_fn+0x96>
 49a:	aa 80       	ldd	r10, Y+2	; 0x02
 49c:	bb 80       	ldd	r11, Y+3	; 0x03
 49e:	f5 01       	movw	r30, r10
 4a0:	86 80       	ldd	r8, Z+6	; 0x06
 4a2:	97 80       	ldd	r9, Z+7	; 0x07
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	c8 01       	movw	r24, r16
 4a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4ac:	64 01       	movw	r12, r8
 4ae:	f5 01       	movw	r30, r10
 4b0:	85 81       	ldd	r24, Z+5	; 0x05
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	96 01       	movw	r18, r12
 4b6:	28 19       	sub	r18, r8
 4b8:	39 09       	sbc	r19, r9
 4ba:	28 17       	cp	r18, r24
 4bc:	39 07       	cpc	r19, r25
 4be:	04 f4       	brge	.+0      	; 0x4c0 <u8g_dev_ssd1351_128x128_idx_fn+0xbc>
 4c0:	d6 01       	movw	r26, r12
 4c2:	ec 91       	ld	r30, X
 4c4:	e6 95       	lsr	r30
 4c6:	e6 95       	lsr	r30
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	e0 50       	subi	r30, 0x00	; 0
 4cc:	f0 40       	sbci	r31, 0x00	; 0
 4ce:	40 81       	ld	r20, Z
 4d0:	be 01       	movw	r22, r28
 4d2:	c8 01       	movw	r24, r16
 4d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4d8:	d6 01       	movw	r26, r12
 4da:	ec 91       	ld	r30, X
 4dc:	e6 95       	lsr	r30
 4de:	e6 95       	lsr	r30
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	e0 50       	subi	r30, 0x00	; 0
 4e4:	f0 40       	sbci	r31, 0x00	; 0
 4e6:	40 81       	ld	r20, Z
 4e8:	be 01       	movw	r22, r28
 4ea:	c8 01       	movw	r24, r16
 4ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4f0:	d6 01       	movw	r26, r12
 4f2:	ed 91       	ld	r30, X+
 4f4:	6d 01       	movw	r12, r26
 4f6:	e6 95       	lsr	r30
 4f8:	e6 95       	lsr	r30
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	e0 50       	subi	r30, 0x00	; 0
 4fe:	f0 40       	sbci	r31, 0x00	; 0
 500:	40 81       	ld	r20, Z
 502:	be 01       	movw	r22, r28
 504:	c8 01       	movw	r24, r16
 506:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <u8g_dev_ssd1351_128x128_idx_fn+0x108>
 50c:	40 e0       	ldi	r20, 0x00	; 0
 50e:	be 01       	movw	r22, r28
 510:	c8 01       	movw	r24, r16
 512:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 516:	97 01       	movw	r18, r14
 518:	47 2d       	mov	r20, r7
 51a:	be 01       	movw	r22, r28
 51c:	c8 01       	movw	r24, r16
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	af 90       	pop	r10
 532:	9f 90       	pop	r9
 534:	8f 90       	pop	r8
 536:	7f 90       	pop	r7
 538:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 53c:	88 e6       	ldi	r24, 0x68	; 104
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	9f 90       	pop	r9
 554:	8f 90       	pop	r8
 556:	7f 90       	pop	r7
 558:	08 95       	ret

Disassembly of section .text.u8g_ssd1351_hicolor_to_stream:

0000095e <u8g_ssd1351_hicolor_to_stream>:
 95e:	e0 e0       	ldi	r30, 0x00	; 0
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	dc 01       	movw	r26, r24
 964:	5c 91       	ld	r21, X
 966:	11 96       	adiw	r26, 0x01	; 1
 968:	2c 91       	ld	r18, X
 96a:	42 2f       	mov	r20, r18
 96c:	48 7f       	andi	r20, 0xF8	; 248
 96e:	35 2f       	mov	r19, r21
 970:	3f 71       	andi	r19, 0x1F	; 31
 972:	27 70       	andi	r18, 0x07	; 7
 974:	22 0f       	add	r18, r18
 976:	22 0f       	add	r18, r18
 978:	22 0f       	add	r18, r18
 97a:	52 95       	swap	r21
 97c:	56 95       	lsr	r21
 97e:	57 70       	andi	r21, 0x07	; 7
 980:	25 2b       	or	r18, r21
 982:	46 95       	lsr	r20
 984:	46 95       	lsr	r20
 986:	40 83       	st	Z, r20
 988:	21 83       	std	Z+1, r18	; 0x01
 98a:	33 0f       	add	r19, r19
 98c:	32 83       	std	Z+2, r19	; 0x02
 98e:	02 96       	adiw	r24, 0x02	; 2
 990:	33 96       	adiw	r30, 0x03	; 3
 992:	b0 e0       	ldi	r27, 0x00	; 0
 994:	e0 30       	cpi	r30, 0x00	; 0
 996:	fb 07       	cpc	r31, r27
 998:	01 f4       	brne	.+0      	; 0x99a <u8g_ssd1351_hicolor_to_stream+0x3c>
 99a:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1351_128x128_hicolor_fn:

000012fa <u8g_dev_ssd1351_128x128_hicolor_fn>:
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	1f 92       	push	r1
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	8c 01       	movw	r16, r24
    1320:	2b 01       	movw	r4, r22
    1322:	94 2e       	mov	r9, r20
    1324:	59 01       	movw	r10, r18
    1326:	84 e1       	ldi	r24, 0x14	; 20
    1328:	48 17       	cp	r20, r24
    132a:	01 f0       	breq	.+0      	; 0x132c <u8g_dev_ssd1351_128x128_hicolor_fn+0x32>
    132c:	84 17       	cp	r24, r20
    132e:	00 f0       	brcs	.+0      	; 0x1330 <u8g_dev_ssd1351_128x128_hicolor_fn+0x36>
    1330:	ea e0       	ldi	r30, 0x0A	; 10
    1332:	4e 13       	cpse	r20, r30
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <u8g_dev_ssd1351_128x128_hicolor_fn+0x3c>
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	c8 01       	movw	r24, r16
    133a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <u8g_dev_ssd1351_128x128_hicolor_fn+0x4a>
    1344:	f5 e1       	ldi	r31, 0x15	; 21
    1346:	4f 17       	cp	r20, r31
    1348:	01 f0       	breq	.+0      	; 0x134a <u8g_dev_ssd1351_128x128_hicolor_fn+0x50>
    134a:	88 e4       	ldi	r24, 0x48	; 72
    134c:	48 17       	cp	r20, r24
    134e:	01 f4       	brne	.+0      	; 0x1350 <u8g_dev_ssd1351_128x128_hicolor_fn+0x56>
    1350:	00 c0       	rjmp	.+0      	; 0x1352 <u8g_dev_ssd1351_128x128_hicolor_fn+0x58>
    1352:	00 c0       	rjmp	.+0      	; 0x1354 <u8g_dev_ssd1351_128x128_hicolor_fn+0x5a>
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	b2 01       	movw	r22, r4
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <u8g_dev_ssd1351_128x128_hicolor_fn+0x68>
    1362:	fb 01       	movw	r30, r22
    1364:	e2 80       	ldd	r14, Z+2	; 0x02
    1366:	f3 80       	ldd	r15, Z+3	; 0x03
    1368:	f7 01       	movw	r30, r14
    136a:	c6 80       	ldd	r12, Z+6	; 0x06
    136c:	d7 80       	ldd	r13, Z+7	; 0x07
    136e:	41 e0       	ldi	r20, 0x01	; 1
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1376:	f7 01       	movw	r30, r14
    1378:	83 80       	ldd	r8, Z+3	; 0x03
    137a:	83 94       	inc	r8
    137c:	82 81       	ldd	r24, Z+2	; 0x02
    137e:	88 1a       	sub	r8, r24
    1380:	71 2c       	mov	r7, r1
    1382:	78 14       	cp	r7, r8
    1384:	01 f0       	breq	.+0      	; 0x1386 <u8g_dev_ssd1351_128x128_hicolor_fn+0x8c>
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	f7 01       	movw	r30, r14
    138a:	85 81       	ldd	r24, Z+5	; 0x05
    138c:	58 17       	cp	r21, r24
    138e:	00 f4       	brcc	.+0      	; 0x1390 <u8g_dev_ssd1351_128x128_hicolor_fn+0x96>
    1390:	c6 01       	movw	r24, r12
    1392:	59 83       	std	Y+1, r21	; 0x01
    1394:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	48 e1       	ldi	r20, 0x18	; 24
    139e:	b2 01       	movw	r22, r4
    13a0:	c8 01       	movw	r24, r16
    13a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13a6:	f0 e1       	ldi	r31, 0x10	; 16
    13a8:	cf 0e       	add	r12, r31
    13aa:	d1 1c       	adc	r13, r1
    13ac:	59 81       	ldd	r21, Y+1	; 0x01
    13ae:	58 5f       	subi	r21, 0xF8	; 248
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <u8g_dev_ssd1351_128x128_hicolor_fn+0xb8>
    13b2:	73 94       	inc	r7
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <u8g_dev_ssd1351_128x128_hicolor_fn+0xbc>
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	b2 01       	movw	r22, r4
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13c0:	95 01       	movw	r18, r10
    13c2:	49 2d       	mov	r20, r9
    13c4:	b2 01       	movw	r22, r4
    13c6:	c8 01       	movw	r24, r16
    13c8:	0f 90       	pop	r0
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	7f 90       	pop	r7
    13e4:	5f 90       	pop	r5
    13e6:	4f 90       	pop	r4
    13e8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    13ec:	80 e3       	ldi	r24, 0x30	; 48
    13ee:	0f 90       	pop	r0
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	5f 90       	pop	r5
    140c:	4f 90       	pop	r4
    140e:	08 95       	ret

Disassembly of section .text.u8g_dev_ssd1351_128x128gh_hicolor_fn:

0000270a <u8g_dev_ssd1351_128x128gh_hicolor_fn>:
    270a:	4f 92       	push	r4
    270c:	5f 92       	push	r5
    270e:	7f 92       	push	r7
    2710:	8f 92       	push	r8
    2712:	9f 92       	push	r9
    2714:	af 92       	push	r10
    2716:	bf 92       	push	r11
    2718:	cf 92       	push	r12
    271a:	df 92       	push	r13
    271c:	ef 92       	push	r14
    271e:	ff 92       	push	r15
    2720:	0f 93       	push	r16
    2722:	1f 93       	push	r17
    2724:	cf 93       	push	r28
    2726:	df 93       	push	r29
    2728:	1f 92       	push	r1
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	8c 01       	movw	r16, r24
    2730:	2b 01       	movw	r4, r22
    2732:	94 2e       	mov	r9, r20
    2734:	59 01       	movw	r10, r18
    2736:	84 e1       	ldi	r24, 0x14	; 20
    2738:	48 17       	cp	r20, r24
    273a:	01 f0       	breq	.+0      	; 0x273c <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x32>
    273c:	84 17       	cp	r24, r20
    273e:	00 f0       	brcs	.+0      	; 0x2740 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x36>
    2740:	ea e0       	ldi	r30, 0x0A	; 10
    2742:	4e 13       	cpse	r20, r30
    2744:	00 c0       	rjmp	.+0      	; 0x2746 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x3c>
    2746:	41 e0       	ldi	r20, 0x01	; 1
    2748:	c8 01       	movw	r24, r16
    274a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	00 c0       	rjmp	.+0      	; 0x2754 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x4a>
    2754:	f5 e1       	ldi	r31, 0x15	; 21
    2756:	4f 17       	cp	r20, r31
    2758:	01 f0       	breq	.+0      	; 0x275a <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x50>
    275a:	88 e4       	ldi	r24, 0x48	; 72
    275c:	48 17       	cp	r20, r24
    275e:	01 f4       	brne	.+0      	; 0x2760 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x56>
    2760:	00 c0       	rjmp	.+0      	; 0x2762 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x58>
    2762:	00 c0       	rjmp	.+0      	; 0x2764 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x5a>
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	b2 01       	movw	r22, r4
    276a:	c8 01       	movw	r24, r16
    276c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2770:	00 c0       	rjmp	.+0      	; 0x2772 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x68>
    2772:	fb 01       	movw	r30, r22
    2774:	e2 80       	ldd	r14, Z+2	; 0x02
    2776:	f3 80       	ldd	r15, Z+3	; 0x03
    2778:	f7 01       	movw	r30, r14
    277a:	c6 80       	ldd	r12, Z+6	; 0x06
    277c:	d7 80       	ldd	r13, Z+7	; 0x07
    277e:	41 e0       	ldi	r20, 0x01	; 1
    2780:	c8 01       	movw	r24, r16
    2782:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2786:	f7 01       	movw	r30, r14
    2788:	83 80       	ldd	r8, Z+3	; 0x03
    278a:	83 94       	inc	r8
    278c:	82 81       	ldd	r24, Z+2	; 0x02
    278e:	88 1a       	sub	r8, r24
    2790:	71 2c       	mov	r7, r1
    2792:	78 14       	cp	r7, r8
    2794:	01 f0       	breq	.+0      	; 0x2796 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x8c>
    2796:	50 e0       	ldi	r21, 0x00	; 0
    2798:	f7 01       	movw	r30, r14
    279a:	85 81       	ldd	r24, Z+5	; 0x05
    279c:	58 17       	cp	r21, r24
    279e:	00 f4       	brcc	.+0      	; 0x27a0 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0x96>
    27a0:	c6 01       	movw	r24, r12
    27a2:	59 83       	std	Y+1, r21	; 0x01
    27a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	48 e1       	ldi	r20, 0x18	; 24
    27ae:	b2 01       	movw	r22, r4
    27b0:	c8 01       	movw	r24, r16
    27b2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    27b6:	f0 e1       	ldi	r31, 0x10	; 16
    27b8:	cf 0e       	add	r12, r31
    27ba:	d1 1c       	adc	r13, r1
    27bc:	59 81       	ldd	r21, Y+1	; 0x01
    27be:	58 5f       	subi	r21, 0xF8	; 248
    27c0:	00 c0       	rjmp	.+0      	; 0x27c2 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0xb8>
    27c2:	73 94       	inc	r7
    27c4:	00 c0       	rjmp	.+0      	; 0x27c6 <u8g_dev_ssd1351_128x128gh_hicolor_fn+0xbc>
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	b2 01       	movw	r22, r4
    27ca:	c8 01       	movw	r24, r16
    27cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    27d0:	95 01       	movw	r18, r10
    27d2:	49 2d       	mov	r20, r9
    27d4:	b2 01       	movw	r22, r4
    27d6:	c8 01       	movw	r24, r16
    27d8:	0f 90       	pop	r0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
    27ec:	af 90       	pop	r10
    27ee:	9f 90       	pop	r9
    27f0:	8f 90       	pop	r8
    27f2:	7f 90       	pop	r7
    27f4:	5f 90       	pop	r5
    27f6:	4f 90       	pop	r4
    27f8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    27fc:	80 e3       	ldi	r24, 0x30	; 48
    27fe:	0f 90       	pop	r0
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	1f 91       	pop	r17
    2806:	0f 91       	pop	r16
    2808:	ff 90       	pop	r15
    280a:	ef 90       	pop	r14
    280c:	df 90       	pop	r13
    280e:	cf 90       	pop	r12
    2810:	bf 90       	pop	r11
    2812:	af 90       	pop	r10
    2814:	9f 90       	pop	r9
    2816:	8f 90       	pop	r8
    2818:	7f 90       	pop	r7
    281a:	5f 90       	pop	r5
    281c:	4f 90       	pop	r4
    281e:	08 95       	ret

u8g_dev_ssd1353_160x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000d5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001aa0  00000000  00000000  00000d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_ssd1353_160x128_332_fn 0000012a  00000000  00000000  00002830  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_ssd1353_160x128_hicolor_fn 0000013a  00000000  00000000  0000295a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_ssd1353_160x128_idx_fn 00000156  00000000  00000000  00002a94  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_ssd1353_160x128_hicolor_hw_spi 00000006  00000000  00000000  00002bea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_ssd1353_160x128_hicolor_sw_spi 00000006  00000000  00000000  00002bf0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_ssd1353_160x128_hicolor_byte_pb 00000008  00000000  00000000  00002bf6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .data.u8g_dev_ssd1353_160x128_332_hw_spi 00000006  00000000  00000000  00002bfe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_ssd1353_160x128_332_sw_spi 00000006  00000000  00000000  00002c04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_ssd1353_160x128_byte_pb 00000008  00000000  00000000  00002c0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_ssd1353_160x128_byte_buf 00000500  00000000  00000000  00002c12  2**0
                  ALLOC
 15 .bss.u8g_dev_ssd1353_160x128_b 00000100  00000000  00000000  00002c12  2**0
                  ALLOC
 16 .bss.u8g_dev_ssd1353_160x128_g 00000100  00000000  00000000  00002c12  2**0
                  ALLOC
 17 .bss.u8g_dev_ssd1353_160x128_r 00000100  00000000  00000000  00002c12  2**0
                  ALLOC
 18 .bss.u8g_ssd1353_stream_bytes 00000018  00000000  00000000  00002c12  2**0
                  ALLOC
 19 .progmem.data.u8g_dev_ssd1353_160x128_sleep_off 00000009  00000000  00000000  00002c12  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_ssd1353_160x128_sleep_on 00000009  00000000  00000000  00002c1b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .progmem.data.u8g_dev_ssd1353_160x128_column_seq 00000019  00000000  00000000  00002c24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_ssd1353_160x128_init_seq 00000070  00000000  00000000  00002c3d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .comment      00000022  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_ssd1353_160x128_332_fn:

00000000 <u8g_dev_ssd1353_160x128_332_fn>:
static uint8_t u8g_dev_ssd1353_160x128_r[256];
static uint8_t u8g_dev_ssd1353_160x128_g[256];
static uint8_t u8g_dev_ssd1353_160x128_b[256];

uint8_t u8g_dev_ssd1353_160x128_idx_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	5f 92       	push	r5
   2:	6f 92       	push	r6
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	cf 93       	push	r28
  1c:	df 93       	push	r29
  1e:	8c 01       	movw	r16, r24
  20:	eb 01       	movw	r28, r22
//	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);

	switch(msg)
  22:	94 2e       	mov	r9, r20
  24:	59 01       	movw	r10, r18
  26:	81 e1       	ldi	r24, 0x11	; 17
  28:	48 17       	cp	r20, r24
  2a:	01 f4       	brne	.+0      	; 0x2c <u8g_dev_ssd1353_160x128_332_fn+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_ssd1353_160x128_332_fn+0x2e>
  2e:	84 17       	cp	r24, r20
  30:	00 f0       	brcs	.+0      	; 0x32 <u8g_dev_ssd1353_160x128_332_fn+0x32>
  32:	ea e0       	ldi	r30, 0x0A	; 10
  34:	4e 17       	cp	r20, r30
  36:	01 f0       	breq	.+0      	; 0x38 <u8g_dev_ssd1353_160x128_332_fn+0x38>
		  u8g_dev_ssd1353_160x128_g[ ((u8g_dev_arg_irgb_t *)arg)->idx ] = ((u8g_dev_arg_irgb_t *)arg)->g;
		  u8g_dev_ssd1353_160x128_b[ ((u8g_dev_arg_irgb_t *)arg)->idx ] = ((u8g_dev_arg_irgb_t *)arg)->b;
		  break;
	
	case U8G_DEV_MSG_PAGE_FIRST:
		u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1353_160x128_column_seq);
  38:	f0 e1       	ldi	r31, 0x10	; 16
  3a:	4f 13       	cpse	r20, r31
  3c:	00 c0       	rjmp	.+0      	; 0x3e <u8g_dev_ssd1353_160x128_332_fn+0x3e>

uint8_t u8g_dev_ssd1353_160x128_idx_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
//	u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);

	switch(msg)
  3e:	40 e0       	ldi	r20, 0x00	; 0
  40:	50 e0       	ldi	r21, 0x00	; 0
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_dev_ssd1353_160x128_332_fn+0x44>
  44:	84 e1       	ldi	r24, 0x14	; 20
  46:	48 17       	cp	r20, r24
  48:	01 f0       	breq	.+0      	; 0x4a <u8g_dev_ssd1353_160x128_332_fn+0x4a>
  4a:	e5 e1       	ldi	r30, 0x15	; 21
  4c:	4e 13       	cpse	r20, r30
	{
	case U8G_DEV_MSG_INIT:
		u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_50NS);
  4e:	00 c0       	rjmp	.+0      	; 0x50 <u8g_dev_ssd1353_160x128_332_fn+0x50>
  50:	ca 80       	ldd	r12, Y+2	; 0x02
  52:	db 80       	ldd	r13, Y+3	; 0x03
  54:	f6 01       	movw	r30, r12
		u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1353_160x128_init_seq);
  56:	76 80       	ldd	r7, Z+6	; 0x06
  58:	57 80       	ldd	r5, Z+7	; 0x07
  5a:	41 e0       	ldi	r20, 0x01	; 1

	case U8G_DEV_MSG_STOP:
		break;
	
	case U8G_DEV_MSG_SET_COLOR_ENTRY:
		  u8g_dev_ssd1353_160x128_r[ ((u8g_dev_arg_irgb_t *)arg)->idx ] = ((u8g_dev_arg_irgb_t *)arg)->r;
  5c:	c8 01       	movw	r24, r16
  5e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>
  62:	f6 01       	movw	r30, r12
  64:	83 80       	ldd	r8, Z+3	; 0x03
  66:	83 94       	inc	r8
  68:	82 81       	ldd	r24, Z+2	; 0x02
  6a:	88 1a       	sub	r8, r24
  6c:	61 2c       	mov	r6, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <u8g_dev_ssd1353_160x128_332_fn+0x70>
		  u8g_dev_ssd1353_160x128_g[ ((u8g_dev_arg_irgb_t *)arg)->idx ] = ((u8g_dev_arg_irgb_t *)arg)->g;
  70:	41 e0       	ldi	r20, 0x01	; 1
  72:	c8 01       	movw	r24, r16
  74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	00 c0       	rjmp	.+0      	; 0x7e <u8g_dev_ssd1353_160x128_332_fn+0x7e>
		  u8g_dev_ssd1353_160x128_b[ ((u8g_dev_arg_irgb_t *)arg)->idx ] = ((u8g_dev_arg_irgb_t *)arg)->b;
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	00 c0       	rjmp	.+0      	; 0x84 <u8g_dev_ssd1353_160x128_332_fn+0x84>
  84:	63 94       	inc	r6
  86:	7e 2c       	mov	r7, r14
  88:	5f 2c       	mov	r5, r15
		  break;
  8a:	68 14       	cp	r6, r8
	
	case U8G_DEV_MSG_PAGE_FIRST:
		u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1353_160x128_column_seq);
  8c:	01 f0       	breq	.+0      	; 0x8e <u8g_dev_ssd1353_160x128_332_fn+0x8e>
  8e:	e7 2c       	mov	r14, r7
  90:	f5 2c       	mov	r15, r5
  92:	f6 01       	movw	r30, r12
		break;
  94:	85 81       	ldd	r24, Z+5	; 0x05

	case U8G_DEV_MSG_PAGE_NEXT:
		{
			int x;
			u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  96:	9e 2d       	mov	r25, r14
  98:	97 19       	sub	r25, r7
			uint8_t *ptr = pb->buf;
  9a:	98 17       	cp	r25, r24
  9c:	00 f4       	brcc	.+0      	; 0x9e <u8g_dev_ssd1353_160x128_332_fn+0x9e>
  9e:	e0 e0       	ldi	r30, 0x00	; 0

			u8g_SetChipSelect(u8g, dev, 1);
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	d7 01       	movw	r26, r14
  a4:	2d 91       	ld	r18, X+
  a6:	82 2f       	mov	r24, r18

	case U8G_DEV_MSG_PAGE_NEXT:
		{
			int x;
			u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
			uint8_t *ptr = pb->buf;
  a8:	80 7e       	andi	r24, 0xE0	; 224

			u8g_SetChipSelect(u8g, dev, 1);

			for (x = 0; x < pb->width; x++)
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	80 83       	st	Z, r24
  b6:	82 2f       	mov	r24, r18
  b8:	8c 71       	andi	r24, 0x1C	; 28
  ba:	88 0f       	add	r24, r24
			{
				u8g_WriteByte(u8g, dev, u8g_dev_ssd1353_160x128_r[(*ptr)>>2]);
  bc:	81 83       	std	Z+1, r24	; 0x01
  be:	82 2f       	mov	r24, r18
  c0:	83 70       	andi	r24, 0x03	; 3
  c2:	82 95       	swap	r24
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	82 83       	std	Z+2, r24	; 0x02
  c8:	33 96       	adiw	r30, 0x03	; 3
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	e0 30       	cpi	r30, 0x00	; 0
  ce:	f8 07       	cpc	r31, r24
  d0:	01 f4       	brne	.+0      	; 0xd2 <u8g_dev_ssd1353_160x128_332_fn+0xd2>
  d2:	e8 e0       	ldi	r30, 0x08	; 8
				u8g_WriteByte(u8g, dev, u8g_dev_ssd1353_160x128_g[(*ptr)>>2]);
  d4:	ee 0e       	add	r14, r30
  d6:	f1 1c       	adc	r15, r1
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	48 e1       	ldi	r20, 0x18	; 24
  de:	be 01       	movw	r22, r28
  e0:	c8 01       	movw	r24, r16
  e2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <u8g_dev_ssd1353_160x128_332_fn+0xe8>
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	be 01       	movw	r22, r28
				u8g_WriteByte(u8g, dev, u8g_dev_ssd1353_160x128_b[(*ptr)>>2]);
  ec:	c8 01       	movw	r24, r16
  ee:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <u8g_dev_ssd1353_160x128_332_fn+0xf4>
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	be 01       	movw	r22, r28
  fa:	c8 01       	movw	r24, r16
  fc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>
 100:	95 01       	movw	r18, r10
 102:	49 2d       	mov	r20, r9
 104:	be 01       	movw	r22, r28
 106:	c8 01       	movw	r24, r16

				ptr++;
			}

			u8g_SetChipSelect(u8g, dev, 0);
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
		break;
	case U8G_DEV_MSG_GET_MODE:
	  return U8G_MODE_INDEX;
	}

	return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 112:	ef 90       	pop	r14
 114:	df 90       	pop	r13
 116:	cf 90       	pop	r12
 118:	bf 90       	pop	r11
}
 11a:	af 90       	pop	r10
 11c:	9f 90       	pop	r9
 11e:	8f 90       	pop	r8
 120:	7f 90       	pop	r7
 122:	6f 90       	pop	r6
 124:	5f 90       	pop	r5
 126:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1353_160x128_332_fn>

Disassembly of section .text.u8g_dev_ssd1353_160x128_hicolor_fn:

0000012a <u8g_dev_ssd1353_160x128_hicolor_fn>:
 12a:	4f 92       	push	r4
 12c:	5f 92       	push	r5
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
		break;
	case U8G_DEV_MSG_GET_MODE:
	  return U8G_MODE_INDEX;
	}

	return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
}
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	1f 92       	push	r1
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	8c 01       	movw	r16, r24
 150:	2b 01       	movw	r4, r22
 152:	94 2e       	mov	r9, r20
 154:	59 01       	movw	r10, r18
 156:	81 e1       	ldi	r24, 0x11	; 17
 158:	48 17       	cp	r20, r24
 15a:	01 f4       	brne	.+0      	; 0x15c <u8g_dev_ssd1353_160x128_hicolor_fn+0x32>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <u8g_dev_ssd1353_160x128_hicolor_fn+0x34>
 15e:	84 17       	cp	r24, r20
 160:	00 f0       	brcs	.+0      	; 0x162 <u8g_dev_ssd1353_160x128_hicolor_fn+0x38>
 162:	ea e0       	ldi	r30, 0x0A	; 10
 164:	4e 17       	cp	r20, r30
 166:	01 f0       	breq	.+0      	; 0x168 <u8g_dev_ssd1353_160x128_hicolor_fn+0x3e>
 168:	f0 e1       	ldi	r31, 0x10	; 16
 16a:	4f 13       	cpse	r20, r31
 16c:	00 c0       	rjmp	.+0      	; 0x16e <u8g_dev_ssd1353_160x128_hicolor_fn+0x44>
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	00 c0       	rjmp	.+0      	; 0x174 <u8g_dev_ssd1353_160x128_hicolor_fn+0x4a>
 174:	84 e1       	ldi	r24, 0x14	; 20
 176:	48 17       	cp	r20, r24
 178:	01 f0       	breq	.+0      	; 0x17a <u8g_dev_ssd1353_160x128_hicolor_fn+0x50>
 17a:	e5 e1       	ldi	r30, 0x15	; 21
 17c:	4e 13       	cpse	r20, r30
 17e:	00 c0       	rjmp	.+0      	; 0x180 <u8g_dev_ssd1353_160x128_hicolor_fn+0x56>
 180:	fb 01       	movw	r30, r22
 182:	e2 80       	ldd	r14, Z+2	; 0x02
 184:	f3 80       	ldd	r15, Z+3	; 0x03
 186:	f7 01       	movw	r30, r14
 188:	c6 80       	ldd	r12, Z+6	; 0x06
 18a:	d7 80       	ldd	r13, Z+7	; 0x07
 18c:	41 e0       	ldi	r20, 0x01	; 1
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 194:	f7 01       	movw	r30, r14
 196:	83 80       	ldd	r8, Z+3	; 0x03
 198:	83 94       	inc	r8
 19a:	82 81       	ldd	r24, Z+2	; 0x02
 19c:	88 1a       	sub	r8, r24
 19e:	71 2c       	mov	r7, r1
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <u8g_dev_ssd1353_160x128_hicolor_fn+0x78>
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	c8 01       	movw	r24, r16
 1a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <u8g_dev_ssd1353_160x128_hicolor_fn+0x86>
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <u8g_dev_ssd1353_160x128_hicolor_fn+0x8c>
 1b6:	73 94       	inc	r7
 1b8:	78 14       	cp	r7, r8
 1ba:	01 f0       	breq	.+0      	; 0x1bc <u8g_dev_ssd1353_160x128_hicolor_fn+0x92>
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	f7 01       	movw	r30, r14
 1c0:	85 81       	ldd	r24, Z+5	; 0x05
 1c2:	58 17       	cp	r21, r24
 1c4:	00 f4       	brcc	.+0      	; 0x1c6 <u8g_dev_ssd1353_160x128_hicolor_fn+0x9c>
 1c6:	d6 01       	movw	r26, r12
 1c8:	e0 e0       	ldi	r30, 0x00	; 0
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	3c 91       	ld	r19, X
 1ce:	11 96       	adiw	r26, 0x01	; 1
 1d0:	8c 91       	ld	r24, X
 1d2:	11 97       	sbiw	r26, 0x01	; 1
 1d4:	28 2f       	mov	r18, r24
 1d6:	28 7f       	andi	r18, 0xF8	; 248
 1d8:	93 2f       	mov	r25, r19
 1da:	9f 71       	andi	r25, 0x1F	; 31
 1dc:	87 70       	andi	r24, 0x07	; 7
 1de:	88 0f       	add	r24, r24
 1e0:	88 0f       	add	r24, r24
 1e2:	88 0f       	add	r24, r24
 1e4:	32 95       	swap	r19
 1e6:	36 95       	lsr	r19
 1e8:	37 70       	andi	r19, 0x07	; 7
 1ea:	83 2b       	or	r24, r19
 1ec:	26 95       	lsr	r18
 1ee:	26 95       	lsr	r18
 1f0:	20 83       	st	Z, r18
 1f2:	81 83       	std	Z+1, r24	; 0x01
 1f4:	99 0f       	add	r25, r25
 1f6:	92 83       	std	Z+2, r25	; 0x02
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	33 96       	adiw	r30, 0x03	; 3
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	e0 30       	cpi	r30, 0x00	; 0
 200:	f8 07       	cpc	r31, r24
 202:	01 f4       	brne	.+0      	; 0x204 <u8g_dev_ssd1353_160x128_hicolor_fn+0xda>
 204:	e0 e1       	ldi	r30, 0x10	; 16
 206:	ce 0e       	add	r12, r30
 208:	d1 1c       	adc	r13, r1
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	48 e1       	ldi	r20, 0x18	; 24
 210:	b2 01       	movw	r22, r4
 212:	c8 01       	movw	r24, r16
 214:	59 83       	std	Y+1, r21	; 0x01
 216:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 21a:	59 81       	ldd	r21, Y+1	; 0x01
 21c:	58 5f       	subi	r21, 0xF8	; 248
 21e:	00 c0       	rjmp	.+0      	; 0x220 <u8g_dev_ssd1353_160x128_hicolor_fn+0xf6>
 220:	40 e0       	ldi	r20, 0x00	; 0
 222:	b2 01       	movw	r22, r4
 224:	c8 01       	movw	r24, r16
 226:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <u8g_dev_ssd1353_160x128_hicolor_fn+0x102>
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	50 e0       	ldi	r21, 0x00	; 0
 230:	b2 01       	movw	r22, r4
 232:	c8 01       	movw	r24, r16
 234:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 238:	95 01       	movw	r18, r10
 23a:	49 2d       	mov	r20, r9
 23c:	b2 01       	movw	r22, r4
 23e:	c8 01       	movw	r24, r16
 240:	0f 90       	pop	r0
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	7f 90       	pop	r7
 25c:	5f 90       	pop	r5
 25e:	4f 90       	pop	r4
 260:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>

Disassembly of section .text.u8g_dev_ssd1353_160x128_idx_fn:

0000038e <u8g_dev_ssd1353_160x128_idx_fn>:
 38e:	7f 92       	push	r7
 390:	8f 92       	push	r8
 392:	9f 92       	push	r9
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	8c 01       	movw	r16, r24
 3aa:	eb 01       	movw	r28, r22
 3ac:	74 2e       	mov	r7, r20
 3ae:	79 01       	movw	r14, r18
 3b0:	85 e1       	ldi	r24, 0x15	; 21
 3b2:	48 17       	cp	r20, r24
 3b4:	01 f0       	breq	.+0      	; 0x3b6 <u8g_dev_ssd1353_160x128_idx_fn+0x28>
 3b6:	84 17       	cp	r24, r20
 3b8:	00 f0       	brcs	.+0      	; 0x3ba <u8g_dev_ssd1353_160x128_idx_fn+0x2c>
 3ba:	aa e0       	ldi	r26, 0x0A	; 10
 3bc:	4a 17       	cp	r20, r26
 3be:	01 f0       	breq	.+0      	; 0x3c0 <u8g_dev_ssd1353_160x128_idx_fn+0x32>
 3c0:	b4 e1       	ldi	r27, 0x14	; 20
 3c2:	4b 13       	cpse	r20, r27
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <u8g_dev_ssd1353_160x128_idx_fn+0x38>
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <u8g_dev_ssd1353_160x128_idx_fn+0x3e>
 3cc:	ec e3       	ldi	r30, 0x3C	; 60
 3ce:	4e 17       	cp	r20, r30
 3d0:	01 f0       	breq	.+0      	; 0x3d2 <u8g_dev_ssd1353_160x128_idx_fn+0x44>
 3d2:	f8 e4       	ldi	r31, 0x48	; 72
 3d4:	4f 17       	cp	r20, r31
 3d6:	01 f4       	brne	.+0      	; 0x3d8 <u8g_dev_ssd1353_160x128_idx_fn+0x4a>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <u8g_dev_ssd1353_160x128_idx_fn+0x4c>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <u8g_dev_ssd1353_160x128_idx_fn+0x4e>
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <u8g_dev_ssd1353_160x128_idx_fn+0x5c>
 3ea:	d9 01       	movw	r26, r18
 3ec:	8c 91       	ld	r24, X
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	fc 01       	movw	r30, r24
 3f2:	e0 50       	subi	r30, 0x00	; 0
 3f4:	f0 40       	sbci	r31, 0x00	; 0
 3f6:	11 96       	adiw	r26, 0x01	; 1
 3f8:	2c 91       	ld	r18, X
 3fa:	11 97       	sbiw	r26, 0x01	; 1
 3fc:	20 83       	st	Z, r18
 3fe:	fc 01       	movw	r30, r24
 400:	e0 50       	subi	r30, 0x00	; 0
 402:	f0 40       	sbci	r31, 0x00	; 0
 404:	12 96       	adiw	r26, 0x02	; 2
 406:	2c 91       	ld	r18, X
 408:	12 97       	sbiw	r26, 0x02	; 2
 40a:	20 83       	st	Z, r18
 40c:	fc 01       	movw	r30, r24
 40e:	e0 50       	subi	r30, 0x00	; 0
 410:	f0 40       	sbci	r31, 0x00	; 0
 412:	13 96       	adiw	r26, 0x03	; 3
 414:	2c 91       	ld	r18, X
 416:	20 83       	st	Z, r18
 418:	00 c0       	rjmp	.+0      	; 0x41a <u8g_dev_ssd1353_160x128_idx_fn+0x8c>
 41a:	be 01       	movw	r22, r28
 41c:	c8 01       	movw	r24, r16
 41e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 422:	00 c0       	rjmp	.+0      	; 0x424 <u8g_dev_ssd1353_160x128_idx_fn+0x96>
 424:	aa 80       	ldd	r10, Y+2	; 0x02
 426:	bb 80       	ldd	r11, Y+3	; 0x03
 428:	f5 01       	movw	r30, r10
 42a:	86 80       	ldd	r8, Z+6	; 0x06
 42c:	97 80       	ldd	r9, Z+7	; 0x07
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	c8 01       	movw	r24, r16
 432:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 436:	64 01       	movw	r12, r8
 438:	f5 01       	movw	r30, r10
 43a:	85 81       	ldd	r24, Z+5	; 0x05
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	96 01       	movw	r18, r12
 440:	28 19       	sub	r18, r8
 442:	39 09       	sbc	r19, r9
 444:	28 17       	cp	r18, r24
 446:	39 07       	cpc	r19, r25
 448:	04 f4       	brge	.+0      	; 0x44a <u8g_dev_ssd1353_160x128_idx_fn+0xbc>
 44a:	d6 01       	movw	r26, r12
 44c:	ec 91       	ld	r30, X
 44e:	e6 95       	lsr	r30
 450:	e6 95       	lsr	r30
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	e0 50       	subi	r30, 0x00	; 0
 456:	f0 40       	sbci	r31, 0x00	; 0
 458:	40 81       	ld	r20, Z
 45a:	be 01       	movw	r22, r28
 45c:	c8 01       	movw	r24, r16
 45e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 462:	d6 01       	movw	r26, r12
 464:	ec 91       	ld	r30, X
 466:	e6 95       	lsr	r30
 468:	e6 95       	lsr	r30
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	e0 50       	subi	r30, 0x00	; 0
 46e:	f0 40       	sbci	r31, 0x00	; 0
 470:	40 81       	ld	r20, Z
 472:	be 01       	movw	r22, r28
 474:	c8 01       	movw	r24, r16
 476:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 47a:	d6 01       	movw	r26, r12
 47c:	ed 91       	ld	r30, X+
 47e:	6d 01       	movw	r12, r26
 480:	e6 95       	lsr	r30
 482:	e6 95       	lsr	r30
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	e0 50       	subi	r30, 0x00	; 0
 488:	f0 40       	sbci	r31, 0x00	; 0
 48a:	40 81       	ld	r20, Z
 48c:	be 01       	movw	r22, r28
 48e:	c8 01       	movw	r24, r16
 490:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 494:	00 c0       	rjmp	.+0      	; 0x496 <u8g_dev_ssd1353_160x128_idx_fn+0x108>
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	be 01       	movw	r22, r28
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 4a0:	97 01       	movw	r18, r14
 4a2:	47 2d       	mov	r20, r7
 4a4:	be 01       	movw	r22, r28
 4a6:	c8 01       	movw	r24, r16
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	cf 90       	pop	r12
 4b8:	bf 90       	pop	r11
 4ba:	af 90       	pop	r10
 4bc:	9f 90       	pop	r9
 4be:	8f 90       	pop	r8
 4c0:	7f 90       	pop	r7
 4c2:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_ssd1353_160x128_byte_buf>
 4c6:	88 e6       	ldi	r24, 0x68	; 104
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	ff 90       	pop	r15
 4d2:	ef 90       	pop	r14
 4d4:	df 90       	pop	r13
 4d6:	cf 90       	pop	r12
 4d8:	bf 90       	pop	r11
 4da:	af 90       	pop	r10
 4dc:	9f 90       	pop	r9
 4de:	8f 90       	pop	r8
 4e0:	7f 90       	pop	r7
 4e2:	08 95       	ret

u8g_dev_st7565_64128n.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a8c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000019ff  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_64128n_fn 00000118  00000000  00000000  000024bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7565_64128n_2x_fn 00000162  00000000  00000000  000025d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7565_64128n_2x_hw_parallel 00000006  00000000  00000000  00002739  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7565_64128n_2x_hw_spi 00000006  00000000  00000000  0000273f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7565_64128n_2x_sw_spi 00000006  00000000  00000000  00002745  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7565_64128n_2x_pb 00000008  00000000  00000000  0000274b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7565_64128n_2x_buf 00000100  00000000  00000000  00002753  2**0
                  ALLOC
 12 .data.u8g_dev_st7565_64128n_parallel 00000006  00000000  00000000  00002753  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_st7565_64128n_parallel_pb 00000008  00000000  00000000  00002759  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_st7565_64128n_parallel_buf 00000080  00000000  00000000  00002761  2**0
                  ALLOC
 15 .data.u8g_dev_st7565_64128n_hw_spi 00000006  00000000  00000000  00002761  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_st7565_64128n_hw_spi_pb 00000008  00000000  00000000  00002767  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_st7565_64128n_hw_spi_buf 00000080  00000000  00000000  0000276f  2**0
                  ALLOC
 18 .data.u8g_dev_st7565_64128n_sw_spi 00000006  00000000  00000000  0000276f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_st7565_64128n_sw_spi_pb 00000008  00000000  00000000  00002775  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_st7565_64128n_sw_spi_buf 00000080  00000000  00000000  0000277d  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_st7565_64128n_sleep_off 0000000c  00000000  00000000  0000277d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_st7565_64128n_sleep_on 0000000c  00000000  00000000  00002789  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_st7565_64128n_data_start 00000008  00000000  00000000  00002795  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_st7565_64128n_init_seq 00000026  00000000  00000000  0000279d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_64128n_fn:

00000000 <u8g_dev_st7565_64128n_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_64128n_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_64128n_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_64128n_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_64128n_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_64128n_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_64128n_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_64128n_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_64128n_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_64128n_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_64128n_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_64128n_fn+0x78>
  78:	43 e0       	ldi	r20, 0x03	; 3
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_64128n_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_64128n_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_64128n_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_64128n_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_64128n_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_64128n_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_64128n_fn>
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_st7565_64128n_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_st7565_64128n_2x_fn:

00000118 <u8g_dev_st7565_64128n_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_st7565_64128n_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_st7565_64128n_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_st7565_64128n_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_st7565_64128n_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7565_64128n_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_64128n_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_st7565_64128n_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_st7565_64128n_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_st7565_64128n_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_st7565_64128n_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_st7565_64128n_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_st7565_64128n_2x_fn+0x104>
 21c:	43 e0       	ldi	r20, 0x03	; 3
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_st7565_64128n_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_st7565_64128n_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_st7565_64128n_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_st7565_dogm128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a8c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001a12  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_dogm128_fn 00000118  00000000  00000000  000024d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7565_dogm128_2x_fn 00000162  00000000  00000000  000025ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7565_dogm128_2x_parallel 00000006  00000000  00000000  0000274c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7565_dogm128_2x_hw_spi 00000006  00000000  00000000  00002752  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7565_dogm128_2x_sw_spi 00000006  00000000  00000000  00002758  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7565_dogm128_2x_pb 00000008  00000000  00000000  0000275e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7565_dogm128_2x_buf 00000100  00000000  00000000  00002766  2**0
                  ALLOC
 12 .data.u8g_dev_st7565_dogm128_parallel 00000006  00000000  00000000  00002766  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_st7565_dogm128_parallel_pb 00000008  00000000  00000000  0000276c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_st7565_dogm128_parallel_buf 00000080  00000000  00000000  00002774  2**0
                  ALLOC
 15 .data.u8g_dev_st7565_dogm128_hw_spi 00000006  00000000  00000000  00002774  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_st7565_dogm128_hw_spi_pb 00000008  00000000  00000000  0000277a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_st7565_dogm128_hw_spi_buf 00000080  00000000  00000000  00002782  2**0
                  ALLOC
 18 .data.u8g_dev_st7565_dogm128_sw_spi 00000006  00000000  00000000  00002782  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_st7565_dogm128_sw_spi_pb 00000008  00000000  00000000  00002788  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_st7565_dogm128_sw_spi_buf 00000080  00000000  00000000  00002790  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_st7565_dogm128_sleep_off 0000000c  00000000  00000000  00002790  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.data.u8g_dev_st7565_dogm128_sleep_on 0000000c  00000000  00000000  0000279c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.data.u8g_dev_st7565_dogm128_data_start 00000008  00000000  00000000  000027a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.data.u8g_dev_st7565_dogm128_init_seq 0000001d  00000000  00000000  000027b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .comment      00000022  00000000  00000000  000027cd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_dogm128_fn:

00000000 <u8g_dev_st7565_dogm128_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_dogm128_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_dogm128_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_dogm128_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_dogm128_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_dogm128_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_dogm128_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
        u8g_SetChipSelect(u8g, dev, 0);
	
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_dogm128_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_dogm128_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_dogm128_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_dogm128_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_dogm128_fn+0x78>
  78:	43 e0       	ldi	r20, 0x03	; 3
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_dogm128_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_dogm128_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_dogm128_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_dogm128_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_dogm128_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_dogm128_fn>
	
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_st7565_dogm128_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_st7565_dogm128_2x_fn:

00000118 <u8g_dev_st7565_dogm128_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_st7565_dogm128_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_st7565_dogm128_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_st7565_dogm128_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_st7565_dogm128_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7565_dogm128_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm128_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_st7565_dogm128_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_st7565_dogm128_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_st7565_dogm128_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_st7565_dogm128_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_st7565_dogm128_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_st7565_dogm128_2x_fn+0x104>
 21c:	43 e0       	ldi	r20, 0x03	; 3
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_st7565_dogm128_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_st7565_dogm128_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_st7565_dogm128_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_st7565_dogm132.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000858  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000185c  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_dogm132_fn 00000118  00000000  00000000  000020e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_st7565_dogm132_hw_spi 00000006  00000000  00000000  00002200  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_st7565_dogm132_hw_spi_pb 00000008  00000000  00000000  00002206  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_st7565_dogm132_hw_spi_buf 00000084  00000000  00000000  0000220e  2**0
                  ALLOC
  9 .data.u8g_dev_st7565_dogm132_sw_spi 00000006  00000000  00000000  0000220e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7565_dogm132_sw_spi_pb 00000008  00000000  00000000  00002214  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7565_dogm132_sw_spi_buf 00000084  00000000  00000000  0000221c  2**0
                  ALLOC
 12 .progmem.data.u8g_dev_st7565_dogm132_sleep_off 0000000c  00000000  00000000  0000221c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.u8g_dev_st7565_dogm132_sleep_on 0000000c  00000000  00000000  00002228  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.u8g_dev_st7565_dogm132_data_start 00000008  00000000  00000000  00002234  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .progmem.data.u8g_dev_st7565_dogm132_init_seq 00000022  00000000  00000000  0000223c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .comment      00000022  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_dogm132_fn:

00000000 <u8g_dev_st7565_dogm132_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_st7565_dogm132_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_dogm132_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_dogm132_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_dogm132_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_dogm132_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_dogm132_fn+0x32>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      u8g_WriteByte(u8g, dev, 0x081);
  44:	41 e8       	ldi	r20, 0x81	; 129
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  4e:	f7 01       	movw	r30, r14
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      u8g_SetChipSelect(u8g, dev, 0);      
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_dogm132_fn+0x6a>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_st7565_dogm132_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6a:	81 e1       	ldi	r24, 0x11	; 17
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_dogm132_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_dogm132_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_dogm132_fn+0x78>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  78:	43 e0       	ldi	r20, 0x03	; 3
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_init_seq);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      break;
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_dogm132_fn+0x8e>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (ST7565R) */
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_dogm132_fn+0xc2>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      }
      break;
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_dogm132_fn+0xce>
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_sleep_on);    
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_dogm132_fn+0xd4>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_sleep_off);    
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
      return 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_dogm132_fn+0xe4>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_dogm132_fn>
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_data_start);    
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (ST7565R) */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_dogm132_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

u8g_dev_st7565_lm6059.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001958  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_lm6059_fn 00000118  00000000  00000000  000023e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7565_lm6059_2x_fn 00000162  00000000  00000000  00002500  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7565_lm6059_2x_hw_spi 00000006  00000000  00000000  00002662  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7565_lm6059_2x_sw_spi 00000006  00000000  00000000  00002668  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7565_lm6059_2x_pb 00000008  00000000  00000000  0000266e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_st7565_lm6059_2x_buf 00000100  00000000  00000000  00002676  2**0
                  ALLOC
 11 .data.u8g_dev_st7565_lm6059_hw_spi 00000006  00000000  00000000  00002676  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_st7565_lm6059_hw_spi_pb 00000008  00000000  00000000  0000267c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_st7565_lm6059_hw_spi_buf 00000080  00000000  00000000  00002684  2**0
                  ALLOC
 14 .data.u8g_dev_st7565_lm6059_sw_spi 00000006  00000000  00000000  00002684  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_st7565_lm6059_sw_spi_pb 00000008  00000000  00000000  0000268a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_st7565_lm6059_sw_spi_buf 00000080  00000000  00000000  00002692  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_st7565_lm6059_sleep_off 0000000c  00000000  00000000  00002692  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_st7565_lm6059_sleep_on 0000000c  00000000  00000000  0000269e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_st7565_lm6059_data_start 00000008  00000000  00000000  000026aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_st7565_lm6059_init_seq 00000026  00000000  00000000  000026b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .comment      00000022  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_lm6059_fn:

00000000 <u8g_dev_st7565_lm6059_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_lm6059_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_lm6059_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_lm6059_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_lm6059_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_lm6059_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_lm6059_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_lm6059_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_lm6059_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_lm6059_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_lm6059_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_lm6059_fn+0x78>
  78:	43 e0       	ldi	r20, 0x03	; 3
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_lm6059_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>

	u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_lm6059_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_lm6059_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_lm6059_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_lm6059_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_lm6059_fn>
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_st7565_lm6059_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_st7565_lm6059_2x_fn:

00000118 <u8g_dev_st7565_lm6059_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_st7565_lm6059_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_st7565_lm6059_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_st7565_lm6059_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_st7565_lm6059_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7565_lm6059_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6059_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_st7565_lm6059_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_st7565_lm6059_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_st7565_lm6059_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_st7565_lm6059_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_st7565_lm6059_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_st7565_lm6059_2x_fn+0x104>
 21c:	43 e0       	ldi	r20, 0x03	; 3
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_st7565_lm6059_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_st7565_lm6059_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_st7565_lm6059_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_st7565_lm6063.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001958  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_lm6063_fn 00000118  00000000  00000000  000023e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7565_lm6063_2x_fn 00000162  00000000  00000000  00002500  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7565_lm6063_2x_hw_spi 00000006  00000000  00000000  00002662  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7565_lm6063_2x_sw_spi 00000006  00000000  00000000  00002668  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7565_lm6063_2x_pb 00000008  00000000  00000000  0000266e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_st7565_lm6063_2x_buf 00000100  00000000  00000000  00002676  2**0
                  ALLOC
 11 .data.u8g_dev_st7565_lm6063_hw_spi 00000006  00000000  00000000  00002676  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_st7565_lm6063_hw_spi_pb 00000008  00000000  00000000  0000267c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_st7565_lm6063_hw_spi_buf 00000080  00000000  00000000  00002684  2**0
                  ALLOC
 14 .data.u8g_dev_st7565_lm6063_sw_spi 00000006  00000000  00000000  00002684  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_st7565_lm6063_sw_spi_pb 00000008  00000000  00000000  0000268a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_st7565_lm6063_sw_spi_buf 00000080  00000000  00000000  00002692  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_st7565_st7565_sleep_off 0000000c  00000000  00000000  00002692  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_st7565_st7565_sleep_on 0000000c  00000000  00000000  0000269e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_st7565_lm6063_data_start 00000008  00000000  00000000  000026aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_st7565_lm6063_init_seq 00000026  00000000  00000000  000026b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .comment      00000022  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_lm6063_fn:

00000000 <u8g_dev_st7565_lm6063_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_lm6063_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_lm6063_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_lm6063_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_lm6063_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_lm6063_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_lm6063_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_lm6063_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_lm6063_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_lm6063_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_lm6063_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_lm6063_fn+0x78>
  78:	43 e0       	ldi	r20, 0x03	; 3
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6063_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_lm6063_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>

        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6063_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_lm6063_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_lm6063_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_lm6063_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_lm6063_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_st7565_lm6063_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_lm6063_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_st7565_lm6063_2x_fn:

00000118 <u8g_dev_st7565_lm6063_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_st7565_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_st7565_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_st7565_lm6063_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_st7565_lm6063_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_st7565_lm6063_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_st7565_lm6063_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7565_lm6063_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_st7565_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_st7565_lm6063_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_st7565_lm6063_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_st7565_lm6063_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_st7565_lm6063_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_st7565_lm6063_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_st7565_lm6063_2x_fn+0x104>
 21c:	43 e0       	ldi	r20, 0x03	; 3
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_st7565_lm6063_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_st7565_lm6063_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_st7565_lm6063_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_lm6063_fn>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_st7565_nhd_c12832.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008a0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001989  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_c12832_fn 00000118  00000000  00000000  0000225d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_st7565_nhd_c12832_hw_usart_spi 00000006  00000000  00000000  00002375  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_st7565_nhd_c12832_hw_usart_spi_pb 00000008  00000000  00000000  0000237b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_st7565_nhd_c12832_hw_usart_spi_buf 00000080  00000000  00000000  00002383  2**0
                  ALLOC
  9 .data.u8g_dev_st7565_nhd_c12832_parallel 00000006  00000000  00000000  00002383  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7565_nhd_c12832_parallel_pb 00000008  00000000  00000000  00002389  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7565_nhd_c12832_parallel_buf 00000080  00000000  00000000  00002391  2**0
                  ALLOC
 12 .data.u8g_dev_st7565_nhd_c12832_hw_spi 00000006  00000000  00000000  00002391  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_st7565_nhd_c12832_hw_spi_pb 00000008  00000000  00000000  00002397  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_st7565_nhd_c12832_hw_spi_buf 00000080  00000000  00000000  0000239f  2**0
                  ALLOC
 15 .data.u8g_dev_st7565_nhd_c12832_sw_spi 00000006  00000000  00000000  0000239f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_st7565_nhd_c12832_sw_spi_pb 00000008  00000000  00000000  000023a5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_st7565_nhd_c12832_sw_spi_buf 00000080  00000000  00000000  000023ad  2**0
                  ALLOC
 18 .progmem.data.u8g_dev_st7565_c12832_sleep_off 0000000c  00000000  00000000  000023ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_st7565_c12832_sleep_on 0000000c  00000000  00000000  000023b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_st7565_c12832_data_start 00000008  00000000  00000000  000023c5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .progmem.data.u8g_dev_st7565_c12832_init_seq 00000022  00000000  00000000  000023cd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .comment      00000022  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_c12832_fn:

00000000 <u8g_dev_st7565_c12832_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_st7565_c12832_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_c12832_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_c12832_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_c12832_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_c12832_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_c12832_fn+0x32>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  32:	41 e0       	ldi	r20, 0x01	; 1
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3a:	40 e0       	ldi	r20, 0x00	; 0
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      u8g_WriteByte(u8g, dev, 0x081);
  44:	41 e8       	ldi	r20, 0x81	; 129
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  4e:	f7 01       	movw	r30, r14
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      u8g_SetChipSelect(u8g, dev, 0);      
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_c12832_fn+0x6a>
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_st7565_c12832_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6a:	81 e1       	ldi	r24, 0x11	; 17
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_c12832_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_c12832_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_c12832_fn+0x78>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  78:	43 e0       	ldi	r20, 0x03	; 3
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_init_seq);
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      break;
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_c12832_fn+0x8e>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_data_start);    
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (ST7565R) */
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_c12832_fn+0xc2>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      }
      break;
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_c12832_fn+0xce>
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_sleep_on);    
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_c12832_fn+0xd4>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_sleep_off);    
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_c12832_fn>
      return 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_c12832_fn+0xe4>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_c12832_fn>
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_data_start);    
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (ST7565R) */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12832_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

u8g_dev_st7565_nhd_c12864.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001998  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7565_nhd_c12864_fn 00000118  00000000  00000000  00002428  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7565_nhd_c12864_2x_fn 00000162  00000000  00000000  00002540  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7565_nhd_c12864_2x_hw_spi 00000006  00000000  00000000  000026a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7565_nhd_c12864_2x_sw_spi 00000006  00000000  00000000  000026a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7565_nhd_c12864_2x_pb 00000008  00000000  00000000  000026ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_st7565_nhd_c12864_2x_buf 00000100  00000000  00000000  000026b6  2**0
                  ALLOC
 11 .data.u8g_dev_st7565_nhd_c12864_hw_spi 00000006  00000000  00000000  000026b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_st7565_nhd_c12864_hw_spi_pb 00000008  00000000  00000000  000026bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_st7565_nhd_c12864_hw_spi_buf 00000080  00000000  00000000  000026c4  2**0
                  ALLOC
 14 .data.u8g_dev_st7565_nhd_c12864_sw_spi 00000006  00000000  00000000  000026c4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_st7565_nhd_c12864_sw_spi_pb 00000008  00000000  00000000  000026ca  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_st7565_nhd_c12864_sw_spi_buf 00000080  00000000  00000000  000026d2  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_st7565_c12864_sleep_off 0000000c  00000000  00000000  000026d2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_st7565_c12864_sleep_on 0000000c  00000000  00000000  000026de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_st7565_nhd_c12864_data_start 00000008  00000000  00000000  000026ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_st7565_nhd_c12864_init_seq 00000022  00000000  00000000  000026f2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .comment      00000022  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7565_nhd_c12864_fn:

00000000 <u8g_dev_st7565_nhd_c12864_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_nhd_c12864_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_st7565_nhd_c12864_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_st7565_nhd_c12864_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_st7565_nhd_c12864_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_st7565_nhd_c12864_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_st7565_nhd_c12864_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width);
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_st7565_nhd_c12864_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7565_nhd_c12864_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_st7565_nhd_c12864_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_st7565_nhd_c12864_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_st7565_nhd_c12864_fn+0x78>
  78:	43 e0       	ldi	r20, 0x03	; 3
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_nhd_c12864_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_st7565_nhd_c12864_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_nhd_c12864_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_st7565_nhd_c12864_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_st7565_nhd_c12864_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_st7565_nhd_c12864_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_st7565_nhd_c12864_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width);
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_st7565_nhd_c12864_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_nhd_c12864_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_st7565_nhd_c12864_2x_fn:

00000118 <u8g_dev_st7565_nhd_c12864_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12864_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12864_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_st7565_nhd_c12864_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_st7565_nhd_c12864_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_st7565_nhd_c12864_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_st7565_nhd_c12864_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7565_nhd_c12864_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7565_c12864_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_st7565_nhd_c12864_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_st7565_nhd_c12864_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_st7565_nhd_c12864_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_st7565_nhd_c12864_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_st7565_nhd_c12864_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_st7565_nhd_c12864_2x_fn+0x104>
 21c:	43 e0       	ldi	r20, 0x03	; 3
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_st7565_nhd_c12864_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_st7565_nhd_c12864_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_st7565_nhd_c12864_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7565_nhd_c12864_fn>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_st7687_c144mvgd.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008dc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001773  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7687_c144mvgd_fn 0000017a  00000000  00000000  00002083  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_st7687_c144mvgd_8bit 00000006  00000000  00000000  000021fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_st7687_c144mvgd_sw_spi 00000006  00000000  00000000  00002203  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_st7687_c144mvgd_8h8_pb 00000008  00000000  00000000  00002209  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .bss.u8g_st7687_c144mvgd_8h8_buf 00000400  00000000  00000000  00002211  2**0
                  ALLOC
 10 .progmem.data.u8g_dev_st7687_c144mvgd_init_seq 0000008a  00000000  00000000  00002211  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .comment      00000022  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7687_c144mvgd_fn:

00000000 <u8g_dev_st7687_c144mvgd_fn>:
  w |= v;
  return w;
}

uint8_t u8g_dev_st7687_c144mvgd_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	8c 01       	movw	r16, r24
  1a:	eb 01       	movw	r28, r22
  1c:	94 2e       	mov	r9, r20
  1e:	69 01       	movw	r12, r18
  switch(msg)
  20:	3a e0       	ldi	r19, 0x0A	; 10
  22:	43 17       	cp	r20, r19
  24:	01 f4       	brne	.+0      	; 0x26 <u8g_dev_st7687_c144mvgd_fn+0x26>
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_dev_st7687_c144mvgd_fn+0x28>
  28:	85 e1       	ldi	r24, 0x15	; 21
  2a:	48 13       	cpse	r20, r24
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_st7687_c144mvgd_fn+0x2e>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i, j;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ea 80       	ldd	r14, Y+2	; 0x02
  30:	fb 80       	ldd	r15, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        y = pb->p.page_y0;
  44:	f7 01       	movw	r30, r14
  46:	b2 80       	ldd	r11, Z+2	; 0x02
        ptr = pb->buf;
  48:	a6 80       	ldd	r10, Z+6	; 0x06
  4a:	f7 80       	ldd	r15, Z+7	; 0x07
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  4c:	40 e0       	ldi	r20, 0x00	; 0
  4e:	be 01       	movw	r22, r28
  50:	c8 01       	movw	r24, r16
  52:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, 0x02a );      /* Column address set 8.1.20 */
  56:	4a e2       	ldi	r20, 0x2A	; 42
  58:	be 01       	movw	r22, r28
  5a:	c8 01       	movw	r24, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  60:	41 e0       	ldi	r20, 0x01	; 1
  62:	be 01       	movw	r22, r28
  64:	c8 01       	movw	r24, r16
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, 0x000 );      /* x0 */
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	be 01       	movw	r22, r28
  6e:	c8 01       	movw	r24, r16
  70:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, WIDTH-1 );      /* x1 */
  74:	4f e7       	ldi	r20, 0x7F	; 127
  76:	be 01       	movw	r22, r28
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, 0x02b );      /* Row address set 8.1.21 */
  88:	4b e2       	ldi	r20, 0x2B	; 43
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, y );      /* y0 */
  9c:	4b 2d       	mov	r20, r11
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, y+PAGE_HEIGHT-1 );      /* y1 */
  a6:	47 e0       	ldi	r20, 0x07	; 7
  a8:	4b 0d       	add	r20, r11
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_WriteByte(u8g, dev, 0x02c );      /* Memory write 8.1.22 */
  bc:	4c e2       	ldi	r20, 0x2C	; 44
  be:	be 01       	movw	r22, r28
  c0:	c8 01       	movw	r24, r16
  c2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	be 01       	movw	r22, r28
  ca:	c8 01       	movw	r24, r16
  cc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
  d0:	9a 2d       	mov	r25, r10
  d2:	8f 2d       	mov	r24, r15
  d4:	28 e0       	ldi	r18, 0x08	; 8
  d6:	82 2e       	mov	r8, r18
  d8:	00 c0       	rjmp	.+0      	; 0xda <u8g_dev_st7687_c144mvgd_fn+0xda>
uint8_t u8g_dev_st7687_c144mvgd_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  da:	43 e0       	ldi	r20, 0x03	; 3
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7687_c144mvgd_init_seq);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	be 01       	movw	r22, r28
  e6:	c8 01       	movw	r24, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
      break;
  ec:	00 c0       	rjmp	.+0      	; 0xee <u8g_dev_st7687_c144mvgd_fn+0xee>
  ee:	8a 94       	dec	r8
        u8g_WriteByte(u8g, dev, y+PAGE_HEIGHT-1 );      /* y1 */
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_WriteByte(u8g, dev, 0x02c );      /* Memory write 8.1.22 */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        
        for( i = 0; i < PAGE_HEIGHT; i ++ )
  f0:	01 f0       	breq	.+0      	; 0xf2 <u8g_dev_st7687_c144mvgd_fn+0xf2>
  f2:	9e 2d       	mov	r25, r14
  f4:	8f 2d       	mov	r24, r15
  f6:	e9 2e       	mov	r14, r25
  f8:	f8 2e       	mov	r15, r24
  fa:	57 01       	movw	r10, r14
  fc:	30 e8       	ldi	r19, 0x80	; 128
  fe:	a3 0e       	add	r10, r19
 100:	b1 1c       	adc	r11, r1
        {
          
          for( j = 0; j < WIDTH; j ++ )
 102:	ea 14       	cp	r14, r10
 104:	fb 04       	cpc	r15, r11
 106:	01 f0       	breq	.+0      	; 0x108 <u8g_dev_st7687_c144mvgd_fn+0x108>


/* calculate bytes for Type B 4096 color display */
static uint8_t get_byte_1(uint8_t v)
{
  v >>= 4;
 108:	f7 01       	movw	r30, r14
 10a:	40 81       	ld	r20, Z
 10c:	42 95       	swap	r20
  v &= 0x0e;
 10e:	4e 70       	andi	r20, 0x0E	; 14
        for( i = 0; i < PAGE_HEIGHT; i ++ )
        {
          
          for( j = 0; j < WIDTH; j ++ )
          {
            u8g_WriteByte(u8g, dev, get_byte_1(*ptr) );     
 110:	be 01       	movw	r22, r28
 112:	c8 01       	movw	r24, r16
 114:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
            u8g_WriteByte(u8g, dev, get_byte_2(*ptr) );                 
 118:	f7 01       	movw	r30, r14
 11a:	21 91       	ld	r18, Z+
 11c:	7f 01       	movw	r14, r30

static uint8_t get_byte_2(uint8_t v)
{
  uint8_t w;
  w = v;
  w &= 3;
 11e:	42 2f       	mov	r20, r18
 120:	43 70       	andi	r20, 0x03	; 3
  w = (w<<2) | w;
 122:	f4 e0       	ldi	r31, 0x04	; 4
 124:	4f 9f       	mul	r20, r31
 126:	c0 01       	movw	r24, r0
 128:	11 24       	eor	r1, r1
 12a:	48 2b       	or	r20, r24
  v <<= 3;
 12c:	82 2f       	mov	r24, r18
 12e:	88 0f       	add	r24, r24
 130:	88 0f       	add	r24, r24
 132:	88 0f       	add	r24, r24
  v &= 0x0e0;
 134:	80 7e       	andi	r24, 0xE0	; 224
  w |= v;
 136:	48 2b       	or	r20, r24
        {
          
          for( j = 0; j < WIDTH; j ++ )
          {
            u8g_WriteByte(u8g, dev, get_byte_1(*ptr) );     
            u8g_WriteByte(u8g, dev, get_byte_2(*ptr) );                 
 138:	be 01       	movw	r22, r28
 13a:	c8 01       	movw	r24, r16
 13c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
 140:	00 c0       	rjmp	.+0      	; 0x142 <u8g_dev_st7687_c144mvgd_fn+0x142>
            ptr++;
          }
        }
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	be 01       	movw	r22, r28
 146:	c8 01       	movw	r24, r16
 148:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
        u8g_SetChipSelect(u8g, dev, 0);
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	be 01       	movw	r22, r28
 150:	c8 01       	movw	r24, r16
 152:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>
      }
      break;
  }
  return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 156:	96 01       	movw	r18, r12
 158:	49 2d       	mov	r20, r9
 15a:	be 01       	movw	r22, r28
 15c:	c8 01       	movw	r24, r16
}
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	bf 90       	pop	r11
 170:	af 90       	pop	r10
 172:	9f 90       	pop	r9
 174:	8f 90       	pop	r8
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb8h8_base_fn(u8g, dev, msg, arg);
 176:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7687_c144mvgd_fn>

u8g_dev_st7920_128x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000ae0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001a4f  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7920_128x64_fn 000000f6  00000000  00000000  00002563  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7920_128x64_4x_fn 000000f6  00000000  00000000  00002659  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7920_128x64_4x_custom 00000006  00000000  00000000  0000274f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7920_128x64_4x_8bit 00000006  00000000  00000000  00002755  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7920_128x64_4x_hw_spi 00000006  00000000  00000000  0000275b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7920_128x64_4x_sw_spi 00000006  00000000  00000000  00002761  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .data.u8g_dev_st7920_128x64_4x_pb 00000008  00000000  00000000  00002767  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .bss.u8g_dev_st7920_128x64_4x_buf 00000200  00000000  00000000  0000276f  2**0
                  ALLOC
 13 .data.u8g_dev_st7920_128x64_custom 00000006  00000000  00000000  0000276f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .data.u8g_dev_st7920_128x64_custom_pb 00000008  00000000  00000000  00002775  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .bss.u8g_dev_st7920_128x64_custom_buf 00000080  00000000  00000000  0000277d  2**0
                  ALLOC
 16 .data.u8g_dev_st7920_128x64_8bit 00000006  00000000  00000000  0000277d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .data.u8g_dev_st7920_128x64_8bit_pb 00000008  00000000  00000000  00002783  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 18 .bss.u8g_dev_st7920_128x64_8bit_buf 00000080  00000000  00000000  0000278b  2**0
                  ALLOC
 19 .data.u8g_dev_st7920_128x64_hw_spi 00000006  00000000  00000000  0000278b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .data.u8g_dev_st7920_128x64_hw_spi_pb 00000008  00000000  00000000  00002791  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 21 .bss.u8g_dev_st7920_128x64_hw_spi_buf 00000080  00000000  00000000  00002799  2**0
                  ALLOC
 22 .data.u8g_dev_st7920_128x64_sw_spi 00000006  00000000  00000000  00002799  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 23 .data.u8g_dev_st7920_128x64_sw_spi_pb 00000008  00000000  00000000  0000279f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 24 .bss.u8g_dev_st7920_128x64_sw_spi_buf 00000080  00000000  00000000  000027a7  2**0
                  ALLOC
 25 .progmem.data.u8g_dev_st7920_128x64_init_seq 00000017  00000000  00000000  000027a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 26 .comment      00000022  00000000  00000000  000027be  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7920_128x64_fn:

00000000 <u8g_dev_st7920_128x64_fn>:
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7920_128x64_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	8c 01       	movw	r16, r24
  18:	eb 01       	movw	r28, r22
  1a:	a4 2e       	mov	r10, r20
  1c:	69 01       	movw	r12, r18
  switch(msg)
  1e:	8a e0       	ldi	r24, 0x0A	; 10
  20:	48 17       	cp	r20, r24
  22:	01 f0       	breq	.+0      	; 0x24 <u8g_dev_st7920_128x64_fn+0x24>
  24:	e5 e1       	ldi	r30, 0x15	; 21
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_st7920_128x64_fn+0x2a>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2a:	ea 80       	ldd	r14, Y+2	; 0x02
  2c:	fb 80       	ldd	r15, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  2e:	40 e0       	ldi	r20, 0x00	; 0
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  36:	41 e0       	ldi	r20, 0x01	; 1
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
        y = pb->p.page_y0;
  40:	f7 01       	movw	r30, r14
  42:	b2 80       	ldd	r11, Z+2	; 0x02
        ptr = pb->buf;
  44:	e6 80       	ldd	r14, Z+6	; 0x06
  46:	f7 80       	ldd	r15, Z+7	; 0x07
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	98 2e       	mov	r9, r24
  4c:	9b 0c       	add	r9, r11
  4e:	00 c0       	rjmp	.+0      	; 0x50 <u8g_dev_st7920_128x64_fn+0x50>
uint8_t u8g_dev_st7920_128x64_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  50:	43 e0       	ldi	r20, 0x03	; 3
  52:	c8 01       	movw	r24, r16
  54:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_128x64_init_seq);
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
      break;
  64:	00 c0       	rjmp	.+0      	; 0x66 <u8g_dev_st7920_128x64_fn+0x66>
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	be 01       	movw	r22, r28
  6a:	c8 01       	movw	r24, r16
  6c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
          u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
  70:	4e e3       	ldi	r20, 0x3E	; 62
  72:	be 01       	movw	r22, r28
  74:	c8 01       	movw	r24, r16
  76:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>

          if ( y < 32 )
  7a:	ff e1       	ldi	r31, 0x1F	; 31
  7c:	fb 15       	cp	r31, r11
  7e:	00 f0       	brcs	.+0      	; 0x80 <u8g_dev_st7920_128x64_fn+0x80>
          {
                  u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
  80:	4b 2d       	mov	r20, r11
  82:	40 68       	ori	r20, 0x80	; 128
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
                  u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/
  8c:	40 e8       	ldi	r20, 0x80	; 128
  8e:	00 c0       	rjmp	.+0      	; 0x90 <u8g_dev_st7920_128x64_fn+0x90>
  90:	40 ee       	ldi	r20, 0xE0	; 224
  92:	4b 0d       	add	r20, r11
          }
          else
          {
                  u8g_WriteByte(u8g, dev, 0x080 | (y-32) );      /* y pos  */
  94:	40 68       	ori	r20, 0x80	; 128
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
                  u8g_WriteByte(u8g, dev, 0x080 | 8);      /* set x pos to 64*/
  9e:	48 e8       	ldi	r20, 0x88	; 136
  a0:	be 01       	movw	r22, r28
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
          }
          
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  b2:	97 01       	movw	r18, r14
  b4:	40 e1       	ldi	r20, 0x10	; 16
  b6:	be 01       	movw	r22, r28
  b8:	c8 01       	movw	r24, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
          ptr += WIDTH/8;
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	e8 0e       	add	r14, r24
  c2:	f1 1c       	adc	r15, r1
          y++;
  c4:	b3 94       	inc	r11
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
  c6:	b9 10       	cpse	r11, r9
  c8:	00 c0       	rjmp	.+0      	; 0xca <u8g_dev_st7920_128x64_fn+0xca>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          y++;
        }
        u8g_SetChipSelect(u8g, dev, 0);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	be 01       	movw	r22, r28
  ce:	c8 01       	movw	r24, r16
  d0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  d4:	96 01       	movw	r18, r12
  d6:	4a 2d       	mov	r20, r10
  d8:	be 01       	movw	r22, r28
  da:	c8 01       	movw	r24, r16
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	af 90       	pop	r10
  f0:	9f 90       	pop	r9
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  f2:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7920_128x64_fn>

Disassembly of section .text.u8g_dev_st7920_128x64_4x_fn:

000000f6 <u8g_dev_st7920_128x64_4x_fn>:
  f6:	9f 92       	push	r9
  f8:	af 92       	push	r10
  fa:	bf 92       	push	r11
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	8c 01       	movw	r16, r24
 10e:	eb 01       	movw	r28, r22
 110:	a4 2e       	mov	r10, r20
 112:	69 01       	movw	r12, r18
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	48 17       	cp	r20, r24
 118:	01 f0       	breq	.+0      	; 0x11a <u8g_dev_st7920_128x64_4x_fn+0x24>
 11a:	e5 e1       	ldi	r30, 0x15	; 21
 11c:	4e 13       	cpse	r20, r30
 11e:	00 c0       	rjmp	.+0      	; 0x120 <u8g_dev_st7920_128x64_4x_fn+0x2a>
 120:	ea 80       	ldd	r14, Y+2	; 0x02
 122:	fb 80       	ldd	r15, Y+3	; 0x03
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	c8 01       	movw	r24, r16
 128:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 12c:	41 e0       	ldi	r20, 0x01	; 1
 12e:	be 01       	movw	r22, r28
 130:	c8 01       	movw	r24, r16
 132:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 136:	f7 01       	movw	r30, r14
 138:	b2 80       	ldd	r11, Z+2	; 0x02
 13a:	e6 80       	ldd	r14, Z+6	; 0x06
 13c:	f7 80       	ldd	r15, Z+7	; 0x07
 13e:	90 e2       	ldi	r25, 0x20	; 32
 140:	99 2e       	mov	r9, r25
 142:	9b 0c       	add	r9, r11
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_st7920_128x64_4x_fn+0x50>
 146:	43 e0       	ldi	r20, 0x03	; 3
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	be 01       	movw	r22, r28
 154:	c8 01       	movw	r24, r16
 156:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <u8g_dev_st7920_128x64_4x_fn+0x66>
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	be 01       	movw	r22, r28
 160:	c8 01       	movw	r24, r16
 162:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 166:	4e e3       	ldi	r20, 0x3E	; 62
 168:	be 01       	movw	r22, r28
 16a:	c8 01       	movw	r24, r16
 16c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 170:	ff e1       	ldi	r31, 0x1F	; 31
 172:	fb 15       	cp	r31, r11
 174:	00 f0       	brcs	.+0      	; 0x176 <u8g_dev_st7920_128x64_4x_fn+0x80>
 176:	4b 2d       	mov	r20, r11
 178:	40 68       	ori	r20, 0x80	; 128
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 182:	40 e8       	ldi	r20, 0x80	; 128
 184:	00 c0       	rjmp	.+0      	; 0x186 <u8g_dev_st7920_128x64_4x_fn+0x90>
 186:	40 ee       	ldi	r20, 0xE0	; 224
 188:	4b 0d       	add	r20, r11
 18a:	40 68       	ori	r20, 0x80	; 128
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 194:	48 e8       	ldi	r20, 0x88	; 136
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	be 01       	movw	r22, r28
 1a2:	c8 01       	movw	r24, r16
 1a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 1a8:	97 01       	movw	r18, r14
 1aa:	40 e1       	ldi	r20, 0x10	; 16
 1ac:	be 01       	movw	r22, r28
 1ae:	c8 01       	movw	r24, r16
 1b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 1b4:	80 e1       	ldi	r24, 0x10	; 16
 1b6:	e8 0e       	add	r14, r24
 1b8:	f1 1c       	adc	r15, r1
 1ba:	b3 94       	inc	r11
 1bc:	b9 10       	cpse	r11, r9
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <u8g_dev_st7920_128x64_4x_fn+0xca>
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_128x64_fn>
 1ca:	96 01       	movw	r18, r12
 1cc:	4a 2d       	mov	r20, r10
 1ce:	be 01       	movw	r22, r28
 1d0:	c8 01       	movw	r24, r16
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	9f 90       	pop	r9
 1e8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7920_128x64_fn>

u8g_dev_st7920_192x32.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a68  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000019b3  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7920_192x32_fn 000000de  00000000  00000000  0000244f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7920_192x32_4x_fn 000000de  00000000  00000000  0000252d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7920_192x32_4x_8bit 00000006  00000000  00000000  0000260b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7920_192x32_4x_hw_spi 00000006  00000000  00000000  00002611  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7920_192x32_4x_sw_spi 00000006  00000000  00000000  00002617  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7920_192x32_4x_pb 00000008  00000000  00000000  0000261d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7920_192x32_4x_buf 00000300  00000000  00000000  00002625  2**0
                  ALLOC
 12 .data.u8g_dev_st7920_192x32_8bit 00000006  00000000  00000000  00002625  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_st7920_192x32_8bit_pb 00000008  00000000  00000000  0000262b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_st7920_192x32_8bit_buf 000000c0  00000000  00000000  00002633  2**0
                  ALLOC
 15 .data.u8g_dev_st7920_192x32_hw_spi 00000006  00000000  00000000  00002633  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_st7920_192x32_hw_spi_pb 00000008  00000000  00000000  00002639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_st7920_192x32_hw_spi_buf 000000c0  00000000  00000000  00002641  2**0
                  ALLOC
 18 .data.u8g_dev_st7920_192x32_sw_spi 00000006  00000000  00000000  00002641  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_st7920_192x32_sw_spi_pb 00000008  00000000  00000000  00002647  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_st7920_192x32_sw_spi_buf 000000c0  00000000  00000000  0000264f  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_st7920_192x32_init_seq 00000017  00000000  00000000  0000264f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .comment      00000022  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7920_192x32_fn:

00000000 <u8g_dev_st7920_192x32_fn>:
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7920_192x32_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	8c 01       	movw	r16, r24
  18:	eb 01       	movw	r28, r22
  1a:	a4 2e       	mov	r10, r20
  1c:	69 01       	movw	r12, r18
  switch(msg)
  1e:	8a e0       	ldi	r24, 0x0A	; 10
  20:	48 17       	cp	r20, r24
  22:	01 f0       	breq	.+0      	; 0x24 <u8g_dev_st7920_192x32_fn+0x24>
  24:	e5 e1       	ldi	r30, 0x15	; 21
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_st7920_192x32_fn+0x2a>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2a:	ea 80       	ldd	r14, Y+2	; 0x02
  2c:	fb 80       	ldd	r15, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  2e:	40 e0       	ldi	r20, 0x00	; 0
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  36:	41 e0       	ldi	r20, 0x01	; 1
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
        y = pb->p.page_y0;
  40:	f7 01       	movw	r30, r14
  42:	b2 80       	ldd	r11, Z+2	; 0x02
        ptr = pb->buf;
  44:	e6 80       	ldd	r14, Z+6	; 0x06
  46:	f7 80       	ldd	r15, Z+7	; 0x07
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	98 2e       	mov	r9, r24
  4c:	9b 0c       	add	r9, r11
  4e:	00 c0       	rjmp	.+0      	; 0x50 <u8g_dev_st7920_192x32_fn+0x50>
uint8_t u8g_dev_st7920_192x32_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  50:	43 e0       	ldi	r20, 0x03	; 3
  52:	c8 01       	movw	r24, r16
  54:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_192x32_init_seq);
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
      break;
  64:	00 c0       	rjmp	.+0      	; 0x66 <u8g_dev_st7920_192x32_fn+0x66>
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	be 01       	movw	r22, r28
  6a:	c8 01       	movw	r24, r16
  6c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
  70:	4e e3       	ldi	r20, 0x3E	; 62
  72:	be 01       	movw	r22, r28
  74:	c8 01       	movw	r24, r16
  76:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
  7a:	4b 2d       	mov	r20, r11
  7c:	40 68       	ori	r20, 0x80	; 128
  7e:	be 01       	movw	r22, r28
  80:	c8 01       	movw	r24, r16
  82:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/          
  86:	40 e8       	ldi	r20, 0x80	; 128
  88:	be 01       	movw	r22, r28
  8a:	c8 01       	movw	r24, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	be 01       	movw	r22, r28
  94:	c8 01       	movw	r24, r16
  96:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  9a:	97 01       	movw	r18, r14
  9c:	48 e1       	ldi	r20, 0x18	; 24
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
          ptr += WIDTH/8;
  a6:	f8 e1       	ldi	r31, 0x18	; 24
  a8:	ef 0e       	add	r14, r31
  aa:	f1 1c       	adc	r15, r1
          y++;
  ac:	b3 94       	inc	r11
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
  ae:	b9 10       	cpse	r11, r9
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <u8g_dev_st7920_192x32_fn+0xb2>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          y++;
        }
        u8g_SetChipSelect(u8g, dev, 0);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_192x32_fn>
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  bc:	96 01       	movw	r18, r12
  be:	4a 2d       	mov	r20, r10
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
  d4:	bf 90       	pop	r11
  d6:	af 90       	pop	r10
  d8:	9f 90       	pop	r9
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  da:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7920_192x32_fn>

Disassembly of section .text.u8g_dev_st7920_192x32_4x_fn:

000000de <u8g_dev_st7920_192x32_4x_fn>:
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
  f6:	eb 01       	movw	r28, r22
  f8:	a4 2e       	mov	r10, r20
  fa:	69 01       	movw	r12, r18
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	48 17       	cp	r20, r24
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_st7920_192x32_4x_fn+0x24>
 102:	e5 e1       	ldi	r30, 0x15	; 21
 104:	4e 13       	cpse	r20, r30
 106:	00 c0       	rjmp	.+0      	; 0x108 <u8g_dev_st7920_192x32_4x_fn+0x2a>
 108:	ea 80       	ldd	r14, Y+2	; 0x02
 10a:	fb 80       	ldd	r15, Y+3	; 0x03
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	be 01       	movw	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 11e:	f7 01       	movw	r30, r14
 120:	b2 80       	ldd	r11, Z+2	; 0x02
 122:	e6 80       	ldd	r14, Z+6	; 0x06
 124:	f7 80       	ldd	r15, Z+7	; 0x07
 126:	90 e2       	ldi	r25, 0x20	; 32
 128:	99 2e       	mov	r9, r25
 12a:	9b 0c       	add	r9, r11
 12c:	00 c0       	rjmp	.+0      	; 0x12e <u8g_dev_st7920_192x32_4x_fn+0x50>
 12e:	43 e0       	ldi	r20, 0x03	; 3
 130:	c8 01       	movw	r24, r16
 132:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	be 01       	movw	r22, r28
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 142:	00 c0       	rjmp	.+0      	; 0x144 <u8g_dev_st7920_192x32_4x_fn+0x66>
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	be 01       	movw	r22, r28
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 14e:	4e e3       	ldi	r20, 0x3E	; 62
 150:	be 01       	movw	r22, r28
 152:	c8 01       	movw	r24, r16
 154:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 158:	4b 2d       	mov	r20, r11
 15a:	40 68       	ori	r20, 0x80	; 128
 15c:	be 01       	movw	r22, r28
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 164:	40 e8       	ldi	r20, 0x80	; 128
 166:	be 01       	movw	r22, r28
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	97 01       	movw	r18, r14
 17a:	48 e1       	ldi	r20, 0x18	; 24
 17c:	be 01       	movw	r22, r28
 17e:	c8 01       	movw	r24, r16
 180:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 184:	f8 e1       	ldi	r31, 0x18	; 24
 186:	ef 0e       	add	r14, r31
 188:	f1 1c       	adc	r15, r1
 18a:	b3 94       	inc	r11
 18c:	b9 10       	cpse	r11, r9
 18e:	00 c0       	rjmp	.+0      	; 0x190 <u8g_dev_st7920_192x32_4x_fn+0xb2>
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	be 01       	movw	r22, r28
 194:	c8 01       	movw	r24, r16
 196:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 19a:	96 01       	movw	r18, r12
 19c:	4a 2d       	mov	r20, r10
 19e:	be 01       	movw	r22, r28
 1a0:	c8 01       	movw	r24, r16
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	bf 90       	pop	r11
 1b4:	af 90       	pop	r10
 1b6:	9f 90       	pop	r9
 1b8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_dev_st7920_202x32.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a68  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000019b3  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_st7920_202x32_fn 000000de  00000000  00000000  0000244f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_st7920_202x32_4x_fn 000000de  00000000  00000000  0000252d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_st7920_202x32_4x_8bit 00000006  00000000  00000000  0000260b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_st7920_202x32_4x_hw_spi 00000006  00000000  00000000  00002611  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_st7920_202x32_4x_sw_spi 00000006  00000000  00000000  00002617  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_st7920_202x32_4x_pb 00000008  00000000  00000000  0000261d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_st7920_202x32_4x_buf 00000328  00000000  00000000  00002625  2**0
                  ALLOC
 12 .data.u8g_dev_st7920_202x32_8bit 00000006  00000000  00000000  00002625  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_st7920_202x32_8bit_pb 00000008  00000000  00000000  0000262b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_st7920_202x32_8bit_buf 000000ca  00000000  00000000  00002633  2**0
                  ALLOC
 15 .data.u8g_dev_st7920_202x32_hw_spi 00000006  00000000  00000000  00002633  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_st7920_202x32_hw_spi_pb 00000008  00000000  00000000  00002639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_st7920_202x32_hw_spi_buf 000000ca  00000000  00000000  00002641  2**0
                  ALLOC
 18 .data.u8g_dev_st7920_202x32_sw_spi 00000006  00000000  00000000  00002641  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_st7920_202x32_sw_spi_pb 00000008  00000000  00000000  00002647  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_st7920_202x32_sw_spi_buf 000000ca  00000000  00000000  0000264f  2**0
                  ALLOC
 21 .progmem.data.u8g_dev_st7920_202x32_init_seq 00000017  00000000  00000000  0000264f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .comment      00000022  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_st7920_202x32_fn:

00000000 <u8g_dev_st7920_202x32_fn>:
  }
  return u8g_dev_pb8h1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_st7920_202x32_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	8c 01       	movw	r16, r24
  18:	eb 01       	movw	r28, r22
  1a:	a4 2e       	mov	r10, r20
  1c:	69 01       	movw	r12, r18
  switch(msg)
  1e:	8a e0       	ldi	r24, 0x0A	; 10
  20:	48 17       	cp	r20, r24
  22:	01 f0       	breq	.+0      	; 0x24 <u8g_dev_st7920_202x32_fn+0x24>
  24:	e5 e1       	ldi	r30, 0x15	; 21
  26:	4e 13       	cpse	r20, r30
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_dev_st7920_202x32_fn+0x2a>
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2a:	ea 80       	ldd	r14, Y+2	; 0x02
  2c:	fb 80       	ldd	r15, Y+3	; 0x03
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  2e:	40 e0       	ldi	r20, 0x00	; 0
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  36:	41 e0       	ldi	r20, 0x01	; 1
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
        y = pb->p.page_y0;
  40:	f7 01       	movw	r30, r14
  42:	b2 80       	ldd	r11, Z+2	; 0x02
        ptr = pb->buf;
  44:	e6 80       	ldd	r14, Z+6	; 0x06
  46:	f7 80       	ldd	r15, Z+7	; 0x07
  48:	88 e0       	ldi	r24, 0x08	; 8
  4a:	98 2e       	mov	r9, r24
  4c:	9b 0c       	add	r9, r11
  4e:	00 c0       	rjmp	.+0      	; 0x50 <u8g_dev_st7920_202x32_fn+0x50>
uint8_t u8g_dev_st7920_202x32_4x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  50:	43 e0       	ldi	r20, 0x03	; 3
  52:	c8 01       	movw	r24, r16
  54:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_st7920_202x32_init_seq);
  58:	40 e0       	ldi	r20, 0x00	; 0
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
      break;
  64:	00 c0       	rjmp	.+0      	; 0x66 <u8g_dev_st7920_202x32_fn+0x66>
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	be 01       	movw	r22, r28
  6a:	c8 01       	movw	r24, r16
  6c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          u8g_WriteByte(u8g, dev, 0x03e );      /* enable extended mode */
  70:	4e e3       	ldi	r20, 0x3E	; 62
  72:	be 01       	movw	r22, r28
  74:	c8 01       	movw	r24, r16
  76:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          u8g_WriteByte(u8g, dev, 0x080 | y );      /* y pos  */
  7a:	4b 2d       	mov	r20, r11
  7c:	40 68       	ori	r20, 0x80	; 128
  7e:	be 01       	movw	r22, r28
  80:	c8 01       	movw	r24, r16
  82:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          u8g_WriteByte(u8g, dev, 0x080  );      /* set x pos to 0*/          
  86:	40 e8       	ldi	r20, 0x80	; 128
  88:	be 01       	movw	r22, r28
  8a:	c8 01       	movw	r24, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	be 01       	movw	r22, r28
  94:	c8 01       	movw	r24, r16
  96:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
  9a:	97 01       	movw	r18, r14
  9c:	49 e1       	ldi	r20, 0x19	; 25
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
          ptr += WIDTH/8;
  a6:	f9 e1       	ldi	r31, 0x19	; 25
  a8:	ef 0e       	add	r14, r31
  aa:	f1 1c       	adc	r15, r1
          y++;
  ac:	b3 94       	inc	r11
        
        u8g_SetAddress(u8g, dev, 0);           /* cmd mode */
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        for( i = 0; i < 32; i ++ )
  ae:	b9 10       	cpse	r11, r9
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <u8g_dev_st7920_202x32_fn+0xb2>
          u8g_SetAddress(u8g, dev, 1);                  /* data mode */
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);
          ptr += WIDTH/8;
          y++;
        }
        u8g_SetChipSelect(u8g, dev, 0);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  bc:	96 01       	movw	r18, r12
  be:	4a 2d       	mov	r20, r10
  c0:	be 01       	movw	r22, r28
  c2:	c8 01       	movw	r24, r16
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
  d4:	bf 90       	pop	r11
  d6:	af 90       	pop	r10
  d8:	9f 90       	pop	r9
        }
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb32h1_base_fn(u8g, dev, msg, arg);
  da:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7920_202x32_fn>

Disassembly of section .text.u8g_dev_st7920_202x32_4x_fn:

000000de <u8g_dev_st7920_202x32_4x_fn>:
  de:	9f 92       	push	r9
  e0:	af 92       	push	r10
  e2:	bf 92       	push	r11
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	0f 93       	push	r16
  ee:	1f 93       	push	r17
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	8c 01       	movw	r16, r24
  f6:	eb 01       	movw	r28, r22
  f8:	a4 2e       	mov	r10, r20
  fa:	69 01       	movw	r12, r18
  fc:	8a e0       	ldi	r24, 0x0A	; 10
  fe:	48 17       	cp	r20, r24
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_dev_st7920_202x32_4x_fn+0x24>
 102:	e5 e1       	ldi	r30, 0x15	; 21
 104:	4e 13       	cpse	r20, r30
 106:	00 c0       	rjmp	.+0      	; 0x108 <u8g_dev_st7920_202x32_4x_fn+0x2a>
 108:	ea 80       	ldd	r14, Y+2	; 0x02
 10a:	fb 80       	ldd	r15, Y+3	; 0x03
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	be 01       	movw	r22, r28
 118:	c8 01       	movw	r24, r16
 11a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 11e:	f7 01       	movw	r30, r14
 120:	b2 80       	ldd	r11, Z+2	; 0x02
 122:	e6 80       	ldd	r14, Z+6	; 0x06
 124:	f7 80       	ldd	r15, Z+7	; 0x07
 126:	90 e2       	ldi	r25, 0x20	; 32
 128:	99 2e       	mov	r9, r25
 12a:	9b 0c       	add	r9, r11
 12c:	00 c0       	rjmp	.+0      	; 0x12e <u8g_dev_st7920_202x32_4x_fn+0x50>
 12e:	43 e0       	ldi	r20, 0x03	; 3
 130:	c8 01       	movw	r24, r16
 132:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	be 01       	movw	r22, r28
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 142:	00 c0       	rjmp	.+0      	; 0x144 <u8g_dev_st7920_202x32_4x_fn+0x66>
 144:	40 e0       	ldi	r20, 0x00	; 0
 146:	be 01       	movw	r22, r28
 148:	c8 01       	movw	r24, r16
 14a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 14e:	4e e3       	ldi	r20, 0x3E	; 62
 150:	be 01       	movw	r22, r28
 152:	c8 01       	movw	r24, r16
 154:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 158:	4b 2d       	mov	r20, r11
 15a:	40 68       	ori	r20, 0x80	; 128
 15c:	be 01       	movw	r22, r28
 15e:	c8 01       	movw	r24, r16
 160:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 164:	40 e8       	ldi	r20, 0x80	; 128
 166:	be 01       	movw	r22, r28
 168:	c8 01       	movw	r24, r16
 16a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 178:	97 01       	movw	r18, r14
 17a:	49 e1       	ldi	r20, 0x19	; 25
 17c:	be 01       	movw	r22, r28
 17e:	c8 01       	movw	r24, r16
 180:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 184:	f9 e1       	ldi	r31, 0x19	; 25
 186:	ef 0e       	add	r14, r31
 188:	f1 1c       	adc	r15, r1
 18a:	b3 94       	inc	r11
 18c:	b9 10       	cpse	r11, r9
 18e:	00 c0       	rjmp	.+0      	; 0x190 <u8g_dev_st7920_202x32_4x_fn+0xb2>
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	be 01       	movw	r22, r28
 194:	c8 01       	movw	r24, r16
 196:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_st7920_202x32_fn>
 19a:	96 01       	movw	r18, r12
 19c:	4a 2d       	mov	r20, r10
 19e:	be 01       	movw	r22, r28
 1a0:	c8 01       	movw	r24, r16
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	bf 90       	pop	r11
 1b4:	af 90       	pop	r10
 1b6:	9f 90       	pop	r9
 1b8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_st7920_202x32_fn>

u8g_dev_t6963_128x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000810  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001749  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_t6963_128x128_fn 000000fc  00000000  00000000  00001f8d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_t6963_128x128_8bit 00000006  00000000  00000000  00002089  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_t6963_128x128_2x_bw_pb 00000008  00000000  00000000  0000208f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_t6963_128x128_2x_bw_buf 00000100  00000000  00000000  00002097  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_t6963_128x128_init_seq 00000049  00000000  00000000  00002097  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  000020e0  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_t6963_128x128_fn:

00000000 <u8g_dev_t6963_128x128_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_t6963_128x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_t6963_128x128_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_t6963_128x128_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03

        
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	f0 e1       	ldi	r31, 0x10	; 16
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	93 94       	inc	r9
  58:	ce 18       	sub	r12, r14
  5a:	df 08       	sbc	r13, r15
  5c:	00 c0       	rjmp	.+0      	; 0x5e <u8g_dev_t6963_128x128_fn+0x5e>
uint8_t u8g_dev_t6963_128x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);    
  5e:	4f ef       	ldi	r20, 0xFF	; 255
  60:	c8 01       	movw	r24, r16
  62:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_t6963_128x128_init_seq);
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	be 01       	movw	r22, r28
  6c:	c8 01       	movw	r24, r16
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
      break;
  72:	00 c0       	rjmp	.+0      	; 0x74 <u8g_dev_t6963_128x128_fn+0x74>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	be 01       	movw	r22, r28
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr&255 );      /* address low byte */
  7e:	4e 2d       	mov	r20, r14
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr>>8 );      /* address hight byte */
  88:	4f 2d       	mov	r20, r15
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
          u8g_WriteByte(u8g, dev, 0x024 );      /* set adr ptr */
  9c:	44 e2       	ldi	r20, 0x24	; 36
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
  a6:	96 01       	movw	r18, r12
  a8:	2e 0d       	add	r18, r14
  aa:	3f 1d       	adc	r19, r15
	  
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
  ac:	40 e1       	ldi	r20, 0x10	; 16
  ae:	be 01       	movw	r22, r28
  b0:	c8 01       	movw	r24, r16
  b2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  b6:	e0 e1       	ldi	r30, 0x10	; 16
  b8:	ee 0e       	add	r14, r30
  ba:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
  bc:	e8 14       	cp	r14, r8
  be:	f9 04       	cpc	r15, r9
  c0:	01 f4       	brne	.+0      	; 0xc2 <u8g_dev_t6963_128x128_fn+0xc2>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	be 01       	movw	r22, r28
  d0:	c8 01       	movw	r24, r16
  d2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x128_fn>
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  d6:	95 01       	movw	r18, r10
  d8:	47 2d       	mov	r20, r7
  da:	be 01       	movw	r22, r28
  dc:	c8 01       	movw	r24, r16
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	ff 90       	pop	r15
  e8:	ef 90       	pop	r14
  ea:	df 90       	pop	r13
  ec:	cf 90       	pop	r12
  ee:	bf 90       	pop	r11
  f0:	af 90       	pop	r10
  f2:	9f 90       	pop	r9
  f4:	8f 90       	pop	r8
  f6:	7f 90       	pop	r7
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  f8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_t6963_128x128_fn>

u8g_dev_t6963_128x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000810  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001742  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_t6963_128x64_fn 000000fc  00000000  00000000  00001f86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_t6963_128x64_8bit 00000006  00000000  00000000  00002082  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_t6963_128x64_2x_bw_pb 00000008  00000000  00000000  00002088  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_t6963_128x64_2x_bw_buf 00000100  00000000  00000000  00002090  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_t6963_128x64_init_seq 00000049  00000000  00000000  00002090  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  000020d9  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_t6963_128x64_fn:

00000000 <u8g_dev_t6963_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_t6963_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_t6963_128x64_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_t6963_128x64_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03

        
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	f0 e1       	ldi	r31, 0x10	; 16
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	93 94       	inc	r9
  58:	ce 18       	sub	r12, r14
  5a:	df 08       	sbc	r13, r15
  5c:	00 c0       	rjmp	.+0      	; 0x5e <u8g_dev_t6963_128x64_fn+0x5e>
uint8_t u8g_dev_t6963_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);    
  5e:	4f ef       	ldi	r20, 0xFF	; 255
  60:	c8 01       	movw	r24, r16
  62:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_t6963_128x64_init_seq);
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	50 e0       	ldi	r21, 0x00	; 0
  6a:	be 01       	movw	r22, r28
  6c:	c8 01       	movw	r24, r16
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
      break;
  72:	00 c0       	rjmp	.+0      	; 0x74 <u8g_dev_t6963_128x64_fn+0x74>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  74:	40 e0       	ldi	r20, 0x00	; 0
  76:	be 01       	movw	r22, r28
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr&255 );      /* address low byte */
  7e:	4e 2d       	mov	r20, r14
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr>>8 );      /* address hight byte */
  88:	4f 2d       	mov	r20, r15
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	be 01       	movw	r22, r28
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
          u8g_WriteByte(u8g, dev, 0x024 );      /* set adr ptr */
  9c:	44 e2       	ldi	r20, 0x24	; 36
  9e:	be 01       	movw	r22, r28
  a0:	c8 01       	movw	r24, r16
  a2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
  a6:	96 01       	movw	r18, r12
  a8:	2e 0d       	add	r18, r14
  aa:	3f 1d       	adc	r19, r15
	  
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
  ac:	40 e1       	ldi	r20, 0x10	; 16
  ae:	be 01       	movw	r22, r28
  b0:	c8 01       	movw	r24, r16
  b2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  b6:	e0 e1       	ldi	r30, 0x10	; 16
  b8:	ee 0e       	add	r14, r30
  ba:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
  bc:	e8 14       	cp	r14, r8
  be:	f9 04       	cpc	r15, r9
  c0:	01 f4       	brne	.+0      	; 0xc2 <u8g_dev_t6963_128x64_fn+0xc2>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	be 01       	movw	r22, r28
  d0:	c8 01       	movw	r24, r16
  d2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_128x64_fn>
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  d6:	95 01       	movw	r18, r10
  d8:	47 2d       	mov	r20, r7
  da:	be 01       	movw	r22, r28
  dc:	c8 01       	movw	r24, r16
}
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	ff 90       	pop	r15
  e8:	ef 90       	pop	r14
  ea:	df 90       	pop	r13
  ec:	cf 90       	pop	r12
  ee:	bf 90       	pop	r11
  f0:	af 90       	pop	r10
  f2:	9f 90       	pop	r9
  f4:	8f 90       	pop	r8
  f6:	7f 90       	pop	r7
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  f8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_t6963_128x64_fn>

u8g_dev_t6963_240x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000810  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001749  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_t6963_240x128_fn 00000102  00000000  00000000  00001f8d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_t6963_240x128_8bit 00000006  00000000  00000000  0000208f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_t6963_240x128_2x_bw_pb 00000008  00000000  00000000  00002095  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_t6963_240x128_2x_bw_buf 000001e0  00000000  00000000  0000209d  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_t6963_240x128_init_seq 00000049  00000000  00000000  0000209d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_t6963_240x128_fn:

00000000 <u8g_dev_t6963_240x128_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_t6963_240x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_t6963_240x128_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_t6963_240x128_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03

        
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	fe e1       	ldi	r31, 0x1E	; 30
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	88 1a       	sub	r8, r24
  5a:	8e ef       	ldi	r24, 0xFE	; 254
  5c:	98 0a       	sbc	r9, r24
  5e:	ce 18       	sub	r12, r14
  60:	df 08       	sbc	r13, r15
  62:	00 c0       	rjmp	.+0      	; 0x64 <u8g_dev_t6963_240x128_fn+0x64>
uint8_t u8g_dev_t6963_240x128_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);    
  64:	4f ef       	ldi	r20, 0xFF	; 255
  66:	c8 01       	movw	r24, r16
  68:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_t6963_240x128_init_seq);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	be 01       	movw	r22, r28
  72:	c8 01       	movw	r24, r16
  74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
      break;
  78:	00 c0       	rjmp	.+0      	; 0x7a <u8g_dev_t6963_240x128_fn+0x7a>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	be 01       	movw	r22, r28
  7e:	c8 01       	movw	r24, r16
  80:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr&255 );      /* address low byte */
  84:	4e 2d       	mov	r20, r14
  86:	be 01       	movw	r22, r28
  88:	c8 01       	movw	r24, r16
  8a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr>>8 );      /* address hight byte */
  8e:	4f 2d       	mov	r20, r15
  90:	be 01       	movw	r22, r28
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	be 01       	movw	r22, r28
  9c:	c8 01       	movw	r24, r16
  9e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
          u8g_WriteByte(u8g, dev, 0x024 );      /* set adr ptr */
  a2:	44 e2       	ldi	r20, 0x24	; 36
  a4:	be 01       	movw	r22, r28
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
  ac:	96 01       	movw	r18, r12
  ae:	2e 0d       	add	r18, r14
  b0:	3f 1d       	adc	r19, r15
	  
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
  b2:	4e e1       	ldi	r20, 0x1E	; 30
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  bc:	ee e1       	ldi	r30, 0x1E	; 30
  be:	ee 0e       	add	r14, r30
  c0:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
  c2:	e8 14       	cp	r14, r8
  c4:	f9 04       	cpc	r15, r9
  c6:	01 f4       	brne	.+0      	; 0xc8 <u8g_dev_t6963_240x128_fn+0xc8>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x128_fn>
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  dc:	95 01       	movw	r18, r10
  de:	47 2d       	mov	r20, r7
  e0:	be 01       	movw	r22, r28
  e2:	c8 01       	movw	r24, r16
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	df 90       	pop	r13
  f2:	cf 90       	pop	r12
  f4:	bf 90       	pop	r11
  f6:	af 90       	pop	r10
  f8:	9f 90       	pop	r9
  fa:	8f 90       	pop	r8
  fc:	7f 90       	pop	r7
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_t6963_240x128_fn>

u8g_dev_t6963_240x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000810  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001742  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_t6963_240x64_fn 00000102  00000000  00000000  00001f86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_t6963_240x64_8bit 00000006  00000000  00000000  00002088  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_t6963_240x64_2x_bw_pb 00000008  00000000  00000000  0000208e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_t6963_240x64_2x_bw_buf 000001e0  00000000  00000000  00002096  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_t6963_240x64_init_seq 00000049  00000000  00000000  00002096  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  000020df  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_t6963_240x64_fn:

00000000 <u8g_dev_t6963_240x64_fn>:
  U8G_ESC_CS(0),             /* disable chip */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_t6963_240x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	8c 01       	movw	r16, r24
  1c:	eb 01       	movw	r28, r22
  1e:	74 2e       	mov	r7, r20
  20:	59 01       	movw	r10, r18
  switch(msg)
  22:	8a e0       	ldi	r24, 0x0A	; 10
  24:	48 17       	cp	r20, r24
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_t6963_240x64_fn+0x28>
  28:	e5 e1       	ldi	r30, 0x15	; 21
  2a:	4e 13       	cpse	r20, r30
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_t6963_240x64_fn+0x2e>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        uint8_t y, i;
        uint16_t disp_ram_adr;
        uint8_t *ptr;
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  2e:	ca 80       	ldd	r12, Y+2	; 0x02
  30:	db 80       	ldd	r13, Y+3	; 0x03

        
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  32:	40 e0       	ldi	r20, 0x00	; 0
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  3a:	41 e0       	ldi	r20, 0x01	; 1
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
        y = pb->p.page_y0;
  44:	f6 01       	movw	r30, r12
  46:	e2 80       	ldd	r14, Z+2	; 0x02
        ptr = pb->buf;
  48:	c6 80       	ldd	r12, Z+6	; 0x06
  4a:	d7 80       	ldd	r13, Z+7	; 0x07
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
  4c:	fe e1       	ldi	r31, 0x1E	; 30
  4e:	ef 9e       	mul	r14, r31
  50:	70 01       	movw	r14, r0
  52:	11 24       	eor	r1, r1
  54:	47 01       	movw	r8, r14
  56:	80 e2       	ldi	r24, 0x20	; 32
  58:	88 1a       	sub	r8, r24
  5a:	8e ef       	ldi	r24, 0xFE	; 254
  5c:	98 0a       	sbc	r9, r24
  5e:	ce 18       	sub	r12, r14
  60:	df 08       	sbc	r13, r15
  62:	00 c0       	rjmp	.+0      	; 0x64 <u8g_dev_t6963_240x64_fn+0x64>
uint8_t u8g_dev_t6963_240x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_NONE);    
  64:	4f ef       	ldi	r20, 0xFF	; 255
  66:	c8 01       	movw	r24, r16
  68:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_t6963_240x64_init_seq);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	be 01       	movw	r22, r28
  72:	c8 01       	movw	r24, r16
  74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
      break;
  78:	00 c0       	rjmp	.+0      	; 0x7a <u8g_dev_t6963_240x64_fn+0x7a>
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
        {
          u8g_SetAddress(u8g, dev, 0);           /* data mode */
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	be 01       	movw	r22, r28
  7e:	c8 01       	movw	r24, r16
  80:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr&255 );      /* address low byte */
  84:	4e 2d       	mov	r20, r14
  86:	be 01       	movw	r22, r28
  88:	c8 01       	movw	r24, r16
  8a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
          u8g_WriteByte(u8g, dev, disp_ram_adr>>8 );      /* address hight byte */
  8e:	4f 2d       	mov	r20, r15
  90:	be 01       	movw	r22, r28
  92:	c8 01       	movw	r24, r16
  94:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
          u8g_SetAddress(u8g, dev, 1);           /* cmd mode */
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	be 01       	movw	r22, r28
  9c:	c8 01       	movw	r24, r16
  9e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
          u8g_WriteByte(u8g, dev, 0x024 );      /* set adr ptr */
  a2:	44 e2       	ldi	r20, 0x24	; 36
  a4:	be 01       	movw	r22, r28
  a6:	c8 01       	movw	r24, r16
  a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
  ac:	96 01       	movw	r18, r12
  ae:	2e 0d       	add	r18, r14
  b0:	3f 1d       	adc	r19, r15
	  
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
  b2:	4e e1       	ldi	r20, 0x1E	; 30
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
  bc:	ee e1       	ldi	r30, 0x1E	; 30
  be:	ee 0e       	add	r14, r30
  c0:	f1 1c       	adc	r15, r1
        u8g_SetChipSelect(u8g, dev, 1);
        y = pb->p.page_y0;
        ptr = pb->buf;
        disp_ram_adr = WIDTH/8;
        disp_ram_adr *= y;
        for( i = 0; i < PAGE_HEIGHT; i ++ )
  c2:	e8 14       	cp	r14, r8
  c4:	f9 04       	cpc	r15, r9
  c6:	01 f4       	brne	.+0      	; 0xc8 <u8g_dev_t6963_240x64_fn+0xc8>
          u8g_WriteSequence(u8g, dev, WIDTH/8, ptr);	
	  
          ptr += WIDTH/8;
          disp_ram_adr += WIDTH/8;
        }
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	be 01       	movw	r22, r28
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	be 01       	movw	r22, r28
  d6:	c8 01       	movw	r24, r16
  d8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_t6963_240x64_fn>
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  dc:	95 01       	movw	r18, r10
  de:	47 2d       	mov	r20, r7
  e0:	be 01       	movw	r22, r28
  e2:	c8 01       	movw	r24, r16
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	df 90       	pop	r13
  f2:	cf 90       	pop	r12
  f4:	bf 90       	pop	r11
  f6:	af 90       	pop	r10
  f8:	9f 90       	pop	r9
  fa:	8f 90       	pop	r8
  fc:	7f 90       	pop	r7
	u8g_SetAddress(u8g, dev, 0);           /* data mode */
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
  }
  return u8g_dev_pb16h1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_t6963_240x64_fn>

u8g_dev_tls8204_84x48.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000081c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000172e  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_tls8204_fn 00000118  00000000  00000000  00001f7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_tls8204_84x48_sw_spi 00000006  00000000  00000000  00002096  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_tls8204_84x48_sw_spi_pb 00000008  00000000  00000000  0000209c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_tls8204_84x48_sw_spi_buf 00000054  00000000  00000000  000020a4  2**0
                  ALLOC
  9 .progmem.data.u8g_dev_tls8204_init_seq 00000020  00000000  00000000  000020a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .comment      00000022  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_tls8204_fn:

00000000 <u8g_dev_tls8204_fn>:
  U8G_ESC_END                /* end of sequence */
};


uint8_t u8g_dev_tls8204_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_tls8204_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_tls8204_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 17       	cp	r20, r30
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_tls8204_fn+0x28>
  28:	fa e0       	ldi	r31, 0x0A	; 10
  2a:	4f 13       	cpse	r20, r31
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_tls8204_fn+0x2e>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_400NS);
  2e:	43 e0       	ldi	r20, 0x03	; 3
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_tls8204_init_seq);
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	be 01       	movw	r22, r28
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      break;
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_dev_tls8204_fn+0x44>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	ca 80       	ldd	r12, Y+2	; 0x02
  46:	db 80       	ldd	r13, Y+3	; 0x03
        u8g_SetAddress(u8g, dev, 0);           /* command mode */
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_SetChipSelect(u8g, dev, 1);
  50:	41 e0       	ldi	r20, 0x01	; 1
  52:	be 01       	movw	r22, r28
  54:	c8 01       	movw	r24, r16
  56:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
  5a:	40 e2       	ldi	r20, 0x20	; 32
  5c:	be 01       	movw	r22, r28
  5e:	c8 01       	movw	r24, r16
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
  64:	40 e8       	ldi	r20, 0x80	; 128
  66:	be 01       	movw	r22, r28
  68:	c8 01       	movw	r24, r16
  6a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
  6e:	f6 01       	movw	r30, r12
  70:	44 81       	ldd	r20, Z+4	; 0x04
  72:	40 64       	ori	r20, 0x40	; 64
  74:	be 01       	movw	r22, r28
  76:	c8 01       	movw	r24, r16
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	be 01       	movw	r22, r28
  80:	c8 01       	movw	r24, r16
  82:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  86:	ae 01       	movw	r20, r28
  88:	b8 01       	movw	r22, r16
  8a:	c6 01       	movw	r24, r12
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
  90:	88 23       	and	r24, r24
  92:	01 f0       	breq	.+0      	; 0x94 <u8g_dev_tls8204_fn+0x94>
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      }
      break;
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <u8g_dev_tls8204_fn+0xa0>
    case U8G_DEV_MSG_CONTRAST:
      /* the contrast adjustment does not work, needs to be analysed */
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	c8 01       	movw	r24, r16
  a4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_SetChipSelect(u8g, dev, 1);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	be 01       	movw	r22, r28
  ac:	c8 01       	movw	r24, r16
  ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_WriteByte(u8g, dev, 0x021);        /* command mode, extended function set */
  b2:	41 e2       	ldi	r20, 0x21	; 33
  b4:	be 01       	movw	r22, r28
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
  bc:	f7 01       	movw	r30, r14
  be:	40 81       	ld	r20, Z
  c0:	46 95       	lsr	r20
  c2:	40 68       	ori	r20, 0x80	; 128
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_WriteByte(u8g, dev, 0x020);        /* command mode, extended function set */
  cc:	40 e2       	ldi	r20, 0x20	; 32
  ce:	be 01       	movw	r22, r28
  d0:	c8 01       	movw	r24, r16
  d2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      u8g_SetChipSelect(u8g, dev, 0);
  d6:	40 e0       	ldi	r20, 0x00	; 0
  d8:	be 01       	movw	r22, r28
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_tls8204_fn>
      return 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_tls8204_fn+0xe4>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
      u8g_WriteByte(u8g, dev, 0x080 | ( (*(uint8_t *)arg) >> 1 ) );
      u8g_WriteByte(u8g, dev, 0x020);        /* command mode, extended function set */
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_tls8204_fn>
        u8g_WriteByte(u8g, dev, 0x020 );		/* activate chip (PD=0), horizontal increment (V=0), enter normal command set (H=0) */
        u8g_WriteByte(u8g, dev, 0x080 );                        /* set X address */
        u8g_WriteByte(u8g, dev, 0x040 | pb->p.page); /* set Y address */
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
          return 0;
 102:	80 e0       	ldi	r24, 0x00	; 0
      u8g_WriteByte(u8g, dev, 0x020);        /* command mode, extended function set */
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

u8g_dev_uc1601_c128032.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000196a  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1601_c128032_fn 00000118  00000000  00000000  000023fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_uc1601_c128032_2x_fn 00000162  00000000  00000000  00002512  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_uc1601_c128032_2x_hw_spi 00000006  00000000  00000000  00002674  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_uc1601_c128032_2x_sw_spi 00000006  00000000  00000000  0000267a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_uc1601_c128032_2x_pb 00000008  00000000  00000000  00002680  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_uc1601_c128032_2x_buf 00000100  00000000  00000000  00002688  2**0
                  ALLOC
 11 .data.u8g_dev_uc1601_c128032_hw_spi 00000006  00000000  00000000  00002688  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1601_c128032_hw_spi_pb 00000008  00000000  00000000  0000268e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1601_c128032_hw_spi_buf 00000080  00000000  00000000  00002696  2**0
                  ALLOC
 14 .data.u8g_dev_uc1601_c128032_sw_spi 00000006  00000000  00000000  00002696  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1601_c128032_sw_spi_pb 00000008  00000000  00000000  0000269c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_uc1601_c128032_sw_spi_buf 00000080  00000000  00000000  000026a4  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_uc1601_c128032_sleep_off 0000000c  00000000  00000000  000026a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_uc1601_c128032_sleep_on 0000000c  00000000  00000000  000026b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_uc1601_c128032_data_start 00000008  00000000  00000000  000026bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.data.u8g_dev_uc1601_c128032_init_seq 0000001f  00000000  00000000  000026c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .comment      00000022  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1601_c128032_fn:

00000000 <u8g_dev_uc1601_c128032_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1601_c128032_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	80 e1       	ldi	r24, 0x10	; 16
  1c:	48 17       	cp	r20, r24
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_uc1601_c128032_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_uc1601_c128032_fn+0x22>
  22:	84 17       	cp	r24, r20
  24:	00 f0       	brcs	.+0      	; 0x26 <u8g_dev_uc1601_c128032_fn+0x26>
  26:	ea e0       	ldi	r30, 0x0A	; 10
  28:	4e 17       	cp	r20, r30
  2a:	01 f0       	breq	.+0      	; 0x2c <u8g_dev_uc1601_c128032_fn+0x2c>
  2c:	ff e0       	ldi	r31, 0x0F	; 15
  2e:	4f 13       	cpse	r20, r31
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_uc1601_c128032_fn+0x32>
  32:	41 e0       	ldi	r20, 0x01	; 1
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  34:	c8 01       	movw	r24, r16
  36:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  3a:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  3c:	be 01       	movw	r22, r28
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  44:	41 e8       	ldi	r20, 0x81	; 129
      u8g_WriteByte(u8g, dev, 0x081);
  46:	be 01       	movw	r22, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  4e:	f7 01       	movw	r30, r14
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
  50:	40 81       	ld	r20, Z
  52:	46 95       	lsr	r20
  54:	46 95       	lsr	r20
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  5e:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetChipSelect(u8g, dev, 0);      
  60:	be 01       	movw	r22, r28
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_uc1601_c128032_fn+0x6a>
      return 1;
  6a:	81 e1       	ldi	r24, 0x11	; 17
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1601_c128032_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  6c:	48 17       	cp	r20, r24
  6e:	01 f0       	breq	.+0      	; 0x70 <u8g_dev_uc1601_c128032_fn+0x70>
  70:	e5 e1       	ldi	r30, 0x15	; 21
  72:	4e 17       	cp	r20, r30
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_uc1601_c128032_fn+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_dev_uc1601_c128032_fn+0x78>
  78:	42 e0       	ldi	r20, 0x02	; 2
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  7a:	c8 01       	movw	r24, r16
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_data_start);    
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	be 01       	movw	r22, r28
  86:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (UC1601) */
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_dev_uc1601_c128032_fn+0x8e>
  8e:	ca 80       	ldd	r12, Y+2	; 0x02
  90:	db 80       	ldd	r13, Y+3	; 0x03
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	50 e0       	ldi	r21, 0x00	; 0
  96:	c8 01       	movw	r24, r16
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  9c:	f6 01       	movw	r30, r12
  9e:	44 81       	ldd	r20, Z+4	; 0x04
  a0:	40 6b       	ori	r20, 0xB0	; 176
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
        u8g_SetChipSelect(u8g, dev, 0);
  b4:	ae 01       	movw	r20, r28
  b6:	b8 01       	movw	r22, r16
  b8:	c6 01       	movw	r24, r12
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_data_start);    
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <u8g_dev_uc1601_c128032_fn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	be 01       	movw	r22, r28
  c6:	c8 01       	movw	r24, r16
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (UC1601) */
  c8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_uc1601_c128032_fn+0xce>
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <u8g_dev_uc1601_c128032_fn+0xd4>
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  da:	c8 01       	movw	r24, r16
  dc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <u8g_dev_uc1601_c128032_fn+0xe4>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  e4:	97 01       	movw	r18, r14
  e6:	4b 2d       	mov	r20, r11
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
        u8g_SetChipSelect(u8g, dev, 0);
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	bf 90       	pop	r11
  fe:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1601_c128032_fn>
      }
      break;
 102:	80 e0       	ldi	r24, 0x00	; 0
uint8_t u8g_dev_uc1601_c128032_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_init_seq);
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1601_c128032_2x_fn:

00000118 <u8g_dev_uc1601_c128032_2x_fn>:
      break;
 118:	bf 92       	push	r11
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_sleep_on);    
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_sleep_off);    
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
      return 1;
 12c:	eb 01       	movw	r28, r22
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 12e:	b4 2e       	mov	r11, r20
 130:	69 01       	movw	r12, r18
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	48 17       	cp	r20, r24
}
 136:	01 f4       	brne	.+0      	; 0x138 <u8g_dev_uc1601_c128032_2x_fn+0x20>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_uc1601_c128032_2x_fn+0x22>
 13a:	84 17       	cp	r24, r20
 13c:	00 f0       	brcs	.+0      	; 0x13e <u8g_dev_uc1601_c128032_2x_fn+0x26>
 13e:	ea e0       	ldi	r30, 0x0A	; 10
 140:	4e 17       	cp	r20, r30
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_uc1601_c128032_2x_fn+0x2c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_uc1601_c128032_2x_fn+0x2e>
 146:	ff e0       	ldi	r31, 0x0F	; 15
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1601_c128032_sleep_off);    
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
 148:	4f 13       	cpse	r20, r31
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_uc1601_c128032_2x_fn+0x34>
}
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 168:	f6 01       	movw	r30, r12
 16a:	40 81       	ld	r20, Z
 16c:	46 95       	lsr	r20
 16e:	46 95       	lsr	r20
 170:	be 01       	movw	r22, r28
 172:	c8 01       	movw	r24, r16
 174:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 182:	00 c0       	rjmp	.+0      	; 0x184 <u8g_dev_uc1601_c128032_2x_fn+0x6c>
 184:	81 e1       	ldi	r24, 0x11	; 17
 186:	48 17       	cp	r20, r24
 188:	01 f4       	brne	.+0      	; 0x18a <u8g_dev_uc1601_c128032_2x_fn+0x72>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <u8g_dev_uc1601_c128032_2x_fn+0x74>
 18c:	e5 e1       	ldi	r30, 0x15	; 21
 18e:	4e 13       	cpse	r20, r30
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_dev_uc1601_c128032_2x_fn+0x7a>
 192:	ea 80       	ldd	r14, Y+2	; 0x02
 194:	fb 80       	ldd	r15, Y+3	; 0x03
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	c8 01       	movw	r24, r16
 19c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a0:	f7 01       	movw	r30, r14
 1a2:	44 81       	ldd	r20, Z+4	; 0x04
 1a4:	44 0f       	add	r20, r20
 1a6:	40 6b       	ori	r20, 0xB0	; 176
 1a8:	be 01       	movw	r22, r28
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1b0:	41 e0       	ldi	r20, 0x01	; 1
 1b2:	be 01       	movw	r22, r28
 1b4:	c8 01       	movw	r24, r16
 1b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ba:	f7 01       	movw	r30, r14
 1bc:	26 81       	ldd	r18, Z+6	; 0x06
 1be:	37 81       	ldd	r19, Z+7	; 0x07
 1c0:	45 81       	ldd	r20, Z+5	; 0x05
 1c2:	be 01       	movw	r22, r28
 1c4:	c8 01       	movw	r24, r16
 1c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	be 01       	movw	r22, r28
 1ce:	c8 01       	movw	r24, r16
 1d0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	be 01       	movw	r22, r28
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1e0:	f7 01       	movw	r30, r14
 1e2:	44 81       	ldd	r20, Z+4	; 0x04
 1e4:	44 0f       	add	r20, r20
 1e6:	4f 5f       	subi	r20, 0xFF	; 255
 1e8:	40 6b       	ori	r20, 0xB0	; 176
 1ea:	be 01       	movw	r22, r28
 1ec:	c8 01       	movw	r24, r16
 1ee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1fc:	f7 01       	movw	r30, r14
 1fe:	45 81       	ldd	r20, Z+5	; 0x05
 200:	26 81       	ldd	r18, Z+6	; 0x06
 202:	37 81       	ldd	r19, Z+7	; 0x07
 204:	24 0f       	add	r18, r20
 206:	31 1d       	adc	r19, r1
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <u8g_dev_uc1601_c128032_2x_fn+0x104>
 21c:	42 e0       	ldi	r20, 0x02	; 2
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	be 01       	movw	r22, r28
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_dev_uc1601_c128032_2x_fn+0x11a>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	00 c0       	rjmp	.+0      	; 0x238 <u8g_dev_uc1601_c128032_2x_fn+0x120>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	50 e0       	ldi	r21, 0x00	; 0
 23c:	be 01       	movw	r22, r28
 23e:	c8 01       	movw	r24, r16
 240:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 244:	00 c0       	rjmp	.+0      	; 0x246 <u8g_dev_uc1601_c128032_2x_fn+0x12e>
 246:	96 01       	movw	r18, r12
 248:	4b 2d       	mov	r20, r11
 24a:	be 01       	movw	r22, r28
 24c:	c8 01       	movw	r24, r16
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	ff 90       	pop	r15
 258:	ef 90       	pop	r14
 25a:	df 90       	pop	r13
 25c:	cf 90       	pop	r12
 25e:	bf 90       	pop	r11
 260:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

u8g_dev_uc1608_240x128.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001905  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1608_240x128_fn 000000f0  00000000  00000000  00002311  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_uc1608_240x128_2x_fn 00000136  00000000  00000000  00002401  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_uc1608_240x128_2x_hw_spi 00000006  00000000  00000000  00002537  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_uc1608_240x128_2x_sw_spi 00000006  00000000  00000000  0000253d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_uc1608_240x128_2x_pb 00000008  00000000  00000000  00002543  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_uc1608_240x128_2x_buf 000001e0  00000000  00000000  0000254b  2**0
                  ALLOC
 11 .data.u8g_dev_uc1608_240x128_hw_spi 00000006  00000000  00000000  0000254b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1608_240x128_hw_spi_pb 00000008  00000000  00000000  00002551  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1608_240x128_hw_spi_buf 000000f0  00000000  00000000  00002559  2**0
                  ALLOC
 14 .data.u8g_dev_uc1608_240x128_sw_spi 00000006  00000000  00000000  00002559  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1608_240x128_sw_spi_pb 00000008  00000000  00000000  0000255f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_uc1608_240x128_sw_spi_buf 000000f0  00000000  00000000  00002567  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_uc1608_240x128_data_start 00000008  00000000  00000000  00002567  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_uc1608_240x128_init_seq 00000023  00000000  00000000  0000256f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      00000022  00000000  00000000  00002592  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1608_240x128_fn:

00000000 <u8g_dev_uc1608_240x128_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1608_240x128_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_uc1608_240x128_fn+0x20>
  20:	e5 e1       	ldi	r30, 0x15	; 21
  22:	4e 17       	cp	r20, r30
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_uc1608_240x128_fn+0x26>
  26:	fa e0       	ldi	r31, 0x0A	; 10
  28:	4f 13       	cpse	r20, r31
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_dev_uc1608_240x128_fn+0x2c>
  2c:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  34:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_init_seq);
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  40:	00 c0       	rjmp	.+0      	; 0x42 <u8g_dev_uc1608_240x128_fn+0x42>
      break;
  42:	ca 80       	ldd	r12, Y+2	; 0x02
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	db 80       	ldd	r13, Y+3	; 0x03
  46:	40 e0       	ldi	r20, 0x00	; 0

        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_data_start);
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  50:	f6 01       	movw	r30, r12
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  52:	44 81       	ldd	r20, Z+4	; 0x04
  54:	40 6b       	ori	r20, 0xB0	; 176
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  5e:	41 e0       	ldi	r20, 0x01	; 1
  60:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  68:	ae 01       	movw	r20, r28
  6a:	b8 01       	movw	r22, r16
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf);
  6c:	c6 01       	movw	r24, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_uc1608_240x128_fn+0x76>
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	be 01       	movw	r22, r28
  7a:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_dev_uc1608_240x128_fn+0x82>
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	c8 01       	movw	r24, r16

        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x128_data_start);
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	be 01       	movw	r22, r28
  8e:	c8 01       	movw	r24, r16
  90:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  94:	41 e8       	ldi	r20, 0x81	; 129
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  9e:	f7 01       	movw	r30, r14
  a0:	40 81       	ld	r20, Z
  a2:	46 95       	lsr	r20
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a4:	46 95       	lsr	r20
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	be 01       	movw	r22, r28
  b2:	c8 01       	movw	r24, r16
  b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	00 c0       	rjmp	.+0      	; 0xbc <u8g_dev_uc1608_240x128_fn+0xbc>
  bc:	97 01       	movw	r18, r14
  be:	4b 2d       	mov	r20, r11
  c0:	be 01       	movw	r22, r28
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	c8 01       	movw	r24, r16
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
}
  d4:	bf 90       	pop	r11
  d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1608_240x128_fn>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width);
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1608_240x128_2x_fn:

000000f0 <u8g_dev_uc1608_240x128_2x_fn>:
  f0:	bf 92       	push	r11
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
      u8g_WriteByte(u8g, dev, 0x081);
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
 104:	eb 01       	movw	r28, r22
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
 106:	b4 2e       	mov	r11, r20
 108:	69 01       	movw	r12, r18
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	48 17       	cp	r20, r24
 10e:	01 f4       	brne	.+0      	; 0x110 <u8g_dev_uc1608_240x128_2x_fn+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <u8g_dev_uc1608_240x128_2x_fn+0x22>
 112:	e5 e1       	ldi	r30, 0x15	; 21
 114:	4e 17       	cp	r20, r30
      u8g_SetChipSelect(u8g, dev, 0);
 116:	01 f0       	breq	.+0      	; 0x118 <u8g_dev_uc1608_240x128_2x_fn+0x28>
 118:	fa e0       	ldi	r31, 0x0A	; 10
 11a:	4f 13       	cpse	r20, r31
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_dev_uc1608_240x128_2x_fn+0x2e>
 11e:	42 e0       	ldi	r20, 0x02	; 2
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
 120:	c8 01       	movw	r24, r16
 122:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_uc1608_240x128_2x_fn+0x44>
 134:	ea 80       	ldd	r14, Y+2	; 0x02
 136:	fb 80       	ldd	r15, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 142:	f7 01       	movw	r30, r14
 144:	44 81       	ldd	r20, Z+4	; 0x04
 146:	44 0f       	add	r20, r20
 148:	40 6b       	ori	r20, 0xB0	; 176
 14a:	be 01       	movw	r22, r28
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	be 01       	movw	r22, r28
 156:	c8 01       	movw	r24, r16
 158:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 15c:	f7 01       	movw	r30, r14
 15e:	26 81       	ldd	r18, Z+6	; 0x06
 160:	37 81       	ldd	r19, Z+7	; 0x07
 162:	45 81       	ldd	r20, Z+5	; 0x05
 164:	be 01       	movw	r22, r28
 166:	c8 01       	movw	r24, r16
 168:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	be 01       	movw	r22, r28
 170:	c8 01       	movw	r24, r16
 172:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 182:	f7 01       	movw	r30, r14
 184:	44 81       	ldd	r20, Z+4	; 0x04
 186:	44 0f       	add	r20, r20
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	40 6b       	ori	r20, 0xB0	; 176
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 19e:	f7 01       	movw	r30, r14
 1a0:	45 81       	ldd	r20, Z+5	; 0x05
 1a2:	26 81       	ldd	r18, Z+6	; 0x06
 1a4:	37 81       	ldd	r19, Z+7	; 0x07
 1a6:	24 0f       	add	r18, r20
 1a8:	31 1d       	adc	r19, r1
 1aa:	be 01       	movw	r22, r28
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	be 01       	movw	r22, r28
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1bc:	96 01       	movw	r18, r12
 1be:	4b 2d       	mov	r20, r11
 1c0:	be 01       	movw	r22, r28
 1c2:	c8 01       	movw	r24, r16
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	be 01       	movw	r22, r28
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1ec:	41 e8       	ldi	r20, 0x81	; 129
 1ee:	be 01       	movw	r22, r28
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 1f6:	f6 01       	movw	r30, r12
 1f8:	40 81       	ld	r20, Z
 1fa:	46 95       	lsr	r20
 1fc:	46 95       	lsr	r20
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x128_hw_spi_buf>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	08 95       	ret

u8g_dev_uc1608_240x64.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018f5  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1608_240x64_fn 000000f0  00000000  00000000  00002301  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_uc1608_240x64_2x_fn 00000136  00000000  00000000  000023f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_uc1608_240x64_2x_hw_spi 00000006  00000000  00000000  00002527  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_uc1608_240x64_2x_sw_spi 00000006  00000000  00000000  0000252d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_uc1608_240x64_2x_pb 00000008  00000000  00000000  00002533  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_uc1608_240x64_2x_buf 000001e0  00000000  00000000  0000253b  2**0
                  ALLOC
 11 .data.u8g_dev_uc1608_240x64_hw_spi 00000006  00000000  00000000  0000253b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1608_240x64_hw_spi_pb 00000008  00000000  00000000  00002541  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1608_240x64_hw_spi_buf 000000f0  00000000  00000000  00002549  2**0
                  ALLOC
 14 .data.u8g_dev_uc1608_240x64_sw_spi 00000006  00000000  00000000  00002549  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1608_240x64_sw_spi_pb 00000008  00000000  00000000  0000254f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_uc1608_240x64_sw_spi_buf 000000f0  00000000  00000000  00002557  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_uc1608_240x64_data_start 00000008  00000000  00000000  00002557  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_uc1608_240x64_init_seq 00000022  00000000  00000000  0000255f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      00000022  00000000  00000000  00002581  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1608_240x64_fn:

00000000 <u8g_dev_uc1608_240x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1608_240x64_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_uc1608_240x64_fn+0x20>
  20:	e5 e1       	ldi	r30, 0x15	; 21
  22:	4e 17       	cp	r20, r30
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_uc1608_240x64_fn+0x26>
  26:	fa e0       	ldi	r31, 0x0A	; 10
  28:	4f 13       	cpse	r20, r31
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_dev_uc1608_240x64_fn+0x2c>
  2c:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  34:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x64_init_seq);
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  40:	00 c0       	rjmp	.+0      	; 0x42 <u8g_dev_uc1608_240x64_fn+0x42>
      break;
  42:	ca 80       	ldd	r12, Y+2	; 0x02
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	db 80       	ldd	r13, Y+3	; 0x03
  46:	40 e0       	ldi	r20, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x64_data_start);    
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  50:	f6 01       	movw	r30, r12
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  52:	44 81       	ldd	r20, Z+4	; 0x04
  54:	40 6b       	ori	r20, 0xB0	; 176
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  5e:	41 e0       	ldi	r20, 0x01	; 1
  60:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  68:	ae 01       	movw	r20, r28
  6a:	b8 01       	movw	r22, r16
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  6c:	c6 01       	movw	r24, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_uc1608_240x64_fn+0x76>
  76:	41 e0       	ldi	r20, 0x01	; 1
  78:	be 01       	movw	r22, r28
  7a:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_dev_uc1608_240x64_fn+0x82>
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	c8 01       	movw	r24, r16
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1608_240x64_data_start);    
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	be 01       	movw	r22, r28
  8e:	c8 01       	movw	r24, r16
  90:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  94:	41 e8       	ldi	r20, 0x81	; 129
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  9e:	f7 01       	movw	r30, r14
  a0:	40 81       	ld	r20, Z
  a2:	46 95       	lsr	r20
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a4:	46 95       	lsr	r20
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	be 01       	movw	r22, r28
  b2:	c8 01       	movw	r24, r16
  b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	00 c0       	rjmp	.+0      	; 0xbc <u8g_dev_uc1608_240x64_fn+0xbc>
  bc:	97 01       	movw	r18, r14
  be:	4b 2d       	mov	r20, r11
  c0:	be 01       	movw	r22, r28
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	c8 01       	movw	r24, r16
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
}
  d4:	bf 90       	pop	r11
  d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1608_240x64_fn>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1608_240x64_2x_fn:

000000f0 <u8g_dev_uc1608_240x64_2x_fn>:
  f0:	bf 92       	push	r11
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
      u8g_WriteByte(u8g, dev, 0x081);
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
 104:	eb 01       	movw	r28, r22
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
 106:	b4 2e       	mov	r11, r20
 108:	69 01       	movw	r12, r18
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	48 17       	cp	r20, r24
 10e:	01 f4       	brne	.+0      	; 0x110 <u8g_dev_uc1608_240x64_2x_fn+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <u8g_dev_uc1608_240x64_2x_fn+0x22>
 112:	e5 e1       	ldi	r30, 0x15	; 21
 114:	4e 17       	cp	r20, r30
      u8g_SetChipSelect(u8g, dev, 0);      
 116:	01 f0       	breq	.+0      	; 0x118 <u8g_dev_uc1608_240x64_2x_fn+0x28>
 118:	fa e0       	ldi	r31, 0x0A	; 10
 11a:	4f 13       	cpse	r20, r31
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_dev_uc1608_240x64_2x_fn+0x2e>
 11e:	42 e0       	ldi	r20, 0x02	; 2
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
 120:	c8 01       	movw	r24, r16
 122:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_uc1608_240x64_2x_fn+0x44>
 134:	ea 80       	ldd	r14, Y+2	; 0x02
 136:	fb 80       	ldd	r15, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 142:	f7 01       	movw	r30, r14
 144:	44 81       	ldd	r20, Z+4	; 0x04
 146:	44 0f       	add	r20, r20
 148:	40 6b       	ori	r20, 0xB0	; 176
 14a:	be 01       	movw	r22, r28
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	be 01       	movw	r22, r28
 156:	c8 01       	movw	r24, r16
 158:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 15c:	f7 01       	movw	r30, r14
 15e:	26 81       	ldd	r18, Z+6	; 0x06
 160:	37 81       	ldd	r19, Z+7	; 0x07
 162:	45 81       	ldd	r20, Z+5	; 0x05
 164:	be 01       	movw	r22, r28
 166:	c8 01       	movw	r24, r16
 168:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	be 01       	movw	r22, r28
 170:	c8 01       	movw	r24, r16
 172:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 182:	f7 01       	movw	r30, r14
 184:	44 81       	ldd	r20, Z+4	; 0x04
 186:	44 0f       	add	r20, r20
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	40 6b       	ori	r20, 0xB0	; 176
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 19e:	f7 01       	movw	r30, r14
 1a0:	45 81       	ldd	r20, Z+5	; 0x05
 1a2:	26 81       	ldd	r18, Z+6	; 0x06
 1a4:	37 81       	ldd	r19, Z+7	; 0x07
 1a6:	24 0f       	add	r18, r20
 1a8:	31 1d       	adc	r19, r1
 1aa:	be 01       	movw	r22, r28
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	be 01       	movw	r22, r28
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1bc:	96 01       	movw	r18, r12
 1be:	4b 2d       	mov	r20, r11
 1c0:	be 01       	movw	r22, r28
 1c2:	c8 01       	movw	r24, r16
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	be 01       	movw	r22, r28
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1ec:	41 e8       	ldi	r20, 0x81	; 129
 1ee:	be 01       	movw	r22, r28
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 1f6:	f6 01       	movw	r30, r12
 1f8:	40 81       	ld	r20, Z
 1fa:	46 95       	lsr	r20
 1fc:	46 95       	lsr	r20
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1608_240x64_hw_spi_buf>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	08 95       	ret

u8g_dev_uc1610_dogxl160.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000f24  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001bdc  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_1to2 00000022  00000000  00000000  00002b34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_dev_uc1610_dogxl160_bw_fn 00000178  00000000  00000000  00002b56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_uc1610_dogxl160_gr_fn 000000ee  00000000  00000000  00002cce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_dev_uc1610_dogxl160_2x_bw_fn 00000240  00000000  00000000  00002dbc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_uc1610_dogxl160_2x_gr_fn 0000013a  00000000  00000000  00002ffc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .data.u8g_dev_uc1610_dogxl160_2x_gr_hw_spi 00000006  00000000  00000000  00003136  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .data.u8g_dev_uc1610_dogxl160_2x_gr_sw_spi 00000006  00000000  00000000  0000313c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1610_dogxl160_2x_gr_pb 00000008  00000000  00000000  00003142  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1610_dogxl160_2x_gr_buf 00000140  00000000  00000000  0000314a  2**0
                  ALLOC
 14 .data.u8g_dev_uc1610_dogxl160_2x_bw_hw_spi 00000006  00000000  00000000  0000314a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1610_dogxl160_2x_bw_sw_spi 00000006  00000000  00000000  00003150  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_uc1610_dogxl160_2x_bw_pb 00000008  00000000  00000000  00003156  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_uc1610_dogxl160_2x_bw_buf 00000140  00000000  00000000  0000315e  2**0
                  ALLOC
 18 .data.u8g_dev_uc1610_dogxl160_gr_hw_spi 00000006  00000000  00000000  0000315e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 19 .data.u8g_dev_uc1610_dogxl160_gr_hw_spi_pb 00000008  00000000  00000000  00003164  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 20 .bss.u8g_dev_uc1610_dogxl160_gr_hw_spi_buf 000000a0  00000000  00000000  0000316c  2**0
                  ALLOC
 21 .data.u8g_dev_uc1610_dogxl160_gr_sw_spi 00000006  00000000  00000000  0000316c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 22 .data.u8g_dev_uc1610_dogxl160_gr_sw_spi_pb 00000008  00000000  00000000  00003172  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 23 .bss.u8g_dev_uc1610_dogxl160_gr_sw_spi_buf 000000a0  00000000  00000000  0000317a  2**0
                  ALLOC
 24 .data.u8g_dev_uc1610_dogxl160_bw_hw_spi 00000006  00000000  00000000  0000317a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 25 .data.u8g_dev_uc1610_dogxl160_bw_hw_spi_pb 00000008  00000000  00000000  00003180  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 26 .bss.u8g_dev_uc1610_dogxl160_bw_hw_spi_buf 000000a0  00000000  00000000  00003188  2**0
                  ALLOC
 27 .data.u8g_dev_uc1610_dogxl160_bw_sw_spi 00000006  00000000  00000000  00003188  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 28 .data.u8g_dev_uc1610_dogxl160_bw_sw_spi_pb 00000008  00000000  00000000  0000318e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 29 .bss.u8g_dev_uc1610_dogxl160_bw_sw_spi_buf 000000a0  00000000  00000000  00003196  2**0
                  ALLOC
 30 .progmem.data.u8g_dev_uc1610_dogxl160_data_start 00000008  00000000  00000000  00003196  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 31 .progmem.data.u8g_dev_uc1610_dogxl160_init_seq 00000021  00000000  00000000  0000319e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .comment      00000022  00000000  00000000  000031bf  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_1to2:

00000000 <u8g_dev_1to2>:
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1610_dogxl160_2x_gr_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	38 2f       	mov	r19, r24
   2:	31 70       	andi	r19, 0x01	; 1
   4:	88 0f       	add	r24, r24
   6:	98 2f       	mov	r25, r24
   8:	94 70       	andi	r25, 0x04	; 4
   a:	88 0f       	add	r24, r24
   c:	28 2f       	mov	r18, r24
   e:	20 71       	andi	r18, 0x10	; 16
  10:	88 0f       	add	r24, r24
  12:	80 74       	andi	r24, 0x40	; 64
  14:	93 2b       	or	r25, r19
  16:	92 2b       	or	r25, r18
  18:	98 2b       	or	r25, r24
  switch(msg)
  1a:	89 2f       	mov	r24, r25
  1c:	88 0f       	add	r24, r24
  1e:	89 2b       	or	r24, r25
  20:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1610_dogxl160_bw_fn:

00000022 <u8g_dev_uc1610_dogxl160_bw_fn>:
  22:	9f 92       	push	r9
  24:	af 92       	push	r10
  26:	bf 92       	push	r11
  28:	cf 92       	push	r12
  2a:	df 92       	push	r13
  2c:	ef 92       	push	r14
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	ff 92       	push	r15
  30:	0f 93       	push	r16
  32:	1f 93       	push	r17
  34:	cf 93       	push	r28
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_init_seq);
  36:	df 93       	push	r29
  38:	8c 01       	movw	r16, r24
  3a:	eb 01       	movw	r28, r22
  3c:	94 2e       	mov	r9, r20
  3e:	59 01       	movw	r10, r18
  40:	8f e0       	ldi	r24, 0x0F	; 15
      break;
  42:	48 17       	cp	r20, r24
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	01 f4       	brne	.+0      	; 0x46 <u8g_dev_uc1610_dogxl160_bw_fn+0x24>
  46:	00 c0       	rjmp	.+0      	; 0x48 <u8g_dev_uc1610_dogxl160_bw_fn+0x26>
        
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
  48:	a5 e1       	ldi	r26, 0x15	; 21
  4a:	4a 17       	cp	r20, r26
  4c:	01 f0       	breq	.+0      	; 0x4e <u8g_dev_uc1610_dogxl160_bw_fn+0x2c>
  4e:	ba e0       	ldi	r27, 0x0A	; 10
  50:	4b 13       	cpse	r20, r27
        u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2) ); /* select current page (UC1610) */
  52:	00 c0       	rjmp	.+0      	; 0x54 <u8g_dev_uc1610_dogxl160_bw_fn+0x32>
  54:	42 e0       	ldi	r20, 0x02	; 2
  56:	c8 01       	movw	r24, r16
  58:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  68:	00 c0       	rjmp	.+0      	; 0x6a <u8g_dev_uc1610_dogxl160_bw_fn+0x48>
  6a:	ea 80       	ldd	r14, Y+2	; 0x02
        if ( u8g_WriteSequence(u8g, dev, WIDTH, pb->buf) == 0 )
  6c:	fb 80       	ldd	r15, Y+3	; 0x03
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	50 e0       	ldi	r21, 0x00	; 0
  72:	c8 01       	movw	r24, r16
  74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  78:	f7 01       	movw	r30, r14
  7a:	44 81       	ldd	r20, Z+4	; 0x04
  7c:	44 0f       	add	r20, r20
  7e:	40 66       	ori	r20, 0x60	; 96
          return 0;
  80:	be 01       	movw	r22, r28
  82:	c8 01       	movw	r24, r16

        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1610_dogxl160_data_start);    
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  88:	41 e0       	ldi	r20, 0x01	; 1
  8a:	be 01       	movw	r22, r28
  8c:	c8 01       	movw	r24, r16
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
        u8g_WriteByte(u8g, dev, 0x060 | (pb->p.page*2+1) ); /* select current page (UC1610) */
  92:	c1 2c       	mov	r12, r1
  94:	d1 2c       	mov	r13, r1
  96:	d7 01       	movw	r26, r14
  98:	16 96       	adiw	r26, 0x06	; 6
  9a:	ed 91       	ld	r30, X+
  9c:	fc 91       	ld	r31, X
  9e:	17 97       	sbiw	r26, 0x07	; 7
  a0:	ec 0d       	add	r30, r12
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a2:	fd 1d       	adc	r31, r13
  a4:	80 81       	ld	r24, Z
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  aa:	48 2f       	mov	r20, r24
        if ( u8g_WriteSequence(u8g, dev, WIDTH, (uint8_t *)(pb->buf)+WIDTH) == 0 )
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  b4:	bf ef       	ldi	r27, 0xFF	; 255
  b6:	cb 1a       	sub	r12, r27
  b8:	db 0a       	sbc	r13, r27
  ba:	e0 ea       	ldi	r30, 0xA0	; 160
  bc:	ce 16       	cp	r12, r30
  be:	d1 04       	cpc	r13, r1
  c0:	01 f4       	brne	.+0      	; 0xc2 <u8g_dev_uc1610_dogxl160_bw_fn+0xa0>
  c2:	40 e0       	ldi	r20, 0x00	; 0
          return 0;
        
        u8g_SetChipSelect(u8g, dev, 0);
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	be 01       	movw	r22, r28
  c8:	c8 01       	movw	r24, r16
  ca:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
      }
      break;
  ce:	d7 01       	movw	r26, r14
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  d0:	14 96       	adiw	r26, 0x04	; 4
  d2:	4c 91       	ld	r20, X
  d4:	44 0f       	add	r20, r20
  d6:	4f 5f       	subi	r20, 0xFF	; 255
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  d8:	40 66       	ori	r20, 0x60	; 96
  da:	be 01       	movw	r22, r28
  dc:	c8 01       	movw	r24, r16
  de:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
      u8g_WriteByte(u8g, dev, 0x081);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	be 01       	movw	r22, r28
  e6:	c8 01       	movw	r24, r16
  e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
  ec:	c1 2c       	mov	r12, r1
  ee:	d1 2c       	mov	r13, r1
  f0:	d7 01       	movw	r26, r14
  f2:	16 96       	adiw	r26, 0x06	; 6
  f4:	ed 91       	ld	r30, X+
  f6:	fc 91       	ld	r31, X
  f8:	17 97       	sbiw	r26, 0x07	; 7
      u8g_SetChipSelect(u8g, dev, 0);      
  fa:	ec 0d       	add	r30, r12
  fc:	fd 1d       	adc	r31, r13
  fe:	80 81       	ld	r24, Z
 100:	82 95       	swap	r24
 102:	8f 70       	andi	r24, 0x0F	; 15
      return 1;
 104:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
  }
  return u8g_dev_pb16v2_base_fn(u8g, dev, msg, arg);
 108:	48 2f       	mov	r20, r24
 10a:	be 01       	movw	r22, r28
 10c:	c8 01       	movw	r24, r16
 10e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
}
 112:	bf ef       	ldi	r27, 0xFF	; 255
 114:	cb 1a       	sub	r12, r27
 116:	db 0a       	sbc	r13, r27
 118:	e0 ea       	ldi	r30, 0xA0	; 160
 11a:	ce 16       	cp	r12, r30
 11c:	d1 04       	cpc	r13, r1
 11e:	01 f4       	brne	.+0      	; 0x120 <u8g_dev_uc1610_dogxl160_bw_fn+0xfe>
 120:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 1);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v2_base_fn(u8g, dev, msg, arg);
 122:	be 01       	movw	r22, r28
 124:	c8 01       	movw	r24, r16
}
 126:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 12a:	95 01       	movw	r18, r10
 12c:	49 2d       	mov	r20, r9
 12e:	be 01       	movw	r22, r28
 130:	c8 01       	movw	r24, r16
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	df 90       	pop	r13
 140:	cf 90       	pop	r12
 142:	bf 90       	pop	r11
 144:	af 90       	pop	r10
 146:	9f 90       	pop	r9
 148:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 14c:	41 e0       	ldi	r20, 0x01	; 1
 14e:	c8 01       	movw	r24, r16
 150:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	be 01       	movw	r22, r28
 158:	c8 01       	movw	r24, r16
 15a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 15e:	41 e8       	ldi	r20, 0x81	; 129
 160:	be 01       	movw	r22, r28
 162:	c8 01       	movw	r24, r16
 164:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 168:	d5 01       	movw	r26, r10
 16a:	4c 91       	ld	r20, X
 16c:	46 95       	lsr	r20
 16e:	be 01       	movw	r22, r28
 170:	c8 01       	movw	r24, r16
 172:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	be 01       	movw	r22, r28
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	ef 90       	pop	r14
 18e:	df 90       	pop	r13
 190:	cf 90       	pop	r12
 192:	bf 90       	pop	r11
 194:	af 90       	pop	r10
 196:	9f 90       	pop	r9
 198:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1610_dogxl160_gr_fn:

000001bc <u8g_dev_uc1610_dogxl160_gr_fn>:
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	8c 01       	movw	r16, r24
 1d0:	eb 01       	movw	r28, r22
 1d2:	b4 2e       	mov	r11, r20
 1d4:	79 01       	movw	r14, r18
 1d6:	8f e0       	ldi	r24, 0x0F	; 15
 1d8:	48 17       	cp	r20, r24
 1da:	01 f0       	breq	.+0      	; 0x1dc <u8g_dev_uc1610_dogxl160_gr_fn+0x20>
 1dc:	e5 e1       	ldi	r30, 0x15	; 21
 1de:	4e 17       	cp	r20, r30
 1e0:	01 f0       	breq	.+0      	; 0x1e2 <u8g_dev_uc1610_dogxl160_gr_fn+0x26>
 1e2:	fa e0       	ldi	r31, 0x0A	; 10
 1e4:	4f 13       	cpse	r20, r31
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <u8g_dev_uc1610_dogxl160_gr_fn+0x2c>
 1e8:	42 e0       	ldi	r20, 0x02	; 2
 1ea:	c8 01       	movw	r24, r16
 1ec:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	be 01       	movw	r22, r28
 1f6:	c8 01       	movw	r24, r16
 1f8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <u8g_dev_uc1610_dogxl160_gr_fn+0x42>
 1fe:	ca 80       	ldd	r12, Y+2	; 0x02
 200:	db 80       	ldd	r13, Y+3	; 0x03
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	c8 01       	movw	r24, r16
 208:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 20c:	f6 01       	movw	r30, r12
 20e:	44 81       	ldd	r20, Z+4	; 0x04
 210:	40 66       	ori	r20, 0x60	; 96
 212:	be 01       	movw	r22, r28
 214:	c8 01       	movw	r24, r16
 216:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	be 01       	movw	r22, r28
 21e:	c8 01       	movw	r24, r16
 220:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 224:	ae 01       	movw	r20, r28
 226:	b8 01       	movw	r22, r16
 228:	c6 01       	movw	r24, r12
 22a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 22e:	88 23       	and	r24, r24
 230:	01 f0       	breq	.+0      	; 0x232 <u8g_dev_uc1610_dogxl160_gr_fn+0x76>
 232:	40 e0       	ldi	r20, 0x00	; 0
 234:	be 01       	movw	r22, r28
 236:	c8 01       	movw	r24, r16
 238:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <u8g_dev_uc1610_dogxl160_gr_fn+0x82>
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	c8 01       	movw	r24, r16
 242:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	be 01       	movw	r22, r28
 24a:	c8 01       	movw	r24, r16
 24c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 250:	41 e8       	ldi	r20, 0x81	; 129
 252:	be 01       	movw	r22, r28
 254:	c8 01       	movw	r24, r16
 256:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 25a:	f7 01       	movw	r30, r14
 25c:	40 81       	ld	r20, Z
 25e:	46 95       	lsr	r20
 260:	be 01       	movw	r22, r28
 262:	c8 01       	movw	r24, r16
 264:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	be 01       	movw	r22, r28
 26c:	c8 01       	movw	r24, r16
 26e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	00 c0       	rjmp	.+0      	; 0x276 <u8g_dev_uc1610_dogxl160_gr_fn+0xba>
 276:	97 01       	movw	r18, r14
 278:	4b 2d       	mov	r20, r11
 27a:	be 01       	movw	r22, r28
 27c:	c8 01       	movw	r24, r16
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	ff 90       	pop	r15
 288:	ef 90       	pop	r14
 28a:	df 90       	pop	r13
 28c:	cf 90       	pop	r12
 28e:	bf 90       	pop	r11
 290:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	ff 90       	pop	r15
 2a0:	ef 90       	pop	r14
 2a2:	df 90       	pop	r13
 2a4:	cf 90       	pop	r12
 2a6:	bf 90       	pop	r11
 2a8:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1610_dogxl160_2x_bw_fn:

00000466 <u8g_dev_uc1610_dogxl160_2x_bw_fn>:
 466:	9f 92       	push	r9
 468:	af 92       	push	r10
 46a:	bf 92       	push	r11
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ef 92       	push	r14
 472:	ff 92       	push	r15
 474:	0f 93       	push	r16
 476:	1f 93       	push	r17
 478:	cf 93       	push	r28
 47a:	df 93       	push	r29
 47c:	8c 01       	movw	r16, r24
 47e:	eb 01       	movw	r28, r22
 480:	94 2e       	mov	r9, r20
 482:	59 01       	movw	r10, r18
 484:	8f e0       	ldi	r24, 0x0F	; 15
 486:	48 17       	cp	r20, r24
 488:	01 f4       	brne	.+0      	; 0x48a <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x24>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x26>
 48c:	a5 e1       	ldi	r26, 0x15	; 21
 48e:	4a 17       	cp	r20, r26
 490:	01 f0       	breq	.+0      	; 0x492 <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x2c>
 492:	ba e0       	ldi	r27, 0x0A	; 10
 494:	4b 13       	cpse	r20, r27
 496:	00 c0       	rjmp	.+0      	; 0x498 <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x32>
 498:	42 e0       	ldi	r20, 0x02	; 2
 49a:	c8 01       	movw	r24, r16
 49c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	be 01       	movw	r22, r28
 4a6:	c8 01       	movw	r24, r16
 4a8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x48>
 4ae:	ea 80       	ldd	r14, Y+2	; 0x02
 4b0:	fb 80       	ldd	r15, Y+3	; 0x03
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	c8 01       	movw	r24, r16
 4b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4bc:	f7 01       	movw	r30, r14
 4be:	44 81       	ldd	r20, Z+4	; 0x04
 4c0:	44 0f       	add	r20, r20
 4c2:	44 0f       	add	r20, r20
 4c4:	40 66       	ori	r20, 0x60	; 96
 4c6:	be 01       	movw	r22, r28
 4c8:	c8 01       	movw	r24, r16
 4ca:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4ce:	41 e0       	ldi	r20, 0x01	; 1
 4d0:	be 01       	movw	r22, r28
 4d2:	c8 01       	movw	r24, r16
 4d4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4d8:	c1 2c       	mov	r12, r1
 4da:	d1 2c       	mov	r13, r1
 4dc:	d7 01       	movw	r26, r14
 4de:	16 96       	adiw	r26, 0x06	; 6
 4e0:	ed 91       	ld	r30, X+
 4e2:	fc 91       	ld	r31, X
 4e4:	17 97       	sbiw	r26, 0x07	; 7
 4e6:	ec 0d       	add	r30, r12
 4e8:	fd 1d       	adc	r31, r13
 4ea:	80 81       	ld	r24, Z
 4ec:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4f0:	48 2f       	mov	r20, r24
 4f2:	be 01       	movw	r22, r28
 4f4:	c8 01       	movw	r24, r16
 4f6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 4fa:	bf ef       	ldi	r27, 0xFF	; 255
 4fc:	cb 1a       	sub	r12, r27
 4fe:	db 0a       	sbc	r13, r27
 500:	e0 ea       	ldi	r30, 0xA0	; 160
 502:	ce 16       	cp	r12, r30
 504:	d1 04       	cpc	r13, r1
 506:	01 f4       	brne	.+0      	; 0x508 <u8g_dev_uc1610_dogxl160_2x_bw_fn+0xa2>
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	50 e0       	ldi	r21, 0x00	; 0
 50c:	be 01       	movw	r22, r28
 50e:	c8 01       	movw	r24, r16
 510:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 514:	d7 01       	movw	r26, r14
 516:	14 96       	adiw	r26, 0x04	; 4
 518:	4c 91       	ld	r20, X
 51a:	44 0f       	add	r20, r20
 51c:	44 0f       	add	r20, r20
 51e:	4f 5f       	subi	r20, 0xFF	; 255
 520:	40 66       	ori	r20, 0x60	; 96
 522:	be 01       	movw	r22, r28
 524:	c8 01       	movw	r24, r16
 526:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	be 01       	movw	r22, r28
 52e:	c8 01       	movw	r24, r16
 530:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 534:	c1 2c       	mov	r12, r1
 536:	d1 2c       	mov	r13, r1
 538:	d7 01       	movw	r26, r14
 53a:	16 96       	adiw	r26, 0x06	; 6
 53c:	ed 91       	ld	r30, X+
 53e:	fc 91       	ld	r31, X
 540:	17 97       	sbiw	r26, 0x07	; 7
 542:	ec 0d       	add	r30, r12
 544:	fd 1d       	adc	r31, r13
 546:	80 81       	ld	r24, Z
 548:	82 95       	swap	r24
 54a:	8f 70       	andi	r24, 0x0F	; 15
 54c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 550:	48 2f       	mov	r20, r24
 552:	be 01       	movw	r22, r28
 554:	c8 01       	movw	r24, r16
 556:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 55a:	bf ef       	ldi	r27, 0xFF	; 255
 55c:	cb 1a       	sub	r12, r27
 55e:	db 0a       	sbc	r13, r27
 560:	e0 ea       	ldi	r30, 0xA0	; 160
 562:	ce 16       	cp	r12, r30
 564:	d1 04       	cpc	r13, r1
 566:	01 f4       	brne	.+0      	; 0x568 <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x102>
 568:	40 e0       	ldi	r20, 0x00	; 0
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	be 01       	movw	r22, r28
 56e:	c8 01       	movw	r24, r16
 570:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 574:	d7 01       	movw	r26, r14
 576:	14 96       	adiw	r26, 0x04	; 4
 578:	4c 91       	ld	r20, X
 57a:	44 0f       	add	r20, r20
 57c:	44 0f       	add	r20, r20
 57e:	4e 5f       	subi	r20, 0xFE	; 254
 580:	40 66       	ori	r20, 0x60	; 96
 582:	be 01       	movw	r22, r28
 584:	c8 01       	movw	r24, r16
 586:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 58a:	41 e0       	ldi	r20, 0x01	; 1
 58c:	be 01       	movw	r22, r28
 58e:	c8 01       	movw	r24, r16
 590:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 594:	90 ea       	ldi	r25, 0xA0	; 160
 596:	c9 2e       	mov	r12, r25
 598:	d1 2c       	mov	r13, r1
 59a:	d7 01       	movw	r26, r14
 59c:	16 96       	adiw	r26, 0x06	; 6
 59e:	ed 91       	ld	r30, X+
 5a0:	fc 91       	ld	r31, X
 5a2:	17 97       	sbiw	r26, 0x07	; 7
 5a4:	ec 0d       	add	r30, r12
 5a6:	fd 1d       	adc	r31, r13
 5a8:	80 81       	ld	r24, Z
 5aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 5ae:	48 2f       	mov	r20, r24
 5b0:	be 01       	movw	r22, r28
 5b2:	c8 01       	movw	r24, r16
 5b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 5b8:	bf ef       	ldi	r27, 0xFF	; 255
 5ba:	cb 1a       	sub	r12, r27
 5bc:	db 0a       	sbc	r13, r27
 5be:	e0 e4       	ldi	r30, 0x40	; 64
 5c0:	ce 16       	cp	r12, r30
 5c2:	e1 e0       	ldi	r30, 0x01	; 1
 5c4:	de 06       	cpc	r13, r30
 5c6:	01 f4       	brne	.+0      	; 0x5c8 <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x162>
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	be 01       	movw	r22, r28
 5ce:	c8 01       	movw	r24, r16
 5d0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 5d4:	d7 01       	movw	r26, r14
 5d6:	14 96       	adiw	r26, 0x04	; 4
 5d8:	4c 91       	ld	r20, X
 5da:	44 0f       	add	r20, r20
 5dc:	44 0f       	add	r20, r20
 5de:	4d 5f       	subi	r20, 0xFD	; 253
 5e0:	40 66       	ori	r20, 0x60	; 96
 5e2:	be 01       	movw	r22, r28
 5e4:	c8 01       	movw	r24, r16
 5e6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 5ea:	41 e0       	ldi	r20, 0x01	; 1
 5ec:	be 01       	movw	r22, r28
 5ee:	c8 01       	movw	r24, r16
 5f0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 5f4:	80 ea       	ldi	r24, 0xA0	; 160
 5f6:	c8 2e       	mov	r12, r24
 5f8:	d1 2c       	mov	r13, r1
 5fa:	d7 01       	movw	r26, r14
 5fc:	16 96       	adiw	r26, 0x06	; 6
 5fe:	ed 91       	ld	r30, X+
 600:	fc 91       	ld	r31, X
 602:	17 97       	sbiw	r26, 0x07	; 7
 604:	ec 0d       	add	r30, r12
 606:	fd 1d       	adc	r31, r13
 608:	80 81       	ld	r24, Z
 60a:	82 95       	swap	r24
 60c:	8f 70       	andi	r24, 0x0F	; 15
 60e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 612:	48 2f       	mov	r20, r24
 614:	be 01       	movw	r22, r28
 616:	c8 01       	movw	r24, r16
 618:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 61c:	bf ef       	ldi	r27, 0xFF	; 255
 61e:	cb 1a       	sub	r12, r27
 620:	db 0a       	sbc	r13, r27
 622:	e0 e4       	ldi	r30, 0x40	; 64
 624:	ce 16       	cp	r12, r30
 626:	e1 e0       	ldi	r30, 0x01	; 1
 628:	de 06       	cpc	r13, r30
 62a:	01 f4       	brne	.+0      	; 0x62c <u8g_dev_uc1610_dogxl160_2x_bw_fn+0x1c6>
 62c:	40 e0       	ldi	r20, 0x00	; 0
 62e:	be 01       	movw	r22, r28
 630:	c8 01       	movw	r24, r16
 632:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 636:	95 01       	movw	r18, r10
 638:	49 2d       	mov	r20, r9
 63a:	be 01       	movw	r22, r28
 63c:	c8 01       	movw	r24, r16
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	bf 90       	pop	r11
 650:	af 90       	pop	r10
 652:	9f 90       	pop	r9
 654:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	c8 01       	movw	r24, r16
 65c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	be 01       	movw	r22, r28
 664:	c8 01       	movw	r24, r16
 666:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 66a:	41 e8       	ldi	r20, 0x81	; 129
 66c:	be 01       	movw	r22, r28
 66e:	c8 01       	movw	r24, r16
 670:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 674:	d5 01       	movw	r26, r10
 676:	4c 91       	ld	r20, X
 678:	46 95       	lsr	r20
 67a:	be 01       	movw	r22, r28
 67c:	c8 01       	movw	r24, r16
 67e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 682:	40 e0       	ldi	r20, 0x00	; 0
 684:	be 01       	movw	r22, r28
 686:	c8 01       	movw	r24, r16
 688:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	df 91       	pop	r29
 690:	cf 91       	pop	r28
 692:	1f 91       	pop	r17
 694:	0f 91       	pop	r16
 696:	ff 90       	pop	r15
 698:	ef 90       	pop	r14
 69a:	df 90       	pop	r13
 69c:	cf 90       	pop	r12
 69e:	bf 90       	pop	r11
 6a0:	af 90       	pop	r10
 6a2:	9f 90       	pop	r9
 6a4:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1610_dogxl160_2x_gr_fn:

00000b0c <u8g_dev_uc1610_dogxl160_2x_gr_fn>:
 b0c:	bf 92       	push	r11
 b0e:	cf 92       	push	r12
 b10:	df 92       	push	r13
 b12:	ef 92       	push	r14
 b14:	ff 92       	push	r15
 b16:	0f 93       	push	r16
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	8c 01       	movw	r16, r24
 b20:	eb 01       	movw	r28, r22
 b22:	b4 2e       	mov	r11, r20
 b24:	69 01       	movw	r12, r18
 b26:	8f e0       	ldi	r24, 0x0F	; 15
 b28:	48 17       	cp	r20, r24
 b2a:	01 f4       	brne	.+0      	; 0xb2c <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x20>
 b2c:	00 c0       	rjmp	.+0      	; 0xb2e <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x22>
 b2e:	e5 e1       	ldi	r30, 0x15	; 21
 b30:	4e 17       	cp	r20, r30
 b32:	01 f0       	breq	.+0      	; 0xb34 <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x28>
 b34:	fa e0       	ldi	r31, 0x0A	; 10
 b36:	4f 13       	cpse	r20, r31
 b38:	00 c0       	rjmp	.+0      	; 0xb3a <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x2e>
 b3a:	42 e0       	ldi	r20, 0x02	; 2
 b3c:	c8 01       	movw	r24, r16
 b3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b42:	40 e0       	ldi	r20, 0x00	; 0
 b44:	50 e0       	ldi	r21, 0x00	; 0
 b46:	be 01       	movw	r22, r28
 b48:	c8 01       	movw	r24, r16
 b4a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b4e:	00 c0       	rjmp	.+0      	; 0xb50 <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x44>
 b50:	ea 80       	ldd	r14, Y+2	; 0x02
 b52:	fb 80       	ldd	r15, Y+3	; 0x03
 b54:	40 e0       	ldi	r20, 0x00	; 0
 b56:	50 e0       	ldi	r21, 0x00	; 0
 b58:	c8 01       	movw	r24, r16
 b5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b5e:	f7 01       	movw	r30, r14
 b60:	44 81       	ldd	r20, Z+4	; 0x04
 b62:	44 0f       	add	r20, r20
 b64:	40 66       	ori	r20, 0x60	; 96
 b66:	be 01       	movw	r22, r28
 b68:	c8 01       	movw	r24, r16
 b6a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b6e:	41 e0       	ldi	r20, 0x01	; 1
 b70:	be 01       	movw	r22, r28
 b72:	c8 01       	movw	r24, r16
 b74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b78:	f7 01       	movw	r30, r14
 b7a:	26 81       	ldd	r18, Z+6	; 0x06
 b7c:	37 81       	ldd	r19, Z+7	; 0x07
 b7e:	40 ea       	ldi	r20, 0xA0	; 160
 b80:	be 01       	movw	r22, r28
 b82:	c8 01       	movw	r24, r16
 b84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b88:	81 11       	cpse	r24, r1
 b8a:	00 c0       	rjmp	.+0      	; 0xb8c <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x80>
 b8c:	80 e0       	ldi	r24, 0x00	; 0
 b8e:	00 c0       	rjmp	.+0      	; 0xb90 <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x84>
 b90:	40 e0       	ldi	r20, 0x00	; 0
 b92:	50 e0       	ldi	r21, 0x00	; 0
 b94:	be 01       	movw	r22, r28
 b96:	c8 01       	movw	r24, r16
 b98:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 b9c:	f7 01       	movw	r30, r14
 b9e:	44 81       	ldd	r20, Z+4	; 0x04
 ba0:	44 0f       	add	r20, r20
 ba2:	4f 5f       	subi	r20, 0xFF	; 255
 ba4:	40 66       	ori	r20, 0x60	; 96
 ba6:	be 01       	movw	r22, r28
 ba8:	c8 01       	movw	r24, r16
 baa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bae:	41 e0       	ldi	r20, 0x01	; 1
 bb0:	be 01       	movw	r22, r28
 bb2:	c8 01       	movw	r24, r16
 bb4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bb8:	f7 01       	movw	r30, r14
 bba:	26 81       	ldd	r18, Z+6	; 0x06
 bbc:	37 81       	ldd	r19, Z+7	; 0x07
 bbe:	20 56       	subi	r18, 0x60	; 96
 bc0:	3f 4f       	sbci	r19, 0xFF	; 255
 bc2:	40 ea       	ldi	r20, 0xA0	; 160
 bc4:	be 01       	movw	r22, r28
 bc6:	c8 01       	movw	r24, r16
 bc8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bcc:	88 23       	and	r24, r24
 bce:	01 f0       	breq	.+0      	; 0xbd0 <u8g_dev_uc1610_dogxl160_2x_gr_fn+0xc4>
 bd0:	40 e0       	ldi	r20, 0x00	; 0
 bd2:	be 01       	movw	r22, r28
 bd4:	c8 01       	movw	r24, r16
 bd6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bda:	00 c0       	rjmp	.+0      	; 0xbdc <u8g_dev_uc1610_dogxl160_2x_gr_fn+0xd0>
 bdc:	41 e0       	ldi	r20, 0x01	; 1
 bde:	c8 01       	movw	r24, r16
 be0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 be4:	40 e0       	ldi	r20, 0x00	; 0
 be6:	be 01       	movw	r22, r28
 be8:	c8 01       	movw	r24, r16
 bea:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bee:	41 e8       	ldi	r20, 0x81	; 129
 bf0:	be 01       	movw	r22, r28
 bf2:	c8 01       	movw	r24, r16
 bf4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 bf8:	f6 01       	movw	r30, r12
 bfa:	40 81       	ld	r20, Z
 bfc:	46 95       	lsr	r20
 bfe:	be 01       	movw	r22, r28
 c00:	c8 01       	movw	r24, r16
 c02:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 c06:	40 e0       	ldi	r20, 0x00	; 0
 c08:	be 01       	movw	r22, r28
 c0a:	c8 01       	movw	r24, r16
 c0c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	00 c0       	rjmp	.+0      	; 0xc14 <u8g_dev_uc1610_dogxl160_2x_gr_fn+0x108>
 c14:	96 01       	movw	r18, r12
 c16:	4b 2d       	mov	r20, r11
 c18:	be 01       	movw	r22, r28
 c1a:	c8 01       	movw	r24, r16
 c1c:	df 91       	pop	r29
 c1e:	cf 91       	pop	r28
 c20:	1f 91       	pop	r17
 c22:	0f 91       	pop	r16
 c24:	ff 90       	pop	r15
 c26:	ef 90       	pop	r14
 c28:	df 90       	pop	r13
 c2a:	cf 90       	pop	r12
 c2c:	bf 90       	pop	r11
 c2e:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1610_dogxl160_gr_hw_spi_buf>
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	1f 91       	pop	r17
 c38:	0f 91       	pop	r16
 c3a:	ff 90       	pop	r15
 c3c:	ef 90       	pop	r14
 c3e:	df 90       	pop	r13
 c40:	cf 90       	pop	r12
 c42:	bf 90       	pop	r11
 c44:	08 95       	ret

u8g_dev_uc1611_dogm240.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000087c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018d8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1611_dogm240_fn 00000106  00000000  00000000  00002188  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_uc1611_dogm240_8bit 00000006  00000000  00000000  0000228e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_uc1611_dogm240_8bit_pb 00000008  00000000  00000000  00002294  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_uc1611_dogm240_8bit_buf 000000f0  00000000  00000000  0000229c  2**0
                  ALLOC
  9 .data.u8g_dev_uc1611_dogm240_hw_spi 00000006  00000000  00000000  0000229c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_uc1611_dogm240_hw_spi_pb 00000008  00000000  00000000  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_uc1611_dogm240_hw_spi_buf 000000f0  00000000  00000000  000022aa  2**0
                  ALLOC
 12 .data.u8g_dev_uc1611_dogm240_sw_spi 00000006  00000000  00000000  000022aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_uc1611_dogm240_sw_spi_pb 00000008  00000000  00000000  000022b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_uc1611_dogm240_sw_spi_buf 000000f0  00000000  00000000  000022b8  2**0
                  ALLOC
 15 .data.u8g_dev_uc1611_dogm240_i2c 00000006  00000000  00000000  000022b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_uc1611_dogm240_i2c_pb 00000008  00000000  00000000  000022be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_uc1611_dogm240_i2c_buf 000000f0  00000000  00000000  000022c6  2**0
                  ALLOC
 18 .progmem.data.u8g_dev_uc1611_dogm240_data_start 00000008  00000000  00000000  000022c6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_uc1611_dogm240_init_seq 00000016  00000000  00000000  000022ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .comment      00000022  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1611_dogm240_fn:

00000000 <u8g_dev_uc1611_dogm240_fn>:
  0x00,                     /* set lower 4 bit of the col adr to 0 */
  U8G_ESC_END               /* end of sequence */
};

uint8_t u8g_dev_uc1611_dogm240_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	8c 01       	movw	r16, r24
  16:	eb 01       	movw	r28, r22
  18:	b4 2e       	mov	r11, r20
  1a:	79 01       	movw	r14, r18
  switch(msg)
  1c:	8f e0       	ldi	r24, 0x0F	; 15
  1e:	48 17       	cp	r20, r24
  20:	01 f0       	breq	.+0      	; 0x22 <u8g_dev_uc1611_dogm240_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 17       	cp	r20, r30
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_uc1611_dogm240_fn+0x28>
  28:	fa e0       	ldi	r31, 0x0A	; 10
  2a:	4f 13       	cpse	r20, r31
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_uc1611_dogm240_fn+0x2e>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	42 e0       	ldi	r20, 0x02	; 2
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogm240_init_seq);
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	be 01       	movw	r22, r28
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      break;
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_dev_uc1611_dogm240_fn+0x44>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	ca 80       	ldd	r12, Y+2	; 0x02
  46:	db 80       	ldd	r13, Y+3	; 0x03
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogm240_data_start);
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	50 e0       	ldi	r21, 0x00	; 0
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      setPage(u8g, dev, pb->p.page);   /* select current page (uc1611) */
  52:	f6 01       	movw	r30, r12
  54:	a4 80       	ldd	r10, Z+4	; 0x04
  U8G_ESC_END                // end of sequence
};

static void setPage(u8g_t *u8g, u8g_dev_t *dev, unsigned char page)
{
  u8g_WriteByte(u8g, dev, 0x70 + (page>>4)); 
  56:	4a 2d       	mov	r20, r10
  58:	42 95       	swap	r20
  5a:	4f 70       	andi	r20, 0x0F	; 15
  5c:	40 59       	subi	r20, 0x90	; 144
  5e:	be 01       	movw	r22, r28
  60:	c8 01       	movw	r24, r16
  62:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
  u8g_WriteByte(u8g, dev, 0x60 + (page&0x0F));
  66:	4a 2d       	mov	r20, r10
  68:	4f 70       	andi	r20, 0x0F	; 15
  6a:	40 5a       	subi	r20, 0xA0	; 160
  6c:	be 01       	movw	r22, r28
  6e:	c8 01       	movw	r24, r16
  70:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogm240_data_start);
      setPage(u8g, dev, pb->p.page);   /* select current page (uc1611) */
      u8g_SetAddress(u8g, dev, 1);     /* data mode */
  74:	41 e0       	ldi	r20, 0x01	; 1
  76:	be 01       	movw	r22, r28
  78:	c8 01       	movw	r24, r16
  7a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  7e:	ae 01       	movw	r20, r28
  80:	b8 01       	movw	r22, r16
  82:	c6 01       	movw	r24, r12
  84:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
  88:	88 23       	and	r24, r24
  8a:	01 f0       	breq	.+0      	; 0x8c <u8g_dev_uc1611_dogm240_fn+0x8c>
        return 0;
      u8g_SetChipSelect(u8g, dev, 1);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	be 01       	movw	r22, r28
  90:	c8 01       	movw	r24, r16
  92:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      }
      break;
  96:	00 c0       	rjmp	.+0      	; 0x98 <u8g_dev_uc1611_dogm240_fn+0x98>
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 0);
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	c8 01       	movw	r24, r16
  9c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	be 01       	movw	r22, r28
  a4:	c8 01       	movw	r24, r16
  a6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      u8g_WriteByte(u8g, dev, 0x81);
  aa:	41 e8       	ldi	r20, 0x81	; 129
  ac:	be 01       	movw	r22, r28
  ae:	c8 01       	movw	r24, r16
  b0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      /* 11 Jul 2015: bugfix, github issue 339 */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
  b4:	f7 01       	movw	r30, r14
  b6:	40 81       	ld	r20, Z
  b8:	be 01       	movw	r22, r28
  ba:	c8 01       	movw	r24, r16
  bc:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      u8g_SetChipSelect(u8g, dev, 1);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	be 01       	movw	r22, r28
  c4:	c8 01       	movw	r24, r16
  c6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      return 1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	00 c0       	rjmp	.+0      	; 0xce <u8g_dev_uc1611_dogm240_fn+0xce>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  ce:	97 01       	movw	r18, r14
  d0:	4b 2d       	mov	r20, r11
  d2:	be 01       	movw	r22, r28
  d4:	c8 01       	movw	r24, r16
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ff 90       	pop	r15
  e0:	ef 90       	pop	r14
  e2:	df 90       	pop	r13
  e4:	cf 90       	pop	r12
  e6:	bf 90       	pop	r11
  e8:	af 90       	pop	r10
      /* 11 Jul 2015: bugfix, github issue 339 */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
      u8g_SetChipSelect(u8g, dev, 1);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  ea:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1611_dogm240_fn>
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogm240_data_start);
      setPage(u8g, dev, pb->p.page);   /* select current page (uc1611) */
      u8g_SetAddress(u8g, dev, 1);     /* data mode */
      if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
        return 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
      u8g_SetChipSelect(u8g, dev, 1);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	cf 90       	pop	r12
 100:	bf 90       	pop	r11
 102:	af 90       	pop	r10
 104:	08 95       	ret

u8g_dev_uc1611_dogxl240.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000087c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018e9  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1611_dogxl240_fn 00000100  00000000  00000000  00002199  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .data.u8g_dev_uc1611_dogxl240_8bit 00000006  00000000  00000000  00002299  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  7 .data.u8g_dev_uc1611_dogxl240_8bit_pb 00000008  00000000  00000000  0000229f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .bss.u8g_dev_uc1611_dogxl240_8bit_buf 000000f0  00000000  00000000  000022a7  2**0
                  ALLOC
  9 .data.u8g_dev_uc1611_dogxl240_hw_spi 00000006  00000000  00000000  000022a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .data.u8g_dev_uc1611_dogxl240_hw_spi_pb 00000008  00000000  00000000  000022ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .bss.u8g_dev_uc1611_dogxl240_hw_spi_buf 000000f0  00000000  00000000  000022b5  2**0
                  ALLOC
 12 .data.u8g_dev_uc1611_dogxl240_sw_spi 00000006  00000000  00000000  000022b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .data.u8g_dev_uc1611_dogxl240_sw_spi_pb 00000008  00000000  00000000  000022bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .bss.u8g_dev_uc1611_dogxl240_sw_spi_buf 000000f0  00000000  00000000  000022c3  2**0
                  ALLOC
 15 .data.u8g_dev_uc1611_dogxl240_i2c 00000006  00000000  00000000  000022c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .data.u8g_dev_uc1611_dogxl240_i2c_pb 00000008  00000000  00000000  000022c9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 17 .bss.u8g_dev_uc1611_dogxl240_i2c_buf 000000f0  00000000  00000000  000022d1  2**0
                  ALLOC
 18 .progmem.data.u8g_dev_uc1611_dogxl240_data_start 00000008  00000000  00000000  000022d1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.data.u8g_dev_uc1611_dogxl240_init_seq 00000016  00000000  00000000  000022d9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .comment      00000022  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1611_dogxl240_fn:

00000000 <u8g_dev_uc1611_dogxl240_fn>:
  0x00,                     /* set lower 4 bit of the col adr to 0 */
  U8G_ESC_END               /* end of sequence */
};

static uint8_t u8g_dev_uc1611_dogxl240_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	8c 01       	movw	r16, r24
  16:	eb 01       	movw	r28, r22
  18:	b4 2e       	mov	r11, r20
  1a:	79 01       	movw	r14, r18
  switch(msg)
  1c:	8f e0       	ldi	r24, 0x0F	; 15
  1e:	48 17       	cp	r20, r24
  20:	01 f0       	breq	.+0      	; 0x22 <u8g_dev_uc1611_dogxl240_fn+0x22>
  22:	e5 e1       	ldi	r30, 0x15	; 21
  24:	4e 17       	cp	r20, r30
  26:	01 f0       	breq	.+0      	; 0x28 <u8g_dev_uc1611_dogxl240_fn+0x28>
  28:	fa e0       	ldi	r31, 0x0A	; 10
  2a:	4f 13       	cpse	r20, r31
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_uc1611_dogxl240_fn+0x2e>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	42 e0       	ldi	r20, 0x02	; 2
  30:	c8 01       	movw	r24, r16
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_init_seq);
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	be 01       	movw	r22, r28
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      break;
  42:	00 c0       	rjmp	.+0      	; 0x44 <u8g_dev_uc1611_dogxl240_fn+0x44>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	ca 80       	ldd	r12, Y+2	; 0x02
  46:	db 80       	ldd	r13, Y+3	; 0x03
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_data_start);
  48:	40 e0       	ldi	r20, 0x00	; 0
  4a:	50 e0       	ldi	r21, 0x00	; 0
  4c:	c8 01       	movw	r24, r16
  4e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_dev_dogxl240_set_page(u8g, dev, pb->p.page);   /* select current page (uc1611) */
  52:	f6 01       	movw	r30, r12
  54:	a4 80       	ldd	r10, Z+4	; 0x04
  U8G_ESC_END                // end of sequence
};

static void u8g_dev_dogxl240_set_page(u8g_t *u8g, u8g_dev_t *dev, unsigned char page)
{
  u8g_WriteByte(u8g, dev, 0x70);
  56:	40 e7       	ldi	r20, 0x70	; 112
  58:	be 01       	movw	r22, r28
  5a:	c8 01       	movw	r24, r16
  5c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
  u8g_WriteByte(u8g, dev, 0x60 + (page&0x0F));
  60:	4a 2d       	mov	r20, r10
  62:	4f 70       	andi	r20, 0x0F	; 15
  64:	40 5a       	subi	r20, 0xA0	; 160
  66:	be 01       	movw	r22, r28
  68:	c8 01       	movw	r24, r16
  6a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
    case U8G_DEV_MSG_PAGE_NEXT:
      {
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_data_start);
      u8g_dev_dogxl240_set_page(u8g, dev, pb->p.page);   /* select current page (uc1611) */
      u8g_SetAddress(u8g, dev, 1);     /* data mode */
  6e:	41 e0       	ldi	r20, 0x01	; 1
  70:	be 01       	movw	r22, r28
  72:	c8 01       	movw	r24, r16
  74:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
  78:	ae 01       	movw	r20, r28
  7a:	b8 01       	movw	r22, r16
  7c:	c6 01       	movw	r24, r12
  7e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
  82:	88 23       	and	r24, r24
  84:	01 f0       	breq	.+0      	; 0x86 <u8g_dev_uc1611_dogxl240_fn+0x86>
        return 0;
      u8g_SetChipSelect(u8g, dev, 1);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	be 01       	movw	r22, r28
  8a:	c8 01       	movw	r24, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      }
      break;
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_dev_uc1611_dogxl240_fn+0x92>
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 0);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	c8 01       	movw	r24, r16
  96:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	be 01       	movw	r22, r28
  9e:	c8 01       	movw	r24, r16
  a0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_WriteByte(u8g, dev, 0x81);
  a4:	41 e8       	ldi	r20, 0x81	; 129
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      /* 11 Jul 2015: bugfix, github issue 339 */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
  ae:	f7 01       	movw	r30, r14
  b0:	40 81       	ld	r20, Z
  b2:	be 01       	movw	r22, r28
  b4:	c8 01       	movw	r24, r16
  b6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_SetChipSelect(u8g, dev, 1);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	be 01       	movw	r22, r28
  be:	c8 01       	movw	r24, r16
  c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      return 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <u8g_dev_uc1611_dogxl240_fn+0xc8>
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  c8:	97 01       	movw	r18, r14
  ca:	4b 2d       	mov	r20, r11
  cc:	be 01       	movw	r22, r28
  ce:	c8 01       	movw	r24, r16
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	0f 91       	pop	r16
  d8:	ff 90       	pop	r15
  da:	ef 90       	pop	r14
  dc:	df 90       	pop	r13
  de:	cf 90       	pop	r12
  e0:	bf 90       	pop	r11
  e2:	af 90       	pop	r10
      /* 11 Jul 2015: bugfix, github issue 339 */
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
      u8g_SetChipSelect(u8g, dev, 1);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
  e4:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1611_dogxl240_fn>
      u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1611_dogxl240_data_start);
      u8g_dev_dogxl240_set_page(u8g, dev, pb->p.page);   /* select current page (uc1611) */
      u8g_SetAddress(u8g, dev, 1);     /* data mode */
      if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
        return 0;
  e8:	80 e0       	ldi	r24, 0x00	; 0
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) );	/* set contrast from, keep gain at 0 */
      u8g_SetChipSelect(u8g, dev, 1);
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	0f 91       	pop	r16
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	df 90       	pop	r13
  f8:	cf 90       	pop	r12
  fa:	bf 90       	pop	r11
  fc:	af 90       	pop	r10
  fe:	08 95       	ret

u8g_dev_uc1701_dogs102.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018f0  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_dogs102_fn 000000f0  00000000  00000000  000022fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_uc1701_dogs102_2x_fn 00000136  00000000  00000000  000023ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_uc1701_dogs102_2x_hw_spi 00000006  00000000  00000000  00002522  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_uc1701_dogs102_2x_sw_spi 00000006  00000000  00000000  00002528  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_uc1701_dogs102_2x_pb 00000008  00000000  00000000  0000252e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_uc1701_dogs102_2x_buf 000000cc  00000000  00000000  00002536  2**0
                  ALLOC
 11 .data.u8g_dev_uc1701_dogs102_hw_spi 00000006  00000000  00000000  00002536  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1701_dogs102_hw_spi_pb 00000008  00000000  00000000  0000253c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1701_dogs102_hw_spi_buf 00000066  00000000  00000000  00002544  2**0
                  ALLOC
 14 .data.u8g_dev_uc1701_dogs102_sw_spi 00000006  00000000  00000000  00002544  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1701_dogs102_sw_spi_pb 00000008  00000000  00000000  0000254a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_uc1701_dogs102_sw_spi_buf 00000066  00000000  00000000  00002552  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_dogs102_data_start 00000008  00000000  00000000  00002552  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_dogs102_init_seq 00000022  00000000  00000000  0000255a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      00000022  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_dogs102_fn:

00000000 <u8g_dev_dogs102_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1701_dogs102_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_dogs102_fn+0x20>
  20:	e5 e1       	ldi	r30, 0x15	; 21
  22:	4e 17       	cp	r20, r30
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_dogs102_fn+0x26>
  26:	fa e0       	ldi	r31, 0x0A	; 10
  28:	4f 13       	cpse	r20, r31
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_dev_dogs102_fn+0x2c>
  2c:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  34:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_dogs102_init_seq);
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  40:	00 c0       	rjmp	.+0      	; 0x42 <u8g_dev_dogs102_fn+0x42>
      break;
  42:	ca 80       	ldd	r12, Y+2	; 0x02
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	db 80       	ldd	r13, Y+3	; 0x03
  46:	40 e0       	ldi	r20, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_dogs102_data_start);    
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  50:	f6 01       	movw	r30, r12
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page (ST7565R) */
  52:	44 81       	ldd	r20, Z+4	; 0x04
  54:	40 6b       	ori	r20, 0xB0	; 176
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  5e:	41 e0       	ldi	r20, 0x01	; 1
  60:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  68:	ae 01       	movw	r20, r28
  6a:	b8 01       	movw	r22, r16
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  6c:	c6 01       	movw	r24, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_dogs102_fn+0x76>
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	be 01       	movw	r22, r28
  7a:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_dev_dogs102_fn+0x82>
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	c8 01       	movw	r24, r16
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_dogs102_data_start);    
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	be 01       	movw	r22, r28
  8e:	c8 01       	movw	r24, r16
  90:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page (ST7565R) */
  94:	41 e8       	ldi	r20, 0x81	; 129
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  9e:	f7 01       	movw	r30, r14
  a0:	40 81       	ld	r20, Z
  a2:	46 95       	lsr	r20
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a4:	46 95       	lsr	r20
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	be 01       	movw	r22, r28
  b2:	c8 01       	movw	r24, r16
  b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_dogs102_fn>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	00 c0       	rjmp	.+0      	; 0xbc <u8g_dev_dogs102_fn+0xbc>
  bc:	97 01       	movw	r18, r14
  be:	4b 2d       	mov	r20, r11
  c0:	be 01       	movw	r22, r28
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	c8 01       	movw	r24, r16
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
}
  d4:	bf 90       	pop	r11
  d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_dogs102_fn>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1701_dogs102_2x_fn:

000000f0 <u8g_dev_uc1701_dogs102_2x_fn>:
  f0:	bf 92       	push	r11
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
      u8g_WriteByte(u8g, dev, 0x081);
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
 104:	eb 01       	movw	r28, r22
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
 106:	b4 2e       	mov	r11, r20
 108:	69 01       	movw	r12, r18
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	48 17       	cp	r20, r24
 10e:	01 f4       	brne	.+0      	; 0x110 <u8g_dev_uc1701_dogs102_2x_fn+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <u8g_dev_uc1701_dogs102_2x_fn+0x22>
 112:	e5 e1       	ldi	r30, 0x15	; 21
 114:	4e 17       	cp	r20, r30
      u8g_SetChipSelect(u8g, dev, 0);      
 116:	01 f0       	breq	.+0      	; 0x118 <u8g_dev_uc1701_dogs102_2x_fn+0x28>
 118:	fa e0       	ldi	r31, 0x0A	; 10
 11a:	4f 13       	cpse	r20, r31
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_dev_uc1701_dogs102_2x_fn+0x2e>
 11e:	42 e0       	ldi	r20, 0x02	; 2
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
 120:	c8 01       	movw	r24, r16
 122:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_uc1701_dogs102_2x_fn+0x44>
 134:	ea 80       	ldd	r14, Y+2	; 0x02
 136:	fb 80       	ldd	r15, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 142:	f7 01       	movw	r30, r14
 144:	44 81       	ldd	r20, Z+4	; 0x04
 146:	44 0f       	add	r20, r20
 148:	40 6b       	ori	r20, 0xB0	; 176
 14a:	be 01       	movw	r22, r28
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	be 01       	movw	r22, r28
 156:	c8 01       	movw	r24, r16
 158:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 15c:	f7 01       	movw	r30, r14
 15e:	26 81       	ldd	r18, Z+6	; 0x06
 160:	37 81       	ldd	r19, Z+7	; 0x07
 162:	45 81       	ldd	r20, Z+5	; 0x05
 164:	be 01       	movw	r22, r28
 166:	c8 01       	movw	r24, r16
 168:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	be 01       	movw	r22, r28
 170:	c8 01       	movw	r24, r16
 172:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 182:	f7 01       	movw	r30, r14
 184:	44 81       	ldd	r20, Z+4	; 0x04
 186:	44 0f       	add	r20, r20
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	40 6b       	ori	r20, 0xB0	; 176
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 19e:	f7 01       	movw	r30, r14
 1a0:	45 81       	ldd	r20, Z+5	; 0x05
 1a2:	26 81       	ldd	r18, Z+6	; 0x06
 1a4:	37 81       	ldd	r19, Z+7	; 0x07
 1a6:	24 0f       	add	r18, r20
 1a8:	31 1d       	adc	r19, r1
 1aa:	be 01       	movw	r22, r28
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	be 01       	movw	r22, r28
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1bc:	96 01       	movw	r18, r12
 1be:	4b 2d       	mov	r20, r11
 1c0:	be 01       	movw	r22, r28
 1c2:	c8 01       	movw	r24, r16
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	be 01       	movw	r22, r28
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1ec:	41 e8       	ldi	r20, 0x81	; 129
 1ee:	be 01       	movw	r22, r28
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 1f6:	f6 01       	movw	r30, r12
 1f8:	40 81       	ld	r20, Z
 1fa:	46 95       	lsr	r20
 1fc:	46 95       	lsr	r20
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_dogs102_hw_spi_buf>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	08 95       	ret

u8g_dev_uc1701_mini12864.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001925  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_uc1701_mini12864_fn 000000f0  00000000  00000000  00002331  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_dev_uc1701_mini12864_2x_fn 00000136  00000000  00000000  00002421  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .data.u8g_dev_uc1701_mini12864_2x_hw_spi 00000006  00000000  00000000  00002557  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  8 .data.u8g_dev_uc1701_mini12864_2x_sw_spi 00000006  00000000  00000000  0000255d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .data.u8g_dev_uc1701_mini12864_2x_pb 00000008  00000000  00000000  00002563  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 10 .bss.u8g_dev_uc1701_mini12864_2x_buf 00000100  00000000  00000000  0000256b  2**0
                  ALLOC
 11 .data.u8g_dev_uc1701_mini12864_hw_spi 00000006  00000000  00000000  0000256b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 12 .data.u8g_dev_uc1701_mini12864_hw_spi_pb 00000008  00000000  00000000  00002571  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 13 .bss.u8g_dev_uc1701_mini12864_hw_spi_buf 00000080  00000000  00000000  00002579  2**0
                  ALLOC
 14 .data.u8g_dev_uc1701_mini12864_sw_spi 00000006  00000000  00000000  00002579  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 15 .data.u8g_dev_uc1701_mini12864_sw_spi_pb 00000008  00000000  00000000  0000257f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 16 .bss.u8g_dev_uc1701_mini12864_sw_spi_buf 00000080  00000000  00000000  00002587  2**0
                  ALLOC
 17 .progmem.data.u8g_dev_uc1701_mini12864_data_start 00000008  00000000  00000000  00002587  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.data.u8g_dev_uc1701_mini12864_init_seq 00000023  00000000  00000000  0000258f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .comment      00000022  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_uc1701_mini12864_fn:

00000000 <u8g_dev_uc1701_mini12864_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_uc1701_mini12864_2x_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	8c 01       	movw	r16, r24
  14:	eb 01       	movw	r28, r22
  16:	b4 2e       	mov	r11, r20
  18:	79 01       	movw	r14, r18
  switch(msg)
  1a:	8f e0       	ldi	r24, 0x0F	; 15
  1c:	48 17       	cp	r20, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <u8g_dev_uc1701_mini12864_fn+0x20>
  20:	e5 e1       	ldi	r30, 0x15	; 21
  22:	4e 17       	cp	r20, r30
  24:	01 f0       	breq	.+0      	; 0x26 <u8g_dev_uc1701_mini12864_fn+0x26>
  26:	fa e0       	ldi	r31, 0x0A	; 10
  28:	4f 13       	cpse	r20, r31
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_dev_uc1701_mini12864_fn+0x2c>
  2c:	42 e0       	ldi	r20, 0x02	; 2
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  34:	40 e0       	ldi	r20, 0x00	; 0
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1701_mini12864_init_seq);
  36:	50 e0       	ldi	r21, 0x00	; 0
  38:	be 01       	movw	r22, r28
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  40:	00 c0       	rjmp	.+0      	; 0x42 <u8g_dev_uc1701_mini12864_fn+0x42>
      break;
  42:	ca 80       	ldd	r12, Y+2	; 0x02
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  44:	db 80       	ldd	r13, Y+3	; 0x03
  46:	40 e0       	ldi	r20, 0x00	; 0
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1701_mini12864_data_start);    
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	c8 01       	movw	r24, r16
  4c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  50:	f6 01       	movw	r30, r12
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page)); /* select current page */
  52:	44 81       	ldd	r20, Z+4	; 0x04
  54:	40 6b       	ori	r20, 0xB0	; 176
  56:	be 01       	movw	r22, r28
  58:	c8 01       	movw	r24, r16
  5a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  5e:	41 e0       	ldi	r20, 0x01	; 1
  60:	be 01       	movw	r22, r28
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  62:	c8 01       	movw	r24, r16
  64:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  68:	ae 01       	movw	r20, r28
  6a:	b8 01       	movw	r22, r16
	u8g_WriteSequence(u8g, dev, pb->width, pb->buf); 
  6c:	c6 01       	movw	r24, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <u8g_dev_uc1701_mini12864_fn+0x76>
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	be 01       	movw	r22, r28
  7a:	c8 01       	movw	r24, r16
        u8g_SetChipSelect(u8g, dev, 0);
  7c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_dev_uc1701_mini12864_fn+0x82>
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	c8 01       	movw	r24, r16
	
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_uc1701_mini12864_data_start);    
  86:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	be 01       	movw	r22, r28
  8e:	c8 01       	movw	r24, r16
  90:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
        u8g_WriteByte(u8g, dev, 0x0b0 | (2*pb->p.page+1)); /* select current page */
  94:	41 e8       	ldi	r20, 0x81	; 129
  96:	be 01       	movw	r22, r28
  98:	c8 01       	movw	r24, r16
  9a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  9e:	f7 01       	movw	r30, r14
  a0:	40 81       	ld	r20, Z
  a2:	46 95       	lsr	r20
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
  a4:	46 95       	lsr	r20
  a6:	be 01       	movw	r22, r28
  a8:	c8 01       	movw	r24, r16
  aa:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
  ae:	40 e0       	ldi	r20, 0x00	; 0
  b0:	be 01       	movw	r22, r28
  b2:	c8 01       	movw	r24, r16
  b4:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	00 c0       	rjmp	.+0      	; 0xbc <u8g_dev_uc1701_mini12864_fn+0xbc>
  bc:	97 01       	movw	r18, r14
  be:	4b 2d       	mov	r20, r11
  c0:	be 01       	movw	r22, r28
        u8g_SetChipSelect(u8g, dev, 0);
  c2:	c8 01       	movw	r24, r16
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  cc:	ff 90       	pop	r15
  ce:	ef 90       	pop	r14
  d0:	df 90       	pop	r13
  d2:	cf 90       	pop	r12
}
  d4:	bf 90       	pop	r11
  d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1701_mini12864_fn>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	1f 91       	pop	r17
  e2:	0f 91       	pop	r16
  e4:	ff 90       	pop	r15
      u8g_WriteByte(u8g, dev, 0x081);
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
      u8g_SetChipSelect(u8g, dev, 0);      
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
  e6:	ef 90       	pop	r14
  e8:	df 90       	pop	r13
	u8g_WriteSequence(u8g, dev, pb->width, (uint8_t *)(pb->buf)+pb->width); 
        u8g_SetChipSelect(u8g, dev, 0);
      }
      break;
    case U8G_DEV_MSG_CONTRAST:
      u8g_SetChipSelect(u8g, dev, 1);
  ea:	cf 90       	pop	r12
  ec:	bf 90       	pop	r11
  ee:	08 95       	ret

Disassembly of section .text.u8g_dev_uc1701_mini12864_2x_fn:

000000f0 <u8g_dev_uc1701_mini12864_2x_fn>:
  f0:	bf 92       	push	r11
      u8g_SetAddress(u8g, dev, 0);          /* instruction mode */
  f2:	cf 92       	push	r12
  f4:	df 92       	push	r13
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
      u8g_WriteByte(u8g, dev, 0x081);
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	8c 01       	movw	r16, r24
 104:	eb 01       	movw	r28, r22
      u8g_WriteByte(u8g, dev, (*(uint8_t *)arg) >> 2);
 106:	b4 2e       	mov	r11, r20
 108:	69 01       	movw	r12, r18
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	48 17       	cp	r20, r24
 10e:	01 f4       	brne	.+0      	; 0x110 <u8g_dev_uc1701_mini12864_2x_fn+0x20>
 110:	00 c0       	rjmp	.+0      	; 0x112 <u8g_dev_uc1701_mini12864_2x_fn+0x22>
 112:	e5 e1       	ldi	r30, 0x15	; 21
 114:	4e 17       	cp	r20, r30
      u8g_SetChipSelect(u8g, dev, 0);      
 116:	01 f0       	breq	.+0      	; 0x118 <u8g_dev_uc1701_mini12864_2x_fn+0x28>
 118:	fa e0       	ldi	r31, 0x0A	; 10
 11a:	4f 13       	cpse	r20, r31
 11c:	00 c0       	rjmp	.+0      	; 0x11e <u8g_dev_uc1701_mini12864_2x_fn+0x2e>
 11e:	42 e0       	ldi	r20, 0x02	; 2
      return 1;
  }
  return u8g_dev_pb16v1_base_fn(u8g, dev, msg, arg);
}
 120:	c8 01       	movw	r24, r16
 122:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_uc1701_mini12864_2x_fn+0x44>
 134:	ea 80       	ldd	r14, Y+2	; 0x02
 136:	fb 80       	ldd	r15, Y+3	; 0x03
 138:	40 e0       	ldi	r20, 0x00	; 0
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 142:	f7 01       	movw	r30, r14
 144:	44 81       	ldd	r20, Z+4	; 0x04
 146:	44 0f       	add	r20, r20
 148:	40 6b       	ori	r20, 0xB0	; 176
 14a:	be 01       	movw	r22, r28
 14c:	c8 01       	movw	r24, r16
 14e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	be 01       	movw	r22, r28
 156:	c8 01       	movw	r24, r16
 158:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 15c:	f7 01       	movw	r30, r14
 15e:	26 81       	ldd	r18, Z+6	; 0x06
 160:	37 81       	ldd	r19, Z+7	; 0x07
 162:	45 81       	ldd	r20, Z+5	; 0x05
 164:	be 01       	movw	r22, r28
 166:	c8 01       	movw	r24, r16
 168:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	be 01       	movw	r22, r28
 170:	c8 01       	movw	r24, r16
 172:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	be 01       	movw	r22, r28
 17c:	c8 01       	movw	r24, r16
 17e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 182:	f7 01       	movw	r30, r14
 184:	44 81       	ldd	r20, Z+4	; 0x04
 186:	44 0f       	add	r20, r20
 188:	4f 5f       	subi	r20, 0xFF	; 255
 18a:	40 6b       	ori	r20, 0xB0	; 176
 18c:	be 01       	movw	r22, r28
 18e:	c8 01       	movw	r24, r16
 190:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	be 01       	movw	r22, r28
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 19e:	f7 01       	movw	r30, r14
 1a0:	45 81       	ldd	r20, Z+5	; 0x05
 1a2:	26 81       	ldd	r18, Z+6	; 0x06
 1a4:	37 81       	ldd	r19, Z+7	; 0x07
 1a6:	24 0f       	add	r18, r20
 1a8:	31 1d       	adc	r19, r1
 1aa:	be 01       	movw	r22, r28
 1ac:	c8 01       	movw	r24, r16
 1ae:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	be 01       	movw	r22, r28
 1b6:	c8 01       	movw	r24, r16
 1b8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1bc:	96 01       	movw	r18, r12
 1be:	4b 2d       	mov	r20, r11
 1c0:	be 01       	movw	r22, r28
 1c2:	c8 01       	movw	r24, r16
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1da:	41 e0       	ldi	r20, 0x01	; 1
 1dc:	c8 01       	movw	r24, r16
 1de:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	be 01       	movw	r22, r28
 1e6:	c8 01       	movw	r24, r16
 1e8:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1ec:	41 e8       	ldi	r20, 0x81	; 129
 1ee:	be 01       	movw	r22, r28
 1f0:	c8 01       	movw	r24, r16
 1f2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 1f6:	f6 01       	movw	r30, r12
 1f8:	40 81       	ld	r20, Z
 1fa:	46 95       	lsr	r20
 1fc:	46 95       	lsr	r20
 1fe:	be 01       	movw	r22, r28
 200:	c8 01       	movw	r24, r16
 202:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 206:	40 e0       	ldi	r20, 0x00	; 0
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_uc1701_mini12864_hw_spi_buf>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	08 95       	ret

u8g_ellipse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000eb8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018c4  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_draw_ellipse_section 0000007a  00000000  00000000  000027b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_draw_filled_ellipse_section 00000086  00000000  00000000  0000282a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_draw_ellipse 00000202  00000000  00000000  000028b0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_DrawEllipse 00000058  00000000  00000000  00002ab2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_draw_filled_ellipse 00000202  00000000  00000000  00002b0a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_DrawFilledEllipse 00000058  00000000  00000000  00002d0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_draw_ellipse_section:

00000000 <u8g_draw_ellipse_section>:
  }
  
}

void u8g_DrawFilledEllipse(u8g_t *u8g, u8g_uint_t x0, u8g_uint_t y0, u8g_uint_t rx, u8g_uint_t ry, uint8_t option)
{
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	16 2f       	mov	r17, r22
  12:	f4 2e       	mov	r15, r20
  14:	d2 2e       	mov	r13, r18
  16:	e0 fe       	sbrs	r14, 0
  18:	00 c0       	rjmp	.+0      	; 0x1a <u8g_draw_ellipse_section+0x1a>
  {
    u8g_uint_t rxp, rxp2;
    u8g_uint_t ryp, ryp2;
    
    rxp = rx;
    rxp++;
  1a:	40 2f       	mov	r20, r16
  1c:	4f 19       	sub	r20, r15
    rxp2 = rxp;
    rxp2 *= 2;

    ryp = ry;
    ryp++;
  1e:	62 2f       	mov	r22, r18
  20:	61 0f       	add	r22, r17
    ryp2 = ryp;
    ryp2 *= 2;
  22:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_ellipse_section>
    u8g_uint_t ryp, ryp2;
    
    rxp = rx;
    rxp++;
    rxp2 = rxp;
    rxp2 *= 2;
  26:	e1 fe       	sbrs	r14, 1
  28:	00 c0       	rjmp	.+0      	; 0x2a <u8g_draw_ellipse_section+0x2a>
    ryp = ry;
    ryp++;
    ryp2 = ryp;
    ryp2 *= 2;
    
    if ( u8g_IsBBXIntersection(u8g, x0-rxp, y0-ryp, rxp2, ryp2) == 0)
  2a:	40 2f       	mov	r20, r16
  2c:	4f 19       	sub	r20, r15
  2e:	6d 2d       	mov	r22, r13
  30:	61 1b       	sub	r22, r17
  32:	ce 01       	movw	r24, r28
  34:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_ellipse_section>
      return;    
  }
  
  u8g_draw_filled_ellipse(u8g, x0, y0, rx, ry, option);
  38:	e3 fe       	sbrs	r14, 3
  3a:	00 c0       	rjmp	.+0      	; 0x3c <u8g_draw_ellipse_section+0x3c>
  3c:	40 2f       	mov	r20, r16
  3e:	4f 0d       	add	r20, r15
  40:	6d 2d       	mov	r22, r13
  42:	61 0f       	add	r22, r17
  44:	ce 01       	movw	r24, r28
}
  46:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_ellipse_section>
  4a:	e2 fe       	sbrs	r14, 2
  4c:	00 c0       	rjmp	.+0      	; 0x4e <u8g_draw_ellipse_section+0x4e>
  4e:	40 2f       	mov	r20, r16
  50:	4f 0d       	add	r20, r15
  52:	6d 2d       	mov	r22, r13
  54:	61 1b       	sub	r22, r17
  56:	ce 01       	movw	r24, r28
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	df 90       	pop	r13
  66:	0c 94 00 00 	jmp	0	; 0x0 <u8g_draw_ellipse_section>
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	08 95       	ret

Disassembly of section .text.u8g_draw_filled_ellipse_section:

0000007a <u8g_draw_filled_ellipse_section>:
  7a:	df 92       	push	r13
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	ec 01       	movw	r28, r24
  8a:	f6 2e       	mov	r15, r22
  8c:	14 2f       	mov	r17, r20
  8e:	d2 2e       	mov	r13, r18
  90:	e0 fe       	sbrs	r14, 0
  92:	00 c0       	rjmp	.+0      	; 0x94 <u8g_draw_filled_ellipse_section+0x1a>
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	24 0f       	add	r18, r20
  98:	40 2f       	mov	r20, r16
  9a:	41 1b       	sub	r20, r17
  9c:	6d 2d       	mov	r22, r13
  9e:	6f 0d       	add	r22, r15
  a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  a4:	e1 fe       	sbrs	r14, 1
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <u8g_draw_filled_ellipse_section+0x2e>
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	21 0f       	add	r18, r17
  ac:	40 2f       	mov	r20, r16
  ae:	41 1b       	sub	r20, r17
  b0:	6d 2d       	mov	r22, r13
  b2:	6f 19       	sub	r22, r15
  b4:	ce 01       	movw	r24, r28
  b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ba:	e3 fe       	sbrs	r14, 3
  bc:	00 c0       	rjmp	.+0      	; 0xbe <u8g_draw_filled_ellipse_section+0x44>
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	21 0f       	add	r18, r17
  c2:	40 2f       	mov	r20, r16
  c4:	6d 2d       	mov	r22, r13
  c6:	6f 0d       	add	r22, r15
  c8:	ce 01       	movw	r24, r28
  ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ce:	e2 fe       	sbrs	r14, 2
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <u8g_draw_filled_ellipse_section+0x58>
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	21 0f       	add	r18, r17
  d6:	6d 2d       	mov	r22, r13
  d8:	6f 19       	sub	r22, r15
  da:	40 2f       	mov	r20, r16
  dc:	ce 01       	movw	r24, r28
  de:	df 91       	pop	r29
  e0:	cf 91       	pop	r28
  e2:	1f 91       	pop	r17
  e4:	0f 91       	pop	r16
  e6:	ff 90       	pop	r15
  e8:	ef 90       	pop	r14
  ea:	df 90       	pop	r13
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	1f 91       	pop	r17
  f6:	0f 91       	pop	r16
  f8:	ff 90       	pop	r15
  fa:	ef 90       	pop	r14
  fc:	df 90       	pop	r13
  fe:	08 95       	ret

Disassembly of section .text.u8g_draw_ellipse:

0000017a <u8g_draw_ellipse>:
 17a:	2f 92       	push	r2
 17c:	3f 92       	push	r3
 17e:	4f 92       	push	r4
 180:	5f 92       	push	r5
 182:	6f 92       	push	r6
 184:	7f 92       	push	r7
 186:	8f 92       	push	r8
 188:	9f 92       	push	r9
 18a:	af 92       	push	r10
 18c:	bf 92       	push	r11
 18e:	cf 92       	push	r12
 190:	df 92       	push	r13
 192:	ef 92       	push	r14
 194:	ff 92       	push	r15
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
 1a2:	60 97       	sbiw	r28, 0x10	; 16
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	f8 94       	cli
 1a8:	de bf       	out	0x3e, r29	; 62
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	cd bf       	out	0x3d, r28	; 61
 1ae:	9a 87       	std	Y+10, r25	; 0x0a
 1b0:	89 87       	std	Y+9, r24	; 0x09
 1b2:	16 2f       	mov	r17, r22
 1b4:	f4 2e       	mov	r15, r20
 1b6:	32 2f       	mov	r19, r18
 1b8:	40 2e       	mov	r4, r16
 1ba:	5e 2c       	mov	r5, r14
 1bc:	c2 2e       	mov	r12, r18
 1be:	d1 2c       	mov	r13, r1
 1c0:	22 9f       	mul	r18, r18
 1c2:	a0 01       	movw	r20, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	5e 83       	std	Y+6, r21	; 0x06
 1c8:	4d 83       	std	Y+5, r20	; 0x05
 1ca:	1a 01       	movw	r2, r20
 1cc:	22 0c       	add	r2, r2
 1ce:	33 1c       	adc	r3, r3
 1d0:	60 2f       	mov	r22, r16
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	78 8b       	std	Y+16, r23	; 0x10
 1d6:	6f 87       	std	Y+15, r22	; 0x0f
 1d8:	00 9f       	mul	r16, r16
 1da:	c0 01       	movw	r24, r0
 1dc:	11 24       	eor	r1, r1
 1de:	98 87       	std	Y+8, r25	; 0x08
 1e0:	8f 83       	std	Y+7, r24	; 0x07
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	9a 83       	std	Y+2, r25	; 0x02
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	8c 19       	sub	r24, r12
 1f0:	9d 09       	sbc	r25, r13
 1f2:	8c 19       	sub	r24, r12
 1f4:	9d 09       	sbc	r25, r13
 1f6:	86 9f       	mul	r24, r22
 1f8:	a0 01       	movw	r20, r0
 1fa:	87 9f       	mul	r24, r23
 1fc:	50 0d       	add	r21, r0
 1fe:	96 9f       	mul	r25, r22
 200:	50 0d       	add	r21, r0
 202:	11 24       	eor	r1, r1
 204:	46 9f       	mul	r20, r22
 206:	f0 01       	movw	r30, r0
 208:	47 9f       	mul	r20, r23
 20a:	f0 0d       	add	r31, r0
 20c:	56 9f       	mul	r21, r22
 20e:	f0 0d       	add	r31, r0
 210:	11 24       	eor	r1, r1
 212:	fc 83       	std	Y+4, r31	; 0x04
 214:	eb 83       	std	Y+3, r30	; 0x03
 216:	49 81       	ldd	r20, Y+1	; 0x01
 218:	5a 81       	ldd	r21, Y+2	; 0x02
 21a:	4c 9d       	mul	r20, r12
 21c:	50 01       	movw	r10, r0
 21e:	4d 9d       	mul	r20, r13
 220:	b0 0c       	add	r11, r0
 222:	5c 9d       	mul	r21, r12
 224:	b0 0c       	add	r11, r0
 226:	11 24       	eor	r1, r1
 228:	61 2c       	mov	r6, r1
 22a:	71 2c       	mov	r7, r1
 22c:	81 2c       	mov	r8, r1
 22e:	91 2c       	mov	r9, r1
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	ed 81       	ldd	r30, Y+5	; 0x05
 234:	fe 81       	ldd	r31, Y+6	; 0x06
 236:	e6 0d       	add	r30, r6
 238:	f7 1d       	adc	r31, r7
 23a:	fc 87       	std	Y+12, r31	; 0x0c
 23c:	eb 87       	std	Y+11, r30	; 0x0b
 23e:	a6 14       	cp	r10, r6
 240:	b7 04       	cpc	r11, r7
 242:	04 f0       	brlt	.+0      	; 0x244 <u8g_draw_ellipse+0xca>
 244:	e5 2c       	mov	r14, r5
 246:	0f 2d       	mov	r16, r15
 248:	21 2f       	mov	r18, r17
 24a:	45 2f       	mov	r20, r21
 24c:	63 2f       	mov	r22, r19
 24e:	89 85       	ldd	r24, Y+9	; 0x09
 250:	9a 85       	ldd	r25, Y+10	; 0x0a
 252:	3e 87       	std	Y+14, r19	; 0x0e
 254:	5d 87       	std	Y+13, r21	; 0x0d
 256:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 25a:	5d 85       	ldd	r21, Y+13	; 0x0d
 25c:	5f 5f       	subi	r21, 0xFF	; 255
 25e:	62 0c       	add	r6, r2
 260:	73 1c       	adc	r7, r3
 262:	6b 85       	ldd	r22, Y+11	; 0x0b
 264:	7c 85       	ldd	r23, Y+12	; 0x0c
 266:	86 0e       	add	r8, r22
 268:	97 1e       	adc	r9, r23
 26a:	c4 01       	movw	r24, r8
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	eb 81       	ldd	r30, Y+3	; 0x03
 272:	fc 81       	ldd	r31, Y+4	; 0x04
 274:	8e 0f       	add	r24, r30
 276:	9f 1f       	adc	r25, r31
 278:	3e 85       	ldd	r19, Y+14	; 0x0e
 27a:	18 16       	cp	r1, r24
 27c:	19 06       	cpc	r1, r25
 27e:	04 f4       	brge	.+0      	; 0x280 <u8g_draw_ellipse+0x106>
 280:	31 50       	subi	r19, 0x01	; 1
 282:	69 81       	ldd	r22, Y+1	; 0x01
 284:	7a 81       	ldd	r23, Y+2	; 0x02
 286:	a6 1a       	sub	r10, r22
 288:	b7 0a       	sbc	r11, r23
 28a:	fc 01       	movw	r30, r24
 28c:	e8 19       	sub	r30, r8
 28e:	f9 09       	sbc	r31, r9
 290:	4f 01       	movw	r8, r30
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	86 0f       	add	r24, r22
 298:	97 1f       	adc	r25, r23
 29a:	9c 83       	std	Y+4, r25	; 0x04
 29c:	8b 83       	std	Y+3, r24	; 0x03
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <u8g_draw_ellipse+0x126>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2f 85       	ldd	r18, Y+15	; 0x0f
 2a6:	38 89       	ldd	r19, Y+16	; 0x10
 2a8:	82 1b       	sub	r24, r18
 2aa:	93 0b       	sbc	r25, r19
 2ac:	82 1b       	sub	r24, r18
 2ae:	93 0b       	sbc	r25, r19
 2b0:	8c 9d       	mul	r24, r12
 2b2:	90 01       	movw	r18, r0
 2b4:	8d 9d       	mul	r24, r13
 2b6:	30 0d       	add	r19, r0
 2b8:	9c 9d       	mul	r25, r12
 2ba:	30 0d       	add	r19, r0
 2bc:	11 24       	eor	r1, r1
 2be:	2c 9d       	mul	r18, r12
 2c0:	40 01       	movw	r8, r0
 2c2:	2d 9d       	mul	r18, r13
 2c4:	90 0c       	add	r9, r0
 2c6:	3c 9d       	mul	r19, r12
 2c8:	90 0c       	add	r9, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	4f 85       	ldd	r20, Y+15	; 0x0f
 2ce:	58 89       	ldd	r21, Y+16	; 0x10
 2d0:	24 9e       	mul	r2, r20
 2d2:	50 01       	movw	r10, r0
 2d4:	25 9e       	mul	r2, r21
 2d6:	b0 0c       	add	r11, r0
 2d8:	34 9e       	mul	r3, r20
 2da:	b0 0c       	add	r11, r0
 2dc:	11 24       	eor	r1, r1
 2de:	c1 2c       	mov	r12, r1
 2e0:	d1 2c       	mov	r13, r1
 2e2:	1c 82       	std	Y+4, r1	; 0x04
 2e4:	1b 82       	std	Y+3, r1	; 0x03
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	6f 80       	ldd	r6, Y+7	; 0x07
 2ea:	78 84       	ldd	r7, Y+8	; 0x08
 2ec:	6c 0c       	add	r6, r12
 2ee:	7d 1c       	adc	r7, r13
 2f0:	ac 14       	cp	r10, r12
 2f2:	bd 04       	cpc	r11, r13
 2f4:	04 f0       	brlt	.+0      	; 0x2f6 <u8g_draw_ellipse+0x17c>
 2f6:	e5 2c       	mov	r14, r5
 2f8:	0f 2d       	mov	r16, r15
 2fa:	21 2f       	mov	r18, r17
 2fc:	44 2d       	mov	r20, r4
 2fe:	63 2f       	mov	r22, r19
 300:	89 85       	ldd	r24, Y+9	; 0x09
 302:	9a 85       	ldd	r25, Y+10	; 0x0a
 304:	3e 87       	std	Y+14, r19	; 0x0e
 306:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 30a:	3e 85       	ldd	r19, Y+14	; 0x0e
 30c:	3f 5f       	subi	r19, 0xFF	; 255
 30e:	69 81       	ldd	r22, Y+1	; 0x01
 310:	7a 81       	ldd	r23, Y+2	; 0x02
 312:	c6 0e       	add	r12, r22
 314:	d7 1e       	adc	r13, r23
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	86 0d       	add	r24, r6
 31c:	97 1d       	adc	r25, r7
 31e:	9c 83       	std	Y+4, r25	; 0x04
 320:	8b 83       	std	Y+3, r24	; 0x03
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0d       	add	r24, r8
 328:	99 1d       	adc	r25, r9
 32a:	18 16       	cp	r1, r24
 32c:	19 06       	cpc	r1, r25
 32e:	04 f4       	brge	.+0      	; 0x330 <u8g_draw_ellipse+0x1b6>
 330:	4a 94       	dec	r4
 332:	a2 18       	sub	r10, r2
 334:	b3 08       	sbc	r11, r3
 336:	fc 01       	movw	r30, r24
 338:	4b 81       	ldd	r20, Y+3	; 0x03
 33a:	5c 81       	ldd	r21, Y+4	; 0x04
 33c:	e4 1b       	sub	r30, r20
 33e:	f5 0b       	sbc	r31, r21
 340:	fc 83       	std	Y+4, r31	; 0x04
 342:	eb 83       	std	Y+3, r30	; 0x03
 344:	82 0c       	add	r8, r2
 346:	93 1c       	adc	r9, r3
 348:	00 c0       	rjmp	.+0      	; 0x34a <u8g_draw_ellipse+0x1d0>
 34a:	60 96       	adiw	r28, 0x10	; 16
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	9f 90       	pop	r9
 36c:	8f 90       	pop	r8
 36e:	7f 90       	pop	r7
 370:	6f 90       	pop	r6
 372:	5f 90       	pop	r5
 374:	4f 90       	pop	r4
 376:	3f 90       	pop	r3
 378:	2f 90       	pop	r2
 37a:	08 95       	ret

Disassembly of section .text.u8g_DrawEllipse:

000004f6 <u8g_DrawEllipse>:
 4f6:	cf 92       	push	r12
 4f8:	df 92       	push	r13
 4fa:	ef 92       	push	r14
 4fc:	ff 92       	push	r15
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	ec 01       	movw	r28, r24
 508:	16 2f       	mov	r17, r22
 50a:	f4 2e       	mov	r15, r20
 50c:	d2 2e       	mov	r13, r18
 50e:	c0 2e       	mov	r12, r16
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	82 0f       	add	r24, r18
 514:	91 e0       	ldi	r25, 0x01	; 1
 516:	90 0f       	add	r25, r16
 518:	09 2f       	mov	r16, r25
 51a:	00 0f       	add	r16, r16
 51c:	28 2f       	mov	r18, r24
 51e:	22 0f       	add	r18, r18
 520:	49 1b       	sub	r20, r25
 522:	68 1b       	sub	r22, r24
 524:	ce 01       	movw	r24, r28
 526:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 52a:	88 23       	and	r24, r24
 52c:	01 f0       	breq	.+0      	; 0x52e <u8g_DrawEllipse+0x38>
 52e:	0c 2d       	mov	r16, r12
 530:	2d 2d       	mov	r18, r13
 532:	4f 2d       	mov	r20, r15
 534:	61 2f       	mov	r22, r17
 536:	ce 01       	movw	r24, r28
 538:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	df 90       	pop	r13
 54a:	cf 90       	pop	r12
 54c:	08 95       	ret

Disassembly of section .text.u8g_draw_filled_ellipse:

00000a44 <u8g_draw_filled_ellipse>:
 a44:	2f 92       	push	r2
 a46:	3f 92       	push	r3
 a48:	4f 92       	push	r4
 a4a:	5f 92       	push	r5
 a4c:	6f 92       	push	r6
 a4e:	7f 92       	push	r7
 a50:	8f 92       	push	r8
 a52:	9f 92       	push	r9
 a54:	af 92       	push	r10
 a56:	bf 92       	push	r11
 a58:	cf 92       	push	r12
 a5a:	df 92       	push	r13
 a5c:	ef 92       	push	r14
 a5e:	ff 92       	push	r15
 a60:	0f 93       	push	r16
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
 a6c:	60 97       	sbiw	r28, 0x10	; 16
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	9a 87       	std	Y+10, r25	; 0x0a
 a7a:	89 87       	std	Y+9, r24	; 0x09
 a7c:	16 2f       	mov	r17, r22
 a7e:	f4 2e       	mov	r15, r20
 a80:	32 2f       	mov	r19, r18
 a82:	40 2e       	mov	r4, r16
 a84:	5e 2c       	mov	r5, r14
 a86:	c2 2e       	mov	r12, r18
 a88:	d1 2c       	mov	r13, r1
 a8a:	22 9f       	mul	r18, r18
 a8c:	a0 01       	movw	r20, r0
 a8e:	11 24       	eor	r1, r1
 a90:	5e 83       	std	Y+6, r21	; 0x06
 a92:	4d 83       	std	Y+5, r20	; 0x05
 a94:	1a 01       	movw	r2, r20
 a96:	22 0c       	add	r2, r2
 a98:	33 1c       	adc	r3, r3
 a9a:	60 2f       	mov	r22, r16
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	78 8b       	std	Y+16, r23	; 0x10
 aa0:	6f 87       	std	Y+15, r22	; 0x0f
 aa2:	00 9f       	mul	r16, r16
 aa4:	c0 01       	movw	r24, r0
 aa6:	11 24       	eor	r1, r1
 aa8:	98 87       	std	Y+8, r25	; 0x08
 aaa:	8f 83       	std	Y+7, r24	; 0x07
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	9a 83       	std	Y+2, r25	; 0x02
 ab2:	89 83       	std	Y+1, r24	; 0x01
 ab4:	81 e0       	ldi	r24, 0x01	; 1
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	8c 19       	sub	r24, r12
 aba:	9d 09       	sbc	r25, r13
 abc:	8c 19       	sub	r24, r12
 abe:	9d 09       	sbc	r25, r13
 ac0:	86 9f       	mul	r24, r22
 ac2:	a0 01       	movw	r20, r0
 ac4:	87 9f       	mul	r24, r23
 ac6:	50 0d       	add	r21, r0
 ac8:	96 9f       	mul	r25, r22
 aca:	50 0d       	add	r21, r0
 acc:	11 24       	eor	r1, r1
 ace:	46 9f       	mul	r20, r22
 ad0:	f0 01       	movw	r30, r0
 ad2:	47 9f       	mul	r20, r23
 ad4:	f0 0d       	add	r31, r0
 ad6:	56 9f       	mul	r21, r22
 ad8:	f0 0d       	add	r31, r0
 ada:	11 24       	eor	r1, r1
 adc:	fc 83       	std	Y+4, r31	; 0x04
 ade:	eb 83       	std	Y+3, r30	; 0x03
 ae0:	49 81       	ldd	r20, Y+1	; 0x01
 ae2:	5a 81       	ldd	r21, Y+2	; 0x02
 ae4:	4c 9d       	mul	r20, r12
 ae6:	50 01       	movw	r10, r0
 ae8:	4d 9d       	mul	r20, r13
 aea:	b0 0c       	add	r11, r0
 aec:	5c 9d       	mul	r21, r12
 aee:	b0 0c       	add	r11, r0
 af0:	11 24       	eor	r1, r1
 af2:	61 2c       	mov	r6, r1
 af4:	71 2c       	mov	r7, r1
 af6:	81 2c       	mov	r8, r1
 af8:	91 2c       	mov	r9, r1
 afa:	50 e0       	ldi	r21, 0x00	; 0
 afc:	ed 81       	ldd	r30, Y+5	; 0x05
 afe:	fe 81       	ldd	r31, Y+6	; 0x06
 b00:	e6 0d       	add	r30, r6
 b02:	f7 1d       	adc	r31, r7
 b04:	fc 87       	std	Y+12, r31	; 0x0c
 b06:	eb 87       	std	Y+11, r30	; 0x0b
 b08:	a6 14       	cp	r10, r6
 b0a:	b7 04       	cpc	r11, r7
 b0c:	04 f0       	brlt	.+0      	; 0xb0e <u8g_draw_filled_ellipse+0xca>
 b0e:	e5 2c       	mov	r14, r5
 b10:	0f 2d       	mov	r16, r15
 b12:	21 2f       	mov	r18, r17
 b14:	45 2f       	mov	r20, r21
 b16:	63 2f       	mov	r22, r19
 b18:	89 85       	ldd	r24, Y+9	; 0x09
 b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
 b1c:	3e 87       	std	Y+14, r19	; 0x0e
 b1e:	5d 87       	std	Y+13, r21	; 0x0d
 b20:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 b24:	5d 85       	ldd	r21, Y+13	; 0x0d
 b26:	5f 5f       	subi	r21, 0xFF	; 255
 b28:	62 0c       	add	r6, r2
 b2a:	73 1c       	adc	r7, r3
 b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
 b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
 b30:	86 0e       	add	r8, r22
 b32:	97 1e       	adc	r9, r23
 b34:	c4 01       	movw	r24, r8
 b36:	88 0f       	add	r24, r24
 b38:	99 1f       	adc	r25, r25
 b3a:	eb 81       	ldd	r30, Y+3	; 0x03
 b3c:	fc 81       	ldd	r31, Y+4	; 0x04
 b3e:	8e 0f       	add	r24, r30
 b40:	9f 1f       	adc	r25, r31
 b42:	3e 85       	ldd	r19, Y+14	; 0x0e
 b44:	18 16       	cp	r1, r24
 b46:	19 06       	cpc	r1, r25
 b48:	04 f4       	brge	.+0      	; 0xb4a <u8g_draw_filled_ellipse+0x106>
 b4a:	31 50       	subi	r19, 0x01	; 1
 b4c:	69 81       	ldd	r22, Y+1	; 0x01
 b4e:	7a 81       	ldd	r23, Y+2	; 0x02
 b50:	a6 1a       	sub	r10, r22
 b52:	b7 0a       	sbc	r11, r23
 b54:	fc 01       	movw	r30, r24
 b56:	e8 19       	sub	r30, r8
 b58:	f9 09       	sbc	r31, r9
 b5a:	4f 01       	movw	r8, r30
 b5c:	8b 81       	ldd	r24, Y+3	; 0x03
 b5e:	9c 81       	ldd	r25, Y+4	; 0x04
 b60:	86 0f       	add	r24, r22
 b62:	97 1f       	adc	r25, r23
 b64:	9c 83       	std	Y+4, r25	; 0x04
 b66:	8b 83       	std	Y+3, r24	; 0x03
 b68:	00 c0       	rjmp	.+0      	; 0xb6a <u8g_draw_filled_ellipse+0x126>
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	90 e0       	ldi	r25, 0x00	; 0
 b6e:	2f 85       	ldd	r18, Y+15	; 0x0f
 b70:	38 89       	ldd	r19, Y+16	; 0x10
 b72:	82 1b       	sub	r24, r18
 b74:	93 0b       	sbc	r25, r19
 b76:	82 1b       	sub	r24, r18
 b78:	93 0b       	sbc	r25, r19
 b7a:	8c 9d       	mul	r24, r12
 b7c:	90 01       	movw	r18, r0
 b7e:	8d 9d       	mul	r24, r13
 b80:	30 0d       	add	r19, r0
 b82:	9c 9d       	mul	r25, r12
 b84:	30 0d       	add	r19, r0
 b86:	11 24       	eor	r1, r1
 b88:	2c 9d       	mul	r18, r12
 b8a:	40 01       	movw	r8, r0
 b8c:	2d 9d       	mul	r18, r13
 b8e:	90 0c       	add	r9, r0
 b90:	3c 9d       	mul	r19, r12
 b92:	90 0c       	add	r9, r0
 b94:	11 24       	eor	r1, r1
 b96:	4f 85       	ldd	r20, Y+15	; 0x0f
 b98:	58 89       	ldd	r21, Y+16	; 0x10
 b9a:	24 9e       	mul	r2, r20
 b9c:	50 01       	movw	r10, r0
 b9e:	25 9e       	mul	r2, r21
 ba0:	b0 0c       	add	r11, r0
 ba2:	34 9e       	mul	r3, r20
 ba4:	b0 0c       	add	r11, r0
 ba6:	11 24       	eor	r1, r1
 ba8:	c1 2c       	mov	r12, r1
 baa:	d1 2c       	mov	r13, r1
 bac:	1c 82       	std	Y+4, r1	; 0x04
 bae:	1b 82       	std	Y+3, r1	; 0x03
 bb0:	30 e0       	ldi	r19, 0x00	; 0
 bb2:	6f 80       	ldd	r6, Y+7	; 0x07
 bb4:	78 84       	ldd	r7, Y+8	; 0x08
 bb6:	6c 0c       	add	r6, r12
 bb8:	7d 1c       	adc	r7, r13
 bba:	ac 14       	cp	r10, r12
 bbc:	bd 04       	cpc	r11, r13
 bbe:	04 f0       	brlt	.+0      	; 0xbc0 <u8g_draw_filled_ellipse+0x17c>
 bc0:	e5 2c       	mov	r14, r5
 bc2:	0f 2d       	mov	r16, r15
 bc4:	21 2f       	mov	r18, r17
 bc6:	44 2d       	mov	r20, r4
 bc8:	63 2f       	mov	r22, r19
 bca:	89 85       	ldd	r24, Y+9	; 0x09
 bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
 bce:	3e 87       	std	Y+14, r19	; 0x0e
 bd0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 bd4:	3e 85       	ldd	r19, Y+14	; 0x0e
 bd6:	3f 5f       	subi	r19, 0xFF	; 255
 bd8:	69 81       	ldd	r22, Y+1	; 0x01
 bda:	7a 81       	ldd	r23, Y+2	; 0x02
 bdc:	c6 0e       	add	r12, r22
 bde:	d7 1e       	adc	r13, r23
 be0:	8b 81       	ldd	r24, Y+3	; 0x03
 be2:	9c 81       	ldd	r25, Y+4	; 0x04
 be4:	86 0d       	add	r24, r6
 be6:	97 1d       	adc	r25, r7
 be8:	9c 83       	std	Y+4, r25	; 0x04
 bea:	8b 83       	std	Y+3, r24	; 0x03
 bec:	88 0f       	add	r24, r24
 bee:	99 1f       	adc	r25, r25
 bf0:	88 0d       	add	r24, r8
 bf2:	99 1d       	adc	r25, r9
 bf4:	18 16       	cp	r1, r24
 bf6:	19 06       	cpc	r1, r25
 bf8:	04 f4       	brge	.+0      	; 0xbfa <u8g_draw_filled_ellipse+0x1b6>
 bfa:	4a 94       	dec	r4
 bfc:	a2 18       	sub	r10, r2
 bfe:	b3 08       	sbc	r11, r3
 c00:	fc 01       	movw	r30, r24
 c02:	4b 81       	ldd	r20, Y+3	; 0x03
 c04:	5c 81       	ldd	r21, Y+4	; 0x04
 c06:	e4 1b       	sub	r30, r20
 c08:	f5 0b       	sbc	r31, r21
 c0a:	fc 83       	std	Y+4, r31	; 0x04
 c0c:	eb 83       	std	Y+3, r30	; 0x03
 c0e:	82 0c       	add	r8, r2
 c10:	93 1c       	adc	r9, r3
 c12:	00 c0       	rjmp	.+0      	; 0xc14 <u8g_draw_filled_ellipse+0x1d0>
 c14:	60 96       	adiw	r28, 0x10	; 16
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	cd bf       	out	0x3d, r28	; 61
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	df 90       	pop	r13
 c2e:	cf 90       	pop	r12
 c30:	bf 90       	pop	r11
 c32:	af 90       	pop	r10
 c34:	9f 90       	pop	r9
 c36:	8f 90       	pop	r8
 c38:	7f 90       	pop	r7
 c3a:	6f 90       	pop	r6
 c3c:	5f 90       	pop	r5
 c3e:	4f 90       	pop	r4
 c40:	3f 90       	pop	r3
 c42:	2f 90       	pop	r2
 c44:	08 95       	ret

Disassembly of section .text.u8g_DrawFilledEllipse:

0000168a <u8g_DrawFilledEllipse>:
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ec 01       	movw	r28, r24
    169c:	16 2f       	mov	r17, r22
    169e:	f4 2e       	mov	r15, r20
    16a0:	d2 2e       	mov	r13, r18
    16a2:	c0 2e       	mov	r12, r16
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	82 0f       	add	r24, r18
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	90 0f       	add	r25, r16
    16ac:	09 2f       	mov	r16, r25
    16ae:	00 0f       	add	r16, r16
    16b0:	28 2f       	mov	r18, r24
    16b2:	22 0f       	add	r18, r18
    16b4:	49 1b       	sub	r20, r25
    16b6:	68 1b       	sub	r22, r24
    16b8:	ce 01       	movw	r24, r28
    16ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    16be:	88 23       	and	r24, r24
    16c0:	01 f0       	breq	.+0      	; 0x16c2 <u8g_DrawFilledEllipse+0x38>
    16c2:	0c 2d       	mov	r16, r12
    16c4:	2d 2d       	mov	r18, r13
    16c6:	4f 2d       	mov	r20, r15
    16c8:	61 2f       	mov	r22, r17
    16ca:	ce 01       	movw	r24, r28
    16cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	08 95       	ret

u8g_font.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00003210  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002905  00000000  00000000  00003244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_font_get_word 00000018  00000000  00000000  00005b49  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_font_GetFormat 00000006  00000000  00000000  00005b61  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_font_GetFontGlyphStructureSize 00000014  00000000  00000000  00005b67  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_font_calc_vref_font 00000004  00000000  00000000  00005b7b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.u8g_font_calc_vref_bottom 00000006  00000000  00000000  00005b7f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.u8g_font_calc_vref_top 00000008  00000000  00000000  00005b85  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.u8g_font_calc_vref_center 00000012  00000000  00000000  00005b8d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.u8g_font_get_char 00000006  00000000  00000000  00005b9f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.u8g_font_get_charP 00000006  00000000  00000000  00005ba5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.u8g_font_GetCapitalAHeight 00000008  00000000  00000000  00005bab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.u8g_font_GetEncoding65Pos 00000006  00000000  00000000  00005bb3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.u8g_font_GetEncoding97Pos 00000006  00000000  00000000  00005bb9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.u8g_font_GetFontStartEncoding 00000008  00000000  00000000  00005bbf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.u8g_font_GetFontEndEncoding 00000008  00000000  00000000  00005bc7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.u8g_font_GetLowerGDescent 00000008  00000000  00000000  00005bcf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.u8g_font_GetFontAscent 00000008  00000000  00000000  00005bd7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.u8g_font_GetFontDescent 00000008  00000000  00000000  00005bdf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.u8g_font_GetFontXAscent 00000008  00000000  00000000  00005be7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.u8g_font_GetFontXDescent 00000008  00000000  00000000  00005bef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.u8g_font_GetSize 00000076  00000000  00000000  00005bf7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.u8g_GetFontBBXWidth 00000010  00000000  00000000  00005c6d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.u8g_GetFontBBXHeight 00000010  00000000  00000000  00005c7d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.u8g_GetFontBBXOffX 00000010  00000000  00000000  00005c8d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.u8g_GetFontBBXOffY 00000010  00000000  00000000  00005c9d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.u8g_GetFontCapitalAHeight 00000010  00000000  00000000  00005cad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.u8g_GetGlyph 0000014a  00000000  00000000  00005cbd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text.u8g_font_calc_str_min_box.part.0 00000090  00000000  00000000  00005e07  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text.u8g_IsGlyph 00000010  00000000  00000000  00005e97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text.u8g_GetGlyphDeltaX 0000001a  00000000  00000000  00005ea7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text.u8g_draw_glyph 000000d8  00000000  00000000  00005ec1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text.u8g_DrawGlyph 00000040  00000000  00000000  00005f99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text.u8g_draw_glyph90 000000e4  00000000  00000000  00005fd9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text.u8g_DrawGlyph90 00000040  00000000  00000000  000060bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text.u8g_draw_glyph180 000000e8  00000000  00000000  000060fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text.u8g_DrawGlyph180 00000040  00000000  00000000  000061e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text.u8g_draw_glyph270 000000e0  00000000  00000000  00006225  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text.u8g_DrawGlyph270 00000040  00000000  00000000  00006305  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text.u8g_DrawStr 0000006e  00000000  00000000  00006345  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text.u8g_DrawStr90 0000006e  00000000  00000000  000063b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text.u8g_DrawStr180 0000006e  00000000  00000000  00006421  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text.u8g_DrawStr270 0000006e  00000000  00000000  0000648f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text.u8g_DrawStrDir 0000003e  00000000  00000000  000064fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text.u8g_DrawStrP 0000004e  00000000  00000000  0000653b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text.u8g_DrawStr90P 0000004e  00000000  00000000  00006589  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text.u8g_DrawStr180P 0000004e  00000000  00000000  000065d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text.u8g_DrawStr270P 0000004e  00000000  00000000  00006625  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text.u8g_DrawStrFontBBX 0000004e  00000000  00000000  00006673  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text.u8g_DrawGlyphFontBBX 00000046  00000000  00000000  000066c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text.u8g_UpdateRefHeight 00000090  00000000  00000000  00006707  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text.u8g_SetFontRefHeightText 00000008  00000000  00000000  00006797  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text.u8g_SetFontRefHeightExtendedText 0000000a  00000000  00000000  0000679f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text.u8g_SetFontRefHeightAll 0000000a  00000000  00000000  000067a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text.u8g_SetFontLineSpacingFactor 00000008  00000000  00000000  000067b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text.u8g_SetFontPosBaseline 0000000c  00000000  00000000  000067bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text.u8g_SetFontPosBottom 0000000c  00000000  00000000  000067c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text.u8g_SetFontPosTop 0000000c  00000000  00000000  000067d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text.u8g_SetFontPosCenter 0000000c  00000000  00000000  000067df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text.u8g_font_calc_str_pixel_width 0000007a  00000000  00000000  000067eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text.u8g_GetStrPixelWidth 00000008  00000000  00000000  00006865  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text.u8g_GetStrPixelWidthP 00000008  00000000  00000000  0000686d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text.u8g_GetStrX 00000016  00000000  00000000  00006875  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text.u8g_GetStrXP 00000016  00000000  00000000  0000688b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text.u8g_GetStrWidth 00000034  00000000  00000000  000068a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text.u8g_GetStrWidthP 00000036  00000000  00000000  000068d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text.u8g_font_box_min 0000001a  00000000  00000000  0000690b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text.u8g_font_box_left_gA 00000002  00000000  00000000  00006925  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.u8g_font_box_all_gA 00000002  00000000  00000000  00006927  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.u8g_GetStrMinBox 000000a6  00000000  00000000  00006929  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text.u8g_GetStrAMinBox 000000ca  00000000  00000000  000069cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text.u8g_SetFont 00000028  00000000  00000000  00006a99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text.u8g_draw_aa_glyph 000000d6  00000000  00000000  00006ac1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text.u8g_DrawAAGlyph 00000040  00000000  00000000  00006b97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text.u8g_DrawAAStr 00000072  00000000  00000000  00006bd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .comment      00000022  00000000  00000000  00006c49  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_font_get_word:

00000000 <u8g_font_get_word>:
  y += u8g->font_calc_vref(u8g);
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
   0:	fc 01       	movw	r30, r24
   2:	e6 0f       	add	r30, r22
   4:	f1 1d       	adc	r31, r1
   6:	84 91       	lpm	r24, Z
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	98 2f       	mov	r25, r24
   c:	88 27       	eor	r24, r24
   e:	31 96       	adiw	r30, 0x01	; 1
  10:	e4 91       	lpm	r30, Z
  12:	8e 0f       	add	r24, r30
  14:	91 1d       	adc	r25, r1
  16:	08 95       	ret

Disassembly of section .text.u8g_font_GetFormat:

00000018 <u8g_font_GetFormat>:
  18:	fc 01       	movw	r30, r24
  u8g_uint_t t = 0;
  int8_t d;

  if ( u8g_font_GetFormat(u8g->font)  != 2 )
  1a:	84 91       	lpm	r24, Z
  1c:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontGlyphStructureSize:

00000036 <u8g_font_GetFontGlyphStructureSize>:
    return 0;
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  36:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  3a:	88 23       	and	r24, r24
  3c:	01 f0       	breq	.+0      	; 0x3e <u8g_font_GetFontGlyphStructureSize+0x8>
  3e:	82 30       	cpi	r24, 0x02	; 2
  40:	01 f4       	brne	.+0      	; 0x42 <u8g_font_GetFontGlyphStructureSize+0xc>
  return u8g_draw_aa_glyph(u8g, x, y, encoding);
}

u8g_uint_t u8g_DrawAAStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
  42:	86 e0       	ldi	r24, 0x06	; 6
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
  44:	08 95       	ret
  46:	83 e0       	ldi	r24, 0x03	; 3
  48:	08 95       	ret

Disassembly of section .text.u8g_font_calc_vref_font:

00000080 <u8g_font_calc_vref_font>:
    x += d;
    t += d;
    s++;
  }
  return t;
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	08 95       	ret

Disassembly of section .text.u8g_font_calc_vref_bottom:

00000104 <u8g_font_calc_vref_bottom>:
 104:	fc 01       	movw	r30, r24
 106:	81 8d       	ldd	r24, Z+25	; 0x19
 108:	08 95       	ret

Disassembly of section .text.u8g_font_calc_vref_top:

0000020e <u8g_font_calc_vref_top>:
 20e:	fc 01       	movw	r30, r24
 210:	80 8d       	ldd	r24, Z+24	; 0x18
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	08 95       	ret

Disassembly of section .text.u8g_font_calc_vref_center:

00000424 <u8g_font_calc_vref_center>:
 424:	fc 01       	movw	r30, r24
 426:	81 8d       	ldd	r24, Z+25	; 0x19
 428:	90 8d       	ldd	r25, Z+24	; 0x18
 42a:	98 1b       	sub	r25, r24
 42c:	97 fd       	sbrc	r25, 7
 42e:	9f 5f       	subi	r25, 0xFF	; 255
 430:	95 95       	asr	r25
 432:	89 0f       	add	r24, r25
 434:	08 95       	ret

Disassembly of section .text.u8g_font_get_char:

0000085a <u8g_font_get_char>:
 85a:	fc 01       	movw	r30, r24
 85c:	80 81       	ld	r24, Z
 85e:	08 95       	ret

Disassembly of section .text.u8g_font_get_charP:

000010ba <u8g_font_get_charP>:
    10ba:	fc 01       	movw	r30, r24
    10bc:	84 91       	lpm	r24, Z
    10be:	08 95       	ret

Disassembly of section .text.u8g_font_GetCapitalAHeight:

0000217a <u8g_font_GetCapitalAHeight>:
    217a:	05 96       	adiw	r24, 0x05	; 5
    217c:	fc 01       	movw	r30, r24
    217e:	84 91       	lpm	r24, Z
    2180:	08 95       	ret

Disassembly of section .text.u8g_font_GetEncoding65Pos:

000042fc <u8g_font_GetEncoding65Pos>:
    42fc:	66 e0       	ldi	r22, 0x06	; 6
    42fe:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_font_GetEncoding97Pos:

000085fe <u8g_font_GetEncoding97Pos>:
    85fe:	68 e0       	ldi	r22, 0x08	; 8
    8600:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_font_GetFontStartEncoding:

00010c02 <u8g_font_GetFontStartEncoding>:
   10c02:	0a 96       	adiw	r24, 0x0a	; 10
   10c04:	fc 01       	movw	r30, r24
   10c06:	84 91       	lpm	r24, Z
   10c08:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontEndEncoding:

0002180c <u8g_font_GetFontEndEncoding>:
   2180c:	0b 96       	adiw	r24, 0x0b	; 11
   2180e:	fc 01       	movw	r30, r24
   21810:	84 91       	lpm	r24, Z
   21812:	08 95       	ret

Disassembly of section .text.u8g_font_GetLowerGDescent:

00043020 <u8g_font_GetLowerGDescent>:
   43020:	0c 96       	adiw	r24, 0x0c	; 12
   43022:	fc 01       	movw	r30, r24
   43024:	84 91       	lpm	r24, Z
   43026:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontAscent:

00086048 <u8g_font_GetFontAscent>:
   86048:	0d 96       	adiw	r24, 0x0d	; 13
   8604a:	fc 01       	movw	r30, r24
   8604c:	84 91       	lpm	r24, Z
   8604e:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontDescent:

0010c098 <u8g_font_GetFontDescent>:
  10c098:	0e 96       	adiw	r24, 0x0e	; 14
  10c09a:	fc 01       	movw	r30, r24
  10c09c:	84 91       	lpm	r24, Z
  10c09e:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontXAscent:

00218138 <u8g_font_GetFontXAscent>:
  218138:	0f 96       	adiw	r24, 0x0f	; 15
  21813a:	fc 01       	movw	r30, r24
  21813c:	84 91       	lpm	r24, Z
  21813e:	08 95       	ret

Disassembly of section .text.u8g_font_GetFontXDescent:

00430278 <u8g_font_GetFontXDescent>:
  430278:	40 96       	adiw	r24, 0x10	; 16
  43027a:	fc 01       	movw	r30, r24
  43027c:	84 91       	lpm	r24, Z
  43027e:	08 95       	ret

Disassembly of section .text.u8g_font_GetSize:

008604f8 <u8g_font_GetSize>:
  8604f8:	ff 92       	push	r15
  8604fa:	0f 93       	push	r16
  8604fc:	1f 93       	push	r17
  8604fe:	cf 93       	push	r28
  860500:	df 93       	push	r29
  860502:	ec 01       	movw	r28, r24
  860504:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  860508:	f8 2e       	mov	r15, r24
  86050a:	ce 01       	movw	r24, r28
  86050c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  860510:	08 2f       	mov	r16, r24
  860512:	ce 01       	movw	r24, r28
  860514:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  860518:	18 2f       	mov	r17, r24
  86051a:	ce 01       	movw	r24, r28
  86051c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  860520:	91 e0       	ldi	r25, 0x01	; 1
  860522:	f9 16       	cp	r15, r25
  860524:	01 f0       	breq	.+0      	; 0x860526 <u8g_font_GetSize+0x2e>
  860526:	9f ef       	ldi	r25, 0xFF	; 255
  860528:	00 c0       	rjmp	.+0      	; 0x86052a <u8g_font_GetSize+0x32>
  86052a:	9f e0       	ldi	r25, 0x0F	; 15
  86052c:	9e 01       	movw	r18, r28
  86052e:	2f 5e       	subi	r18, 0xEF	; 239
  860530:	3f 4f       	sbci	r19, 0xFF	; 255
  860532:	40 2f       	mov	r20, r16
  860534:	50 e0       	ldi	r21, 0x00	; 0
  860536:	f9 01       	movw	r30, r18
  860538:	64 91       	lpm	r22, Z
  86053a:	6f 3f       	cpi	r22, 0xFF	; 255
  86053c:	01 f4       	brne	.+0      	; 0x86053e <u8g_font_GetSize+0x46>
  86053e:	2f 5f       	subi	r18, 0xFF	; 255
  860540:	3f 4f       	sbci	r19, 0xFF	; 255
  860542:	00 c0       	rjmp	.+0      	; 0x860544 <u8g_font_GetSize+0x4c>
  860544:	f9 01       	movw	r30, r18
  860546:	32 96       	adiw	r30, 0x02	; 2
  860548:	e4 91       	lpm	r30, Z
  86054a:	e9 23       	and	r30, r25
  86054c:	2e 0f       	add	r18, r30
  86054e:	31 1d       	adc	r19, r1
  860550:	24 0f       	add	r18, r20
  860552:	35 1f       	adc	r19, r21
  860554:	18 17       	cp	r17, r24
  860556:	01 f0       	breq	.+0      	; 0x860558 <u8g_font_GetSize+0x60>
  860558:	1f 5f       	subi	r17, 0xFF	; 255
  86055a:	00 c0       	rjmp	.+0      	; 0x86055c <u8g_font_GetSize+0x64>
  86055c:	c9 01       	movw	r24, r18
  86055e:	8c 1b       	sub	r24, r28
  860560:	9d 0b       	sbc	r25, r29
  860562:	df 91       	pop	r29
  860564:	cf 91       	pop	r28
  860566:	1f 91       	pop	r17
  860568:	0f 91       	pop	r16
  86056a:	ff 90       	pop	r15
  86056c:	08 95       	ret

Disassembly of section .text.u8g_GetFontBBXWidth:

010c0a66 <u8g_GetFontBBXWidth>:
 10c0a66:	dc 01       	movw	r26, r24
 10c0a68:	14 96       	adiw	r26, 0x04	; 4
 10c0a6a:	ed 91       	ld	r30, X+
 10c0a6c:	fc 91       	ld	r31, X
 10c0a6e:	15 97       	sbiw	r26, 0x05	; 5
 10c0a70:	31 96       	adiw	r30, 0x01	; 1
 10c0a72:	84 91       	lpm	r24, Z
 10c0a74:	08 95       	ret

Disassembly of section .text.u8g_GetFontBBXHeight:

021814dc <u8g_GetFontBBXHeight>:
 21814dc:	dc 01       	movw	r26, r24
 21814de:	14 96       	adiw	r26, 0x04	; 4
 21814e0:	ed 91       	ld	r30, X+
 21814e2:	fc 91       	ld	r31, X
 21814e4:	15 97       	sbiw	r26, 0x05	; 5
 21814e6:	32 96       	adiw	r30, 0x02	; 2
 21814e8:	84 91       	lpm	r24, Z
 21814ea:	08 95       	ret

Disassembly of section .text.u8g_GetFontBBXOffX:

043029c8 <u8g_GetFontBBXOffX>:
 43029c8:	dc 01       	movw	r26, r24
 43029ca:	14 96       	adiw	r26, 0x04	; 4
 43029cc:	ed 91       	ld	r30, X+
 43029ce:	fc 91       	ld	r31, X
 43029d0:	15 97       	sbiw	r26, 0x05	; 5
 43029d2:	33 96       	adiw	r30, 0x03	; 3
 43029d4:	84 91       	lpm	r24, Z
 43029d6:	08 95       	ret

Disassembly of section .text.u8g_GetFontBBXOffY:

086053a0 <u8g_GetFontBBXOffY>:
 86053a0:	dc 01       	movw	r26, r24
 86053a2:	14 96       	adiw	r26, 0x04	; 4
 86053a4:	ed 91       	ld	r30, X+
 86053a6:	fc 91       	ld	r31, X
 86053a8:	15 97       	sbiw	r26, 0x05	; 5
 86053aa:	34 96       	adiw	r30, 0x04	; 4
 86053ac:	84 91       	lpm	r24, Z
 86053ae:	08 95       	ret

Disassembly of section .text.u8g_GetFontCapitalAHeight:

10c0a750 <u8g_GetFontCapitalAHeight>:
10c0a750:	dc 01       	movw	r26, r24
10c0a752:	14 96       	adiw	r26, 0x04	; 4
10c0a754:	ed 91       	ld	r30, X+
10c0a756:	fc 91       	ld	r31, X
10c0a758:	15 97       	sbiw	r26, 0x05	; 5
10c0a75a:	35 96       	adiw	r30, 0x05	; 5
10c0a75c:	84 91       	lpm	r24, Z
10c0a75e:	08 95       	ret

Disassembly of section .text.u8g_GetGlyph:

21814eb0 <u8g_GetGlyph>:
21814eb0:	af 92       	push	r10
21814eb2:	bf 92       	push	r11
21814eb4:	cf 92       	push	r12
21814eb6:	df 92       	push	r13
21814eb8:	ef 92       	push	r14
21814eba:	ff 92       	push	r15
21814ebc:	0f 93       	push	r16
21814ebe:	1f 93       	push	r17
21814ec0:	cf 93       	push	r28
21814ec2:	df 93       	push	r29
21814ec4:	ec 01       	movw	r28, r24
21814ec6:	d6 2e       	mov	r13, r22
21814ec8:	0c 81       	ldd	r16, Y+4	; 0x04
21814eca:	1d 81       	ldd	r17, Y+5	; 0x05
21814ecc:	c8 01       	movw	r24, r16
21814ece:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814ed2:	e8 2e       	mov	r14, r24
21814ed4:	c8 01       	movw	r24, r16
21814ed6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814eda:	a8 2e       	mov	r10, r24
21814edc:	21 e0       	ldi	r18, 0x01	; 1
21814ede:	e2 16       	cp	r14, r18
21814ee0:	01 f0       	breq	.+0      	; 0x21814ee2 <u8g_GetGlyph+0x32>
21814ee2:	cc 24       	eor	r12, r12
21814ee4:	ca 94       	dec	r12
21814ee6:	00 c0       	rjmp	.+0      	; 0x21814ee8 <u8g_GetGlyph+0x38>
21814ee8:	6f e0       	ldi	r22, 0x0F	; 15
21814eea:	c6 2e       	mov	r12, r22
21814eec:	c8 01       	movw	r24, r16
21814eee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814ef2:	f8 2e       	mov	r15, r24
21814ef4:	c8 01       	movw	r24, r16
21814ef6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814efa:	b8 2e       	mov	r11, r24
21814efc:	c8 01       	movw	r24, r16
21814efe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814f02:	e0 e6       	ldi	r30, 0x60	; 96
21814f04:	ed 15       	cp	r30, r13
21814f06:	00 f4       	brcc	.+0      	; 0x21814f08 <u8g_GetGlyph+0x58>
21814f08:	00 97       	sbiw	r24, 0x00	; 0
21814f0a:	01 f0       	breq	.+0      	; 0x21814f0c <u8g_GetGlyph+0x5c>
21814f0c:	98 01       	movw	r18, r16
21814f0e:	28 0f       	add	r18, r24
21814f10:	39 1f       	adc	r19, r25
21814f12:	51 e6       	ldi	r21, 0x61	; 97
21814f14:	f5 2e       	mov	r15, r21
21814f16:	00 c0       	rjmp	.+0      	; 0x21814f18 <u8g_GetGlyph+0x68>
21814f18:	c8 01       	movw	r24, r16
21814f1a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
21814f1e:	f0 e4       	ldi	r31, 0x40	; 64
21814f20:	98 01       	movw	r18, r16
21814f22:	fd 15       	cp	r31, r13
21814f24:	00 f4       	brcc	.+0      	; 0x21814f26 <u8g_GetGlyph+0x76>
21814f26:	00 97       	sbiw	r24, 0x00	; 0
21814f28:	01 f0       	breq	.+0      	; 0x21814f2a <u8g_GetGlyph+0x7a>
21814f2a:	28 0f       	add	r18, r24
21814f2c:	39 1f       	adc	r19, r25
21814f2e:	41 e4       	ldi	r20, 0x41	; 65
21814f30:	f4 2e       	mov	r15, r20
21814f32:	00 c0       	rjmp	.+0      	; 0x21814f34 <u8g_GetGlyph+0x84>
21814f34:	2f 5e       	subi	r18, 0xEF	; 239
21814f36:	3f 4f       	sbci	r19, 0xFF	; 255
21814f38:	bd 14       	cp	r11, r13
21814f3a:	00 f4       	brcc	.+0      	; 0x21814f3c <u8g_GetGlyph+0x8c>
21814f3c:	18 8a       	std	Y+16, r1	; 0x10
21814f3e:	1b 8a       	std	Y+19, r1	; 0x13
21814f40:	1c 8a       	std	Y+20, r1	; 0x14
21814f42:	19 8a       	std	Y+17, r1	; 0x11
21814f44:	1a 8a       	std	Y+18, r1	; 0x12
21814f46:	80 e0       	ldi	r24, 0x00	; 0
21814f48:	90 e0       	ldi	r25, 0x00	; 0
21814f4a:	00 c0       	rjmp	.+0      	; 0x21814f4c <u8g_GetGlyph+0x9c>
21814f4c:	bf 14       	cp	r11, r15
21814f4e:	00 f0       	brcs	.+0      	; 0x21814f50 <u8g_GetGlyph+0xa0>
21814f50:	4a 2d       	mov	r20, r10
21814f52:	50 e0       	ldi	r21, 0x00	; 0
21814f54:	f9 01       	movw	r30, r18
21814f56:	84 91       	lpm	r24, Z
21814f58:	8f 3f       	cpi	r24, 0xFF	; 255
21814f5a:	01 f4       	brne	.+0      	; 0x21814f5c <u8g_GetGlyph+0xac>
21814f5c:	2f 5f       	subi	r18, 0xFF	; 255
21814f5e:	3f 4f       	sbci	r19, 0xFF	; 255
21814f60:	00 c0       	rjmp	.+0      	; 0x21814f62 <u8g_GetGlyph+0xb2>
21814f62:	fd 10       	cpse	r15, r13
21814f64:	00 c0       	rjmp	.+0      	; 0x21814f66 <u8g_GetGlyph+0xb6>
21814f66:	a9 01       	movw	r20, r18
21814f68:	4f 5f       	subi	r20, 0xFF	; 255
21814f6a:	5f 4f       	sbci	r21, 0xFF	; 255
21814f6c:	ee 20       	and	r14, r14
21814f6e:	01 f0       	breq	.+0      	; 0x21814f70 <u8g_GetGlyph+0xc0>
21814f70:	f2 e0       	ldi	r31, 0x02	; 2
21814f72:	ef 12       	cpse	r14, r31
21814f74:	00 c0       	rjmp	.+0      	; 0x21814f76 <u8g_GetGlyph+0xc6>
21814f76:	f9 01       	movw	r30, r18
21814f78:	84 91       	lpm	r24, Z
21814f7a:	8b 8b       	std	Y+19, r24	; 0x13
21814f7c:	fa 01       	movw	r30, r20
21814f7e:	44 91       	lpm	r20, Z
21814f80:	4c 8b       	std	Y+20, r20	; 0x14
21814f82:	f9 01       	movw	r30, r18
21814f84:	33 96       	adiw	r30, 0x03	; 3
21814f86:	e4 91       	lpm	r30, Z
21814f88:	e8 8b       	std	Y+16, r30	; 0x10
21814f8a:	f9 01       	movw	r30, r18
21814f8c:	34 96       	adiw	r30, 0x04	; 4
21814f8e:	e4 91       	lpm	r30, Z
21814f90:	e9 8b       	std	Y+17, r30	; 0x11
21814f92:	f9 01       	movw	r30, r18
21814f94:	35 96       	adiw	r30, 0x05	; 5
21814f96:	e4 91       	lpm	r30, Z
21814f98:	ea 8b       	std	Y+18, r30	; 0x12
21814f9a:	00 c0       	rjmp	.+0      	; 0x21814f9c <u8g_GetGlyph+0xec>
21814f9c:	98 2f       	mov	r25, r24
21814f9e:	9f 70       	andi	r25, 0x0F	; 15
21814fa0:	92 50       	subi	r25, 0x02	; 2
21814fa2:	9a 8b       	std	Y+18, r25	; 0x12
21814fa4:	82 95       	swap	r24
21814fa6:	8f 70       	andi	r24, 0x0F	; 15
21814fa8:	89 8b       	std	Y+17, r24	; 0x11
21814faa:	fa 01       	movw	r30, r20
21814fac:	44 91       	lpm	r20, Z
21814fae:	84 2f       	mov	r24, r20
21814fb0:	8f 70       	andi	r24, 0x0F	; 15
21814fb2:	8c 8b       	std	Y+20, r24	; 0x14
21814fb4:	42 95       	swap	r20
21814fb6:	4f 70       	andi	r20, 0x0F	; 15
21814fb8:	4b 8b       	std	Y+19, r20	; 0x13
21814fba:	f9 01       	movw	r30, r18
21814fbc:	32 96       	adiw	r30, 0x02	; 2
21814fbe:	e4 91       	lpm	r30, Z
21814fc0:	e2 95       	swap	r30
21814fc2:	ef 70       	andi	r30, 0x0F	; 15
21814fc4:	e8 8b       	std	Y+16, r30	; 0x10
21814fc6:	c9 01       	movw	r24, r18
21814fc8:	00 c0       	rjmp	.+0      	; 0x21814fca <u8g_GetGlyph+0x11a>
21814fca:	f9 01       	movw	r30, r18
21814fcc:	32 96       	adiw	r30, 0x02	; 2
21814fce:	e4 91       	lpm	r30, Z
21814fd0:	ec 21       	and	r30, r12
21814fd2:	2e 0f       	add	r18, r30
21814fd4:	31 1d       	adc	r19, r1
21814fd6:	24 0f       	add	r18, r20
21814fd8:	35 1f       	adc	r19, r21
21814fda:	fb 14       	cp	r15, r11
21814fdc:	01 f4       	brne	.+0      	; 0x21814fde <u8g_GetGlyph+0x12e>
21814fde:	00 c0       	rjmp	.+0      	; 0x21814fe0 <u8g_GetGlyph+0x130>
21814fe0:	f3 94       	inc	r15
21814fe2:	00 c0       	rjmp	.+0      	; 0x21814fe4 <u8g_GetGlyph+0x134>
21814fe4:	df 91       	pop	r29
21814fe6:	cf 91       	pop	r28
21814fe8:	1f 91       	pop	r17
21814fea:	0f 91       	pop	r16
21814fec:	ff 90       	pop	r15
21814fee:	ef 90       	pop	r14
21814ff0:	df 90       	pop	r13
21814ff2:	cf 90       	pop	r12
21814ff4:	bf 90       	pop	r11
21814ff6:	af 90       	pop	r10
21814ff8:	08 95       	ret

Disassembly of section .text.u8g_font_calc_str_min_box.part.0:

43029eaa <u8g_font_calc_str_min_box.part.0>:
43029eaa:	ef 92       	push	r14
43029eac:	ff 92       	push	r15
43029eae:	0f 93       	push	r16
43029eb0:	1f 93       	push	r17
43029eb2:	cf 93       	push	r28
43029eb4:	df 93       	push	r29
43029eb6:	8c 01       	movw	r16, r24
43029eb8:	ea 01       	movw	r28, r20
43029eba:	8f e7       	ldi	r24, 0x7F	; 127
43029ebc:	88 83       	st	Y, r24
43029ebe:	80 e8       	ldi	r24, 0x80	; 128
43029ec0:	89 83       	std	Y+1, r24	; 0x01
43029ec2:	db 01       	movw	r26, r22
43029ec4:	6d 91       	ld	r22, X+
43029ec6:	7d 01       	movw	r14, r26
43029ec8:	c8 01       	movw	r24, r16
43029eca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
43029ece:	f8 01       	movw	r30, r16
43029ed0:	81 89       	ldd	r24, Z+17	; 0x11
43029ed2:	81 95       	neg	r24
43029ed4:	8c 83       	std	Y+4, r24	; 0x04
43029ed6:	81 89       	ldd	r24, Z+17	; 0x11
43029ed8:	8a 83       	std	Y+2, r24	; 0x02
43029eda:	82 89       	ldd	r24, Z+18	; 0x12
43029edc:	8b 83       	std	Y+3, r24	; 0x03
43029ede:	d8 01       	movw	r26, r16
43029ee0:	52 96       	adiw	r26, 0x12	; 18
43029ee2:	9c 91       	ld	r25, X
43029ee4:	88 81       	ld	r24, Y
43029ee6:	98 17       	cp	r25, r24
43029ee8:	04 f4       	brge	.+0      	; 0x43029eea <u8g_font_calc_str_min_box.part.0+0x40>
43029eea:	98 83       	st	Y, r25
43029eec:	f8 01       	movw	r30, r16
43029eee:	84 89       	ldd	r24, Z+20	; 0x14
43029ef0:	89 0f       	add	r24, r25
43029ef2:	99 81       	ldd	r25, Y+1	; 0x01
43029ef4:	98 17       	cp	r25, r24
43029ef6:	04 f4       	brge	.+0      	; 0x43029ef8 <u8g_font_calc_str_min_box.part.0+0x4e>
43029ef8:	89 83       	std	Y+1, r24	; 0x01
43029efa:	f7 01       	movw	r30, r14
43029efc:	80 81       	ld	r24, Z
43029efe:	9c 81       	ldd	r25, Y+4	; 0x04
43029f00:	88 23       	and	r24, r24
43029f02:	01 f0       	breq	.+0      	; 0x43029f04 <u8g_font_calc_str_min_box.part.0+0x5a>
43029f04:	d8 01       	movw	r26, r16
43029f06:	50 96       	adiw	r26, 0x10	; 16
43029f08:	8c 91       	ld	r24, X
43029f0a:	89 0f       	add	r24, r25
43029f0c:	8c 83       	std	Y+4, r24	; 0x04
43029f0e:	bf ef       	ldi	r27, 0xFF	; 255
43029f10:	eb 1a       	sub	r14, r27
43029f12:	fb 0a       	sbc	r15, r27
43029f14:	60 81       	ld	r22, Z
43029f16:	c8 01       	movw	r24, r16
43029f18:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
43029f1c:	00 c0       	rjmp	.+0      	; 0x43029f1e <u8g_font_calc_str_min_box.part.0+0x74>
43029f1e:	f8 01       	movw	r30, r16
43029f20:	83 89       	ldd	r24, Z+19	; 0x13
43029f22:	89 0f       	add	r24, r25
43029f24:	8c 83       	std	Y+4, r24	; 0x04
43029f26:	91 89       	ldd	r25, Z+17	; 0x11
43029f28:	98 0f       	add	r25, r24
43029f2a:	9c 83       	std	Y+4, r25	; 0x04
43029f2c:	df 91       	pop	r29
43029f2e:	cf 91       	pop	r28
43029f30:	1f 91       	pop	r17
43029f32:	0f 91       	pop	r16
43029f34:	ff 90       	pop	r15
43029f36:	ef 90       	pop	r14
43029f38:	08 95       	ret

Disassembly of section .text.u8g_IsGlyph:

86053de4 <u8g_IsGlyph>:
86053de4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
86053de8:	21 e0       	ldi	r18, 0x01	; 1
86053dea:	89 2b       	or	r24, r25
86053dec:	01 f4       	brne	.+0      	; 0x86053dee <u8g_IsGlyph+0xa>
86053dee:	20 e0       	ldi	r18, 0x00	; 0
86053df0:	82 2f       	mov	r24, r18
86053df2:	08 95       	ret

Disassembly of section .text.u8g_GetGlyphDeltaX:

0c0a7bd8 <u8g_GetGlyphDeltaX>:
 c0a7bd8:	cf 93       	push	r28
 c0a7bda:	df 93       	push	r29
 c0a7bdc:	ec 01       	movw	r28, r24
 c0a7bde:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 c0a7be2:	89 2b       	or	r24, r25
 c0a7be4:	01 f0       	breq	.+0      	; 0xc0a7be6 <u8g_font_GetFontXDescent+0xbc7796e>
 c0a7be6:	88 89       	ldd	r24, Y+16	; 0x10
 c0a7be8:	00 c0       	rjmp	.+0      	; 0xc0a7bea <u8g_font_GetFontXDescent+0xbc77972>
 c0a7bea:	80 e0       	ldi	r24, 0x00	; 0
 c0a7bec:	df 91       	pop	r29
 c0a7bee:	cf 91       	pop	r28
 c0a7bf0:	08 95       	ret

Disassembly of section .text.u8g_draw_glyph:

1814f7ca <u8g_draw_glyph>:
1814f7ca:	4f 92       	push	r4
1814f7cc:	5f 92       	push	r5
1814f7ce:	7f 92       	push	r7
1814f7d0:	8f 92       	push	r8
1814f7d2:	9f 92       	push	r9
1814f7d4:	af 92       	push	r10
1814f7d6:	bf 92       	push	r11
1814f7d8:	cf 92       	push	r12
1814f7da:	df 92       	push	r13
1814f7dc:	ef 92       	push	r14
1814f7de:	ff 92       	push	r15
1814f7e0:	0f 93       	push	r16
1814f7e2:	1f 93       	push	r17
1814f7e4:	cf 93       	push	r28
1814f7e6:	df 93       	push	r29
1814f7e8:	1f 92       	push	r1
1814f7ea:	cd b7       	in	r28, 0x3d	; 61
1814f7ec:	de b7       	in	r29, 0x3e	; 62
1814f7ee:	2c 01       	movw	r4, r24
1814f7f0:	16 2f       	mov	r17, r22
1814f7f2:	74 2e       	mov	r7, r20
1814f7f4:	62 2f       	mov	r22, r18
1814f7f6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1814f7fa:	6c 01       	movw	r12, r24
1814f7fc:	00 97       	sbiw	r24, 0x00	; 0
1814f7fe:	01 f4       	brne	.+0      	; 0x1814f800 <u8g_font_GetFontXDescent+0x17d1f588>
1814f800:	00 c0       	rjmp	.+0      	; 0x1814f802 <u8g_font_GetFontXDescent+0x17d1f58a>
1814f802:	f2 01       	movw	r30, r4
1814f804:	84 81       	ldd	r24, Z+4	; 0x04
1814f806:	95 81       	ldd	r25, Z+5	; 0x05
1814f808:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1814f80c:	f8 2e       	mov	r15, r24
1814f80e:	f2 01       	movw	r30, r4
1814f810:	83 88       	ldd	r8, Z+19	; 0x13
1814f812:	04 89       	ldd	r16, Z+20	; 0x14
1814f814:	91 88       	ldd	r9, Z+17	; 0x11
1814f816:	91 0e       	add	r9, r17
1814f818:	82 89       	ldd	r24, Z+18	; 0x12
1814f81a:	78 1a       	sub	r7, r24
1814f81c:	17 2d       	mov	r17, r7
1814f81e:	10 1b       	sub	r17, r16
1814f820:	28 2d       	mov	r18, r8
1814f822:	41 2f       	mov	r20, r17
1814f824:	69 2d       	mov	r22, r9
1814f826:	c2 01       	movw	r24, r4
1814f828:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1814f82c:	88 23       	and	r24, r24
1814f82e:	01 f0       	breq	.+0      	; 0x1814f830 <u8g_font_GetFontXDescent+0x17d1f5b8>
1814f830:	cf 0c       	add	r12, r15
1814f832:	d1 1c       	adc	r13, r1
1814f834:	f7 e0       	ldi	r31, 0x07	; 7
1814f836:	8f 0e       	add	r8, r31
1814f838:	86 94       	lsr	r8
1814f83a:	86 94       	lsr	r8
1814f83c:	86 94       	lsr	r8
1814f83e:	a8 2c       	mov	r10, r8
1814f840:	b1 2c       	mov	r11, r1
1814f842:	17 15       	cp	r17, r7
1814f844:	01 f0       	breq	.+0      	; 0x1814f846 <u8g_font_GetFontXDescent+0x17d1f5ce>
1814f846:	39 2d       	mov	r19, r9
1814f848:	76 01       	movw	r14, r12
1814f84a:	8e 2d       	mov	r24, r14
1814f84c:	8c 19       	sub	r24, r12
1814f84e:	88 15       	cp	r24, r8
1814f850:	00 f4       	brcc	.+0      	; 0x1814f852 <u8g_font_GetFontXDescent+0x17d1f5da>
1814f852:	f7 01       	movw	r30, r14
1814f854:	04 91       	lpm	r16, Z
1814f856:	20 e0       	ldi	r18, 0x00	; 0
1814f858:	41 2f       	mov	r20, r17
1814f85a:	63 2f       	mov	r22, r19
1814f85c:	c2 01       	movw	r24, r4
1814f85e:	39 83       	std	Y+1, r19	; 0x01
1814f860:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
1814f864:	ff ef       	ldi	r31, 0xFF	; 255
1814f866:	ef 1a       	sub	r14, r31
1814f868:	ff 0a       	sbc	r15, r31
1814f86a:	39 81       	ldd	r19, Y+1	; 0x01
1814f86c:	38 5f       	subi	r19, 0xF8	; 248
1814f86e:	00 c0       	rjmp	.+0      	; 0x1814f870 <u8g_font_GetFontXDescent+0x17d1f5f8>
1814f870:	ca 0c       	add	r12, r10
1814f872:	db 1c       	adc	r13, r11
1814f874:	1f 5f       	subi	r17, 0xFF	; 255
1814f876:	00 c0       	rjmp	.+0      	; 0x1814f878 <u8g_font_GetFontXDescent+0x17d1f600>
1814f878:	f2 01       	movw	r30, r4
1814f87a:	80 89       	ldd	r24, Z+16	; 0x10
1814f87c:	00 c0       	rjmp	.+0      	; 0x1814f87e <u8g_font_GetFontXDescent+0x17d1f606>
1814f87e:	80 e0       	ldi	r24, 0x00	; 0
1814f880:	0f 90       	pop	r0
1814f882:	df 91       	pop	r29
1814f884:	cf 91       	pop	r28
1814f886:	1f 91       	pop	r17
1814f888:	0f 91       	pop	r16
1814f88a:	ff 90       	pop	r15
1814f88c:	ef 90       	pop	r14
1814f88e:	df 90       	pop	r13
1814f890:	cf 90       	pop	r12
1814f892:	bf 90       	pop	r11
1814f894:	af 90       	pop	r10
1814f896:	9f 90       	pop	r9
1814f898:	8f 90       	pop	r8
1814f89a:	7f 90       	pop	r7
1814f89c:	5f 90       	pop	r5
1814f89e:	4f 90       	pop	r4
1814f8a0:	08 95       	ret

Disassembly of section .text.u8g_DrawGlyph:

3029f06c <u8g_DrawGlyph>:
3029f06c:	0f 93       	push	r16
3029f06e:	1f 93       	push	r17
3029f070:	cf 93       	push	r28
3029f072:	df 93       	push	r29
3029f074:	00 d0       	rcall	.+0      	; 0x3029f076 <u8g_font_GetFontXDescent+0x2fe6edfe>
3029f076:	1f 92       	push	r1
3029f078:	cd b7       	in	r28, 0x3d	; 61
3029f07a:	de b7       	in	r29, 0x3e	; 62
3029f07c:	8c 01       	movw	r16, r24
3029f07e:	dc 01       	movw	r26, r24
3029f080:	55 96       	adiw	r26, 0x15	; 21
3029f082:	ed 91       	ld	r30, X+
3029f084:	fc 91       	ld	r31, X
3029f086:	56 97       	sbiw	r26, 0x16	; 22
3029f088:	2b 83       	std	Y+3, r18	; 0x03
3029f08a:	4a 83       	std	Y+2, r20	; 0x02
3029f08c:	69 83       	std	Y+1, r22	; 0x01
3029f08e:	09 95       	icall
3029f090:	4a 81       	ldd	r20, Y+2	; 0x02
3029f092:	48 0f       	add	r20, r24
3029f094:	2b 81       	ldd	r18, Y+3	; 0x03
3029f096:	69 81       	ldd	r22, Y+1	; 0x01
3029f098:	c8 01       	movw	r24, r16
3029f09a:	0f 90       	pop	r0
3029f09c:	0f 90       	pop	r0
3029f09e:	0f 90       	pop	r0
3029f0a0:	df 91       	pop	r29
3029f0a2:	cf 91       	pop	r28
3029f0a4:	1f 91       	pop	r17
3029f0a6:	0f 91       	pop	r16
3029f0a8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_draw_glyph90:

6053e118 <u8g_draw_glyph90>:
6053e118:	4f 92       	push	r4
6053e11a:	5f 92       	push	r5
6053e11c:	7f 92       	push	r7
6053e11e:	8f 92       	push	r8
6053e120:	9f 92       	push	r9
6053e122:	af 92       	push	r10
6053e124:	bf 92       	push	r11
6053e126:	cf 92       	push	r12
6053e128:	df 92       	push	r13
6053e12a:	ef 92       	push	r14
6053e12c:	ff 92       	push	r15
6053e12e:	0f 93       	push	r16
6053e130:	1f 93       	push	r17
6053e132:	cf 93       	push	r28
6053e134:	df 93       	push	r29
6053e136:	1f 92       	push	r1
6053e138:	cd b7       	in	r28, 0x3d	; 61
6053e13a:	de b7       	in	r29, 0x3e	; 62
6053e13c:	2c 01       	movw	r4, r24
6053e13e:	b6 2e       	mov	r11, r22
6053e140:	a4 2e       	mov	r10, r20
6053e142:	62 2f       	mov	r22, r18
6053e144:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6053e148:	6c 01       	movw	r12, r24
6053e14a:	00 97       	sbiw	r24, 0x00	; 0
6053e14c:	01 f4       	brne	.+0      	; 0x6053e14e <u8g_font_GetFontXDescent+0x6010ded6>
6053e14e:	00 c0       	rjmp	.+0      	; 0x6053e150 <u8g_font_GetFontXDescent+0x6010ded8>
6053e150:	f2 01       	movw	r30, r4
6053e152:	84 81       	ldd	r24, Z+4	; 0x04
6053e154:	95 81       	ldd	r25, Z+5	; 0x05
6053e156:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6053e15a:	88 2e       	mov	r8, r24
6053e15c:	f2 01       	movw	r30, r4
6053e15e:	13 89       	ldd	r17, Z+19	; 0x13
6053e160:	e4 88       	ldd	r14, Z+20	; 0x14
6053e162:	f2 88       	ldd	r15, Z+18	; 0x12
6053e164:	f3 94       	inc	r15
6053e166:	fb 0c       	add	r15, r11
6053e168:	91 88       	ldd	r9, Z+17	; 0x11
6053e16a:	9a 0c       	add	r9, r10
6053e16c:	01 2f       	mov	r16, r17
6053e16e:	2e 2d       	mov	r18, r14
6053e170:	49 2d       	mov	r20, r9
6053e172:	6f 2d       	mov	r22, r15
6053e174:	c2 01       	movw	r24, r4
6053e176:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6053e17a:	88 23       	and	r24, r24
6053e17c:	01 f0       	breq	.+0      	; 0x6053e17e <u8g_font_GetFontXDescent+0x6010df06>
6053e17e:	c8 0c       	add	r12, r8
6053e180:	d1 1c       	adc	r13, r1
6053e182:	77 e0       	ldi	r23, 0x07	; 7
6053e184:	87 2e       	mov	r8, r23
6053e186:	81 0e       	add	r8, r17
6053e188:	86 94       	lsr	r8
6053e18a:	86 94       	lsr	r8
6053e18c:	86 94       	lsr	r8
6053e18e:	1f ef       	ldi	r17, 0xFF	; 255
6053e190:	1e 0d       	add	r17, r14
6053e192:	1f 0d       	add	r17, r15
6053e194:	71 2e       	mov	r7, r17
6053e196:	7e 18       	sub	r7, r14
6053e198:	a8 2c       	mov	r10, r8
6053e19a:	b1 2c       	mov	r11, r1
6053e19c:	17 15       	cp	r17, r7
6053e19e:	01 f0       	breq	.+0      	; 0x6053e1a0 <u8g_font_GetFontXDescent+0x6010df28>
6053e1a0:	39 2d       	mov	r19, r9
6053e1a2:	76 01       	movw	r14, r12
6053e1a4:	8e 2d       	mov	r24, r14
6053e1a6:	8c 19       	sub	r24, r12
6053e1a8:	88 15       	cp	r24, r8
6053e1aa:	00 f4       	brcc	.+0      	; 0x6053e1ac <u8g_font_GetFontXDescent+0x6010df34>
6053e1ac:	f7 01       	movw	r30, r14
6053e1ae:	04 91       	lpm	r16, Z
6053e1b0:	21 e0       	ldi	r18, 0x01	; 1
6053e1b2:	43 2f       	mov	r20, r19
6053e1b4:	61 2f       	mov	r22, r17
6053e1b6:	c2 01       	movw	r24, r4
6053e1b8:	39 83       	std	Y+1, r19	; 0x01
6053e1ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
6053e1be:	ff ef       	ldi	r31, 0xFF	; 255
6053e1c0:	ef 1a       	sub	r14, r31
6053e1c2:	ff 0a       	sbc	r15, r31
6053e1c4:	39 81       	ldd	r19, Y+1	; 0x01
6053e1c6:	38 5f       	subi	r19, 0xF8	; 248
6053e1c8:	00 c0       	rjmp	.+0      	; 0x6053e1ca <u8g_font_GetFontXDescent+0x6010df52>
6053e1ca:	ca 0c       	add	r12, r10
6053e1cc:	db 1c       	adc	r13, r11
6053e1ce:	11 50       	subi	r17, 0x01	; 1
6053e1d0:	00 c0       	rjmp	.+0      	; 0x6053e1d2 <u8g_font_GetFontXDescent+0x6010df5a>
6053e1d2:	f2 01       	movw	r30, r4
6053e1d4:	80 89       	ldd	r24, Z+16	; 0x10
6053e1d6:	00 c0       	rjmp	.+0      	; 0x6053e1d8 <u8g_font_GetFontXDescent+0x6010df60>
6053e1d8:	80 e0       	ldi	r24, 0x00	; 0
6053e1da:	0f 90       	pop	r0
6053e1dc:	df 91       	pop	r29
6053e1de:	cf 91       	pop	r28
6053e1e0:	1f 91       	pop	r17
6053e1e2:	0f 91       	pop	r16
6053e1e4:	ff 90       	pop	r15
6053e1e6:	ef 90       	pop	r14
6053e1e8:	df 90       	pop	r13
6053e1ea:	cf 90       	pop	r12
6053e1ec:	bf 90       	pop	r11
6053e1ee:	af 90       	pop	r10
6053e1f0:	9f 90       	pop	r9
6053e1f2:	8f 90       	pop	r8
6053e1f4:	7f 90       	pop	r7
6053e1f6:	5f 90       	pop	r5
6053e1f8:	4f 90       	pop	r4
6053e1fa:	08 95       	ret

Disassembly of section .text.u8g_DrawGlyph90:

c0a7c314 <u8g_DrawGlyph90>:
c0a7c314:	0f 93       	push	r16
c0a7c316:	1f 93       	push	r17
c0a7c318:	cf 93       	push	r28
c0a7c31a:	df 93       	push	r29
c0a7c31c:	00 d0       	rcall	.+0      	; 0xc0a7c31e <u8g_font_GetFontXDescent+0xc064c0a6>
c0a7c31e:	1f 92       	push	r1
c0a7c320:	cd b7       	in	r28, 0x3d	; 61
c0a7c322:	de b7       	in	r29, 0x3e	; 62
c0a7c324:	8c 01       	movw	r16, r24
c0a7c326:	dc 01       	movw	r26, r24
c0a7c328:	55 96       	adiw	r26, 0x15	; 21
c0a7c32a:	ed 91       	ld	r30, X+
c0a7c32c:	fc 91       	ld	r31, X
c0a7c32e:	56 97       	sbiw	r26, 0x16	; 22
c0a7c330:	2b 83       	std	Y+3, r18	; 0x03
c0a7c332:	4a 83       	std	Y+2, r20	; 0x02
c0a7c334:	69 83       	std	Y+1, r22	; 0x01
c0a7c336:	09 95       	icall
c0a7c338:	69 81       	ldd	r22, Y+1	; 0x01
c0a7c33a:	68 1b       	sub	r22, r24
c0a7c33c:	2b 81       	ldd	r18, Y+3	; 0x03
c0a7c33e:	4a 81       	ldd	r20, Y+2	; 0x02
c0a7c340:	c8 01       	movw	r24, r16
c0a7c342:	0f 90       	pop	r0
c0a7c344:	0f 90       	pop	r0
c0a7c346:	0f 90       	pop	r0
c0a7c348:	df 91       	pop	r29
c0a7c34a:	cf 91       	pop	r28
c0a7c34c:	1f 91       	pop	r17
c0a7c34e:	0f 91       	pop	r16
c0a7c350:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_draw_glyph180:

814f8668 <u8g_draw_glyph180>:
814f8668:	4f 92       	push	r4
814f866a:	5f 92       	push	r5
814f866c:	7f 92       	push	r7
814f866e:	8f 92       	push	r8
814f8670:	9f 92       	push	r9
814f8672:	af 92       	push	r10
814f8674:	bf 92       	push	r11
814f8676:	cf 92       	push	r12
814f8678:	df 92       	push	r13
814f867a:	ef 92       	push	r14
814f867c:	ff 92       	push	r15
814f867e:	0f 93       	push	r16
814f8680:	1f 93       	push	r17
814f8682:	cf 93       	push	r28
814f8684:	df 93       	push	r29
814f8686:	1f 92       	push	r1
814f8688:	cd b7       	in	r28, 0x3d	; 61
814f868a:	de b7       	in	r29, 0x3e	; 62
814f868c:	2c 01       	movw	r4, r24
814f868e:	86 2e       	mov	r8, r22
814f8690:	b4 2e       	mov	r11, r20
814f8692:	62 2f       	mov	r22, r18
814f8694:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
814f8698:	6c 01       	movw	r12, r24
814f869a:	00 97       	sbiw	r24, 0x00	; 0
814f869c:	01 f4       	brne	.+0      	; 0x814f869e <u8g_font_GetFontXDescent+0x810c8426>
814f869e:	00 c0       	rjmp	.+0      	; 0x814f86a0 <u8g_font_GetFontXDescent+0x810c8428>
814f86a0:	f2 01       	movw	r30, r4
814f86a2:	84 81       	ldd	r24, Z+4	; 0x04
814f86a4:	95 81       	ldd	r25, Z+5	; 0x05
814f86a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
814f86aa:	a8 2e       	mov	r10, r24
814f86ac:	f2 01       	movw	r30, r4
814f86ae:	13 89       	ldd	r17, Z+19	; 0x13
814f86b0:	e4 88       	ldd	r14, Z+20	; 0x14
814f86b2:	81 89       	ldd	r24, Z+17	; 0x11
814f86b4:	88 1a       	sub	r8, r24
814f86b6:	f2 88       	ldd	r15, Z+18	; 0x12
814f86b8:	f3 94       	inc	r15
814f86ba:	fb 0c       	add	r15, r11
814f86bc:	68 2d       	mov	r22, r8
814f86be:	61 1b       	sub	r22, r17
814f86c0:	6f 5f       	subi	r22, 0xFF	; 255
814f86c2:	0e 2d       	mov	r16, r14
814f86c4:	21 2f       	mov	r18, r17
814f86c6:	4f 2d       	mov	r20, r15
814f86c8:	c2 01       	movw	r24, r4
814f86ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
814f86ce:	88 23       	and	r24, r24
814f86d0:	01 f0       	breq	.+0      	; 0x814f86d2 <u8g_font_GetFontXDescent+0x810c845a>
814f86d2:	ca 0c       	add	r12, r10
814f86d4:	d1 1c       	adc	r13, r1
814f86d6:	e7 e0       	ldi	r30, 0x07	; 7
814f86d8:	9e 2e       	mov	r9, r30
814f86da:	91 0e       	add	r9, r17
814f86dc:	96 94       	lsr	r9
814f86de:	96 94       	lsr	r9
814f86e0:	96 94       	lsr	r9
814f86e2:	1f ef       	ldi	r17, 0xFF	; 255
814f86e4:	1e 0d       	add	r17, r14
814f86e6:	1f 0d       	add	r17, r15
814f86e8:	71 2e       	mov	r7, r17
814f86ea:	7e 18       	sub	r7, r14
814f86ec:	a9 2c       	mov	r10, r9
814f86ee:	b1 2c       	mov	r11, r1
814f86f0:	17 15       	cp	r17, r7
814f86f2:	01 f0       	breq	.+0      	; 0x814f86f4 <u8g_font_GetFontXDescent+0x810c847c>
814f86f4:	38 2d       	mov	r19, r8
814f86f6:	76 01       	movw	r14, r12
814f86f8:	8e 2d       	mov	r24, r14
814f86fa:	8c 19       	sub	r24, r12
814f86fc:	89 15       	cp	r24, r9
814f86fe:	00 f4       	brcc	.+0      	; 0x814f8700 <u8g_font_GetFontXDescent+0x810c8488>
814f8700:	f7 01       	movw	r30, r14
814f8702:	04 91       	lpm	r16, Z
814f8704:	22 e0       	ldi	r18, 0x02	; 2
814f8706:	41 2f       	mov	r20, r17
814f8708:	63 2f       	mov	r22, r19
814f870a:	c2 01       	movw	r24, r4
814f870c:	39 83       	std	Y+1, r19	; 0x01
814f870e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
814f8712:	ff ef       	ldi	r31, 0xFF	; 255
814f8714:	ef 1a       	sub	r14, r31
814f8716:	ff 0a       	sbc	r15, r31
814f8718:	39 81       	ldd	r19, Y+1	; 0x01
814f871a:	38 50       	subi	r19, 0x08	; 8
814f871c:	00 c0       	rjmp	.+0      	; 0x814f871e <u8g_font_GetFontXDescent+0x810c84a6>
814f871e:	ca 0c       	add	r12, r10
814f8720:	db 1c       	adc	r13, r11
814f8722:	11 50       	subi	r17, 0x01	; 1
814f8724:	00 c0       	rjmp	.+0      	; 0x814f8726 <u8g_font_GetFontXDescent+0x810c84ae>
814f8726:	f2 01       	movw	r30, r4
814f8728:	80 89       	ldd	r24, Z+16	; 0x10
814f872a:	00 c0       	rjmp	.+0      	; 0x814f872c <u8g_font_GetFontXDescent+0x810c84b4>
814f872c:	80 e0       	ldi	r24, 0x00	; 0
814f872e:	0f 90       	pop	r0
814f8730:	df 91       	pop	r29
814f8732:	cf 91       	pop	r28
814f8734:	1f 91       	pop	r17
814f8736:	0f 91       	pop	r16
814f8738:	ff 90       	pop	r15
814f873a:	ef 90       	pop	r14
814f873c:	df 90       	pop	r13
814f873e:	cf 90       	pop	r12
814f8740:	bf 90       	pop	r11
814f8742:	af 90       	pop	r10
814f8744:	9f 90       	pop	r9
814f8746:	8f 90       	pop	r8
814f8748:	7f 90       	pop	r7
814f874a:	5f 90       	pop	r5
814f874c:	4f 90       	pop	r4
814f874e:	08 95       	ret

Disassembly of section .text.u8g_DrawGlyph180:

029f0db8 <u8g_DrawGlyph180>:
 29f0db8:	0f 93       	push	r16
 29f0dba:	1f 93       	push	r17
 29f0dbc:	cf 93       	push	r28
 29f0dbe:	df 93       	push	r29
 29f0dc0:	00 d0       	rcall	.+0      	; 0x29f0dc2 <u8g_font_GetFontXDescent+0x25c0b4a>
 29f0dc2:	1f 92       	push	r1
 29f0dc4:	cd b7       	in	r28, 0x3d	; 61
 29f0dc6:	de b7       	in	r29, 0x3e	; 62
 29f0dc8:	8c 01       	movw	r16, r24
 29f0dca:	dc 01       	movw	r26, r24
 29f0dcc:	55 96       	adiw	r26, 0x15	; 21
 29f0dce:	ed 91       	ld	r30, X+
 29f0dd0:	fc 91       	ld	r31, X
 29f0dd2:	56 97       	sbiw	r26, 0x16	; 22
 29f0dd4:	2b 83       	std	Y+3, r18	; 0x03
 29f0dd6:	4a 83       	std	Y+2, r20	; 0x02
 29f0dd8:	69 83       	std	Y+1, r22	; 0x01
 29f0dda:	09 95       	icall
 29f0ddc:	4a 81       	ldd	r20, Y+2	; 0x02
 29f0dde:	48 1b       	sub	r20, r24
 29f0de0:	2b 81       	ldd	r18, Y+3	; 0x03
 29f0de2:	69 81       	ldd	r22, Y+1	; 0x01
 29f0de4:	c8 01       	movw	r24, r16
 29f0de6:	0f 90       	pop	r0
 29f0de8:	0f 90       	pop	r0
 29f0dea:	0f 90       	pop	r0
 29f0dec:	df 91       	pop	r29
 29f0dee:	cf 91       	pop	r28
 29f0df0:	1f 91       	pop	r17
 29f0df2:	0f 91       	pop	r16
 29f0df4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_draw_glyph270:

053e1bb0 <u8g_draw_glyph270>:
 53e1bb0:	4f 92       	push	r4
 53e1bb2:	5f 92       	push	r5
 53e1bb4:	7f 92       	push	r7
 53e1bb6:	8f 92       	push	r8
 53e1bb8:	9f 92       	push	r9
 53e1bba:	af 92       	push	r10
 53e1bbc:	bf 92       	push	r11
 53e1bbe:	cf 92       	push	r12
 53e1bc0:	df 92       	push	r13
 53e1bc2:	ef 92       	push	r14
 53e1bc4:	ff 92       	push	r15
 53e1bc6:	0f 93       	push	r16
 53e1bc8:	1f 93       	push	r17
 53e1bca:	cf 93       	push	r28
 53e1bcc:	df 93       	push	r29
 53e1bce:	1f 92       	push	r1
 53e1bd0:	cd b7       	in	r28, 0x3d	; 61
 53e1bd2:	de b7       	in	r29, 0x3e	; 62
 53e1bd4:	2c 01       	movw	r4, r24
 53e1bd6:	16 2f       	mov	r17, r22
 53e1bd8:	84 2e       	mov	r8, r20
 53e1bda:	62 2f       	mov	r22, r18
 53e1bdc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53e1be0:	6c 01       	movw	r12, r24
 53e1be2:	00 97       	sbiw	r24, 0x00	; 0
 53e1be4:	01 f4       	brne	.+0      	; 0x53e1be6 <u8g_font_GetFontXDescent+0x4fb196e>
 53e1be6:	00 c0       	rjmp	.+0      	; 0x53e1be8 <u8g_font_GetFontXDescent+0x4fb1970>
 53e1be8:	f2 01       	movw	r30, r4
 53e1bea:	84 81       	ldd	r24, Z+4	; 0x04
 53e1bec:	95 81       	ldd	r25, Z+5	; 0x05
 53e1bee:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53e1bf2:	e8 2e       	mov	r14, r24
 53e1bf4:	f2 01       	movw	r30, r4
 53e1bf6:	93 88       	ldd	r9, Z+19	; 0x13
 53e1bf8:	f4 88       	ldd	r15, Z+20	; 0x14
 53e1bfa:	81 89       	ldd	r24, Z+17	; 0x11
 53e1bfc:	88 1a       	sub	r8, r24
 53e1bfe:	92 89       	ldd	r25, Z+18	; 0x12
 53e1c00:	9f 0d       	add	r25, r15
 53e1c02:	19 1b       	sub	r17, r25
 53e1c04:	48 2d       	mov	r20, r8
 53e1c06:	49 19       	sub	r20, r9
 53e1c08:	4f 5f       	subi	r20, 0xFF	; 255
 53e1c0a:	09 2d       	mov	r16, r9
 53e1c0c:	2f 2d       	mov	r18, r15
 53e1c0e:	61 2f       	mov	r22, r17
 53e1c10:	c2 01       	movw	r24, r4
 53e1c12:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53e1c16:	88 23       	and	r24, r24
 53e1c18:	01 f0       	breq	.+0      	; 0x53e1c1a <u8g_font_GetFontXDescent+0x4fb19a2>
 53e1c1a:	ce 0c       	add	r12, r14
 53e1c1c:	d1 1c       	adc	r13, r1
 53e1c1e:	f7 e0       	ldi	r31, 0x07	; 7
 53e1c20:	9f 0e       	add	r9, r31
 53e1c22:	96 94       	lsr	r9
 53e1c24:	96 94       	lsr	r9
 53e1c26:	96 94       	lsr	r9
 53e1c28:	71 2e       	mov	r7, r17
 53e1c2a:	7f 0c       	add	r7, r15
 53e1c2c:	a9 2c       	mov	r10, r9
 53e1c2e:	b1 2c       	mov	r11, r1
 53e1c30:	17 15       	cp	r17, r7
 53e1c32:	01 f0       	breq	.+0      	; 0x53e1c34 <u8g_font_GetFontXDescent+0x4fb19bc>
 53e1c34:	38 2d       	mov	r19, r8
 53e1c36:	76 01       	movw	r14, r12
 53e1c38:	8e 2d       	mov	r24, r14
 53e1c3a:	8c 19       	sub	r24, r12
 53e1c3c:	89 15       	cp	r24, r9
 53e1c3e:	00 f4       	brcc	.+0      	; 0x53e1c40 <u8g_font_GetFontXDescent+0x4fb19c8>
 53e1c40:	f7 01       	movw	r30, r14
 53e1c42:	04 91       	lpm	r16, Z
 53e1c44:	23 e0       	ldi	r18, 0x03	; 3
 53e1c46:	43 2f       	mov	r20, r19
 53e1c48:	61 2f       	mov	r22, r17
 53e1c4a:	c2 01       	movw	r24, r4
 53e1c4c:	39 83       	std	Y+1, r19	; 0x01
 53e1c4e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53e1c52:	ff ef       	ldi	r31, 0xFF	; 255
 53e1c54:	ef 1a       	sub	r14, r31
 53e1c56:	ff 0a       	sbc	r15, r31
 53e1c58:	39 81       	ldd	r19, Y+1	; 0x01
 53e1c5a:	38 50       	subi	r19, 0x08	; 8
 53e1c5c:	00 c0       	rjmp	.+0      	; 0x53e1c5e <u8g_font_GetFontXDescent+0x4fb19e6>
 53e1c5e:	ca 0c       	add	r12, r10
 53e1c60:	db 1c       	adc	r13, r11
 53e1c62:	1f 5f       	subi	r17, 0xFF	; 255
 53e1c64:	00 c0       	rjmp	.+0      	; 0x53e1c66 <u8g_font_GetFontXDescent+0x4fb19ee>
 53e1c66:	f2 01       	movw	r30, r4
 53e1c68:	80 89       	ldd	r24, Z+16	; 0x10
 53e1c6a:	00 c0       	rjmp	.+0      	; 0x53e1c6c <u8g_font_GetFontXDescent+0x4fb19f4>
 53e1c6c:	80 e0       	ldi	r24, 0x00	; 0
 53e1c6e:	0f 90       	pop	r0
 53e1c70:	df 91       	pop	r29
 53e1c72:	cf 91       	pop	r28
 53e1c74:	1f 91       	pop	r17
 53e1c76:	0f 91       	pop	r16
 53e1c78:	ff 90       	pop	r15
 53e1c7a:	ef 90       	pop	r14
 53e1c7c:	df 90       	pop	r13
 53e1c7e:	cf 90       	pop	r12
 53e1c80:	bf 90       	pop	r11
 53e1c82:	af 90       	pop	r10
 53e1c84:	9f 90       	pop	r9
 53e1c86:	8f 90       	pop	r8
 53e1c88:	7f 90       	pop	r7
 53e1c8a:	5f 90       	pop	r5
 53e1c8c:	4f 90       	pop	r4
 53e1c8e:	08 95       	ret

Disassembly of section .text.u8g_DrawGlyph270:

0a7c3840 <u8g_DrawGlyph270>:
 a7c3840:	0f 93       	push	r16
 a7c3842:	1f 93       	push	r17
 a7c3844:	cf 93       	push	r28
 a7c3846:	df 93       	push	r29
 a7c3848:	00 d0       	rcall	.+0      	; 0xa7c384a <u8g_font_GetFontXDescent+0xa3935d2>
 a7c384a:	1f 92       	push	r1
 a7c384c:	cd b7       	in	r28, 0x3d	; 61
 a7c384e:	de b7       	in	r29, 0x3e	; 62
 a7c3850:	8c 01       	movw	r16, r24
 a7c3852:	dc 01       	movw	r26, r24
 a7c3854:	55 96       	adiw	r26, 0x15	; 21
 a7c3856:	ed 91       	ld	r30, X+
 a7c3858:	fc 91       	ld	r31, X
 a7c385a:	56 97       	sbiw	r26, 0x16	; 22
 a7c385c:	2b 83       	std	Y+3, r18	; 0x03
 a7c385e:	4a 83       	std	Y+2, r20	; 0x02
 a7c3860:	69 83       	std	Y+1, r22	; 0x01
 a7c3862:	09 95       	icall
 a7c3864:	69 81       	ldd	r22, Y+1	; 0x01
 a7c3866:	68 0f       	add	r22, r24
 a7c3868:	2b 81       	ldd	r18, Y+3	; 0x03
 a7c386a:	4a 81       	ldd	r20, Y+2	; 0x02
 a7c386c:	c8 01       	movw	r24, r16
 a7c386e:	0f 90       	pop	r0
 a7c3870:	0f 90       	pop	r0
 a7c3872:	0f 90       	pop	r0
 a7c3874:	df 91       	pop	r29
 a7c3876:	cf 91       	pop	r28
 a7c3878:	1f 91       	pop	r17
 a7c387a:	0f 91       	pop	r16
 a7c387c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_DrawStr:

14f870c0 <u8g_DrawStr>:
14f870c0:	af 92       	push	r10
14f870c2:	bf 92       	push	r11
14f870c4:	df 92       	push	r13
14f870c6:	ef 92       	push	r14
14f870c8:	ff 92       	push	r15
14f870ca:	0f 93       	push	r16
14f870cc:	1f 93       	push	r17
14f870ce:	cf 93       	push	r28
14f870d0:	df 93       	push	r29
14f870d2:	00 d0       	rcall	.+0      	; 0x14f870d4 <u8g_font_GetFontXDescent+0x14b56e5c>
14f870d4:	cd b7       	in	r28, 0x3d	; 61
14f870d6:	de b7       	in	r29, 0x3e	; 62
14f870d8:	8c 01       	movw	r16, r24
14f870da:	e6 2e       	mov	r14, r22
14f870dc:	f4 2e       	mov	r15, r20
14f870de:	dc 01       	movw	r26, r24
14f870e0:	55 96       	adiw	r26, 0x15	; 21
14f870e2:	ed 91       	ld	r30, X+
14f870e4:	fc 91       	ld	r31, X
14f870e6:	56 97       	sbiw	r26, 0x16	; 22
14f870e8:	29 83       	std	Y+1, r18	; 0x01
14f870ea:	3a 83       	std	Y+2, r19	; 0x02
14f870ec:	09 95       	icall
14f870ee:	f8 0e       	add	r15, r24
14f870f0:	29 81       	ldd	r18, Y+1	; 0x01
14f870f2:	a2 2e       	mov	r10, r18
14f870f4:	3a 81       	ldd	r19, Y+2	; 0x02
14f870f6:	b3 2e       	mov	r11, r19
14f870f8:	d1 2c       	mov	r13, r1
14f870fa:	f5 01       	movw	r30, r10
14f870fc:	21 91       	ld	r18, Z+
14f870fe:	5f 01       	movw	r10, r30
14f87100:	22 23       	and	r18, r18
14f87102:	01 f0       	breq	.+0      	; 0x14f87104 <u8g_font_GetFontXDescent+0x14b56e8c>
14f87104:	4f 2d       	mov	r20, r15
14f87106:	6e 2d       	mov	r22, r14
14f87108:	c8 01       	movw	r24, r16
14f8710a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
14f8710e:	e8 0e       	add	r14, r24
14f87110:	d8 0e       	add	r13, r24
14f87112:	00 c0       	rjmp	.+0      	; 0x14f87114 <u8g_font_GetFontXDescent+0x14b56e9c>
14f87114:	8d 2d       	mov	r24, r13
14f87116:	0f 90       	pop	r0
14f87118:	0f 90       	pop	r0
14f8711a:	df 91       	pop	r29
14f8711c:	cf 91       	pop	r28
14f8711e:	1f 91       	pop	r17
14f87120:	0f 91       	pop	r16
14f87122:	ff 90       	pop	r15
14f87124:	ef 90       	pop	r14
14f87126:	df 90       	pop	r13
14f87128:	bf 90       	pop	r11
14f8712a:	af 90       	pop	r10
14f8712c:	08 95       	ret

Disassembly of section .text.u8g_DrawStr90:

29f0e1ee <u8g_DrawStr90>:
29f0e1ee:	af 92       	push	r10
29f0e1f0:	bf 92       	push	r11
29f0e1f2:	df 92       	push	r13
29f0e1f4:	ef 92       	push	r14
29f0e1f6:	ff 92       	push	r15
29f0e1f8:	0f 93       	push	r16
29f0e1fa:	1f 93       	push	r17
29f0e1fc:	cf 93       	push	r28
29f0e1fe:	df 93       	push	r29
29f0e200:	00 d0       	rcall	.+0      	; 0x29f0e202 <u8g_font_GetFontXDescent+0x29addf8a>
29f0e202:	cd b7       	in	r28, 0x3d	; 61
29f0e204:	de b7       	in	r29, 0x3e	; 62
29f0e206:	8c 01       	movw	r16, r24
29f0e208:	f6 2e       	mov	r15, r22
29f0e20a:	e4 2e       	mov	r14, r20
29f0e20c:	dc 01       	movw	r26, r24
29f0e20e:	55 96       	adiw	r26, 0x15	; 21
29f0e210:	ed 91       	ld	r30, X+
29f0e212:	fc 91       	ld	r31, X
29f0e214:	56 97       	sbiw	r26, 0x16	; 22
29f0e216:	29 83       	std	Y+1, r18	; 0x01
29f0e218:	3a 83       	std	Y+2, r19	; 0x02
29f0e21a:	09 95       	icall
29f0e21c:	f8 1a       	sub	r15, r24
29f0e21e:	29 81       	ldd	r18, Y+1	; 0x01
29f0e220:	a2 2e       	mov	r10, r18
29f0e222:	3a 81       	ldd	r19, Y+2	; 0x02
29f0e224:	b3 2e       	mov	r11, r19
29f0e226:	d1 2c       	mov	r13, r1
29f0e228:	f5 01       	movw	r30, r10
29f0e22a:	21 91       	ld	r18, Z+
29f0e22c:	5f 01       	movw	r10, r30
29f0e22e:	22 23       	and	r18, r18
29f0e230:	01 f0       	breq	.+0      	; 0x29f0e232 <u8g_font_GetFontXDescent+0x29addfba>
29f0e232:	4e 2d       	mov	r20, r14
29f0e234:	6f 2d       	mov	r22, r15
29f0e236:	c8 01       	movw	r24, r16
29f0e238:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
29f0e23c:	e8 0e       	add	r14, r24
29f0e23e:	d8 0e       	add	r13, r24
29f0e240:	00 c0       	rjmp	.+0      	; 0x29f0e242 <u8g_font_GetFontXDescent+0x29addfca>
29f0e242:	8d 2d       	mov	r24, r13
29f0e244:	0f 90       	pop	r0
29f0e246:	0f 90       	pop	r0
29f0e248:	df 91       	pop	r29
29f0e24a:	cf 91       	pop	r28
29f0e24c:	1f 91       	pop	r17
29f0e24e:	0f 91       	pop	r16
29f0e250:	ff 90       	pop	r15
29f0e252:	ef 90       	pop	r14
29f0e254:	df 90       	pop	r13
29f0e256:	bf 90       	pop	r11
29f0e258:	af 90       	pop	r10
29f0e25a:	08 95       	ret

Disassembly of section .text.u8g_DrawStr180:

53e1c44a <u8g_DrawStr180>:
53e1c44a:	af 92       	push	r10
53e1c44c:	bf 92       	push	r11
53e1c44e:	df 92       	push	r13
53e1c450:	ef 92       	push	r14
53e1c452:	ff 92       	push	r15
53e1c454:	0f 93       	push	r16
53e1c456:	1f 93       	push	r17
53e1c458:	cf 93       	push	r28
53e1c45a:	df 93       	push	r29
53e1c45c:	00 d0       	rcall	.+0      	; 0x53e1c45e <u8g_font_GetFontXDescent+0x539ec1e6>
53e1c45e:	cd b7       	in	r28, 0x3d	; 61
53e1c460:	de b7       	in	r29, 0x3e	; 62
53e1c462:	8c 01       	movw	r16, r24
53e1c464:	e6 2e       	mov	r14, r22
53e1c466:	f4 2e       	mov	r15, r20
53e1c468:	dc 01       	movw	r26, r24
53e1c46a:	55 96       	adiw	r26, 0x15	; 21
53e1c46c:	ed 91       	ld	r30, X+
53e1c46e:	fc 91       	ld	r31, X
53e1c470:	56 97       	sbiw	r26, 0x16	; 22
53e1c472:	29 83       	std	Y+1, r18	; 0x01
53e1c474:	3a 83       	std	Y+2, r19	; 0x02
53e1c476:	09 95       	icall
53e1c478:	f8 1a       	sub	r15, r24
53e1c47a:	29 81       	ldd	r18, Y+1	; 0x01
53e1c47c:	a2 2e       	mov	r10, r18
53e1c47e:	3a 81       	ldd	r19, Y+2	; 0x02
53e1c480:	b3 2e       	mov	r11, r19
53e1c482:	d1 2c       	mov	r13, r1
53e1c484:	f5 01       	movw	r30, r10
53e1c486:	21 91       	ld	r18, Z+
53e1c488:	5f 01       	movw	r10, r30
53e1c48a:	22 23       	and	r18, r18
53e1c48c:	01 f0       	breq	.+0      	; 0x53e1c48e <u8g_font_GetFontXDescent+0x539ec216>
53e1c48e:	4f 2d       	mov	r20, r15
53e1c490:	6e 2d       	mov	r22, r14
53e1c492:	c8 01       	movw	r24, r16
53e1c494:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
53e1c498:	e8 1a       	sub	r14, r24
53e1c49a:	d8 0e       	add	r13, r24
53e1c49c:	00 c0       	rjmp	.+0      	; 0x53e1c49e <u8g_font_GetFontXDescent+0x539ec226>
53e1c49e:	8d 2d       	mov	r24, r13
53e1c4a0:	0f 90       	pop	r0
53e1c4a2:	0f 90       	pop	r0
53e1c4a4:	df 91       	pop	r29
53e1c4a6:	cf 91       	pop	r28
53e1c4a8:	1f 91       	pop	r17
53e1c4aa:	0f 91       	pop	r16
53e1c4ac:	ff 90       	pop	r15
53e1c4ae:	ef 90       	pop	r14
53e1c4b0:	df 90       	pop	r13
53e1c4b2:	bf 90       	pop	r11
53e1c4b4:	af 90       	pop	r10
53e1c4b6:	08 95       	ret

Disassembly of section .text.u8g_DrawStr270:

a7c38902 <u8g_DrawStr270>:
a7c38902:	af 92       	push	r10
a7c38904:	bf 92       	push	r11
a7c38906:	df 92       	push	r13
a7c38908:	ef 92       	push	r14
a7c3890a:	ff 92       	push	r15
a7c3890c:	0f 93       	push	r16
a7c3890e:	1f 93       	push	r17
a7c38910:	cf 93       	push	r28
a7c38912:	df 93       	push	r29
a7c38914:	00 d0       	rcall	.+0      	; 0xa7c38916 <u8g_font_GetFontXDescent+0xa780869e>
a7c38916:	cd b7       	in	r28, 0x3d	; 61
a7c38918:	de b7       	in	r29, 0x3e	; 62
a7c3891a:	8c 01       	movw	r16, r24
a7c3891c:	f6 2e       	mov	r15, r22
a7c3891e:	e4 2e       	mov	r14, r20
a7c38920:	dc 01       	movw	r26, r24
a7c38922:	55 96       	adiw	r26, 0x15	; 21
a7c38924:	ed 91       	ld	r30, X+
a7c38926:	fc 91       	ld	r31, X
a7c38928:	56 97       	sbiw	r26, 0x16	; 22
a7c3892a:	29 83       	std	Y+1, r18	; 0x01
a7c3892c:	3a 83       	std	Y+2, r19	; 0x02
a7c3892e:	09 95       	icall
a7c38930:	f8 0e       	add	r15, r24
a7c38932:	29 81       	ldd	r18, Y+1	; 0x01
a7c38934:	a2 2e       	mov	r10, r18
a7c38936:	3a 81       	ldd	r19, Y+2	; 0x02
a7c38938:	b3 2e       	mov	r11, r19
a7c3893a:	d1 2c       	mov	r13, r1
a7c3893c:	f5 01       	movw	r30, r10
a7c3893e:	21 91       	ld	r18, Z+
a7c38940:	5f 01       	movw	r10, r30
a7c38942:	22 23       	and	r18, r18
a7c38944:	01 f0       	breq	.+0      	; 0xa7c38946 <u8g_font_GetFontXDescent+0xa78086ce>
a7c38946:	4e 2d       	mov	r20, r14
a7c38948:	6f 2d       	mov	r22, r15
a7c3894a:	c8 01       	movw	r24, r16
a7c3894c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
a7c38950:	e8 1a       	sub	r14, r24
a7c38952:	d8 0e       	add	r13, r24
a7c38954:	00 c0       	rjmp	.+0      	; 0xa7c38956 <u8g_font_GetFontXDescent+0xa78086de>
a7c38956:	8d 2d       	mov	r24, r13
a7c38958:	0f 90       	pop	r0
a7c3895a:	0f 90       	pop	r0
a7c3895c:	df 91       	pop	r29
a7c3895e:	cf 91       	pop	r28
a7c38960:	1f 91       	pop	r17
a7c38962:	0f 91       	pop	r16
a7c38964:	ff 90       	pop	r15
a7c38966:	ef 90       	pop	r14
a7c38968:	df 90       	pop	r13
a7c3896a:	bf 90       	pop	r11
a7c3896c:	af 90       	pop	r10
a7c3896e:	08 95       	ret

Disassembly of section .text.u8g_DrawStrDir:

4f871272 <u8g_DrawStrDir>:
4f871272:	0f 93       	push	r16
4f871274:	1f 93       	push	r17
4f871276:	52 2f       	mov	r21, r18
4f871278:	98 01       	movw	r18, r16
4f87127a:	51 30       	cpi	r21, 0x01	; 1
4f87127c:	01 f0       	breq	.+0      	; 0x4f87127e <u8g_font_GetFontXDescent+0x4f441006>
4f87127e:	00 f0       	brcs	.+0      	; 0x4f871280 <u8g_font_GetFontXDescent+0x4f441008>
4f871280:	52 30       	cpi	r21, 0x02	; 2
4f871282:	01 f0       	breq	.+0      	; 0x4f871284 <u8g_font_GetFontXDescent+0x4f44100c>
4f871284:	53 30       	cpi	r21, 0x03	; 3
4f871286:	01 f4       	brne	.+0      	; 0x4f871288 <u8g_font_GetFontXDescent+0x4f441010>
4f871288:	1f 91       	pop	r17
4f87128a:	0f 91       	pop	r16
4f87128c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
4f871290:	1f 91       	pop	r17
4f871292:	0f 91       	pop	r16
4f871294:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
4f871298:	1f 91       	pop	r17
4f87129a:	0f 91       	pop	r16
4f87129c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
4f8712a0:	1f 91       	pop	r17
4f8712a2:	0f 91       	pop	r16
4f8712a4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
4f8712a8:	80 e0       	ldi	r24, 0x00	; 0
4f8712aa:	1f 91       	pop	r17
4f8712ac:	0f 91       	pop	r16
4f8712ae:	08 95       	ret

Disassembly of section .text.u8g_DrawStrP:

9f0e2522 <u8g_DrawStrP>:
9f0e2522:	df 92       	push	r13
9f0e2524:	ef 92       	push	r14
9f0e2526:	ff 92       	push	r15
9f0e2528:	0f 93       	push	r16
9f0e252a:	1f 93       	push	r17
9f0e252c:	cf 93       	push	r28
9f0e252e:	df 93       	push	r29
9f0e2530:	ec 01       	movw	r28, r24
9f0e2532:	f6 2e       	mov	r15, r22
9f0e2534:	e4 2e       	mov	r14, r20
9f0e2536:	89 01       	movw	r16, r18
9f0e2538:	ed 89       	ldd	r30, Y+21	; 0x15
9f0e253a:	fe 89       	ldd	r31, Y+22	; 0x16
9f0e253c:	09 95       	icall
9f0e253e:	e8 0e       	add	r14, r24
9f0e2540:	d1 2c       	mov	r13, r1
9f0e2542:	f8 01       	movw	r30, r16
9f0e2544:	24 91       	lpm	r18, Z
9f0e2546:	22 23       	and	r18, r18
9f0e2548:	01 f0       	breq	.+0      	; 0x9f0e254a <u8g_font_GetFontXDescent+0x9ecb22d2>
9f0e254a:	4e 2d       	mov	r20, r14
9f0e254c:	6f 2d       	mov	r22, r15
9f0e254e:	ce 01       	movw	r24, r28
9f0e2550:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
9f0e2554:	f8 0e       	add	r15, r24
9f0e2556:	d8 0e       	add	r13, r24
9f0e2558:	0f 5f       	subi	r16, 0xFF	; 255
9f0e255a:	1f 4f       	sbci	r17, 0xFF	; 255
9f0e255c:	00 c0       	rjmp	.+0      	; 0x9f0e255e <u8g_font_GetFontXDescent+0x9ecb22e6>
9f0e255e:	8d 2d       	mov	r24, r13
9f0e2560:	df 91       	pop	r29
9f0e2562:	cf 91       	pop	r28
9f0e2564:	1f 91       	pop	r17
9f0e2566:	0f 91       	pop	r16
9f0e2568:	ff 90       	pop	r15
9f0e256a:	ef 90       	pop	r14
9f0e256c:	df 90       	pop	r13
9f0e256e:	08 95       	ret

Disassembly of section .text.u8g_DrawStr90P:

3e1c4a92 <u8g_DrawStr90P>:
3e1c4a92:	df 92       	push	r13
3e1c4a94:	ef 92       	push	r14
3e1c4a96:	ff 92       	push	r15
3e1c4a98:	0f 93       	push	r16
3e1c4a9a:	1f 93       	push	r17
3e1c4a9c:	cf 93       	push	r28
3e1c4a9e:	df 93       	push	r29
3e1c4aa0:	ec 01       	movw	r28, r24
3e1c4aa2:	e6 2e       	mov	r14, r22
3e1c4aa4:	f4 2e       	mov	r15, r20
3e1c4aa6:	89 01       	movw	r16, r18
3e1c4aa8:	ed 89       	ldd	r30, Y+21	; 0x15
3e1c4aaa:	fe 89       	ldd	r31, Y+22	; 0x16
3e1c4aac:	09 95       	icall
3e1c4aae:	e8 1a       	sub	r14, r24
3e1c4ab0:	d1 2c       	mov	r13, r1
3e1c4ab2:	f8 01       	movw	r30, r16
3e1c4ab4:	24 91       	lpm	r18, Z
3e1c4ab6:	22 23       	and	r18, r18
3e1c4ab8:	01 f0       	breq	.+0      	; 0x3e1c4aba <u8g_font_GetFontXDescent+0x3dd94842>
3e1c4aba:	4f 2d       	mov	r20, r15
3e1c4abc:	6e 2d       	mov	r22, r14
3e1c4abe:	ce 01       	movw	r24, r28
3e1c4ac0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3e1c4ac4:	f8 0e       	add	r15, r24
3e1c4ac6:	d8 0e       	add	r13, r24
3e1c4ac8:	0f 5f       	subi	r16, 0xFF	; 255
3e1c4aca:	1f 4f       	sbci	r17, 0xFF	; 255
3e1c4acc:	00 c0       	rjmp	.+0      	; 0x3e1c4ace <u8g_font_GetFontXDescent+0x3dd94856>
3e1c4ace:	8d 2d       	mov	r24, r13
3e1c4ad0:	df 91       	pop	r29
3e1c4ad2:	cf 91       	pop	r28
3e1c4ad4:	1f 91       	pop	r17
3e1c4ad6:	0f 91       	pop	r16
3e1c4ad8:	ff 90       	pop	r15
3e1c4ada:	ef 90       	pop	r14
3e1c4adc:	df 90       	pop	r13
3e1c4ade:	08 95       	ret

Disassembly of section .text.u8g_DrawStr180P:

7c389572 <u8g_DrawStr180P>:
7c389572:	df 92       	push	r13
7c389574:	ef 92       	push	r14
7c389576:	ff 92       	push	r15
7c389578:	0f 93       	push	r16
7c38957a:	1f 93       	push	r17
7c38957c:	cf 93       	push	r28
7c38957e:	df 93       	push	r29
7c389580:	ec 01       	movw	r28, r24
7c389582:	f6 2e       	mov	r15, r22
7c389584:	e4 2e       	mov	r14, r20
7c389586:	89 01       	movw	r16, r18
7c389588:	ed 89       	ldd	r30, Y+21	; 0x15
7c38958a:	fe 89       	ldd	r31, Y+22	; 0x16
7c38958c:	09 95       	icall
7c38958e:	e8 1a       	sub	r14, r24
7c389590:	d1 2c       	mov	r13, r1
7c389592:	f8 01       	movw	r30, r16
7c389594:	24 91       	lpm	r18, Z
7c389596:	22 23       	and	r18, r18
7c389598:	01 f0       	breq	.+0      	; 0x7c38959a <u8g_font_GetFontXDescent+0x7bf59322>
7c38959a:	4e 2d       	mov	r20, r14
7c38959c:	6f 2d       	mov	r22, r15
7c38959e:	ce 01       	movw	r24, r28
7c3895a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7c3895a4:	f8 1a       	sub	r15, r24
7c3895a6:	d8 0e       	add	r13, r24
7c3895a8:	0f 5f       	subi	r16, 0xFF	; 255
7c3895aa:	1f 4f       	sbci	r17, 0xFF	; 255
7c3895ac:	00 c0       	rjmp	.+0      	; 0x7c3895ae <u8g_font_GetFontXDescent+0x7bf59336>
7c3895ae:	8d 2d       	mov	r24, r13
7c3895b0:	df 91       	pop	r29
7c3895b2:	cf 91       	pop	r28
7c3895b4:	1f 91       	pop	r17
7c3895b6:	0f 91       	pop	r16
7c3895b8:	ff 90       	pop	r15
7c3895ba:	ef 90       	pop	r14
7c3895bc:	df 90       	pop	r13
7c3895be:	08 95       	ret

Disassembly of section .text.u8g_DrawStr270P:

f8712b32 <u8g_DrawStr270P>:
f8712b32:	df 92       	push	r13
f8712b34:	ef 92       	push	r14
f8712b36:	ff 92       	push	r15
f8712b38:	0f 93       	push	r16
f8712b3a:	1f 93       	push	r17
f8712b3c:	cf 93       	push	r28
f8712b3e:	df 93       	push	r29
f8712b40:	ec 01       	movw	r28, r24
f8712b42:	e6 2e       	mov	r14, r22
f8712b44:	f4 2e       	mov	r15, r20
f8712b46:	89 01       	movw	r16, r18
f8712b48:	ed 89       	ldd	r30, Y+21	; 0x15
f8712b4a:	fe 89       	ldd	r31, Y+22	; 0x16
f8712b4c:	09 95       	icall
f8712b4e:	e8 0e       	add	r14, r24
f8712b50:	d1 2c       	mov	r13, r1
f8712b52:	f8 01       	movw	r30, r16
f8712b54:	24 91       	lpm	r18, Z
f8712b56:	22 23       	and	r18, r18
f8712b58:	01 f0       	breq	.+0      	; 0xf8712b5a <u8g_font_GetFontXDescent+0xf82e28e2>
f8712b5a:	4f 2d       	mov	r20, r15
f8712b5c:	6e 2d       	mov	r22, r14
f8712b5e:	ce 01       	movw	r24, r28
f8712b60:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f8712b64:	f8 1a       	sub	r15, r24
f8712b66:	d8 0e       	add	r13, r24
f8712b68:	0f 5f       	subi	r16, 0xFF	; 255
f8712b6a:	1f 4f       	sbci	r17, 0xFF	; 255
f8712b6c:	00 c0       	rjmp	.+0      	; 0xf8712b6e <u8g_font_GetFontXDescent+0xf82e28f6>
f8712b6e:	8d 2d       	mov	r24, r13
f8712b70:	df 91       	pop	r29
f8712b72:	cf 91       	pop	r28
f8712b74:	1f 91       	pop	r17
f8712b76:	0f 91       	pop	r16
f8712b78:	ff 90       	pop	r15
f8712b7a:	ef 90       	pop	r14
f8712b7c:	df 90       	pop	r13
f8712b7e:	08 95       	ret

Disassembly of section .text.u8g_DrawStrFontBBX:

f0e256b2 <u8g_DrawStrFontBBX>:
f0e256b2:	ef 92       	push	r14
f0e256b4:	ff 92       	push	r15
f0e256b6:	0f 93       	push	r16
f0e256b8:	1f 93       	push	r17
f0e256ba:	cf 93       	push	r28
f0e256bc:	df 93       	push	r29
f0e256be:	00 d0       	rcall	.+0      	; 0xf0e256c0 <u8g_font_GetFontXDescent+0xf09f5448>
f0e256c0:	1f 92       	push	r1
f0e256c2:	cd b7       	in	r28, 0x3d	; 61
f0e256c4:	de b7       	in	r29, 0x3e	; 62
f0e256c6:	7c 01       	movw	r14, r24
f0e256c8:	2b 83       	std	Y+3, r18	; 0x03
f0e256ca:	4a 83       	std	Y+2, r20	; 0x02
f0e256cc:	69 83       	std	Y+1, r22	; 0x01
f0e256ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f0e256d2:	69 81       	ldd	r22, Y+1	; 0x01
f0e256d4:	68 1b       	sub	r22, r24
f0e256d6:	c7 01       	movw	r24, r14
f0e256d8:	69 83       	std	Y+1, r22	; 0x01
f0e256da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f0e256de:	4a 81       	ldd	r20, Y+2	; 0x02
f0e256e0:	48 0f       	add	r20, r24
f0e256e2:	2b 81       	ldd	r18, Y+3	; 0x03
f0e256e4:	69 81       	ldd	r22, Y+1	; 0x01
f0e256e6:	c7 01       	movw	r24, r14
f0e256e8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f0e256ec:	0f 90       	pop	r0
f0e256ee:	0f 90       	pop	r0
f0e256f0:	0f 90       	pop	r0
f0e256f2:	df 91       	pop	r29
f0e256f4:	cf 91       	pop	r28
f0e256f6:	1f 91       	pop	r17
f0e256f8:	0f 91       	pop	r16
f0e256fa:	ff 90       	pop	r15
f0e256fc:	ef 90       	pop	r14
f0e256fe:	08 95       	ret

Disassembly of section .text.u8g_DrawGlyphFontBBX:

e1c4adb2 <u8g_DrawGlyphFontBBX>:
e1c4adb2:	ef 92       	push	r14
e1c4adb4:	ff 92       	push	r15
e1c4adb6:	0f 93       	push	r16
e1c4adb8:	cf 93       	push	r28
e1c4adba:	df 93       	push	r29
e1c4adbc:	00 d0       	rcall	.+0      	; 0xe1c4adbe <u8g_font_GetFontXDescent+0xe181ab46>
e1c4adbe:	cd b7       	in	r28, 0x3d	; 61
e1c4adc0:	de b7       	in	r29, 0x3e	; 62
e1c4adc2:	7c 01       	movw	r14, r24
e1c4adc4:	4a 83       	std	Y+2, r20	; 0x02
e1c4adc6:	69 83       	std	Y+1, r22	; 0x01
e1c4adc8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e1c4adcc:	69 81       	ldd	r22, Y+1	; 0x01
e1c4adce:	68 1b       	sub	r22, r24
e1c4add0:	c7 01       	movw	r24, r14
e1c4add2:	69 83       	std	Y+1, r22	; 0x01
e1c4add4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e1c4add8:	4a 81       	ldd	r20, Y+2	; 0x02
e1c4adda:	48 0f       	add	r20, r24
e1c4addc:	20 2f       	mov	r18, r16
e1c4adde:	69 81       	ldd	r22, Y+1	; 0x01
e1c4ade0:	c7 01       	movw	r24, r14
e1c4ade2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e1c4ade6:	80 e0       	ldi	r24, 0x00	; 0
e1c4ade8:	0f 90       	pop	r0
e1c4adea:	0f 90       	pop	r0
e1c4adec:	df 91       	pop	r29
e1c4adee:	cf 91       	pop	r28
e1c4adf0:	0f 91       	pop	r16
e1c4adf2:	ff 90       	pop	r15
e1c4adf4:	ef 90       	pop	r14
e1c4adf6:	08 95       	ret

Disassembly of section .text.u8g_UpdateRefHeight:

c3895baa <u8g_UpdateRefHeight>:
c3895baa:	dc 01       	movw	r26, r24
c3895bac:	14 96       	adiw	r26, 0x04	; 4
c3895bae:	8d 91       	ld	r24, X+
c3895bb0:	9c 91       	ld	r25, X
c3895bb2:	15 97       	sbiw	r26, 0x05	; 5
c3895bb4:	00 97       	sbiw	r24, 0x00	; 0
c3895bb6:	01 f4       	brne	.+0      	; 0xc3895bb8 <u8g_font_GetFontXDescent+0xc3465940>
c3895bb8:	00 c0       	rjmp	.+0      	; 0xc3895bba <u8g_font_GetFontXDescent+0xc3465942>
c3895bba:	57 96       	adiw	r26, 0x17	; 23
c3895bbc:	2c 91       	ld	r18, X
c3895bbe:	57 97       	sbiw	r26, 0x17	; 23
c3895bc0:	fc 01       	movw	r30, r24
c3895bc2:	21 11       	cpse	r18, r1
c3895bc4:	00 c0       	rjmp	.+0      	; 0xc3895bc6 <u8g_font_GetFontXDescent+0xc346594e>
c3895bc6:	35 96       	adiw	r30, 0x05	; 5
c3895bc8:	e4 91       	lpm	r30, Z
c3895bca:	58 96       	adiw	r26, 0x18	; 24
c3895bcc:	ec 93       	st	X, r30
c3895bce:	58 97       	sbiw	r26, 0x18	; 24
c3895bd0:	fc 01       	movw	r30, r24
c3895bd2:	3c 96       	adiw	r30, 0x0c	; 12
c3895bd4:	00 c0       	rjmp	.+0      	; 0xc3895bd6 <u8g_font_GetFontXDescent+0xc346595e>
c3895bd6:	21 30       	cpi	r18, 0x01	; 1
c3895bd8:	01 f4       	brne	.+0      	; 0xc3895bda <u8g_font_GetFontXDescent+0xc3465962>
c3895bda:	3f 96       	adiw	r30, 0x0f	; 15
c3895bdc:	e4 91       	lpm	r30, Z
c3895bde:	58 96       	adiw	r26, 0x18	; 24
c3895be0:	ec 93       	st	X, r30
c3895be2:	58 97       	sbiw	r26, 0x18	; 24
c3895be4:	fc 01       	movw	r30, r24
c3895be6:	70 96       	adiw	r30, 0x10	; 16
c3895be8:	00 c0       	rjmp	.+0      	; 0xc3895bea <u8g_font_GetFontXDescent+0xc3465972>
c3895bea:	3d 96       	adiw	r30, 0x0d	; 13
c3895bec:	e4 91       	lpm	r30, Z
c3895bee:	58 96       	adiw	r26, 0x18	; 24
c3895bf0:	ec 93       	st	X, r30
c3895bf2:	58 97       	sbiw	r26, 0x18	; 24
c3895bf4:	fc 01       	movw	r30, r24
c3895bf6:	3e 96       	adiw	r30, 0x0e	; 14
c3895bf8:	84 91       	lpm	r24, Z
c3895bfa:	59 96       	adiw	r26, 0x19	; 25
c3895bfc:	8c 93       	st	X, r24
c3895bfe:	59 97       	sbiw	r26, 0x19	; 25
c3895c00:	58 96       	adiw	r26, 0x18	; 24
c3895c02:	8c 91       	ld	r24, X
c3895c04:	58 97       	sbiw	r26, 0x18	; 24
c3895c06:	99 27       	eor	r25, r25
c3895c08:	87 fd       	sbrc	r24, 7
c3895c0a:	90 95       	com	r25
c3895c0c:	59 96       	adiw	r26, 0x19	; 25
c3895c0e:	2c 91       	ld	r18, X
c3895c10:	59 97       	sbiw	r26, 0x19	; 25
c3895c12:	82 1b       	sub	r24, r18
c3895c14:	91 09       	sbc	r25, r1
c3895c16:	27 fd       	sbrc	r18, 7
c3895c18:	93 95       	inc	r25
c3895c1a:	5a 96       	adiw	r26, 0x1a	; 26
c3895c1c:	2c 91       	ld	r18, X
c3895c1e:	5a 97       	sbiw	r26, 0x1a	; 26
c3895c20:	20 34       	cpi	r18, 0x40	; 64
c3895c22:	01 f0       	breq	.+0      	; 0xc3895c24 <u8g_font_GetFontXDescent+0xc34659ac>
c3895c24:	82 9f       	mul	r24, r18
c3895c26:	c0 01       	movw	r24, r0
c3895c28:	11 24       	eor	r1, r1
c3895c2a:	f6 e0       	ldi	r31, 0x06	; 6
c3895c2c:	96 95       	lsr	r25
c3895c2e:	87 95       	ror	r24
c3895c30:	fa 95       	dec	r31
c3895c32:	01 f4       	brne	.+0      	; 0xc3895c34 <u8g_font_GetFontXDescent+0xc34659bc>
c3895c34:	5b 96       	adiw	r26, 0x1b	; 27
c3895c36:	8c 93       	st	X, r24
c3895c38:	08 95       	ret

Disassembly of section .text.u8g_SetFontRefHeightText:

8712b7e4 <u8g_SetFontRefHeightText>:
8712b7e4:	fc 01       	movw	r30, r24
8712b7e6:	17 8a       	std	Z+23, r1	; 0x17
8712b7e8:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetFontRefHeightExtendedText:

0e256fd0 <u8g_SetFontRefHeightExtendedText>:
 e256fd0:	21 e0       	ldi	r18, 0x01	; 1
 e256fd2:	fc 01       	movw	r30, r24
 e256fd4:	27 8b       	std	Z+23, r18	; 0x17
 e256fd6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetFontRefHeightAll:

1c4adfaa <u8g_SetFontRefHeightAll>:
1c4adfaa:	22 e0       	ldi	r18, 0x02	; 2
1c4adfac:	fc 01       	movw	r30, r24
1c4adfae:	27 8b       	std	Z+23, r18	; 0x17
1c4adfb0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetFontLineSpacingFactor:

3895bf5e <u8g_SetFontLineSpacingFactor>:
3895bf5e:	fc 01       	movw	r30, r24
3895bf60:	62 8f       	std	Z+26, r22	; 0x1a
3895bf62:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetFontPosBaseline:

712b7ec4 <u8g_SetFontPosBaseline>:
712b7ec4:	20 e0       	ldi	r18, 0x00	; 0
712b7ec6:	30 e0       	ldi	r19, 0x00	; 0
712b7ec8:	fc 01       	movw	r30, r24
712b7eca:	36 8b       	std	Z+22, r19	; 0x16
712b7ecc:	25 8b       	std	Z+21, r18	; 0x15
712b7ece:	08 95       	ret

Disassembly of section .text.u8g_SetFontPosBottom:

e256fd94 <u8g_SetFontPosBottom>:
e256fd94:	20 e0       	ldi	r18, 0x00	; 0
e256fd96:	30 e0       	ldi	r19, 0x00	; 0
e256fd98:	fc 01       	movw	r30, r24
e256fd9a:	36 8b       	std	Z+22, r19	; 0x16
e256fd9c:	25 8b       	std	Z+21, r18	; 0x15
e256fd9e:	08 95       	ret

Disassembly of section .text.u8g_SetFontPosTop:

c4adfb34 <u8g_SetFontPosTop>:
c4adfb34:	20 e0       	ldi	r18, 0x00	; 0
c4adfb36:	30 e0       	ldi	r19, 0x00	; 0
c4adfb38:	fc 01       	movw	r30, r24
c4adfb3a:	36 8b       	std	Z+22, r19	; 0x16
c4adfb3c:	25 8b       	std	Z+21, r18	; 0x15
c4adfb3e:	08 95       	ret

Disassembly of section .text.u8g_SetFontPosCenter:

895bf674 <u8g_SetFontPosCenter>:
895bf674:	20 e0       	ldi	r18, 0x00	; 0
895bf676:	30 e0       	ldi	r19, 0x00	; 0
895bf678:	fc 01       	movw	r30, r24
895bf67a:	36 8b       	std	Z+22, r19	; 0x16
895bf67c:	25 8b       	std	Z+21, r18	; 0x15
895bf67e:	08 95       	ret

Disassembly of section .text.u8g_font_calc_str_pixel_width:

12b7ecf4 <u8g_font_calc_str_pixel_width>:
12b7ecf4:	cf 92       	push	r12
12b7ecf6:	df 92       	push	r13
12b7ecf8:	ef 92       	push	r14
12b7ecfa:	ff 92       	push	r15
12b7ecfc:	0f 93       	push	r16
12b7ecfe:	1f 93       	push	r17
12b7ed00:	cf 93       	push	r28
12b7ed02:	df 93       	push	r29
12b7ed04:	ec 01       	movw	r28, r24
12b7ed06:	8b 01       	movw	r16, r22
12b7ed08:	7a 01       	movw	r14, r20
12b7ed0a:	cb 01       	movw	r24, r22
12b7ed0c:	fa 01       	movw	r30, r20
12b7ed0e:	09 95       	icall
12b7ed10:	c8 2e       	mov	r12, r24
12b7ed12:	88 23       	and	r24, r24
12b7ed14:	01 f0       	breq	.+0      	; 0x12b7ed16 <u8g_font_GetFontXDescent+0x1274ea9e>
12b7ed16:	68 2f       	mov	r22, r24
12b7ed18:	ce 01       	movw	r24, r28
12b7ed1a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
12b7ed1e:	d9 88       	ldd	r13, Y+17	; 0x11
12b7ed20:	d1 94       	neg	r13
12b7ed22:	0f 5f       	subi	r16, 0xFF	; 255
12b7ed24:	1f 4f       	sbci	r17, 0xFF	; 255
12b7ed26:	c8 01       	movw	r24, r16
12b7ed28:	f7 01       	movw	r30, r14
12b7ed2a:	09 95       	icall
12b7ed2c:	88 23       	and	r24, r24
12b7ed2e:	01 f0       	breq	.+0      	; 0x12b7ed30 <u8g_font_GetFontXDescent+0x1274eab8>
12b7ed30:	88 89       	ldd	r24, Y+16	; 0x10
12b7ed32:	d8 0e       	add	r13, r24
12b7ed34:	c8 01       	movw	r24, r16
12b7ed36:	f7 01       	movw	r30, r14
12b7ed38:	09 95       	icall
12b7ed3a:	c8 2e       	mov	r12, r24
12b7ed3c:	68 2f       	mov	r22, r24
12b7ed3e:	ce 01       	movw	r24, r28
12b7ed40:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
12b7ed44:	00 c0       	rjmp	.+0      	; 0x12b7ed46 <u8g_font_GetFontXDescent+0x1274eace>
12b7ed46:	f0 e2       	ldi	r31, 0x20	; 32
12b7ed48:	cf 16       	cp	r12, r31
12b7ed4a:	01 f0       	breq	.+0      	; 0x12b7ed4c <u8g_font_GetFontXDescent+0x1274ead4>
12b7ed4c:	89 89       	ldd	r24, Y+17	; 0x11
12b7ed4e:	9b 89       	ldd	r25, Y+19	; 0x13
12b7ed50:	89 0f       	add	r24, r25
12b7ed52:	00 c0       	rjmp	.+0      	; 0x12b7ed54 <u8g_font_GetFontXDescent+0x1274eadc>
12b7ed54:	88 89       	ldd	r24, Y+16	; 0x10
12b7ed56:	8d 0d       	add	r24, r13
12b7ed58:	00 c0       	rjmp	.+0      	; 0x12b7ed5a <u8g_font_GetFontXDescent+0x1274eae2>
12b7ed5a:	80 e0       	ldi	r24, 0x00	; 0
12b7ed5c:	df 91       	pop	r29
12b7ed5e:	cf 91       	pop	r28
12b7ed60:	1f 91       	pop	r17
12b7ed62:	0f 91       	pop	r16
12b7ed64:	ff 90       	pop	r15
12b7ed66:	ef 90       	pop	r14
12b7ed68:	df 90       	pop	r13
12b7ed6a:	cf 90       	pop	r12
12b7ed6c:	08 95       	ret

Disassembly of section .text.u8g_GetStrPixelWidth:

256fda62 <u8g_GetStrPixelWidth>:
256fda62:	40 e0       	ldi	r20, 0x00	; 0
256fda64:	50 e0       	ldi	r21, 0x00	; 0
256fda66:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_GetStrPixelWidthP:

4adfb4cc <u8g_GetStrPixelWidthP>:
4adfb4cc:	40 e0       	ldi	r20, 0x00	; 0
4adfb4ce:	50 e0       	ldi	r21, 0x00	; 0
4adfb4d0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_GetStrX:

95bf69a0 <u8g_GetStrX>:
95bf69a0:	cf 93       	push	r28
95bf69a2:	df 93       	push	r29
95bf69a4:	ec 01       	movw	r28, r24
95bf69a6:	fb 01       	movw	r30, r22
95bf69a8:	60 81       	ld	r22, Z
95bf69aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
95bf69ae:	89 89       	ldd	r24, Y+17	; 0x11
95bf69b0:	df 91       	pop	r29
95bf69b2:	cf 91       	pop	r28
95bf69b4:	08 95       	ret

Disassembly of section .text.u8g_GetStrXP:

2b7ed356 <u8g_GetStrXP>:
2b7ed356:	cf 93       	push	r28
2b7ed358:	df 93       	push	r29
2b7ed35a:	ec 01       	movw	r28, r24
2b7ed35c:	fb 01       	movw	r30, r22
2b7ed35e:	64 91       	lpm	r22, Z
2b7ed360:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
2b7ed364:	89 89       	ldd	r24, Y+17	; 0x11
2b7ed366:	df 91       	pop	r29
2b7ed368:	cf 91       	pop	r28
2b7ed36a:	08 95       	ret

Disassembly of section .text.u8g_GetStrWidth:

56fda6c2 <u8g_GetStrWidth>:
56fda6c2:	ff 92       	push	r15
56fda6c4:	0f 93       	push	r16
56fda6c6:	1f 93       	push	r17
56fda6c8:	cf 93       	push	r28
56fda6ca:	df 93       	push	r29
56fda6cc:	ec 01       	movw	r28, r24
56fda6ce:	8b 01       	movw	r16, r22
56fda6d0:	f1 2c       	mov	r15, r1
56fda6d2:	f8 01       	movw	r30, r16
56fda6d4:	61 91       	ld	r22, Z+
56fda6d6:	8f 01       	movw	r16, r30
56fda6d8:	66 23       	and	r22, r22
56fda6da:	01 f0       	breq	.+0      	; 0x56fda6dc <u8g_font_GetFontXDescent+0x56baa464>
56fda6dc:	ce 01       	movw	r24, r28
56fda6de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
56fda6e2:	88 89       	ldd	r24, Y+16	; 0x10
56fda6e4:	f8 0e       	add	r15, r24
56fda6e6:	00 c0       	rjmp	.+0      	; 0x56fda6e8 <u8g_font_GetFontXDescent+0x56baa470>
56fda6e8:	8f 2d       	mov	r24, r15
56fda6ea:	df 91       	pop	r29
56fda6ec:	cf 91       	pop	r28
56fda6ee:	1f 91       	pop	r17
56fda6f0:	0f 91       	pop	r16
56fda6f2:	ff 90       	pop	r15
56fda6f4:	08 95       	ret

Disassembly of section .text.u8g_GetStrWidthP:

adfb4db8 <u8g_GetStrWidthP>:
adfb4db8:	ff 92       	push	r15
adfb4dba:	0f 93       	push	r16
adfb4dbc:	1f 93       	push	r17
adfb4dbe:	cf 93       	push	r28
adfb4dc0:	df 93       	push	r29
adfb4dc2:	8c 01       	movw	r16, r24
adfb4dc4:	eb 01       	movw	r28, r22
adfb4dc6:	f1 2c       	mov	r15, r1
adfb4dc8:	fe 01       	movw	r30, r28
adfb4dca:	64 91       	lpm	r22, Z
adfb4dcc:	66 23       	and	r22, r22
adfb4dce:	01 f0       	breq	.+0      	; 0xadfb4dd0 <u8g_font_GetFontXDescent+0xadb84b58>
adfb4dd0:	c8 01       	movw	r24, r16
adfb4dd2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
adfb4dd6:	f8 01       	movw	r30, r16
adfb4dd8:	80 89       	ldd	r24, Z+16	; 0x10
adfb4dda:	f8 0e       	add	r15, r24
adfb4ddc:	21 96       	adiw	r28, 0x01	; 1
adfb4dde:	00 c0       	rjmp	.+0      	; 0xadfb4de0 <u8g_font_GetFontXDescent+0xadb84b68>
adfb4de0:	8f 2d       	mov	r24, r15
adfb4de2:	df 91       	pop	r29
adfb4de4:	cf 91       	pop	r28
adfb4de6:	1f 91       	pop	r17
adfb4de8:	0f 91       	pop	r16
adfb4dea:	ff 90       	pop	r15
adfb4dec:	08 95       	ret

Disassembly of section .text.u8g_font_box_min:

5bf69ba6 <u8g_font_box_min>:
5bf69ba6:	fa 01       	movw	r30, r20
5bf69ba8:	14 82       	std	Z+4, r1	; 0x04
5bf69baa:	db 01       	movw	r26, r22
5bf69bac:	2c 91       	ld	r18, X
5bf69bae:	21 11       	cpse	r18, r1
5bf69bb0:	00 c0       	rjmp	.+0      	; 0x5bf69bb2 <u8g_font_GetFontXDescent+0x5bb3993a>
5bf69bb2:	10 82       	st	Z, r1
5bf69bb4:	11 82       	std	Z+1, r1	; 0x01
5bf69bb6:	12 82       	std	Z+2, r1	; 0x02
5bf69bb8:	13 82       	std	Z+3, r1	; 0x03
5bf69bba:	08 95       	ret
5bf69bbc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_font_box_left_gA:

b7ed3766 <u8g_font_box_left_gA>:
b7ed3766:	08 95       	ret

Disassembly of section .text.u8g_font_box_all_gA:

6fda6ece <u8g_font_box_all_gA>:
6fda6ece:	08 95       	ret

Disassembly of section .text.u8g_GetStrMinBox:

dfb4dd9e <u8g_GetStrMinBox>:
dfb4dd9e:	6f 92       	push	r6
dfb4dda0:	7f 92       	push	r7
dfb4dda2:	8f 92       	push	r8
dfb4dda4:	9f 92       	push	r9
dfb4dda6:	af 92       	push	r10
dfb4dda8:	bf 92       	push	r11
dfb4ddaa:	cf 92       	push	r12
dfb4ddac:	df 92       	push	r13
dfb4ddae:	ef 92       	push	r14
dfb4ddb0:	ff 92       	push	r15
dfb4ddb2:	0f 93       	push	r16
dfb4ddb4:	1f 93       	push	r17
dfb4ddb6:	cf 93       	push	r28
dfb4ddb8:	df 93       	push	r29
dfb4ddba:	00 d0       	rcall	.+0      	; 0xdfb4ddbc <u8g_font_GetFontXDescent+0xdf71db44>
dfb4ddbc:	00 d0       	rcall	.+0      	; 0xdfb4ddbe <u8g_font_GetFontXDescent+0xdf71db46>
dfb4ddbe:	1f 92       	push	r1
dfb4ddc0:	cd b7       	in	r28, 0x3d	; 61
dfb4ddc2:	de b7       	in	r29, 0x3e	; 62
dfb4ddc4:	6c 01       	movw	r12, r24
dfb4ddc6:	5b 01       	movw	r10, r22
dfb4ddc8:	4a 01       	movw	r8, r20
dfb4ddca:	39 01       	movw	r6, r18
dfb4ddcc:	fb 01       	movw	r30, r22
dfb4ddce:	80 81       	ld	r24, Z
dfb4ddd0:	81 11       	cpse	r24, r1
dfb4ddd2:	00 c0       	rjmp	.+0      	; 0xdfb4ddd4 <u8g_font_GetFontXDescent+0xdf71db5c>
dfb4ddd4:	f8 01       	movw	r30, r16
dfb4ddd6:	10 82       	st	Z, r1
dfb4ddd8:	f7 01       	movw	r30, r14
dfb4ddda:	10 82       	st	Z, r1
dfb4dddc:	00 c0       	rjmp	.+0      	; 0xdfb4ddde <u8g_font_GetFontXDescent+0xdf71db66>
dfb4ddde:	1d 82       	std	Y+5, r1	; 0x05
dfb4dde0:	ae 01       	movw	r20, r28
dfb4dde2:	4f 5f       	subi	r20, 0xFF	; 255
dfb4dde4:	5f 4f       	sbci	r21, 0xFF	; 255
dfb4dde6:	c6 01       	movw	r24, r12
dfb4dde8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dfb4ddec:	f5 01       	movw	r30, r10
dfb4ddee:	60 81       	ld	r22, Z
dfb4ddf0:	c6 01       	movw	r24, r12
dfb4ddf2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
dfb4ddf6:	f4 01       	movw	r30, r8
dfb4ddf8:	80 81       	ld	r24, Z
dfb4ddfa:	f6 01       	movw	r30, r12
dfb4ddfc:	91 89       	ldd	r25, Z+17	; 0x11
dfb4ddfe:	89 0f       	add	r24, r25
dfb4de00:	f4 01       	movw	r30, r8
dfb4de02:	80 83       	st	Z, r24
dfb4de04:	8d 81       	ldd	r24, Y+5	; 0x05
dfb4de06:	f8 01       	movw	r30, r16
dfb4de08:	80 83       	st	Z, r24
dfb4de0a:	9a 81       	ldd	r25, Y+2	; 0x02
dfb4de0c:	f3 01       	movw	r30, r6
dfb4de0e:	80 81       	ld	r24, Z
dfb4de10:	89 1b       	sub	r24, r25
dfb4de12:	80 83       	st	Z, r24
dfb4de14:	89 81       	ldd	r24, Y+1	; 0x01
dfb4de16:	98 1b       	sub	r25, r24
dfb4de18:	f7 01       	movw	r30, r14
dfb4de1a:	90 83       	st	Z, r25
dfb4de1c:	0f 90       	pop	r0
dfb4de1e:	0f 90       	pop	r0
dfb4de20:	0f 90       	pop	r0
dfb4de22:	0f 90       	pop	r0
dfb4de24:	0f 90       	pop	r0
dfb4de26:	df 91       	pop	r29
dfb4de28:	cf 91       	pop	r28
dfb4de2a:	1f 91       	pop	r17
dfb4de2c:	0f 91       	pop	r16
dfb4de2e:	ff 90       	pop	r15
dfb4de30:	ef 90       	pop	r14
dfb4de32:	df 90       	pop	r13
dfb4de34:	cf 90       	pop	r12
dfb4de36:	bf 90       	pop	r11
dfb4de38:	af 90       	pop	r10
dfb4de3a:	9f 90       	pop	r9
dfb4de3c:	8f 90       	pop	r8
dfb4de3e:	7f 90       	pop	r7
dfb4de40:	6f 90       	pop	r6
dfb4de42:	08 95       	ret

Disassembly of section .text.u8g_GetStrAMinBox:

bf69bbe2 <u8g_GetStrAMinBox>:
bf69bbe2:	5f 92       	push	r5
bf69bbe4:	6f 92       	push	r6
bf69bbe6:	7f 92       	push	r7
bf69bbe8:	8f 92       	push	r8
bf69bbea:	9f 92       	push	r9
bf69bbec:	af 92       	push	r10
bf69bbee:	bf 92       	push	r11
bf69bbf0:	cf 92       	push	r12
bf69bbf2:	df 92       	push	r13
bf69bbf4:	ef 92       	push	r14
bf69bbf6:	ff 92       	push	r15
bf69bbf8:	0f 93       	push	r16
bf69bbfa:	1f 93       	push	r17
bf69bbfc:	cf 93       	push	r28
bf69bbfe:	df 93       	push	r29
bf69bc00:	00 d0       	rcall	.+0      	; 0xbf69bc02 <u8g_font_GetFontXDescent+0xbf26b98a>
bf69bc02:	00 d0       	rcall	.+0      	; 0xbf69bc04 <u8g_font_GetFontXDescent+0xbf26b98c>
bf69bc04:	1f 92       	push	r1
bf69bc06:	cd b7       	in	r28, 0x3d	; 61
bf69bc08:	de b7       	in	r29, 0x3e	; 62
bf69bc0a:	6c 01       	movw	r12, r24
bf69bc0c:	5b 01       	movw	r10, r22
bf69bc0e:	4a 01       	movw	r8, r20
bf69bc10:	39 01       	movw	r6, r18
bf69bc12:	db 01       	movw	r26, r22
bf69bc14:	8c 91       	ld	r24, X
bf69bc16:	81 11       	cpse	r24, r1
bf69bc18:	00 c0       	rjmp	.+0      	; 0xbf69bc1a <u8g_font_GetFontXDescent+0xbf26b9a2>
bf69bc1a:	f8 01       	movw	r30, r16
bf69bc1c:	10 82       	st	Z, r1
bf69bc1e:	d7 01       	movw	r26, r14
bf69bc20:	1c 92       	st	X, r1
bf69bc22:	00 c0       	rjmp	.+0      	; 0xbf69bc24 <u8g_font_GetFontXDescent+0xbf26b9ac>
bf69bc24:	d6 01       	movw	r26, r12
bf69bc26:	14 96       	adiw	r26, 0x04	; 4
bf69bc28:	ed 91       	ld	r30, X+
bf69bc2a:	fc 91       	ld	r31, X
bf69bc2c:	15 97       	sbiw	r26, 0x05	; 5
bf69bc2e:	35 96       	adiw	r30, 0x05	; 5
bf69bc30:	54 90       	lpm	r5, Z
bf69bc32:	1d 82       	std	Y+5, r1	; 0x05
bf69bc34:	ae 01       	movw	r20, r28
bf69bc36:	4f 5f       	subi	r20, 0xFF	; 255
bf69bc38:	5f 4f       	sbci	r21, 0xFF	; 255
bf69bc3a:	c6 01       	movw	r24, r12
bf69bc3c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bf69bc40:	2a 81       	ldd	r18, Y+2	; 0x02
bf69bc42:	33 27       	eor	r19, r19
bf69bc44:	27 fd       	sbrc	r18, 7
bf69bc46:	30 95       	com	r19
bf69bc48:	85 2d       	mov	r24, r5
bf69bc4a:	90 e0       	ldi	r25, 0x00	; 0
bf69bc4c:	28 17       	cp	r18, r24
bf69bc4e:	39 07       	cpc	r19, r25
bf69bc50:	04 f4       	brge	.+0      	; 0xbf69bc52 <u8g_font_GetFontXDescent+0xbf26b9da>
bf69bc52:	5a 82       	std	Y+2, r5	; 0x02
bf69bc54:	f5 01       	movw	r30, r10
bf69bc56:	60 81       	ld	r22, Z
bf69bc58:	c6 01       	movw	r24, r12
bf69bc5a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
bf69bc5e:	d4 01       	movw	r26, r8
bf69bc60:	8c 91       	ld	r24, X
bf69bc62:	f6 01       	movw	r30, r12
bf69bc64:	91 89       	ldd	r25, Z+17	; 0x11
bf69bc66:	89 0f       	add	r24, r25
bf69bc68:	8c 93       	st	X, r24
bf69bc6a:	8d 81       	ldd	r24, Y+5	; 0x05
bf69bc6c:	d8 01       	movw	r26, r16
bf69bc6e:	8c 93       	st	X, r24
bf69bc70:	9a 81       	ldd	r25, Y+2	; 0x02
bf69bc72:	f3 01       	movw	r30, r6
bf69bc74:	80 81       	ld	r24, Z
bf69bc76:	89 1b       	sub	r24, r25
bf69bc78:	80 83       	st	Z, r24
bf69bc7a:	89 81       	ldd	r24, Y+1	; 0x01
bf69bc7c:	98 1b       	sub	r25, r24
bf69bc7e:	d7 01       	movw	r26, r14
bf69bc80:	9c 93       	st	X, r25
bf69bc82:	0f 90       	pop	r0
bf69bc84:	0f 90       	pop	r0
bf69bc86:	0f 90       	pop	r0
bf69bc88:	0f 90       	pop	r0
bf69bc8a:	0f 90       	pop	r0
bf69bc8c:	df 91       	pop	r29
bf69bc8e:	cf 91       	pop	r28
bf69bc90:	1f 91       	pop	r17
bf69bc92:	0f 91       	pop	r16
bf69bc94:	ff 90       	pop	r15
bf69bc96:	ef 90       	pop	r14
bf69bc98:	df 90       	pop	r13
bf69bc9a:	cf 90       	pop	r12
bf69bc9c:	bf 90       	pop	r11
bf69bc9e:	af 90       	pop	r10
bf69bca0:	9f 90       	pop	r9
bf69bca2:	8f 90       	pop	r8
bf69bca4:	7f 90       	pop	r7
bf69bca6:	6f 90       	pop	r6
bf69bca8:	5f 90       	pop	r5
bf69bcaa:	08 95       	ret

Disassembly of section .text.u8g_SetFont:

7ed3788e <u8g_SetFont>:
7ed3788e:	cf 93       	push	r28
7ed37890:	df 93       	push	r29
7ed37892:	ec 01       	movw	r28, r24
7ed37894:	8c 81       	ldd	r24, Y+4	; 0x04
7ed37896:	9d 81       	ldd	r25, Y+5	; 0x05
7ed37898:	86 17       	cp	r24, r22
7ed3789a:	97 07       	cpc	r25, r23
7ed3789c:	01 f0       	breq	.+0      	; 0x7ed3789e <u8g_font_GetFontXDescent+0x7e907626>
7ed3789e:	7d 83       	std	Y+5, r23	; 0x05
7ed378a0:	6c 83       	std	Y+4, r22	; 0x04
7ed378a2:	ce 01       	movw	r24, r28
7ed378a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
7ed378a8:	80 e0       	ldi	r24, 0x00	; 0
7ed378aa:	90 e0       	ldi	r25, 0x00	; 0
7ed378ac:	9e 8b       	std	Y+22, r25	; 0x16
7ed378ae:	8d 8b       	std	Y+21, r24	; 0x15
7ed378b0:	df 91       	pop	r29
7ed378b2:	cf 91       	pop	r28
7ed378b4:	08 95       	ret

Disassembly of section .text.u8g_draw_aa_glyph:

fda6f144 <u8g_draw_aa_glyph>:
fda6f144:	4f 92       	push	r4
fda6f146:	5f 92       	push	r5
fda6f148:	7f 92       	push	r7
fda6f14a:	8f 92       	push	r8
fda6f14c:	9f 92       	push	r9
fda6f14e:	af 92       	push	r10
fda6f150:	bf 92       	push	r11
fda6f152:	cf 92       	push	r12
fda6f154:	df 92       	push	r13
fda6f156:	ef 92       	push	r14
fda6f158:	ff 92       	push	r15
fda6f15a:	0f 93       	push	r16
fda6f15c:	1f 93       	push	r17
fda6f15e:	cf 93       	push	r28
fda6f160:	df 93       	push	r29
fda6f162:	1f 92       	push	r1
fda6f164:	cd b7       	in	r28, 0x3d	; 61
fda6f166:	de b7       	in	r29, 0x3e	; 62
fda6f168:	2c 01       	movw	r4, r24
fda6f16a:	16 2f       	mov	r17, r22
fda6f16c:	74 2e       	mov	r7, r20
fda6f16e:	62 2f       	mov	r22, r18
fda6f170:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fda6f174:	6c 01       	movw	r12, r24
fda6f176:	00 97       	sbiw	r24, 0x00	; 0
fda6f178:	01 f4       	brne	.+0      	; 0xfda6f17a <u8g_font_GetFontXDescent+0xfd63ef02>
fda6f17a:	00 c0       	rjmp	.+0      	; 0xfda6f17c <u8g_font_GetFontXDescent+0xfd63ef04>
fda6f17c:	f2 01       	movw	r30, r4
fda6f17e:	84 81       	ldd	r24, Z+4	; 0x04
fda6f180:	95 81       	ldd	r25, Z+5	; 0x05
fda6f182:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fda6f186:	f8 2e       	mov	r15, r24
fda6f188:	f2 01       	movw	r30, r4
fda6f18a:	83 88       	ldd	r8, Z+19	; 0x13
fda6f18c:	04 89       	ldd	r16, Z+20	; 0x14
fda6f18e:	91 88       	ldd	r9, Z+17	; 0x11
fda6f190:	91 0e       	add	r9, r17
fda6f192:	82 89       	ldd	r24, Z+18	; 0x12
fda6f194:	78 1a       	sub	r7, r24
fda6f196:	17 2d       	mov	r17, r7
fda6f198:	10 1b       	sub	r17, r16
fda6f19a:	28 2d       	mov	r18, r8
fda6f19c:	41 2f       	mov	r20, r17
fda6f19e:	69 2d       	mov	r22, r9
fda6f1a0:	c2 01       	movw	r24, r4
fda6f1a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fda6f1a6:	88 23       	and	r24, r24
fda6f1a8:	01 f0       	breq	.+0      	; 0xfda6f1aa <u8g_font_GetFontXDescent+0xfd63ef32>
fda6f1aa:	cf 0c       	add	r12, r15
fda6f1ac:	d1 1c       	adc	r13, r1
fda6f1ae:	f3 e0       	ldi	r31, 0x03	; 3
fda6f1b0:	8f 0e       	add	r8, r31
fda6f1b2:	86 94       	lsr	r8
fda6f1b4:	86 94       	lsr	r8
fda6f1b6:	a8 2c       	mov	r10, r8
fda6f1b8:	b1 2c       	mov	r11, r1
fda6f1ba:	17 15       	cp	r17, r7
fda6f1bc:	01 f0       	breq	.+0      	; 0xfda6f1be <u8g_font_GetFontXDescent+0xfd63ef46>
fda6f1be:	39 2d       	mov	r19, r9
fda6f1c0:	76 01       	movw	r14, r12
fda6f1c2:	8e 2d       	mov	r24, r14
fda6f1c4:	8c 19       	sub	r24, r12
fda6f1c6:	88 15       	cp	r24, r8
fda6f1c8:	00 f4       	brcc	.+0      	; 0xfda6f1ca <u8g_font_GetFontXDescent+0xfd63ef52>
fda6f1ca:	f7 01       	movw	r30, r14
fda6f1cc:	04 91       	lpm	r16, Z
fda6f1ce:	20 e0       	ldi	r18, 0x00	; 0
fda6f1d0:	41 2f       	mov	r20, r17
fda6f1d2:	63 2f       	mov	r22, r19
fda6f1d4:	c2 01       	movw	r24, r4
fda6f1d6:	39 83       	std	Y+1, r19	; 0x01
fda6f1d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
fda6f1dc:	ff ef       	ldi	r31, 0xFF	; 255
fda6f1de:	ef 1a       	sub	r14, r31
fda6f1e0:	ff 0a       	sbc	r15, r31
fda6f1e2:	39 81       	ldd	r19, Y+1	; 0x01
fda6f1e4:	3c 5f       	subi	r19, 0xFC	; 252
fda6f1e6:	00 c0       	rjmp	.+0      	; 0xfda6f1e8 <u8g_font_GetFontXDescent+0xfd63ef70>
fda6f1e8:	ca 0c       	add	r12, r10
fda6f1ea:	db 1c       	adc	r13, r11
fda6f1ec:	1f 5f       	subi	r17, 0xFF	; 255
fda6f1ee:	00 c0       	rjmp	.+0      	; 0xfda6f1f0 <u8g_font_GetFontXDescent+0xfd63ef78>
fda6f1f0:	f2 01       	movw	r30, r4
fda6f1f2:	80 89       	ldd	r24, Z+16	; 0x10
fda6f1f4:	00 c0       	rjmp	.+0      	; 0xfda6f1f6 <u8g_font_GetFontXDescent+0xfd63ef7e>
fda6f1f6:	80 e0       	ldi	r24, 0x00	; 0
fda6f1f8:	0f 90       	pop	r0
fda6f1fa:	df 91       	pop	r29
fda6f1fc:	cf 91       	pop	r28
fda6f1fe:	1f 91       	pop	r17
fda6f200:	0f 91       	pop	r16
fda6f202:	ff 90       	pop	r15
fda6f204:	ef 90       	pop	r14
fda6f206:	df 90       	pop	r13
fda6f208:	cf 90       	pop	r12
fda6f20a:	bf 90       	pop	r11
fda6f20c:	af 90       	pop	r10
fda6f20e:	9f 90       	pop	r9
fda6f210:	8f 90       	pop	r8
fda6f212:	7f 90       	pop	r7
fda6f214:	5f 90       	pop	r5
fda6f216:	4f 90       	pop	r4
fda6f218:	08 95       	ret

Disassembly of section .text.u8g_DrawAAGlyph:

fb4de35e <u8g_DrawAAGlyph>:
fb4de35e:	0f 93       	push	r16
fb4de360:	1f 93       	push	r17
fb4de362:	cf 93       	push	r28
fb4de364:	df 93       	push	r29
fb4de366:	00 d0       	rcall	.+0      	; 0xfb4de368 <u8g_font_GetFontXDescent+0xfb0ae0f0>
fb4de368:	1f 92       	push	r1
fb4de36a:	cd b7       	in	r28, 0x3d	; 61
fb4de36c:	de b7       	in	r29, 0x3e	; 62
fb4de36e:	8c 01       	movw	r16, r24
fb4de370:	dc 01       	movw	r26, r24
fb4de372:	55 96       	adiw	r26, 0x15	; 21
fb4de374:	ed 91       	ld	r30, X+
fb4de376:	fc 91       	ld	r31, X
fb4de378:	56 97       	sbiw	r26, 0x16	; 22
fb4de37a:	2b 83       	std	Y+3, r18	; 0x03
fb4de37c:	4a 83       	std	Y+2, r20	; 0x02
fb4de37e:	69 83       	std	Y+1, r22	; 0x01
fb4de380:	09 95       	icall
fb4de382:	4a 81       	ldd	r20, Y+2	; 0x02
fb4de384:	48 0f       	add	r20, r24
fb4de386:	2b 81       	ldd	r18, Y+3	; 0x03
fb4de388:	69 81       	ldd	r22, Y+1	; 0x01
fb4de38a:	c8 01       	movw	r24, r16
fb4de38c:	0f 90       	pop	r0
fb4de38e:	0f 90       	pop	r0
fb4de390:	0f 90       	pop	r0
fb4de392:	df 91       	pop	r29
fb4de394:	cf 91       	pop	r28
fb4de396:	1f 91       	pop	r17
fb4de398:	0f 91       	pop	r16
fb4de39a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_DrawAAStr:

f69bc6fc <u8g_DrawAAStr>:
f69bc6fc:	cf 92       	push	r12
f69bc6fe:	df 92       	push	r13
f69bc700:	ef 92       	push	r14
f69bc702:	ff 92       	push	r15
f69bc704:	0f 93       	push	r16
f69bc706:	1f 93       	push	r17
f69bc708:	cf 93       	push	r28
f69bc70a:	df 93       	push	r29
f69bc70c:	8c 01       	movw	r16, r24
f69bc70e:	f6 2e       	mov	r15, r22
f69bc710:	c4 2f       	mov	r28, r20
f69bc712:	d2 2e       	mov	r13, r18
f69bc714:	e3 2e       	mov	r14, r19
f69bc716:	dc 01       	movw	r26, r24
f69bc718:	14 96       	adiw	r26, 0x04	; 4
f69bc71a:	8d 91       	ld	r24, X+
f69bc71c:	9c 91       	ld	r25, X
f69bc71e:	15 97       	sbiw	r26, 0x05	; 5
f69bc720:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f69bc724:	82 30       	cpi	r24, 0x02	; 2
f69bc726:	01 f4       	brne	.+0      	; 0xf69bc728 <u8g_font_GetFontXDescent+0xf658c4b0>
f69bc728:	d8 01       	movw	r26, r16
f69bc72a:	55 96       	adiw	r26, 0x15	; 21
f69bc72c:	ed 91       	ld	r30, X+
f69bc72e:	fc 91       	ld	r31, X
f69bc730:	56 97       	sbiw	r26, 0x16	; 22
f69bc732:	c8 01       	movw	r24, r16
f69bc734:	09 95       	icall
f69bc736:	c8 2e       	mov	r12, r24
f69bc738:	cc 0e       	add	r12, r28
f69bc73a:	cd 2d       	mov	r28, r13
f69bc73c:	de 2d       	mov	r29, r14
f69bc73e:	e1 2c       	mov	r14, r1
f69bc740:	29 91       	ld	r18, Y+
f69bc742:	22 23       	and	r18, r18
f69bc744:	01 f0       	breq	.+0      	; 0xf69bc746 <u8g_font_GetFontXDescent+0xf658c4ce>
f69bc746:	4c 2d       	mov	r20, r12
f69bc748:	6f 2d       	mov	r22, r15
f69bc74a:	c8 01       	movw	r24, r16
f69bc74c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
f69bc750:	f8 0e       	add	r15, r24
f69bc752:	e8 0e       	add	r14, r24
f69bc754:	00 c0       	rjmp	.+0      	; 0xf69bc756 <u8g_font_GetFontXDescent+0xf658c4de>
f69bc756:	8e 2d       	mov	r24, r14
f69bc758:	00 c0       	rjmp	.+0      	; 0xf69bc75a <u8g_font_GetFontXDescent+0xf658c4e2>
f69bc75a:	80 e0       	ldi	r24, 0x00	; 0
f69bc75c:	df 91       	pop	r29
f69bc75e:	cf 91       	pop	r28
f69bc760:	1f 91       	pop	r17
f69bc762:	0f 91       	pop	r16
f69bc764:	ff 90       	pop	r15
f69bc766:	ef 90       	pop	r14
f69bc768:	df 90       	pop	r13
f69bc76a:	cf 90       	pop	r12
f69bc76c:	08 95       	ret

u8g_font_data.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000018c0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00005e8a  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.u8g_font_unifontr 000005cd  00000000  00000000  0000777e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .progmem.u8g_font_unifont 000015af  00000000  00000000  00007d4b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .progmem.u8g_font_unifont_8_9 000010b7  00000000  00000000  000092fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .progmem.u8g_font_unifont_86 00000742  00000000  00000000  0000a3b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .progmem.u8g_font_unifont_78_79 00001bac  00000000  00000000  0000aaf3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.u8g_font_unifont_77 00000679  00000000  00000000  0000c69f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .progmem.u8g_font_unifont_76 000009ec  00000000  00000000  0000cd18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .progmem.u8g_font_unifont_75r 00000244  00000000  00000000  0000d704  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.u8g_font_unifont_72_73 00001d90  00000000  00000000  0000d948  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.u8g_font_unifont_67_75 00000d5d  00000000  00000000  0000f6d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .progmem.u8g_font_unifont_4_5 00000ecf  00000000  00000000  00010435  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .progmem.u8g_font_unifont_2_3 00001219  00000000  00000000  00011304  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .progmem.u8g_font_unifont_18_19 00001ba6  00000000  00000000  0001251d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .progmem.u8g_font_unifont_12_13 00000f93  00000000  00000000  000140c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .progmem.u8g_font_unifont_0_8 00001099  00000000  00000000  00015056  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .progmem.u8g_font_unifont_0_11 00000ca8  00000000  00000000  000160ef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .progmem.u8g_font_unifont_0_10 00001410  00000000  00000000  00016d97  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .progmem.u8g_font_u8glib_4r 00000298  00000000  00000000  000181a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 23 .progmem.u8g_font_u8glib_4 0000067c  00000000  00000000  0001843f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 24 .progmem.u8g_font_trixel_squarer 000003e2  00000000  00000000  00018abb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 25 .progmem.u8g_font_trixel_squaren 000000bb  00000000  00000000  00018e9d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 26 .progmem.u8g_font_trixel_square 000004d4  00000000  00000000  00018f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 27 .progmem.u8g_font_tpssr 00000525  00000000  00000000  0001942c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 28 .progmem.u8g_font_tpssn 000000ee  00000000  00000000  00019951  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 29 .progmem.u8g_font_tpss 00000a2d  00000000  00000000  00019a3f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 30 .progmem.u8g_font_tpssbr 00000542  00000000  00000000  0001a46c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 31 .progmem.u8g_font_tpssbn 000000f0  00000000  00000000  0001a9ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .progmem.u8g_font_tpssb 00000a60  00000000  00000000  0001aa9e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 33 .progmem.u8g_font_timR24r 0000129c  00000000  00000000  0001b4fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 34 .progmem.u8g_font_timR24n 000002cd  00000000  00000000  0001c79a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 35 .progmem.u8g_font_timR24 000028b3  00000000  00000000  0001ca67  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 36 .progmem.u8g_font_timR18r 00000c88  00000000  00000000  0001f31a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 37 .progmem.u8g_font_timR18 00001ac2  00000000  00000000  0001ffa2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 38 .progmem.u8g_font_timR14r 0000086c  00000000  00000000  00021a64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 39 .progmem.u8g_font_timR14 000011e1  00000000  00000000  000222d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 40 .progmem.u8g_font_timR12r 000006f8  00000000  00000000  000234b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 41 .progmem.u8g_font_timR12 00000f41  00000000  00000000  00023ba9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 42 .progmem.u8g_font_timR10r 00000623  00000000  00000000  00024aea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 43 .progmem.u8g_font_timR10 00000d1f  00000000  00000000  0002510d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 44 .progmem.u8g_font_timR08r 000004ae  00000000  00000000  00025e2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 45 .progmem.u8g_font_timR08 000009d0  00000000  00000000  000262da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 46 .progmem.u8g_font_timB24r 0000138b  00000000  00000000  00026caa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 47 .progmem.u8g_font_timB24n 000002d3  00000000  00000000  00028035  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 48 .progmem.u8g_font_timB24 00002a44  00000000  00000000  00028308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 49 .progmem.u8g_font_timB18r 00000d1b  00000000  00000000  0002ad4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 50 .progmem.u8g_font_timB18 00001c37  00000000  00000000  0002ba67  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 51 .progmem.u8g_font_timB14r 000008f7  00000000  00000000  0002d69e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 52 .progmem.u8g_font_timB14 000012f3  00000000  00000000  0002df95  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 53 .progmem.u8g_font_timB12r 0000072a  00000000  00000000  0002f288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 54 .progmem.u8g_font_timB12 00000f2f  00000000  00000000  0002f9b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 55 .progmem.u8g_font_timB10r 00000660  00000000  00000000  000308e1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 56 .progmem.u8g_font_timB10 00000dd3  00000000  00000000  00030f41  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 57 .progmem.u8g_font_timB08r 000004c5  00000000  00000000  00031d14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 58 .progmem.u8g_font_timB08 000009f7  00000000  00000000  000321d9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 59 .progmem.u8g_font_symb24r 000014d7  00000000  00000000  00032bd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 60 .progmem.u8g_font_symb24 000029e7  00000000  00000000  000340a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 61 .progmem.u8g_font_symb18r 00000ce7  00000000  00000000  00036a8e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 62 .progmem.u8g_font_symb18 000019cc  00000000  00000000  00037775  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 63 .progmem.u8g_font_symb14r 000008d5  00000000  00000000  00039141  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 64 .progmem.u8g_font_symb14 00001239  00000000  00000000  00039a16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 65 .progmem.u8g_font_symb12r 000007c1  00000000  00000000  0003ac4f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 66 .progmem.u8g_font_symb12 00001028  00000000  00000000  0003b410  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 67 .progmem.u8g_font_symb10r 00000661  00000000  00000000  0003c438  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 68 .progmem.u8g_font_symb10 00000d69  00000000  00000000  0003ca99  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 69 .progmem.u8g_font_symb08r 000004bb  00000000  00000000  0003d802  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 70 .progmem.u8g_font_symb08 00000a34  00000000  00000000  0003dcbd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 71 .progmem.u8g_font_robot_de_niror 00000411  00000000  00000000  0003e6f1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 72 .progmem.u8g_font_robot_de_niron 000000bb  00000000  00000000  0003eb02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 73 .progmem.u8g_font_robot_de_niro 00000560  00000000  00000000  0003ebbd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 74 .progmem.u8g_font_profont29r 00000e87  00000000  00000000  0003f11d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 75 .progmem.u8g_font_profont29 000021da  00000000  00000000  0003ffa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 76 .progmem.u8g_font_profont22r 00000a9f  00000000  00000000  0004217e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 77 .progmem.u8g_font_profont22 00001936  00000000  00000000  00042c1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 78 .progmem.u8g_font_profont17r 00000636  00000000  00000000  00044553  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 79 .progmem.u8g_font_profont17 00000e61  00000000  00000000  00044b89  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 80 .progmem.u8g_font_profont15r 0000055c  00000000  00000000  000459ea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 81 .progmem.u8g_font_profont15 00000c72  00000000  00000000  00045f46  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 82 .progmem.u8g_font_profont12r 000004ea  00000000  00000000  00046bb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 83 .progmem.u8g_font_profont12 00000b5b  00000000  00000000  000470a2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 84 .progmem.u8g_font_profont11r 000004b0  00000000  00000000  00047bfd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 85 .progmem.u8g_font_profont11 00000ad0  00000000  00000000  000480ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 86 .progmem.u8g_font_profont10r 00000452  00000000  00000000  00048b7d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 87 .progmem.u8g_font_profont10 00000a00  00000000  00000000  00048fcf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 88 .progmem.u8g_font_pixelle_micror 000003f4  00000000  00000000  000499cf  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 89 .progmem.u8g_font_pixelle_micron 000000bd  00000000  00000000  00049dc3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 90 .progmem.u8g_font_pixelle_micro 00000474  00000000  00000000  00049e80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 91 .progmem.u8g_font_p01typer 000003aa  00000000  00000000  0004a2f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 92 .progmem.u8g_font_p01typen 000000ba  00000000  00000000  0004a69e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 93 .progmem.u8g_font_p01type 0000048b  00000000  00000000  0004a758  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 94 .progmem.u8g_font_osr35r 00002883  00000000  00000000  0004abe3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 95 .progmem.u8g_font_osr35n 00000634  00000000  00000000  0004d466  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 96 .progmem.u8g_font_osr35 00005762  00000000  00000000  0004da9a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 97 .progmem.u8g_font_osr29r 00001d95  00000000  00000000  000531fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 98 .progmem.u8g_font_osr29n 000004ca  00000000  00000000  00054f91  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 99 .progmem.u8g_font_osr29 00003f68  00000000  00000000  0005545b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
100 .progmem.u8g_font_osr26r 000017a1  00000000  00000000  000593c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
101 .progmem.u8g_font_osr26n 000003bb  00000000  00000000  0005ab64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
102 .progmem.u8g_font_osr26 00003382  00000000  00000000  0005af1f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
103 .progmem.u8g_font_osr21r 0000112c  00000000  00000000  0005e2a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
104 .progmem.u8g_font_osr21n 000002d2  00000000  00000000  0005f3cd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
105 .progmem.u8g_font_osr21 0000253a  00000000  00000000  0005f69f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
106 .progmem.u8g_font_osr18r 00000e63  00000000  00000000  00061bd9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
107 .progmem.u8g_font_osr18n 00000265  00000000  00000000  00062a3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
108 .progmem.u8g_font_osr18 00001e88  00000000  00000000  00062ca1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
109 .progmem.u8g_font_osb35r 00002807  00000000  00000000  00064b29  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
110 .progmem.u8g_font_osb35n 0000061f  00000000  00000000  00067330  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
111 .progmem.u8g_font_osb35 00005651  00000000  00000000  0006794f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
112 .progmem.u8g_font_osb29r 00001d39  00000000  00000000  0006cfa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
113 .progmem.u8g_font_osb29n 000004e9  00000000  00000000  0006ecd9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
114 .progmem.u8g_font_osb29 00003dca  00000000  00000000  0006f1c2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
115 .progmem.u8g_font_osb26r 0000173e  00000000  00000000  00072f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
116 .progmem.u8g_font_osb26n 00000387  00000000  00000000  000746ca  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
117 .progmem.u8g_font_osb26 00003160  00000000  00000000  00074a51  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
118 .progmem.u8g_font_osb21r 000011a9  00000000  00000000  00077bb1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
119 .progmem.u8g_font_osb21n 000002d3  00000000  00000000  00078d5a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
120 .progmem.u8g_font_osb21 0000258c  00000000  00000000  0007902d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
121 .progmem.u8g_font_osb18r 00000e1b  00000000  00000000  0007b5b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
122 .progmem.u8g_font_osb18n 0000026a  00000000  00000000  0007c3d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
123 .progmem.u8g_font_osb18 00001dd5  00000000  00000000  0007c63e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
124 .progmem.u8g_font_orgv01r 000002cf  00000000  00000000  0007e413  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
125 .progmem.u8g_font_orgv01n 00000089  00000000  00000000  0007e6e2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
126 .progmem.u8g_font_orgv01 000005ff  00000000  00000000  0007e76b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
127 .progmem.u8g_font_ncenR24r 000014f7  00000000  00000000  0007ed6a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
128 .progmem.u8g_font_ncenR24n 000002e8  00000000  00000000  00080261  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
129 .progmem.u8g_font_ncenR24 00002dd1  00000000  00000000  00080549  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
130 .progmem.u8g_font_ncenR18r 00000d95  00000000  00000000  0008331a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
131 .progmem.u8g_font_ncenR18 00001d40  00000000  00000000  000840af  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
132 .progmem.u8g_font_ncenR14r 000009e6  00000000  00000000  00085def  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
133 .progmem.u8g_font_ncenR14 000014c7  00000000  00000000  000867d5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
134 .progmem.u8g_font_ncenR12r 000007b8  00000000  00000000  00087c9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
135 .progmem.u8g_font_ncenR12 00001097  00000000  00000000  00088454  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
136 .progmem.u8g_font_ncenR10r 000006f5  00000000  00000000  000894eb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
137 .progmem.u8g_font_ncenR10 00000ee5  00000000  00000000  00089be0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
138 .progmem.u8g_font_ncenR08r 000004f2  00000000  00000000  0008aac5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
139 .progmem.u8g_font_ncenR08 00000a52  00000000  00000000  0008afb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
140 .progmem.u8g_font_ncenB24r 00001731  00000000  00000000  0008ba09  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
141 .progmem.u8g_font_ncenB24n 00000364  00000000  00000000  0008d13a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
142 .progmem.u8g_font_ncenB24 000032a4  00000000  00000000  0008d49e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
143 .progmem.u8g_font_ncenB18r 00000e98  00000000  00000000  00090742  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
144 .progmem.u8g_font_ncenB18 00001fb2  00000000  00000000  000915da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
145 .progmem.u8g_font_ncenB14r 00000a2b  00000000  00000000  0009358c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
146 .progmem.u8g_font_ncenB14 000015b6  00000000  00000000  00093fb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
147 .progmem.u8g_font_ncenB12r 00000892  00000000  00000000  0009556d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
148 .progmem.u8g_font_ncenB12 0000127f  00000000  00000000  00095dff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
149 .progmem.u8g_font_ncenB10r 0000073d  00000000  00000000  0009707e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
150 .progmem.u8g_font_ncenB10 00000fa3  00000000  00000000  000977bb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
151 .progmem.u8g_font_ncenB08r 00000523  00000000  00000000  0009875e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
152 .progmem.u8g_font_ncenB08 00000ac8  00000000  00000000  00098c81  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
153 .progmem.u8g_font_micro 00000357  00000000  00000000  00099749  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
154 .progmem.u8g_font_m2icon_9 000001d7  00000000  00000000  00099aa0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
155 .progmem.u8g_font_m2icon_7 00000113  00000000  00000000  00099c77  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
156 .progmem.u8g_font_m2icon_5 000000dd  00000000  00000000  00099d8a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
157 .progmem.u8g_font_lucasfont_alternater 00000472  00000000  00000000  00099e67  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
158 .progmem.u8g_font_lucasfont_alternaten 000000d8  00000000  00000000  0009a2d9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
159 .progmem.u8g_font_lucasfont_alternate 00000891  00000000  00000000  0009a3b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
160 .progmem.u8g_font_helvR24r 00001380  00000000  00000000  0009ac42  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
161 .progmem.u8g_font_helvR24n 000002d6  00000000  00000000  0009bfc2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
162 .progmem.u8g_font_helvR24 00002ab3  00000000  00000000  0009c298  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
163 .progmem.u8g_font_helvR18r 00000d35  00000000  00000000  0009ed4b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
164 .progmem.u8g_font_helvR18n 00000218  00000000  00000000  0009fa80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
165 .progmem.u8g_font_helvR18 00001c8b  00000000  00000000  0009fc98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
166 .progmem.u8g_font_helvR14r 000008e9  00000000  00000000  000a1923  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
167 .progmem.u8g_font_helvR14n 00000137  00000000  00000000  000a220c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
168 .progmem.u8g_font_helvR14 00001338  00000000  00000000  000a2343  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
169 .progmem.u8g_font_helvR12r 00000773  00000000  00000000  000a367b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
170 .progmem.u8g_font_helvR12n 00000122  00000000  00000000  000a3dee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
171 .progmem.u8g_font_helvR12 00000fed  00000000  00000000  000a3f10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
172 .progmem.u8g_font_helvR10r 00000670  00000000  00000000  000a4efd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
173 .progmem.u8g_font_helvR10n 0000010b  00000000  00000000  000a556d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
174 .progmem.u8g_font_helvR10 00000dc7  00000000  00000000  000a5678  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
175 .progmem.u8g_font_helvR08r 000004fc  00000000  00000000  000a643f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
176 .progmem.u8g_font_helvR08n 000000e2  00000000  00000000  000a693b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
177 .progmem.u8g_font_helvR08 00000a7f  00000000  00000000  000a6a1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
178 .progmem.u8g_font_helvB24r 0000145e  00000000  00000000  000a749c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
179 .progmem.u8g_font_helvB24n 000002e7  00000000  00000000  000a88fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
180 .progmem.u8g_font_helvB24 00002d22  00000000  00000000  000a8be1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
181 .progmem.u8g_font_helvB18r 00000d7d  00000000  00000000  000ab903  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
182 .progmem.u8g_font_helvB18n 00000219  00000000  00000000  000ac680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
183 .progmem.u8g_font_helvB18 00001d67  00000000  00000000  000ac899  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
184 .progmem.u8g_font_helvB14r 000009f4  00000000  00000000  000ae600  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
185 .progmem.u8g_font_helvB14n 000001a0  00000000  00000000  000aeff4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
186 .progmem.u8g_font_helvB14 00001571  00000000  00000000  000af194  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
187 .progmem.u8g_font_helvB12r 0000077a  00000000  00000000  000b0705  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
188 .progmem.u8g_font_helvB12n 00000119  00000000  00000000  000b0e7f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
189 .progmem.u8g_font_helvB12 00000fed  00000000  00000000  000b0f98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
190 .progmem.u8g_font_helvB10r 000006b8  00000000  00000000  000b1f85  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
191 .progmem.u8g_font_helvB10n 00000109  00000000  00000000  000b263d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
192 .progmem.u8g_font_helvB10 00000e6c  00000000  00000000  000b2746  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
193 .progmem.u8g_font_helvB08r 00000507  00000000  00000000  000b35b2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
194 .progmem.u8g_font_helvB08n 000000e4  00000000  00000000  000b3ab9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
195 .progmem.u8g_font_helvB08 00000a75  00000000  00000000  000b3b9d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
196 .progmem.u8g_font_gdr9r 00000611  00000000  00000000  000b4612  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
197 .progmem.u8g_font_gdr9n 000000f8  00000000  00000000  000b4c23  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
198 .progmem.u8g_font_gdr9 00000cb0  00000000  00000000  000b4d1b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
199 .progmem.u8g_font_gdr30r 0000218c  00000000  00000000  000b59cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
200 .progmem.u8g_font_gdr30n 00000501  00000000  00000000  000b7b57  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
201 .progmem.u8g_font_gdr30 000047c1  00000000  00000000  000b8058  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
202 .progmem.u8g_font_gdr25r 0000185f  00000000  00000000  000bc819  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
203 .progmem.u8g_font_gdr25n 00000343  00000000  00000000  000be078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
204 .progmem.u8g_font_gdr25 000032f2  00000000  00000000  000be3bb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
205 .progmem.u8g_font_gdr20r 00001088  00000000  00000000  000c16ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
206 .progmem.u8g_font_gdr20n 00000280  00000000  00000000  000c2735  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
207 .progmem.u8g_font_gdr20 0000239f  00000000  00000000  000c29b5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
208 .progmem.u8g_font_gdr17r 00000d34  00000000  00000000  000c4d54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
209 .progmem.u8g_font_gdr17n 0000022f  00000000  00000000  000c5a88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
210 .progmem.u8g_font_gdr17 00001b90  00000000  00000000  000c5cb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
211 .progmem.u8g_font_gdr14r 00000ae7  00000000  00000000  000c7847  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
212 .progmem.u8g_font_gdr14n 000001ce  00000000  00000000  000c832e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
213 .progmem.u8g_font_gdr14 00001736  00000000  00000000  000c84fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
214 .progmem.u8g_font_gdr12r 000007c8  00000000  00000000  000c9c32  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
215 .progmem.u8g_font_gdr12n 0000011e  00000000  00000000  000ca3fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
216 .progmem.u8g_font_gdr12 00001068  00000000  00000000  000ca518  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
217 .progmem.u8g_font_gdr11r 0000074c  00000000  00000000  000cb580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
218 .progmem.u8g_font_gdr11n 00000114  00000000  00000000  000cbccc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
219 .progmem.u8g_font_gdr11 00000f89  00000000  00000000  000cbde0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
220 .progmem.u8g_font_gdr10r 000006bb  00000000  00000000  000ccd69  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
221 .progmem.u8g_font_gdr10n 00000107  00000000  00000000  000cd424  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
222 .progmem.u8g_font_gdr10 00000e56  00000000  00000000  000cd52b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
223 .progmem.u8g_font_gdb30r 00002398  00000000  00000000  000ce381  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
224 .progmem.u8g_font_gdb30n 00000518  00000000  00000000  000d0719  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
225 .progmem.u8g_font_gdb30 00004c34  00000000  00000000  000d0c31  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
226 .progmem.u8g_font_gdb25r 00001a7b  00000000  00000000  000d5865  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
227 .progmem.u8g_font_gdb25n 000003d9  00000000  00000000  000d72e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
228 .progmem.u8g_font_gdb25 00003933  00000000  00000000  000d76b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
229 .progmem.u8g_font_gdb20r 00001248  00000000  00000000  000dafec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
230 .progmem.u8g_font_gdb20n 00000286  00000000  00000000  000dc234  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
231 .progmem.u8g_font_gdb20 0000275d  00000000  00000000  000dc4ba  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
232 .progmem.u8g_font_gdb17r 00000dd4  00000000  00000000  000dec17  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
233 .progmem.u8g_font_gdb17n 00000231  00000000  00000000  000df9eb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
234 .progmem.u8g_font_gdb17 00001db0  00000000  00000000  000dfc1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
235 .progmem.u8g_font_gdb14r 00000b1a  00000000  00000000  000e19cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
236 .progmem.u8g_font_gdb14n 000001d0  00000000  00000000  000e24e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
237 .progmem.u8g_font_gdb14 0000179c  00000000  00000000  000e26b6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
238 .progmem.u8g_font_gdb12r 0000088e  00000000  00000000  000e3e52  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
239 .progmem.u8g_font_gdb12n 0000012d  00000000  00000000  000e46e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
240 .progmem.u8g_font_gdb12 00001212  00000000  00000000  000e480d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
241 .progmem.u8g_font_gdb11r 000007d1  00000000  00000000  000e5a1f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
242 .progmem.u8g_font_gdb11n 00000116  00000000  00000000  000e61f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
243 .progmem.u8g_font_gdb11 000010d9  00000000  00000000  000e6306  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
244 .progmem.u8g_font_fur49n 00000a7b  00000000  00000000  000e73df  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
245 .progmem.u8g_font_fur42n 00000892  00000000  00000000  000e7e5a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
246 .progmem.u8g_font_fur35n 000005a7  00000000  00000000  000e86ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
247 .progmem.u8g_font_fur30r 00001cd4  00000000  00000000  000e8c93  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
248 .progmem.u8g_font_fur30n 000004b1  00000000  00000000  000ea967  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
249 .progmem.u8g_font_fur30 00004079  00000000  00000000  000eae18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
250 .progmem.u8g_font_fur25r 0000150d  00000000  00000000  000eee91  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
251 .progmem.u8g_font_fur25n 0000031e  00000000  00000000  000f039e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
252 .progmem.u8g_font_fur25 00002ead  00000000  00000000  000f06bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
253 .progmem.u8g_font_fur20r 00000f88  00000000  00000000  000f3569  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
254 .progmem.u8g_font_fur20n 00000268  00000000  00000000  000f44f1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
255 .progmem.u8g_font_fur20 000021ce  00000000  00000000  000f4759  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
256 .progmem.u8g_font_fur17r 00000c4a  00000000  00000000  000f6927  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
257 .progmem.u8g_font_fur17n 00000210  00000000  00000000  000f7571  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
258 .progmem.u8g_font_fur17 00001a8f  00000000  00000000  000f7781  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
259 .progmem.u8g_font_fur14r 000009b9  00000000  00000000  000f9210  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
260 .progmem.u8g_font_fur14n 000001a5  00000000  00000000  000f9bc9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
261 .progmem.u8g_font_fur14 000014e5  00000000  00000000  000f9d6e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
262 .progmem.u8g_font_fur11r 000006c1  00000000  00000000  000fb253  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
263 .progmem.u8g_font_fur11n 00000117  00000000  00000000  000fb914  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
264 .progmem.u8g_font_fur11 00000e80  00000000  00000000  000fba2b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
265 .progmem.u8g_font_fub49n 00000c4c  00000000  00000000  000fc8ab  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
266 .progmem.u8g_font_fub42n 000008de  00000000  00000000  000fd4f7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
267 .progmem.u8g_font_fub35n 000006a1  00000000  00000000  000fddd5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
268 .progmem.u8g_font_fub30r 00001e06  00000000  00000000  000fe476  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
269 .progmem.u8g_font_fub30n 000004b5  00000000  00000000  0010027c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
270 .progmem.u8g_font_fub30 00004239  00000000  00000000  00100731  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
271 .progmem.u8g_font_fub25r 00001730  00000000  00000000  0010496a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
272 .progmem.u8g_font_fub25n 000003d5  00000000  00000000  0010609a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
273 .progmem.u8g_font_fub25 0000326c  00000000  00000000  0010646f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
274 .progmem.u8g_font_fub20t 000001dd  00000000  00000000  001096db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
275 .progmem.u8g_font_fub20r 00000fb6  00000000  00000000  001098b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
276 .progmem.u8g_font_fub20n 0000025b  00000000  00000000  0010a86e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
277 .progmem.u8g_font_fub20 000022d4  00000000  00000000  0010aac9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
278 .progmem.u8g_font_fub17r 00000c96  00000000  00000000  0010cd9d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
279 .progmem.u8g_font_fub17n 00000212  00000000  00000000  0010da33  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
280 .progmem.u8g_font_fub17 00001b1a  00000000  00000000  0010dc45  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
281 .progmem.u8g_font_fub14r 00000a78  00000000  00000000  0010f75f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
282 .progmem.u8g_font_fub14n 000001c4  00000000  00000000  001101d7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
283 .progmem.u8g_font_fub14 0000169c  00000000  00000000  0011039b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
284 .progmem.u8g_font_fub11r 00000725  00000000  00000000  00111a37  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
285 .progmem.u8g_font_fub11n 00000118  00000000  00000000  0011215c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
286 .progmem.u8g_font_fub11 00000f6c  00000000  00000000  00112274  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
287 .progmem.u8g_font_freedoomr25n 000003af  00000000  00000000  001131e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
288 .progmem.u8g_font_freedoomr10r 00000412  00000000  00000000  0011358f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
289 .progmem.u8g_font_fixed_v0r 0000036e  00000000  00000000  001139a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
290 .progmem.u8g_font_fixed_v0n 000000a7  00000000  00000000  00113d0f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
291 .progmem.u8g_font_fixed_v0 000006a6  00000000  00000000  00113db6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
292 .progmem.u8g_font_cursorr 000001ec  00000000  00000000  0011445c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
293 .progmem.u8g_font_cursor 000014a6  00000000  00000000  00114648  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
294 .progmem.u8g_font_cu12 00000f99  00000000  00000000  00115aee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
295 .progmem.u8g_font_cu12_75r 00000463  00000000  00000000  00116a87  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
296 .progmem.u8g_font_cu12_67_75 00000f8d  00000000  00000000  00116eea  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
297 .progmem.u8g_font_courR24r 00000f97  00000000  00000000  00117e77  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
298 .progmem.u8g_font_courR24n 00000292  00000000  00000000  00118e0e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
299 .progmem.u8g_font_courR24 00002219  00000000  00000000  001190a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
300 .progmem.u8g_font_courR18r 00000b2e  00000000  00000000  0011b2b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
301 .progmem.u8g_font_courR18 00001808  00000000  00000000  0011bde7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
302 .progmem.u8g_font_courR14r 000007c4  00000000  00000000  0011d5ef  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
303 .progmem.u8g_font_courR14 000010b4  00000000  00000000  0011ddb3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
304 .progmem.u8g_font_courR12r 00000638  00000000  00000000  0011ee67  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
305 .progmem.u8g_font_courR12 00000d8f  00000000  00000000  0011f49f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
306 .progmem.u8g_font_courR10r 000005a3  00000000  00000000  0012022e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
307 .progmem.u8g_font_courR10 00000bec  00000000  00000000  001207d1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
308 .progmem.u8g_font_courR08r 00000485  00000000  00000000  001213bd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
309 .progmem.u8g_font_courR08 00000981  00000000  00000000  00121842  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
310 .progmem.u8g_font_courB24n 000002c3  00000000  00000000  001221c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
311 .progmem.u8g_font_courB24r 000012a7  00000000  00000000  00122486  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
312 .progmem.u8g_font_courB24 00002906  00000000  00000000  0012372d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
313 .progmem.u8g_font_courB18r 00000bb9  00000000  00000000  00126033  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
314 .progmem.u8g_font_courB18 0000191d  00000000  00000000  00126bec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
315 .progmem.u8g_font_courB14r 00000877  00000000  00000000  00128509  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
316 .progmem.u8g_font_courB14 000012b0  00000000  00000000  00128d80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
317 .progmem.u8g_font_courB12r 00000741  00000000  00000000  0012a030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
318 .progmem.u8g_font_courB12 00000f77  00000000  00000000  0012a771  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
319 .progmem.u8g_font_courB10r 0000060f  00000000  00000000  0012b6e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
320 .progmem.u8g_font_courB10 00000d1b  00000000  00000000  0012bcf7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
321 .progmem.u8g_font_courB08r 00000479  00000000  00000000  0012ca12  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
322 .progmem.u8g_font_courB08 00000979  00000000  00000000  0012ce8b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
323 .progmem.u8g_font_chikitar 00000408  00000000  00000000  0012d804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
324 .progmem.u8g_font_chikitan 000000bd  00000000  00000000  0012dc0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
325 .progmem.u8g_font_chikita 000008bc  00000000  00000000  0012dcc9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
326 .progmem.u8g_font_blipfest_07r 00000334  00000000  00000000  0012e585  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
327 .progmem.u8g_font_blipfest_07n 000000a9  00000000  00000000  0012e8b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
328 .progmem.u8g_font_blipfest_07 000003b4  00000000  00000000  0012e962  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
329 .progmem.u8g_font_babyr 00000410  00000000  00000000  0012ed16  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
330 .progmem.u8g_font_babyn 000000bd  00000000  00000000  0012f126  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
331 .progmem.u8g_font_baby 000008b3  00000000  00000000  0012f1e3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
332 .progmem.u8g_font_9x18r 00000590  00000000  00000000  0012fa96  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
333 .progmem.u8g_font_9x18 00000bc3  00000000  00000000  00130026  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
334 .progmem.u8g_font_9x18Br 0000059a  00000000  00000000  00130be9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
335 .progmem.u8g_font_9x18B 00000bd2  00000000  00000000  00131183  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
336 .progmem.u8g_font_9x18_78_79 00000d08  00000000  00000000  00131d55  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
337 .progmem.u8g_font_9x18_75r 00000318  00000000  00000000  00132a5d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
338 .progmem.u8g_font_9x18_67_75 00000f60  00000000  00000000  00132d75  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
339 .progmem.u8g_font_9x15r 00000593  00000000  00000000  00133cd5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
340 .progmem.u8g_font_9x15 00000b8f  00000000  00000000  00134268  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
341 .progmem.u8g_font_9x15Br 0000058f  00000000  00000000  00134df7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
342 .progmem.u8g_font_9x15B 00000bae  00000000  00000000  00135386  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
343 .progmem.u8g_font_9x15_78_79 00000ed3  00000000  00000000  00135f34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
344 .progmem.u8g_font_9x15_75r 00000318  00000000  00000000  00136e07  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
345 .progmem.u8g_font_9x15_67_75 00000edc  00000000  00000000  0013711f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
346 .progmem.u8g_font_8x13r 00000404  00000000  00000000  00137ffb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
347 .progmem.u8g_font_8x13Or 00000405  00000000  00000000  001383ff  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
348 .progmem.u8g_font_8x13O 00000869  00000000  00000000  00138804  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
349 .progmem.u8g_font_8x13 00000868  00000000  00000000  0013906d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
350 .progmem.u8g_font_8x13Br 00000463  00000000  00000000  001398d5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
351 .progmem.u8g_font_8x13B 000008fe  00000000  00000000  00139d38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
352 .progmem.u8g_font_8x13_75r 000001f0  00000000  00000000  0013a636  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
353 .progmem.u8g_font_8x13_67_75 00000974  00000000  00000000  0013a826  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
354 .progmem.u8g_font_7x14r 0000047f  00000000  00000000  0013b19a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
355 .progmem.u8g_font_7x14 00000946  00000000  00000000  0013b619  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
356 .progmem.u8g_font_7x14Br 0000047f  00000000  00000000  0013bf5f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
357 .progmem.u8g_font_7x14B 00000956  00000000  00000000  0013c3de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
358 .progmem.u8g_font_7x13r 0000040a  00000000  00000000  0013cd34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
359 .progmem.u8g_font_7x13Or 0000040b  00000000  00000000  0013d13e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
360 .progmem.u8g_font_7x13O 0000086e  00000000  00000000  0013d549  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
361 .progmem.u8g_font_7x13 0000086d  00000000  00000000  0013ddb7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
362 .progmem.u8g_font_7x13Br 00000411  00000000  00000000  0013e624  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
363 .progmem.u8g_font_7x13B 0000087c  00000000  00000000  0013ea35  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
364 .progmem.u8g_font_7x13_75r 000001d7  00000000  00000000  0013f2b1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
365 .progmem.u8g_font_7x13_67_75 00000895  00000000  00000000  0013f488  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
366 .progmem.u8g_font_6x13r 00000411  00000000  00000000  0013fd1d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
367 .progmem.u8g_font_6x13Or 00000413  00000000  00000000  0014012e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
368 .progmem.u8g_font_6x13O 00000872  00000000  00000000  00140541  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
369 .progmem.u8g_font_6x13 00000870  00000000  00000000  00140db3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
370 .progmem.u8g_font_6x13Br 00000410  00000000  00000000  00141623  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
371 .progmem.u8g_font_6x13B 0000087b  00000000  00000000  00141a33  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
372 .progmem.u8g_font_6x13_78_79 000005be  00000000  00000000  001422ae  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
373 .progmem.u8g_font_6x13_75r 000001bf  00000000  00000000  0014286c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
374 .progmem.u8g_font_6x13_67_75 000008bc  00000000  00000000  00142a2b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
375 .progmem.u8g_font_6x12r 00000382  00000000  00000000  001432e7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
376 .progmem.u8g_font_6x12 0000078d  00000000  00000000  00143669  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
377 .progmem.u8g_font_6x12_78_79 0000090c  00000000  00000000  00143df6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
378 .progmem.u8g_font_6x12_75r 000001ab  00000000  00000000  00144702  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
379 .progmem.u8g_font_6x12_67_75 0000094e  00000000  00000000  001448ad  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
380 .progmem.u8g_font_6x10r 00000379  00000000  00000000  001451fb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
381 .progmem.u8g_font_6x10 0000074a  00000000  00000000  00145574  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
382 .progmem.u8g_font_5x8r 00000325  00000000  00000000  00145cbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
383 .progmem.u8g_font_5x8 0000069d  00000000  00000000  00145fe3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
384 .progmem.u8g_font_5x7r 00000315  00000000  00000000  00146680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
385 .progmem.u8g_font_5x7 00000658  00000000  00000000  00146995  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
386 .progmem.u8g_font_4x6r 000002de  00000000  00000000  00146fed  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
387 .progmem.u8g_font_4x6 000005dc  00000000  00000000  001472cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
388 .progmem.u8g_font_10x20r 00000683  00000000  00000000  001478a7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
389 .progmem.u8g_font_10x20 00000d7d  00000000  00000000  00147f2a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
390 .progmem.u8g_font_10x20_78_79 00000a4e  00000000  00000000  00148ca7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
391 .progmem.u8g_font_10x20_75r 000002b5  00000000  00000000  001496f5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
392 .progmem.u8g_font_10x20_67_75 0000127e  00000000  00000000  001499aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
393 .progmem.u8g_font_04b_24r 000002df  00000000  00000000  0014ac28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
394 .progmem.u8g_font_04b_24n 00000088  00000000  00000000  0014af07  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
395 .progmem.u8g_font_04b_24 00000390  00000000  00000000  0014af8f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
396 .progmem.u8g_font_04b_03r 000002d9  00000000  00000000  0014b31f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
397 .progmem.u8g_font_04b_03n 00000088  00000000  00000000  0014b5f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
398 .progmem.u8g_font_04b_03 0000035b  00000000  00000000  0014b680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
399 .progmem.u8g_font_04b_03br 000002b8  00000000  00000000  0014b9db  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
400 .progmem.u8g_font_04b_03bn 00000088  00000000  00000000  0014bc93  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
401 .progmem.u8g_font_04b_03b 0000033a  00000000  00000000  0014bd1b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
402 .comment      00000022  00000000  00000000  0014c055  2**0
                  CONTENTS, READONLY

u8g_line.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007f8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001664  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_DrawLine 000000c6  00000000  00000000  00001e90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .comment      00000022  00000000  00000000  00001f56  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_DrawLine:

00000000 <u8g_DrawLine>:
*/

#include "u8g.h"

void u8g_DrawLine(u8g_t *u8g, u8g_uint_t x1, u8g_uint_t y1, u8g_uint_t x2, u8g_uint_t y2)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	1f 92       	push	r1
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	4c 01       	movw	r8, r24
  1e:	16 2f       	mov	r17, r22
  20:	f4 2e       	mov	r15, r20

  uint8_t swapxy = 0;
  
  /* no BBX intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  22:	26 17       	cp	r18, r22
  24:	00 f4       	brcc	.+0      	; 0x26 <u8g_DrawLine+0x26>
  26:	d6 2e       	mov	r13, r22
  28:	d2 1a       	sub	r13, r18
  2a:	00 c0       	rjmp	.+0      	; 0x2c <u8g_DrawLine+0x2c>
  2c:	d2 2e       	mov	r13, r18
  2e:	d6 1a       	sub	r13, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
  30:	0f 15       	cp	r16, r15
  32:	00 f4       	brcc	.+0      	; 0x34 <u8g_DrawLine+0x34>
  34:	ef 2c       	mov	r14, r15
  36:	e0 1a       	sub	r14, r16
  38:	00 c0       	rjmp	.+0      	; 0x3a <u8g_DrawLine+0x3a>
  3a:	e0 2e       	mov	r14, r16
  3c:	ef 18       	sub	r14, r15

  if ( dy > dx ) 
  3e:	de 14       	cp	r13, r14
  40:	00 f0       	brcs	.+0      	; 0x42 <u8g_DrawLine+0x42>
  42:	8e 2d       	mov	r24, r14
  44:	ed 2c       	mov	r14, r13
  46:	d8 2e       	mov	r13, r24
  u8g_uint_t x,y;
  u8g_uint_t dx, dy;
  u8g_int_t err;
  u8g_int_t ystep;

  uint8_t swapxy = 0;
  48:	b1 2c       	mov	r11, r1
  4a:	00 c0       	rjmp	.+0      	; 0x4c <u8g_DrawLine+0x4c>
  4c:	82 2f       	mov	r24, r18
  4e:	20 2f       	mov	r18, r16
  50:	08 2f       	mov	r16, r24
  52:	81 2f       	mov	r24, r17
  54:	1f 2d       	mov	r17, r15
  56:	f8 2e       	mov	r15, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
  58:	bb 24       	eor	r11, r11
  5a:	b3 94       	inc	r11
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
  5c:	21 17       	cp	r18, r17
  5e:	00 f4       	brcc	.+0      	; 0x60 <u8g_DrawLine+0x60>
  60:	8f 2d       	mov	r24, r15
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  62:	f0 2e       	mov	r15, r16
  64:	08 2f       	mov	r16, r24
  66:	81 2f       	mov	r24, r17
  68:	12 2f       	mov	r17, r18
  6a:	28 2f       	mov	r18, r24
  }
  err = dx >> 1;
  6c:	ce 2c       	mov	r12, r14
  6e:	c6 94       	lsr	r12
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  70:	f0 16       	cp	r15, r16
  72:	00 f4       	brcc	.+0      	; 0x74 <u8g_DrawLine+0x74>
  74:	01 e0       	ldi	r16, 0x01	; 1
  76:	00 c0       	rjmp	.+0      	; 0x78 <u8g_DrawLine+0x78>
  78:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;

#ifndef  U8G_16BIT
  if ( x2 == 255 )
  7a:	2f 3f       	cpi	r18, 0xFF	; 255
  7c:	01 f4       	brne	.+0      	; 0x7e <u8g_DrawLine+0x7e>
    x2--;
  7e:	2e ef       	ldi	r18, 0xFE	; 254
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_DrawLine+0x82>
  {
    if ( swapxy == 0 ) 
  82:	b1 10       	cpse	r11, r1
  84:	00 c0       	rjmp	.+0      	; 0x86 <u8g_DrawLine+0x86>
      u8g_DrawPixel(u8g, x, y); 
  86:	4f 2d       	mov	r20, r15
  88:	61 2f       	mov	r22, r17
    else 
      u8g_DrawPixel(u8g, y, x); 
  8a:	c4 01       	movw	r24, r8
  8c:	29 83       	std	Y+1, r18	; 0x01
  8e:	0e 94 00 00 	call	0	; 0x0 <u8g_DrawLine>
  92:	29 81       	ldd	r18, Y+1	; 0x01
    err -= (uint8_t)dy;
  94:	cd 18       	sub	r12, r13
    if ( err < 0 ) 
  96:	c7 fe       	sbrs	r12, 7
  98:	00 c0       	rjmp	.+0      	; 0x9a <u8g_DrawLine+0x9a>
    {
      y += (u8g_uint_t)ystep;
  9a:	f0 0e       	add	r15, r16
      err += (u8g_uint_t)dx;
  9c:	ce 0c       	add	r12, r14
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
  9e:	1f 5f       	subi	r17, 0xFF	; 255
  a0:	21 17       	cp	r18, r17
  a2:	00 f4       	brcc	.+0      	; 0xa4 <u8g_DrawLine+0xa4>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <u8g_DrawLine+0xa6>
  {
    if ( swapxy == 0 ) 
      u8g_DrawPixel(u8g, x, y); 
    else 
      u8g_DrawPixel(u8g, y, x); 
  a6:	41 2f       	mov	r20, r17
  a8:	6f 2d       	mov	r22, r15
  aa:	00 c0       	rjmp	.+0      	; 0xac <u8g_DrawLine+0xac>
    {
      y += (u8g_uint_t)ystep;
      err += (u8g_uint_t)dx;
    }
  }
}
  ac:	0f 90       	pop	r0
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	ff 90       	pop	r15
  b8:	ef 90       	pop	r14
  ba:	df 90       	pop	r13
  bc:	cf 90       	pop	r12
  be:	bf 90       	pop	r11
  c0:	9f 90       	pop	r9
  c2:	8f 90       	pop	r8
  c4:	08 95       	ret

u8g_ll_api.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00001de8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002118  00000000  00000000  00001e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_init_data 0000005a  00000000  00000000  00003f34  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_call_dev_fn 00000008  00000000  00000000  00003f8e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_InitLL 00000064  00000000  00000000  00003f96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_FirstPageLL 0000004a  00000000  00000000  00003ffa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_NextPageLL 00000058  00000000  00000000  00004044  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_SetContrastLL 00000020  00000000  00000000  0000409c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_DrawPixelLL 00000012  00000000  00000000  000040bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.u8g_Draw8PixelLL 0000001e  00000000  00000000  000040ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.u8g_Draw4TPixelLL 0000001e  00000000  00000000  000040ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.u8g_GetWidthLL 00000020  00000000  00000000  0000410a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.u8g_GetHeightLL 00000020  00000000  00000000  0000412a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.u8g_GetModeLL 0000000a  00000000  00000000  0000414a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.u8g_UpdateDimension 0000003e  00000000  00000000  00004154  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.u8g_Begin 00000024  00000000  00000000  00004192  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.u8g_Init 00000022  00000000  00000000  000041b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.u8g_InitComFn 00000048  00000000  00000000  000041d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.u8g_InitSPI 00000054  00000000  00000000  00004220  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.u8g_InitHWSPI 00000048  00000000  00000000  00004274  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.u8g_InitI2C 0000003a  00000000  00000000  000042bc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text.u8g_Init8BitFixedPort 00000054  00000000  00000000  000042f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text.u8g_Init8Bit 00000098  00000000  00000000  0000434a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text.u8g_InitRW8Bit 00000090  00000000  00000000  000043e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.u8g_FirstPage 0000000a  00000000  00000000  00004472  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text.u8g_NextPage 0000001e  00000000  00000000  0000447c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text.u8g_SetContrast 0000000c  00000000  00000000  0000449a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text.u8g_SleepOn 00000010  00000000  00000000  000044a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text.u8g_SleepOff 00000010  00000000  00000000  000044b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text.u8g_DrawPixel 00000010  00000000  00000000  000044c6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text.u8g_Draw8Pixel 00000022  00000000  00000000  000044d6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text.u8g_Draw4TPixel 00000022  00000000  00000000  000044f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text.u8g_Draw8ColorPixel 00000020  00000000  00000000  0000451a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text.u8g_SetColorEntry 00000038  00000000  00000000  0000453a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text.u8g_SetColorIndex 00000006  00000000  00000000  00004572  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.u8g_SetHiColor 00000008  00000000  00000000  00004578  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.u8g_SetHiColorByRGB 00000026  00000000  00000000  00004580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.u8g_SetRGB 00000034  00000000  00000000  000045a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text.u8g_GetColorIndex 00000006  00000000  00000000  000045da  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.u8g_GetDefaultForegroundColor 00000018  00000000  00000000  000045e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text.u8g_SetDefaultForegroundColor 00000022  00000000  00000000  000045f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text.u8g_GetDefaultBackgroundColor 00000004  00000000  00000000  0000461a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.u8g_SetDefaultBackgroundColor 00000006  00000000  00000000  0000461e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.u8g_GetDefaultMidColor 00000010  00000000  00000000  00004624  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text.u8g_SetDefaultMidColor 00000014  00000000  00000000  00004634  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .comment      00000022  00000000  00000000  00004648  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_init_data:

00000000 <u8g_init_data>:

uint8_t u8g_GetDefaultMidColor(u8g_t *u8g)
{
  uint8_t mode;
  mode = u8g_GetMode(u8g);
  if ( mode == U8G_MODE_R3G3B2 ) 
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
    return 0x06d;     /* gray: 01101101 */
   8:	1d 82       	std	Y+5, r1	; 0x05
   a:	1c 82       	std	Y+4, r1	; 0x04
  else if ( mode == U8G_MODE_GRAY2BIT )
    return 1;         /* low mid intensity */
   c:	1f 82       	std	Y+7, r1	; 0x07
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
   e:	1e 82       	std	Y+6, r1	; 0x06
  10:	19 86       	std	Y+9, r1	; 0x09
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	88 87       	std	Y+8, r24	; 0x08
  16:	82 e2       	ldi	r24, 0x22	; 34
  18:	8a 87       	std	Y+10, r24	; 0x0a
  1a:	1f 86       	std	Y+15, r1	; 0x0f
  1c:	1e 86       	std	Y+14, r1	; 0x0e
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	2f ef       	ldi	r18, 0xFF	; 255
  24:	fe 01       	movw	r30, r28
  26:	e8 0f       	add	r30, r24
  28:	f9 1f       	adc	r31, r25
  2a:	23 a3       	std	Z+35, r18	; 0x23
  2c:	01 96       	adiw	r24, 0x01	; 1
  2e:	8e 30       	cpi	r24, 0x0E	; 14
  30:	91 05       	cpc	r25, r1
  32:	01 f4       	brne	.+0      	; 0x34 <u8g_init_data+0x34>
  34:	11 e0       	ldi	r17, 0x01	; 1
  36:	18 a3       	std	Y+32, r17	; 0x20
  38:	ce 01       	movw	r24, r28
  3a:	0e 94 00 00 	call	0	; 0x0 <u8g_init_data>
  3e:	1f 8b       	std	Y+23, r17	; 0x17
  40:	18 8e       	std	Y+24, r1	; 0x18
  42:	19 8e       	std	Y+25, r1	; 0x19
  44:	80 e4       	ldi	r24, 0x40	; 64
  46:	8a 8f       	std	Y+26, r24	; 0x1a
  48:	1b 8e       	std	Y+27, r1	; 0x1b
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	9a ab       	std	Y+50, r25	; 0x32
  50:	89 ab       	std	Y+49, r24	; 0x31
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	08 95       	ret

Disassembly of section .text.u8g_call_dev_fn:

0000005a <u8g_call_dev_fn>:
  5a:	db 01       	movw	r26, r22
  5c:	ed 91       	ld	r30, X+
  5e:	fc 91       	ld	r31, X
  60:	09 94       	ijmp

Disassembly of section .text.u8g_InitLL:

000000bc <u8g_InitLL>:
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <u8g_InitLL+0xc>
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	7c 01       	movw	r14, r24
  ce:	dc 01       	movw	r26, r24
  d0:	d1 96       	adiw	r26, 0x31	; 49
  d2:	ed 91       	ld	r30, X+
  d4:	fc 91       	ld	r31, X
  d6:	d2 97       	sbiw	r26, 0x32	; 50
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	69 83       	std	Y+1, r22	; 0x01
  dc:	7a 83       	std	Y+2, r23	; 0x02
  de:	09 95       	icall
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	4a e0       	ldi	r20, 0x0A	; 10
  e6:	69 81       	ldd	r22, Y+1	; 0x01
  e8:	7a 81       	ldd	r23, Y+2	; 0x02
  ea:	c7 01       	movw	r24, r14
  ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f0:	18 2f       	mov	r17, r24
  f2:	d7 01       	movw	r26, r14
  f4:	d1 96       	adiw	r26, 0x31	; 49
  f6:	ed 91       	ld	r30, X+
  f8:	fc 91       	ld	r31, X
  fa:	d2 97       	sbiw	r26, 0x32	; 50
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	09 95       	icall
 100:	d7 01       	movw	r26, r14
 102:	d1 96       	adiw	r26, 0x31	; 49
 104:	ed 91       	ld	r30, X+
 106:	fc 91       	ld	r31, X
 108:	d2 97       	sbiw	r26, 0x32	; 50
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	09 95       	icall
 10e:	81 2f       	mov	r24, r17
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	08 95       	ret

Disassembly of section .text.u8g_FirstPageLL:

000001dc <u8g_FirstPageLL>:
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
 1e6:	8b 01       	movw	r16, r22
 1e8:	e9 a9       	ldd	r30, Y+49	; 0x31
 1ea:	fa a9       	ldd	r31, Y+50	; 0x32
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	09 95       	icall
 1f0:	e9 a9       	ldd	r30, Y+49	; 0x31
 1f2:	fa a9       	ldd	r31, Y+50	; 0x32
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	09 95       	icall
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	44 e1       	ldi	r20, 0x14	; 20
 1fe:	b8 01       	movw	r22, r16
 200:	ce 01       	movw	r24, r28
 202:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 206:	9e 01       	movw	r18, r28
 208:	2d 5c       	subi	r18, 0xCD	; 205
 20a:	3f 4f       	sbci	r19, 0xFF	; 255
 20c:	47 e1       	ldi	r20, 0x17	; 23
 20e:	b8 01       	movw	r22, r16
 210:	ce 01       	movw	r24, r28
 212:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 216:	e9 a9       	ldd	r30, Y+49	; 0x31
 218:	fa a9       	ldd	r31, Y+50	; 0x32
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	09 94       	ijmp

Disassembly of section .text.u8g_NextPageLL:

00000402 <u8g_NextPageLL>:
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	ec 01       	movw	r28, r24
 40e:	8b 01       	movw	r16, r22
 410:	e9 a9       	ldd	r30, Y+49	; 0x31
 412:	fa a9       	ldd	r31, Y+50	; 0x32
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	09 95       	icall
 418:	e9 a9       	ldd	r30, Y+49	; 0x31
 41a:	fa a9       	ldd	r31, Y+50	; 0x32
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	09 95       	icall
 420:	20 e0       	ldi	r18, 0x00	; 0
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	45 e1       	ldi	r20, 0x15	; 21
 426:	b8 01       	movw	r22, r16
 428:	ce 01       	movw	r24, r28
 42a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 42e:	f8 2e       	mov	r15, r24
 430:	88 23       	and	r24, r24
 432:	01 f0       	breq	.+0      	; 0x434 <u8g_NextPageLL+0x32>
 434:	9e 01       	movw	r18, r28
 436:	2d 5c       	subi	r18, 0xCD	; 205
 438:	3f 4f       	sbci	r19, 0xFF	; 255
 43a:	47 e1       	ldi	r20, 0x17	; 23
 43c:	b8 01       	movw	r22, r16
 43e:	ce 01       	movw	r24, r28
 440:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 444:	e9 a9       	ldd	r30, Y+49	; 0x31
 446:	fa a9       	ldd	r31, Y+50	; 0x32
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	09 95       	icall
 44c:	8f 2d       	mov	r24, r15
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	0f 91       	pop	r16
 456:	ff 90       	pop	r15
 458:	08 95       	ret

Disassembly of section .text.u8g_SetContrastLL:

0000085c <u8g_SetContrastLL>:
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	1f 92       	push	r1
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
 866:	49 83       	std	Y+1, r20	; 0x01
 868:	9e 01       	movw	r18, r28
 86a:	2f 5f       	subi	r18, 0xFF	; 255
 86c:	3f 4f       	sbci	r19, 0xFF	; 255
 86e:	4f e0       	ldi	r20, 0x0F	; 15
 870:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 874:	0f 90       	pop	r0
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	08 95       	ret

Disassembly of section .text.u8g_DrawPixelLL:

000010d8 <u8g_DrawPixelLL>:
    10d8:	fc 01       	movw	r30, r24
    10da:	44 8f       	std	Z+28, r20	; 0x1c
    10dc:	25 8f       	std	Z+29, r18	; 0x1d
    10de:	9c 01       	movw	r18, r24
    10e0:	24 5e       	subi	r18, 0xE4	; 228
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	42 e3       	ldi	r20, 0x32	; 50
    10e6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Draw8PixelLL:

000021c2 <u8g_Draw8PixelLL>:
    21c2:	ef 92       	push	r14
    21c4:	0f 93       	push	r16
    21c6:	fc 01       	movw	r30, r24
    21c8:	44 8f       	std	Z+28, r20	; 0x1c
    21ca:	25 8f       	std	Z+29, r18	; 0x1d
    21cc:	07 8f       	std	Z+31, r16	; 0x1f
    21ce:	e6 8e       	std	Z+30, r14	; 0x1e
    21d0:	9c 01       	movw	r18, r24
    21d2:	24 5e       	subi	r18, 0xE4	; 228
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	4b e3       	ldi	r20, 0x3B	; 59
    21d8:	0f 91       	pop	r16
    21da:	ef 90       	pop	r14
    21dc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Draw4TPixelLL:

000043a2 <u8g_Draw4TPixelLL>:
    43a2:	ef 92       	push	r14
    43a4:	0f 93       	push	r16
    43a6:	fc 01       	movw	r30, r24
    43a8:	44 8f       	std	Z+28, r20	; 0x1c
    43aa:	25 8f       	std	Z+29, r18	; 0x1d
    43ac:	07 8f       	std	Z+31, r16	; 0x1f
    43ae:	e6 8e       	std	Z+30, r14	; 0x1e
    43b0:	9c 01       	movw	r18, r24
    43b2:	24 5e       	subi	r18, 0xE4	; 228
    43b4:	3f 4f       	sbci	r19, 0xFF	; 255
    43b6:	4d e2       	ldi	r20, 0x2D	; 45
    43b8:	0f 91       	pop	r16
    43ba:	ef 90       	pop	r14
    43bc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_GetWidthLL:

00008762 <u8g_GetWidthLL>:
    8762:	cf 93       	push	r28
    8764:	df 93       	push	r29
    8766:	1f 92       	push	r1
    8768:	cd b7       	in	r28, 0x3d	; 61
    876a:	de b7       	in	r29, 0x3e	; 62
    876c:	9e 01       	movw	r18, r28
    876e:	2f 5f       	subi	r18, 0xFF	; 255
    8770:	3f 4f       	sbci	r19, 0xFF	; 255
    8772:	46 e4       	ldi	r20, 0x46	; 70
    8774:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    8778:	89 81       	ldd	r24, Y+1	; 0x01
    877a:	0f 90       	pop	r0
    877c:	df 91       	pop	r29
    877e:	cf 91       	pop	r28
    8780:	08 95       	ret

Disassembly of section .text.u8g_GetHeightLL:

00010ee4 <u8g_GetHeightLL>:
   10ee4:	cf 93       	push	r28
   10ee6:	df 93       	push	r29
   10ee8:	1f 92       	push	r1
   10eea:	cd b7       	in	r28, 0x3d	; 61
   10eec:	de b7       	in	r29, 0x3e	; 62
   10eee:	9e 01       	movw	r18, r28
   10ef0:	2f 5f       	subi	r18, 0xFF	; 255
   10ef2:	3f 4f       	sbci	r19, 0xFF	; 255
   10ef4:	47 e4       	ldi	r20, 0x47	; 71
   10ef6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   10efa:	89 81       	ldd	r24, Y+1	; 0x01
   10efc:	0f 90       	pop	r0
   10efe:	df 91       	pop	r29
   10f00:	cf 91       	pop	r28
   10f02:	08 95       	ret

Disassembly of section .text.u8g_GetModeLL:

00021de8 <u8g_GetModeLL>:
   21de8:	20 e0       	ldi	r18, 0x00	; 0
   21dea:	30 e0       	ldi	r19, 0x00	; 0
   21dec:	48 e4       	ldi	r20, 0x48	; 72
   21dee:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_UpdateDimension:

00043bda <u8g_UpdateDimension>:
   43bda:	cf 93       	push	r28
   43bdc:	df 93       	push	r29
   43bde:	ec 01       	movw	r28, r24
   43be0:	6a 81       	ldd	r22, Y+2	; 0x02
   43be2:	7b 81       	ldd	r23, Y+3	; 0x03
   43be4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   43be8:	88 83       	st	Y, r24
   43bea:	6a 81       	ldd	r22, Y+2	; 0x02
   43bec:	7b 81       	ldd	r23, Y+3	; 0x03
   43bee:	ce 01       	movw	r24, r28
   43bf0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   43bf4:	89 83       	std	Y+1, r24	; 0x01
   43bf6:	6a 81       	ldd	r22, Y+2	; 0x02
   43bf8:	7b 81       	ldd	r23, Y+3	; 0x03
   43bfa:	ce 01       	movw	r24, r28
   43bfc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   43c00:	8b 87       	std	Y+11, r24	; 0x0b
   43c02:	9e 01       	movw	r18, r28
   43c04:	2d 5c       	subi	r18, 0xCD	; 205
   43c06:	3f 4f       	sbci	r19, 0xFF	; 255
   43c08:	6a 81       	ldd	r22, Y+2	; 0x02
   43c0a:	7b 81       	ldd	r23, Y+3	; 0x03
   43c0c:	47 e1       	ldi	r20, 0x17	; 23
   43c0e:	ce 01       	movw	r24, r28
   43c10:	df 91       	pop	r29
   43c12:	cf 91       	pop	r28
   43c14:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Begin:

000877f2 <u8g_Begin>:
   877f2:	cf 93       	push	r28
   877f4:	df 93       	push	r29
   877f6:	ec 01       	movw	r28, r24
   877f8:	6a 81       	ldd	r22, Y+2	; 0x02
   877fa:	7b 81       	ldd	r23, Y+3	; 0x03
   877fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   87800:	88 23       	and	r24, r24
   87802:	01 f0       	breq	.+0      	; 0x87804 <u8g_Begin+0x12>
   87804:	ce 01       	movw	r24, r28
   87806:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   8780a:	81 e0       	ldi	r24, 0x01	; 1
   8780c:	00 c0       	rjmp	.+0      	; 0x8780e <u8g_Begin+0x1c>
   8780e:	80 e0       	ldi	r24, 0x00	; 0
   87810:	df 91       	pop	r29
   87812:	cf 91       	pop	r28
   87814:	08 95       	ret

Disassembly of section .text.u8g_Init:

0010f008 <u8g_Init>:
  10f008:	0f 93       	push	r16
  10f00a:	1f 93       	push	r17
  10f00c:	cf 93       	push	r28
  10f00e:	df 93       	push	r29
  10f010:	ec 01       	movw	r28, r24
  10f012:	8b 01       	movw	r16, r22
  10f014:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  10f018:	1b 83       	std	Y+3, r17	; 0x03
  10f01a:	0a 83       	std	Y+2, r16	; 0x02
  10f01c:	ce 01       	movw	r24, r28
  10f01e:	df 91       	pop	r29
  10f020:	cf 91       	pop	r28
  10f022:	1f 91       	pop	r17
  10f024:	0f 91       	pop	r16
  10f026:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_InitComFn:

0021e032 <u8g_InitComFn>:
  21e032:	ef 92       	push	r14
  21e034:	ff 92       	push	r15
  21e036:	0f 93       	push	r16
  21e038:	1f 93       	push	r17
  21e03a:	cf 93       	push	r28
  21e03c:	df 93       	push	r29
  21e03e:	ec 01       	movw	r28, r24
  21e040:	8b 01       	movw	r16, r22
  21e042:	7a 01       	movw	r14, r20
  21e044:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  21e048:	80 e0       	ldi	r24, 0x00	; 0
  21e04a:	90 e0       	ldi	r25, 0x00	; 0
  21e04c:	2e ef       	ldi	r18, 0xFE	; 254
  21e04e:	fe 01       	movw	r30, r28
  21e050:	e8 0f       	add	r30, r24
  21e052:	f9 1f       	adc	r31, r25
  21e054:	23 a3       	std	Z+35, r18	; 0x23
  21e056:	01 96       	adiw	r24, 0x01	; 1
  21e058:	8e 30       	cpi	r24, 0x0E	; 14
  21e05a:	91 05       	cpc	r25, r1
  21e05c:	01 f4       	brne	.+0      	; 0x21e05e <u8g_InitComFn+0x2c>
  21e05e:	1b 83       	std	Y+3, r17	; 0x03
  21e060:	0a 83       	std	Y+2, r16	; 0x02
  21e062:	f8 01       	movw	r30, r16
  21e064:	f5 82       	std	Z+5, r15	; 0x05
  21e066:	e4 82       	std	Z+4, r14	; 0x04
  21e068:	ce 01       	movw	r24, r28
  21e06a:	df 91       	pop	r29
  21e06c:	cf 91       	pop	r28
  21e06e:	1f 91       	pop	r17
  21e070:	0f 91       	pop	r16
  21e072:	ff 90       	pop	r15
  21e074:	ef 90       	pop	r14
  21e076:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_InitSPI:

0043c0ac <u8g_InitSPI>:
  43c0ac:	8f 92       	push	r8
  43c0ae:	9f 92       	push	r9
  43c0b0:	af 92       	push	r10
  43c0b2:	bf 92       	push	r11
  43c0b4:	cf 92       	push	r12
  43c0b6:	ef 92       	push	r14
  43c0b8:	0f 93       	push	r16
  43c0ba:	cf 93       	push	r28
  43c0bc:	df 93       	push	r29
  43c0be:	00 d0       	rcall	.+0      	; 0x43c0c0 <u8g_InitSPI+0x14>
  43c0c0:	cd b7       	in	r28, 0x3d	; 61
  43c0c2:	de b7       	in	r29, 0x3e	; 62
  43c0c4:	4c 01       	movw	r8, r24
  43c0c6:	5b 01       	movw	r10, r22
  43c0c8:	2a 83       	std	Y+2, r18	; 0x02
  43c0ca:	49 83       	std	Y+1, r20	; 0x01
  43c0cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  43c0d0:	f4 01       	movw	r30, r8
  43c0d2:	b3 82       	std	Z+3, r11	; 0x03
  43c0d4:	a2 82       	std	Z+2, r10	; 0x02
  43c0d6:	49 81       	ldd	r20, Y+1	; 0x01
  43c0d8:	47 a3       	std	Z+39, r20	; 0x27
  43c0da:	2a 81       	ldd	r18, Y+2	; 0x02
  43c0dc:	20 a7       	std	Z+40, r18	; 0x28
  43c0de:	05 a3       	std	Z+37, r16	; 0x25
  43c0e0:	e4 a2       	std	Z+36, r14	; 0x24
  43c0e2:	c3 a2       	std	Z+35, r12	; 0x23
  43c0e4:	c4 01       	movw	r24, r8
  43c0e6:	0f 90       	pop	r0
  43c0e8:	0f 90       	pop	r0
  43c0ea:	df 91       	pop	r29
  43c0ec:	cf 91       	pop	r28
  43c0ee:	0f 91       	pop	r16
  43c0f0:	ef 90       	pop	r14
  43c0f2:	cf 90       	pop	r12
  43c0f4:	bf 90       	pop	r11
  43c0f6:	af 90       	pop	r10
  43c0f8:	9f 90       	pop	r9
  43c0fa:	8f 90       	pop	r8
  43c0fc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_InitHWSPI:

008781ac <u8g_InitHWSPI>:
  8781ac:	cf 92       	push	r12
  8781ae:	df 92       	push	r13
  8781b0:	ef 92       	push	r14
  8781b2:	ff 92       	push	r15
  8781b4:	0f 93       	push	r16
  8781b6:	cf 93       	push	r28
  8781b8:	df 93       	push	r29
  8781ba:	00 d0       	rcall	.+0      	; 0x8781bc <u8g_InitHWSPI+0x10>
  8781bc:	cd b7       	in	r28, 0x3d	; 61
  8781be:	de b7       	in	r29, 0x3e	; 62
  8781c0:	6c 01       	movw	r12, r24
  8781c2:	7b 01       	movw	r14, r22
  8781c4:	2a 83       	std	Y+2, r18	; 0x02
  8781c6:	49 83       	std	Y+1, r20	; 0x01
  8781c8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8781cc:	f6 01       	movw	r30, r12
  8781ce:	f3 82       	std	Z+3, r15	; 0x03
  8781d0:	e2 82       	std	Z+2, r14	; 0x02
  8781d2:	49 81       	ldd	r20, Y+1	; 0x01
  8781d4:	45 a3       	std	Z+37, r20	; 0x25
  8781d6:	2a 81       	ldd	r18, Y+2	; 0x02
  8781d8:	24 a3       	std	Z+36, r18	; 0x24
  8781da:	03 a3       	std	Z+35, r16	; 0x23
  8781dc:	c6 01       	movw	r24, r12
  8781de:	0f 90       	pop	r0
  8781e0:	0f 90       	pop	r0
  8781e2:	df 91       	pop	r29
  8781e4:	cf 91       	pop	r28
  8781e6:	0f 91       	pop	r16
  8781e8:	ff 90       	pop	r15
  8781ea:	ef 90       	pop	r14
  8781ec:	df 90       	pop	r13
  8781ee:	cf 90       	pop	r12
  8781f0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_InitI2C:

010f03a0 <u8g_InitI2C>:
 10f03a0:	ef 92       	push	r14
 10f03a2:	ff 92       	push	r15
 10f03a4:	0f 93       	push	r16
 10f03a6:	1f 93       	push	r17
 10f03a8:	cf 93       	push	r28
 10f03aa:	df 93       	push	r29
 10f03ac:	1f 92       	push	r1
 10f03ae:	cd b7       	in	r28, 0x3d	; 61
 10f03b0:	de b7       	in	r29, 0x3e	; 62
 10f03b2:	7c 01       	movw	r14, r24
 10f03b4:	8b 01       	movw	r16, r22
 10f03b6:	49 83       	std	Y+1, r20	; 0x01
 10f03b8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 10f03bc:	f7 01       	movw	r30, r14
 10f03be:	13 83       	std	Z+3, r17	; 0x03
 10f03c0:	02 83       	std	Z+2, r16	; 0x02
 10f03c2:	49 81       	ldd	r20, Y+1	; 0x01
 10f03c4:	46 a7       	std	Z+46, r20	; 0x2e
 10f03c6:	c7 01       	movw	r24, r14
 10f03c8:	0f 90       	pop	r0
 10f03ca:	df 91       	pop	r29
 10f03cc:	cf 91       	pop	r28
 10f03ce:	1f 91       	pop	r17
 10f03d0:	0f 91       	pop	r16
 10f03d2:	ff 90       	pop	r15
 10f03d4:	ef 90       	pop	r14
 10f03d6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Init8BitFixedPort:

021e077a <u8g_Init8BitFixedPort>:
 21e077a:	8f 92       	push	r8
 21e077c:	9f 92       	push	r9
 21e077e:	af 92       	push	r10
 21e0780:	bf 92       	push	r11
 21e0782:	cf 92       	push	r12
 21e0784:	ef 92       	push	r14
 21e0786:	0f 93       	push	r16
 21e0788:	cf 93       	push	r28
 21e078a:	df 93       	push	r29
 21e078c:	00 d0       	rcall	.+0      	; 0x21e078e <u8g_Init8BitFixedPort+0x14>
 21e078e:	cd b7       	in	r28, 0x3d	; 61
 21e0790:	de b7       	in	r29, 0x3e	; 62
 21e0792:	4c 01       	movw	r8, r24
 21e0794:	5b 01       	movw	r10, r22
 21e0796:	2a 83       	std	Y+2, r18	; 0x02
 21e0798:	49 83       	std	Y+1, r20	; 0x01
 21e079a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 21e079e:	f4 01       	movw	r30, r8
 21e07a0:	b3 82       	std	Z+3, r11	; 0x03
 21e07a2:	a2 82       	std	Z+2, r10	; 0x02
 21e07a4:	49 81       	ldd	r20, Y+1	; 0x01
 21e07a6:	47 a3       	std	Z+39, r20	; 0x27
 21e07a8:	2a 81       	ldd	r18, Y+2	; 0x02
 21e07aa:	25 a3       	std	Z+37, r18	; 0x25
 21e07ac:	04 a3       	std	Z+36, r16	; 0x24
 21e07ae:	e0 aa       	std	Z+48, r14	; 0x30
 21e07b0:	c3 a2       	std	Z+35, r12	; 0x23
 21e07b2:	c4 01       	movw	r24, r8
 21e07b4:	0f 90       	pop	r0
 21e07b6:	0f 90       	pop	r0
 21e07b8:	df 91       	pop	r29
 21e07ba:	cf 91       	pop	r28
 21e07bc:	0f 91       	pop	r16
 21e07be:	ef 90       	pop	r14
 21e07c0:	cf 90       	pop	r12
 21e07c2:	bf 90       	pop	r11
 21e07c4:	af 90       	pop	r10
 21e07c6:	9f 90       	pop	r9
 21e07c8:	8f 90       	pop	r8
 21e07ca:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Init8Bit:

043c0f48 <u8g_Init8Bit>:
 43c0f48:	2f 92       	push	r2
 43c0f4a:	3f 92       	push	r3
 43c0f4c:	4f 92       	push	r4
 43c0f4e:	5f 92       	push	r5
 43c0f50:	6f 92       	push	r6
 43c0f52:	7f 92       	push	r7
 43c0f54:	8f 92       	push	r8
 43c0f56:	9f 92       	push	r9
 43c0f58:	af 92       	push	r10
 43c0f5a:	bf 92       	push	r11
 43c0f5c:	cf 92       	push	r12
 43c0f5e:	df 92       	push	r13
 43c0f60:	ef 92       	push	r14
 43c0f62:	ff 92       	push	r15
 43c0f64:	0f 93       	push	r16
 43c0f66:	1f 93       	push	r17
 43c0f68:	cf 93       	push	r28
 43c0f6a:	df 93       	push	r29
 43c0f6c:	00 d0       	rcall	.+0      	; 0x43c0f6e <u8g_Init8Bit+0x26>
 43c0f6e:	cd b7       	in	r28, 0x3d	; 61
 43c0f70:	de b7       	in	r29, 0x3e	; 62
 43c0f72:	3c 01       	movw	r6, r24
 43c0f74:	2b 01       	movw	r4, r22
 43c0f76:	2f 88       	ldd	r2, Y+23	; 0x17
 43c0f78:	38 8c       	ldd	r3, Y+24	; 0x18
 43c0f7a:	99 8c       	ldd	r9, Y+25	; 0x19
 43c0f7c:	ba 8c       	ldd	r11, Y+26	; 0x1a
 43c0f7e:	db 8c       	ldd	r13, Y+27	; 0x1b
 43c0f80:	fc 8c       	ldd	r15, Y+28	; 0x1c
 43c0f82:	1d 8d       	ldd	r17, Y+29	; 0x1d
 43c0f84:	2a 83       	std	Y+2, r18	; 0x02
 43c0f86:	49 83       	std	Y+1, r20	; 0x01
 43c0f88:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 43c0f8c:	f3 01       	movw	r30, r6
 43c0f8e:	53 82       	std	Z+3, r5	; 0x03
 43c0f90:	42 82       	std	Z+2, r4	; 0x02
 43c0f92:	49 81       	ldd	r20, Y+1	; 0x01
 43c0f94:	40 a7       	std	Z+40, r20	; 0x28
 43c0f96:	2a 81       	ldd	r18, Y+2	; 0x02
 43c0f98:	21 a7       	std	Z+41, r18	; 0x29
 43c0f9a:	02 a7       	std	Z+42, r16	; 0x2a
 43c0f9c:	e3 a6       	std	Z+43, r14	; 0x2b
 43c0f9e:	c4 a6       	std	Z+44, r12	; 0x2c
 43c0fa0:	a5 a6       	std	Z+45, r10	; 0x2d
 43c0fa2:	86 a6       	std	Z+46, r8	; 0x2e
 43c0fa4:	27 a6       	std	Z+47, r2	; 0x2f
 43c0fa6:	37 a2       	std	Z+39, r3	; 0x27
 43c0fa8:	95 a2       	std	Z+37, r9	; 0x25
 43c0faa:	b6 a2       	std	Z+38, r11	; 0x26
 43c0fac:	d4 a2       	std	Z+36, r13	; 0x24
 43c0fae:	f0 aa       	std	Z+48, r15	; 0x30
 43c0fb0:	13 a3       	std	Z+35, r17	; 0x23
 43c0fb2:	c3 01       	movw	r24, r6
 43c0fb4:	0f 90       	pop	r0
 43c0fb6:	0f 90       	pop	r0
 43c0fb8:	df 91       	pop	r29
 43c0fba:	cf 91       	pop	r28
 43c0fbc:	1f 91       	pop	r17
 43c0fbe:	0f 91       	pop	r16
 43c0fc0:	ff 90       	pop	r15
 43c0fc2:	ef 90       	pop	r14
 43c0fc4:	df 90       	pop	r13
 43c0fc6:	cf 90       	pop	r12
 43c0fc8:	bf 90       	pop	r11
 43c0fca:	af 90       	pop	r10
 43c0fcc:	9f 90       	pop	r9
 43c0fce:	8f 90       	pop	r8
 43c0fd0:	7f 90       	pop	r7
 43c0fd2:	6f 90       	pop	r6
 43c0fd4:	5f 90       	pop	r5
 43c0fd6:	4f 90       	pop	r4
 43c0fd8:	3f 90       	pop	r3
 43c0fda:	2f 90       	pop	r2
 43c0fdc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_InitRW8Bit:

08781f28 <u8g_InitRW8Bit>:
 8781f28:	3f 92       	push	r3
 8781f2a:	4f 92       	push	r4
 8781f2c:	5f 92       	push	r5
 8781f2e:	6f 92       	push	r6
 8781f30:	7f 92       	push	r7
 8781f32:	8f 92       	push	r8
 8781f34:	9f 92       	push	r9
 8781f36:	af 92       	push	r10
 8781f38:	bf 92       	push	r11
 8781f3a:	cf 92       	push	r12
 8781f3c:	df 92       	push	r13
 8781f3e:	ef 92       	push	r14
 8781f40:	ff 92       	push	r15
 8781f42:	0f 93       	push	r16
 8781f44:	1f 93       	push	r17
 8781f46:	cf 93       	push	r28
 8781f48:	df 93       	push	r29
 8781f4a:	00 d0       	rcall	.+0      	; 0x8781f4c <u8g_InitRW8Bit+0x24>
 8781f4c:	cd b7       	in	r28, 0x3d	; 61
 8781f4e:	de b7       	in	r29, 0x3e	; 62
 8781f50:	3c 01       	movw	r6, r24
 8781f52:	2b 01       	movw	r4, r22
 8781f54:	3e 88       	ldd	r3, Y+22	; 0x16
 8781f56:	9f 88       	ldd	r9, Y+23	; 0x17
 8781f58:	b8 8c       	ldd	r11, Y+24	; 0x18
 8781f5a:	d9 8c       	ldd	r13, Y+25	; 0x19
 8781f5c:	fa 8c       	ldd	r15, Y+26	; 0x1a
 8781f5e:	1b 8d       	ldd	r17, Y+27	; 0x1b
 8781f60:	2a 83       	std	Y+2, r18	; 0x02
 8781f62:	49 83       	std	Y+1, r20	; 0x01
 8781f64:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 8781f68:	f3 01       	movw	r30, r6
 8781f6a:	53 82       	std	Z+3, r5	; 0x03
 8781f6c:	42 82       	std	Z+2, r4	; 0x02
 8781f6e:	49 81       	ldd	r20, Y+1	; 0x01
 8781f70:	40 a7       	std	Z+40, r20	; 0x28
 8781f72:	2a 81       	ldd	r18, Y+2	; 0x02
 8781f74:	21 a7       	std	Z+41, r18	; 0x29
 8781f76:	02 a7       	std	Z+42, r16	; 0x2a
 8781f78:	e3 a6       	std	Z+43, r14	; 0x2b
 8781f7a:	c4 a6       	std	Z+44, r12	; 0x2c
 8781f7c:	a5 a6       	std	Z+45, r10	; 0x2d
 8781f7e:	86 a6       	std	Z+46, r8	; 0x2e
 8781f80:	37 a6       	std	Z+47, r3	; 0x2f
 8781f82:	95 a2       	std	Z+37, r9	; 0x25
 8781f84:	b4 a2       	std	Z+36, r11	; 0x24
 8781f86:	d0 aa       	std	Z+48, r13	; 0x30
 8781f88:	f7 a2       	std	Z+39, r15	; 0x27
 8781f8a:	13 a3       	std	Z+35, r17	; 0x23
 8781f8c:	c3 01       	movw	r24, r6
 8781f8e:	0f 90       	pop	r0
 8781f90:	0f 90       	pop	r0
 8781f92:	df 91       	pop	r29
 8781f94:	cf 91       	pop	r28
 8781f96:	1f 91       	pop	r17
 8781f98:	0f 91       	pop	r16
 8781f9a:	ff 90       	pop	r15
 8781f9c:	ef 90       	pop	r14
 8781f9e:	df 90       	pop	r13
 8781fa0:	cf 90       	pop	r12
 8781fa2:	bf 90       	pop	r11
 8781fa4:	af 90       	pop	r10
 8781fa6:	9f 90       	pop	r9
 8781fa8:	8f 90       	pop	r8
 8781faa:	7f 90       	pop	r7
 8781fac:	6f 90       	pop	r6
 8781fae:	5f 90       	pop	r5
 8781fb0:	4f 90       	pop	r4
 8781fb2:	3f 90       	pop	r3
 8781fb4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_FirstPage:

10f03ee0 <u8g_FirstPage>:
10f03ee0:	fc 01       	movw	r30, r24
10f03ee2:	62 81       	ldd	r22, Z+2	; 0x02
10f03ee4:	73 81       	ldd	r23, Z+3	; 0x03
10f03ee6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_NextPage:

21e07dca <u8g_NextPage>:
21e07dca:	cf 93       	push	r28
21e07dcc:	df 93       	push	r29
21e07dce:	ec 01       	movw	r28, r24
21e07dd0:	ee 85       	ldd	r30, Y+14	; 0x0e
21e07dd2:	ff 85       	ldd	r31, Y+15	; 0x0f
21e07dd4:	30 97       	sbiw	r30, 0x00	; 0
21e07dd6:	01 f0       	breq	.+0      	; 0x21e07dd8 <u8g_NextPage+0xe>
21e07dd8:	09 95       	icall
21e07dda:	6a 81       	ldd	r22, Y+2	; 0x02
21e07ddc:	7b 81       	ldd	r23, Y+3	; 0x03
21e07dde:	ce 01       	movw	r24, r28
21e07de0:	df 91       	pop	r29
21e07de2:	cf 91       	pop	r28
21e07de4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetContrast:

43c0fbb2 <u8g_SetContrast>:
43c0fbb2:	46 2f       	mov	r20, r22
43c0fbb4:	fc 01       	movw	r30, r24
43c0fbb6:	62 81       	ldd	r22, Z+2	; 0x02
43c0fbb8:	73 81       	ldd	r23, Z+3	; 0x03
43c0fbba:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SleepOn:

8781f770 <u8g_SleepOn>:
8781f770:	fc 01       	movw	r30, r24
8781f772:	62 81       	ldd	r22, Z+2	; 0x02
8781f774:	73 81       	ldd	r23, Z+3	; 0x03
8781f776:	20 e0       	ldi	r18, 0x00	; 0
8781f778:	30 e0       	ldi	r19, 0x00	; 0
8781f77a:	40 e1       	ldi	r20, 0x10	; 16
8781f77c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SleepOff:

0f03eef0 <u8g_SleepOff>:
 f03eef0:	fc 01       	movw	r30, r24
 f03eef2:	62 81       	ldd	r22, Z+2	; 0x02
 f03eef4:	73 81       	ldd	r23, Z+3	; 0x03
 f03eef6:	20 e0       	ldi	r18, 0x00	; 0
 f03eef8:	30 e0       	ldi	r19, 0x00	; 0
 f03eefa:	41 e1       	ldi	r20, 0x11	; 17
 f03eefc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_DrawPixel:

1e07ddf0 <u8g_DrawPixel>:
1e07ddf0:	36 2f       	mov	r19, r22
1e07ddf2:	24 2f       	mov	r18, r20
1e07ddf4:	fc 01       	movw	r30, r24
1e07ddf6:	62 81       	ldd	r22, Z+2	; 0x02
1e07ddf8:	73 81       	ldd	r23, Z+3	; 0x03
1e07ddfa:	43 2f       	mov	r20, r19
1e07ddfc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Draw8Pixel:

3c0fbbf0 <u8g_Draw8Pixel>:
3c0fbbf0:	0f 93       	push	r16
3c0fbbf2:	fc 01       	movw	r30, r24
3c0fbbf4:	82 81       	ldd	r24, Z+2	; 0x02
3c0fbbf6:	93 81       	ldd	r25, Z+3	; 0x03
3c0fbbf8:	64 8f       	std	Z+28, r22	; 0x1c
3c0fbbfa:	45 8f       	std	Z+29, r20	; 0x1d
3c0fbbfc:	27 8f       	std	Z+31, r18	; 0x1f
3c0fbbfe:	06 8f       	std	Z+30, r16	; 0x1e
3c0fbc00:	9f 01       	movw	r18, r30
3c0fbc02:	24 5e       	subi	r18, 0xE4	; 228
3c0fbc04:	3f 4f       	sbci	r19, 0xFF	; 255
3c0fbc06:	4b e3       	ldi	r20, 0x3B	; 59
3c0fbc08:	bc 01       	movw	r22, r24
3c0fbc0a:	cf 01       	movw	r24, r30
3c0fbc0c:	0f 91       	pop	r16
3c0fbc0e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Draw4TPixel:

781f7802 <u8g_Draw4TPixel>:
781f7802:	0f 93       	push	r16
781f7804:	fc 01       	movw	r30, r24
781f7806:	82 81       	ldd	r24, Z+2	; 0x02
781f7808:	93 81       	ldd	r25, Z+3	; 0x03
781f780a:	64 8f       	std	Z+28, r22	; 0x1c
781f780c:	45 8f       	std	Z+29, r20	; 0x1d
781f780e:	27 8f       	std	Z+31, r18	; 0x1f
781f7810:	06 8f       	std	Z+30, r16	; 0x1e
781f7812:	9f 01       	movw	r18, r30
781f7814:	24 5e       	subi	r18, 0xE4	; 228
781f7816:	3f 4f       	sbci	r19, 0xFF	; 255
781f7818:	4d e2       	ldi	r20, 0x2D	; 45
781f781a:	bc 01       	movw	r22, r24
781f781c:	cf 01       	movw	r24, r30
781f781e:	0f 91       	pop	r16
781f7820:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_Draw8ColorPixel:

f03ef026 <u8g_Draw8ColorPixel>:
f03ef026:	fc 01       	movw	r30, r24
f03ef028:	64 8f       	std	Z+28, r22	; 0x1c
f03ef02a:	45 8f       	std	Z+29, r20	; 0x1d
f03ef02c:	17 8e       	std	Z+31, r1	; 0x1f
f03ef02e:	80 e8       	ldi	r24, 0x80	; 128
f03ef030:	86 8f       	std	Z+30, r24	; 0x1e
f03ef032:	20 a3       	std	Z+32, r18	; 0x20
f03ef034:	9f 01       	movw	r18, r30
f03ef036:	24 5e       	subi	r18, 0xE4	; 228
f03ef038:	3f 4f       	sbci	r19, 0xFF	; 255
f03ef03a:	62 81       	ldd	r22, Z+2	; 0x02
f03ef03c:	73 81       	ldd	r23, Z+3	; 0x03
f03ef03e:	4b e3       	ldi	r20, 0x3B	; 59
f03ef040:	cf 01       	movw	r24, r30
f03ef042:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetColorEntry:

e07de06c <u8g_SetColorEntry>:
e07de06c:	0f 93       	push	r16
e07de06e:	cf 93       	push	r28
e07de070:	df 93       	push	r29
e07de072:	00 d0       	rcall	.+0      	; 0xe07de074 <u8g_InitI2C+0xdf6edcd4>
e07de074:	00 d0       	rcall	.+0      	; 0xe07de076 <u8g_InitI2C+0xdf6edcd6>
e07de076:	cd b7       	in	r28, 0x3d	; 61
e07de078:	de b7       	in	r29, 0x3e	; 62
e07de07a:	69 83       	std	Y+1, r22	; 0x01
e07de07c:	4a 83       	std	Y+2, r20	; 0x02
e07de07e:	2b 83       	std	Y+3, r18	; 0x03
e07de080:	0c 83       	std	Y+4, r16	; 0x04
e07de082:	fc 01       	movw	r30, r24
e07de084:	62 81       	ldd	r22, Z+2	; 0x02
e07de086:	73 81       	ldd	r23, Z+3	; 0x03
e07de088:	9e 01       	movw	r18, r28
e07de08a:	2f 5f       	subi	r18, 0xFF	; 255
e07de08c:	3f 4f       	sbci	r19, 0xFF	; 255
e07de08e:	4c e3       	ldi	r20, 0x3C	; 60
e07de090:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
e07de094:	0f 90       	pop	r0
e07de096:	0f 90       	pop	r0
e07de098:	0f 90       	pop	r0
e07de09a:	0f 90       	pop	r0
e07de09c:	df 91       	pop	r29
e07de09e:	cf 91       	pop	r28
e07de0a0:	0f 91       	pop	r16
e07de0a2:	08 95       	ret

Disassembly of section .text.u8g_SetColorIndex:

c0fbc110 <u8g_SetColorIndex>:
c0fbc110:	fc 01       	movw	r30, r24
c0fbc112:	60 a3       	std	Z+32, r22	; 0x20
c0fbc114:	08 95       	ret

Disassembly of section .text.u8g_SetHiColor:

81f78226 <u8g_SetHiColor>:
81f78226:	fc 01       	movw	r30, r24
81f78228:	60 a3       	std	Z+32, r22	; 0x20
81f7822a:	71 a3       	std	Z+33, r23	; 0x21
81f7822c:	08 95       	ret

Disassembly of section .text.u8g_SetHiColorByRGB:

03ef0454 <u8g_SetHiColorByRGB>:
 3ef0454:	46 95       	lsr	r20
 3ef0456:	46 95       	lsr	r20
 3ef0458:	30 e2       	ldi	r19, 0x20	; 32
 3ef045a:	43 9f       	mul	r20, r19
 3ef045c:	f0 01       	movw	r30, r0
 3ef045e:	11 24       	eor	r1, r1
 3ef0460:	26 95       	lsr	r18
 3ef0462:	26 95       	lsr	r18
 3ef0464:	26 95       	lsr	r18
 3ef0466:	2e 2b       	or	r18, r30
 3ef0468:	fc 01       	movw	r30, r24
 3ef046a:	20 a3       	std	Z+32, r18	; 0x20
 3ef046c:	46 95       	lsr	r20
 3ef046e:	46 95       	lsr	r20
 3ef0470:	46 95       	lsr	r20
 3ef0472:	68 7f       	andi	r22, 0xF8	; 248
 3ef0474:	46 2b       	or	r20, r22
 3ef0476:	41 a3       	std	Z+33, r20	; 0x21
 3ef0478:	08 95       	ret

Disassembly of section .text.u8g_SetRGB:

07de08ce <u8g_SetRGB>:
 7de08ce:	fc 01       	movw	r30, r24
 7de08d0:	83 85       	ldd	r24, Z+11	; 0x0b
 7de08d2:	88 32       	cpi	r24, 0x28	; 40
 7de08d4:	01 f4       	brne	.+0      	; 0x7de08d6 <u8g_InitI2C+0x6cf0536>
 7de08d6:	40 7e       	andi	r20, 0xE0	; 224
 7de08d8:	60 7e       	andi	r22, 0xE0	; 224
 7de08da:	46 95       	lsr	r20
 7de08dc:	46 95       	lsr	r20
 7de08de:	46 95       	lsr	r20
 7de08e0:	64 2b       	or	r22, r20
 7de08e2:	22 95       	swap	r18
 7de08e4:	26 95       	lsr	r18
 7de08e6:	26 95       	lsr	r18
 7de08e8:	23 70       	andi	r18, 0x03	; 3
 7de08ea:	62 2b       	or	r22, r18
 7de08ec:	60 a3       	std	Z+32, r22	; 0x20
 7de08ee:	08 95       	ret
 7de08f0:	80 33       	cpi	r24, 0x30	; 48
 7de08f2:	01 f4       	brne	.+0      	; 0x7de08f4 <u8g_InitI2C+0x6cf0554>
 7de08f4:	cf 01       	movw	r24, r30
 7de08f6:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 7de08fa:	60 a3       	std	Z+32, r22	; 0x20
 7de08fc:	41 a3       	std	Z+33, r20	; 0x21
 7de08fe:	22 a3       	std	Z+34, r18	; 0x22
 7de0900:	08 95       	ret

Disassembly of section .text.u8g_GetColorIndex:

0fbc11d0 <u8g_GetColorIndex>:
 fbc11d0:	fc 01       	movw	r30, r24
 fbc11d2:	80 a1       	ldd	r24, Z+32	; 0x20
 fbc11d4:	08 95       	ret

Disassembly of section .text.u8g_GetDefaultForegroundColor:

1f7823a6 <u8g_GetDefaultForegroundColor>:
1f7823a6:	fc 01       	movw	r30, r24
1f7823a8:	83 85       	ldd	r24, Z+11	; 0x0b
1f7823aa:	88 32       	cpi	r24, 0x28	; 40
1f7823ac:	01 f0       	breq	.+0      	; 0x1f7823ae <u8g_InitI2C+0x1e69200e>
1f7823ae:	82 30       	cpi	r24, 0x02	; 2
1f7823b0:	01 f4       	brne	.+0      	; 0x1f7823b2 <u8g_InitI2C+0x1e692012>
1f7823b2:	83 e0       	ldi	r24, 0x03	; 3
1f7823b4:	08 95       	ret
1f7823b6:	8f ef       	ldi	r24, 0xFF	; 255
1f7823b8:	08 95       	ret
1f7823ba:	81 e0       	ldi	r24, 0x01	; 1
1f7823bc:	08 95       	ret

Disassembly of section .text.u8g_SetDefaultForegroundColor:

3ef04764 <u8g_SetDefaultForegroundColor>:
3ef04764:	cf 93       	push	r28
3ef04766:	df 93       	push	r29
3ef04768:	ec 01       	movw	r28, r24
3ef0476a:	8b 85       	ldd	r24, Y+11	; 0x0b
3ef0476c:	80 33       	cpi	r24, 0x30	; 48
3ef0476e:	01 f4       	brne	.+0      	; 0x3ef04770 <u8g_InitI2C+0x3de143d0>
3ef04770:	8f ef       	ldi	r24, 0xFF	; 255
3ef04772:	88 a3       	std	Y+32, r24	; 0x20
3ef04774:	89 a3       	std	Y+33, r24	; 0x21
3ef04776:	00 c0       	rjmp	.+0      	; 0x3ef04778 <u8g_InitI2C+0x3de143d8>
3ef04778:	ce 01       	movw	r24, r28
3ef0477a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
3ef0477e:	88 a3       	std	Y+32, r24	; 0x20
3ef04780:	df 91       	pop	r29
3ef04782:	cf 91       	pop	r28
3ef04784:	08 95       	ret

Disassembly of section .text.u8g_GetDefaultBackgroundColor:

7de08eea <u8g_GetDefaultBackgroundColor>:
7de08eea:	80 e0       	ldi	r24, 0x00	; 0
7de08eec:	08 95       	ret

Disassembly of section .text.u8g_SetDefaultBackgroundColor:

fbc11dd8 <u8g_SetDefaultBackgroundColor>:
fbc11dd8:	fc 01       	movw	r30, r24
fbc11dda:	10 a2       	std	Z+32, r1	; 0x20
fbc11ddc:	08 95       	ret

Disassembly of section .text.u8g_GetDefaultMidColor:

f7823bb6 <u8g_GetDefaultMidColor>:
f7823bb6:	fc 01       	movw	r30, r24
f7823bb8:	83 85       	ldd	r24, Z+11	; 0x0b
f7823bba:	88 32       	cpi	r24, 0x28	; 40
f7823bbc:	01 f4       	brne	.+0      	; 0xf7823bbe <u8g_InitI2C+0xf673381e>
f7823bbe:	8d e6       	ldi	r24, 0x6D	; 109
f7823bc0:	08 95       	ret
f7823bc2:	81 e0       	ldi	r24, 0x01	; 1
f7823bc4:	08 95       	ret

Disassembly of section .text.u8g_SetDefaultMidColor:

ef04777c <u8g_SetDefaultMidColor>:
ef04777c:	fc 01       	movw	r30, r24
ef04777e:	23 85       	ldd	r18, Z+11	; 0x0b
ef047780:	28 32       	cpi	r18, 0x28	; 40
ef047782:	01 f4       	brne	.+0      	; 0xef047784 <u8g_InitI2C+0xedf573e4>
ef047784:	2d e6       	ldi	r18, 0x6D	; 109
ef047786:	00 c0       	rjmp	.+0      	; 0xef047788 <u8g_InitI2C+0xedf573e8>
ef047788:	21 e0       	ldi	r18, 0x01	; 1
ef04778a:	fc 01       	movw	r30, r24
ef04778c:	20 a3       	std	Z+32, r18	; 0x20
ef04778e:	08 95       	ret

u8g_page.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000780  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001679  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_page_First 0000000e  00000000  00000000  00001e2d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_page_Init 0000000c  00000000  00000000  00001e3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_page_Next 0000002c  00000000  00000000  00001e47  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .comment      00000022  00000000  00000000  00001e73  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_page_First:

00000000 <u8g_page_First>:
  p->page_y1--;
  p->page = 0;
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
   0:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
   2:	12 82       	std	Z+2, r1	; 0x02
   4:	80 81       	ld	r24, Z
   6:	81 50       	subi	r24, 0x01	; 1
   8:	83 83       	std	Z+3, r24	; 0x03
  if ( p->page_y0 >= p->total_height )
   a:	14 82       	std	Z+4, r1	; 0x04
   c:	08 95       	ret

Disassembly of section .text.u8g_page_Init:

0000000e <u8g_page_Init>:
   e:	fc 01       	movw	r30, r24
    return 0;
  p->page++;
  10:	60 83       	st	Z, r22
  12:	41 83       	std	Z+1, r20	; 0x01
  14:	14 82       	std	Z+4, r1	; 0x04
  y1 = p->page_y1;
  16:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_page_Next:

00000028 <u8g_page_Next>:
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
  28:	fc 01       	movw	r30, r24
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
  2a:	20 81       	ld	r18, Z
  2c:	82 81       	ldd	r24, Z+2	; 0x02
  2e:	82 0f       	add	r24, r18
  30:	82 83       	std	Z+2, r24	; 0x02
  32:	91 81       	ldd	r25, Z+1	; 0x01
  34:	89 17       	cp	r24, r25
  36:	00 f4       	brcc	.+0      	; 0x38 <u8g_page_Next+0x10>
  38:	84 81       	ldd	r24, Z+4	; 0x04
  3a:	8f 5f       	subi	r24, 0xFF	; 255
  3c:	84 83       	std	Z+4, r24	; 0x04
  3e:	83 81       	ldd	r24, Z+3	; 0x03
  40:	82 0f       	add	r24, r18
  42:	89 17       	cp	r24, r25
  44:	00 f0       	brcs	.+0      	; 0x46 <u8g_page_Next+0x1e>
  46:	8f ef       	ldi	r24, 0xFF	; 255
  48:	89 0f       	add	r24, r25
  4a:	83 83       	std	Z+3, r24	; 0x03
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	08 95       	ret
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	08 95       	ret

u8g_pb.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000099c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001780  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb_Clear 00000020  00000000  00000000  00002150  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb_IsYIntersection 0000002a  00000000  00000000  00002170  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb_IsXIntersection 00000014  00000000  00000000  0000219a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb_IsIntersection 00000040  00000000  00000000  000021ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb_GetPageBox 00000020  00000000  00000000  000021ee  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.u8g_pb_Is8PixelVisible 00000020  00000000  00000000  0000220e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_pb_WriteBuffer 00000010  00000000  00000000  0000222e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  0000223e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb_Clear:

00000000 <u8g_pb_Clear>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
   0:	dc 01       	movw	r26, r24
   2:	16 96       	adiw	r26, 0x06	; 6
   4:	ed 91       	ld	r30, X+
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
   6:	fc 91       	ld	r31, X
   8:	17 97       	sbiw	r26, 0x07	; 7
   a:	15 96       	adiw	r26, 0x05	; 5
   c:	8c 91       	ld	r24, X
   e:	9f 01       	movw	r18, r30
  10:	28 0f       	add	r18, r24
  12:	31 1d       	adc	r19, r1
  14:	c9 01       	movw	r24, r18
  16:	11 92       	st	Z+, r1
  18:	e8 17       	cp	r30, r24
  1a:	f9 07       	cpc	r31, r25
  1c:	01 f4       	brne	.+0      	; 0x1e <u8g_pb_Clear+0x1e>
  1e:	08 95       	ret

Disassembly of section .text.u8g_pb_IsYIntersection:

00000020 <u8g_pb_IsYIntersection>:
  20:	fc 01       	movw	r30, r24
  22:	91 e0       	ldi	r25, 0x01	; 1
  24:	83 81       	ldd	r24, Z+3	; 0x03
  26:	86 17       	cp	r24, r22
  28:	00 f4       	brcc	.+0      	; 0x2a <u8g_pb_IsYIntersection+0xa>
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	21 e0       	ldi	r18, 0x01	; 1
  2e:	46 17       	cp	r20, r22
  30:	00 f0       	brcs	.+0      	; 0x32 <u8g_pb_IsYIntersection+0x12>
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	32 2f       	mov	r19, r18
  36:	39 2b       	or	r19, r25
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	52 81       	ldd	r21, Z+2	; 0x02
  3c:	45 17       	cp	r20, r21
  3e:	00 f4       	brcc	.+0      	; 0x40 <u8g_pb_IsYIntersection+0x20>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	83 23       	and	r24, r19
  44:	92 23       	and	r25, r18
  46:	89 2b       	or	r24, r25
  48:	08 95       	ret

Disassembly of section .text.u8g_pb_IsXIntersection:

0000006a <u8g_pb_IsXIntersection>:
  6a:	fc 01       	movw	r30, r24
  6c:	95 81       	ldd	r25, Z+5	; 0x05
  6e:	81 e0       	ldi	r24, 0x01	; 1
  70:	96 17       	cp	r25, r22
  72:	00 f4       	brcc	.+0      	; 0x74 <u8g_pb_IsXIntersection+0xa>
  74:	94 17       	cp	r25, r20
  76:	00 f4       	brcc	.+0      	; 0x78 <u8g_pb_IsXIntersection+0xe>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	08 95       	ret
  7c:	08 95       	ret

Disassembly of section .text.u8g_pb_IsIntersection:

000000e8 <u8g_pb_IsIntersection>:
  e8:	0f 93       	push	r16
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	8c 01       	movw	r16, r24
  f2:	eb 01       	movw	r28, r22
  f4:	69 81       	ldd	r22, Y+1	; 0x01
  f6:	4b 81       	ldd	r20, Y+3	; 0x03
  f8:	46 0f       	add	r20, r22
  fa:	41 50       	subi	r20, 0x01	; 1
  fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 100:	88 23       	and	r24, r24
 102:	01 f0       	breq	.+0      	; 0x104 <u8g_pb_IsIntersection+0x1c>
 104:	88 81       	ld	r24, Y
 106:	2a 81       	ldd	r18, Y+2	; 0x02
 108:	f8 01       	movw	r30, r16
 10a:	95 81       	ldd	r25, Z+5	; 0x05
 10c:	98 17       	cp	r25, r24
 10e:	00 f0       	brcs	.+0      	; 0x110 <u8g_pb_IsIntersection+0x28>
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	00 c0       	rjmp	.+0      	; 0x114 <u8g_pb_IsIntersection+0x2c>
 114:	82 0f       	add	r24, r18
 116:	81 50       	subi	r24, 0x01	; 1
 118:	98 17       	cp	r25, r24
 11a:	00 f4       	brcc	.+0      	; 0x11c <u8g_pb_IsIntersection+0x34>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

Disassembly of section .text.u8g_pb_GetPageBox:

00000210 <u8g_pb_GetPageBox>:
 210:	dc 01       	movw	r26, r24
 212:	fb 01       	movw	r30, r22
 214:	10 82       	st	Z, r1
 216:	12 96       	adiw	r26, 0x02	; 2
 218:	8c 91       	ld	r24, X
 21a:	12 97       	sbiw	r26, 0x02	; 2
 21c:	81 83       	std	Z+1, r24	; 0x01
 21e:	15 96       	adiw	r26, 0x05	; 5
 220:	8c 91       	ld	r24, X
 222:	15 97       	sbiw	r26, 0x05	; 5
 224:	81 50       	subi	r24, 0x01	; 1
 226:	82 83       	std	Z+2, r24	; 0x02
 228:	13 96       	adiw	r26, 0x03	; 3
 22a:	8c 91       	ld	r24, X
 22c:	83 83       	std	Z+3, r24	; 0x03
 22e:	08 95       	ret

Disassembly of section .text.u8g_pb_Is8PixelVisible:

00000440 <u8g_pb_Is8PixelVisible>:
 440:	fb 01       	movw	r30, r22
 442:	41 81       	ldd	r20, Z+1	; 0x01
 444:	23 81       	ldd	r18, Z+3	; 0x03
 446:	21 30       	cpi	r18, 0x01	; 1
 448:	01 f0       	breq	.+0      	; 0x44a <u8g_pb_Is8PixelVisible+0xa>
 44a:	23 30       	cpi	r18, 0x03	; 3
 44c:	01 f4       	brne	.+0      	; 0x44e <u8g_pb_Is8PixelVisible+0xe>
 44e:	68 ef       	ldi	r22, 0xF8	; 248
 450:	64 0f       	add	r22, r20
 452:	00 c0       	rjmp	.+0      	; 0x454 <u8g_pb_Is8PixelVisible+0x14>
 454:	64 2f       	mov	r22, r20
 456:	48 5f       	subi	r20, 0xF8	; 248
 458:	00 c0       	rjmp	.+0      	; 0x45a <u8g_pb_Is8PixelVisible+0x1a>
 45a:	64 2f       	mov	r22, r20
 45c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb_WriteBuffer:

000008a0 <u8g_pb_WriteBuffer>:
 8a0:	fc 01       	movw	r30, r24
 8a2:	cb 01       	movw	r24, r22
 8a4:	ba 01       	movw	r22, r20
 8a6:	26 81       	ldd	r18, Z+6	; 0x06
 8a8:	37 81       	ldd	r19, Z+7	; 0x07
 8aa:	45 81       	ldd	r20, Z+5	; 0x05
 8ac:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_pb14v1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b58  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017ef  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb14v1_Clear 00000024  00000000  00000000  0000237b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb14v1_Init 0000000c  00000000  00000000  0000239f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb14v1_set_pixel 0000003c  00000000  00000000  000023ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb14v1_SetPixel 0000002c  00000000  00000000  000023e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb14v1_Set8PixelStd 00000058  00000000  00000000  00002413  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_pb14v1_Set8PixelOpt2 0000007e  00000000  00000000  0000246b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_pb14v1_base_fn 00000092  00000000  00000000  000024e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  0000257b  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb14v1_Clear:

00000000 <u8g_pb14v1_Clear>:
  } while( pixel != 0  );
  
}

uint8_t u8g_dev_pb14v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	2c 91       	ld	r18, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	cf 01       	movw	r24, r30
  12:	82 0f       	add	r24, r18
  14:	91 1d       	adc	r25, r1
  16:	82 0f       	add	r24, r18
  18:	91 1d       	adc	r25, r1
  1a:	11 92       	st	Z+, r1
  1c:	e8 17       	cp	r30, r24
  1e:	f9 07       	cpc	r31, r25
  20:	01 f4       	brne	.+0      	; 0x22 <u8g_pb14v1_Clear+0x22>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb14v1_Clear(pb);
  22:	08 95       	ret

Disassembly of section .text.u8g_pb14v1_Init:

00000024 <u8g_pb14v1_Init>:
  24:	fc 01       	movw	r30, r24
  26:	77 83       	std	Z+7, r23	; 0x07
      u8g_page_First(&(pb->p));
  28:	66 83       	std	Z+6, r22	; 0x06
  2a:	45 83       	std	Z+5, r20	; 0x05
  2c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb14v1_set_pixel:

00000054 <u8g_pb14v1_set_pixel>:
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb14v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb14v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	fc 01       	movw	r30, r24
  56:	a6 81       	ldd	r26, Z+6	; 0x06
  58:	b7 81       	ldd	r27, Z+7	; 0x07
  5a:	82 81       	ldd	r24, Z+2	; 0x02
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb14v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	48 1b       	sub	r20, r24
  5e:	47 30       	cpi	r20, 0x07	; 7
  60:	00 f0       	brcs	.+0      	; 0x62 <u8g_pb14v1_set_pixel+0xe>
  62:	85 81       	ldd	r24, Z+5	; 0x05
  64:	a8 0f       	add	r26, r24
        return 0;
      u8g_pb14v1_Clear(pb);
  66:	b1 1d       	adc	r27, r1
  68:	47 50       	subi	r20, 0x07	; 7
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	04 2e       	mov	r0, r20
  70:	00 c0       	rjmp	.+0      	; 0x72 <u8g_pb14v1_set_pixel+0x1e>
  72:	88 0f       	add	r24, r24
  74:	0a 94       	dec	r0
  76:	02 f4       	brpl	.+0      	; 0x78 <u8g_pb14v1_set_pixel+0x24>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	fd 01       	movw	r30, r26
  7a:	e6 0f       	add	r30, r22
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	f1 1d       	adc	r31, r1
  7e:	30 81       	ld	r19, Z
  80:	22 23       	and	r18, r18
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	01 f0       	breq	.+0      	; 0x84 <u8g_pb14v1_set_pixel+0x30>
  84:	83 2b       	or	r24, r19
      u8g_pb14v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	00 c0       	rjmp	.+0      	; 0x88 <u8g_pb14v1_set_pixel+0x34>
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	80 95       	com	r24
  8a:	83 23       	and	r24, r19
  8c:	80 83       	st	Z, r24
  8e:	08 95       	ret

Disassembly of section .text.u8g_pb14v1_SetPixel:

000000e4 <u8g_pb14v1_SetPixel>:
  e4:	fb 01       	movw	r30, r22
  e6:	41 81       	ldd	r20, Z+1	; 0x01
  e8:	dc 01       	movw	r26, r24
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	2c 91       	ld	r18, X
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	42 17       	cp	r20, r18
  f2:	00 f0       	brcs	.+0      	; 0xf4 <u8g_pb14v1_SetPixel+0x10>
  f4:	13 96       	adiw	r26, 0x03	; 3
  f6:	2c 91       	ld	r18, X
  f8:	13 97       	sbiw	r26, 0x03	; 3
  fa:	24 17       	cp	r18, r20
  fc:	00 f0       	brcs	.+0      	; 0xfe <u8g_pb14v1_SetPixel+0x1a>
  fe:	60 81       	ld	r22, Z
 100:	15 96       	adiw	r26, 0x05	; 5
 102:	2c 91       	ld	r18, X
 104:	62 17       	cp	r22, r18
 106:	00 f4       	brcc	.+0      	; 0x108 <u8g_pb14v1_SetPixel+0x24>
 108:	24 81       	ldd	r18, Z+4	; 0x04
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 10e:	08 95       	ret

Disassembly of section .text.u8g_pb14v1_Set8PixelStd:

000001f4 <u8g_pb14v1_Set8PixelStd>:
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	8c 01       	movw	r16, r24
 200:	eb 01       	movw	r28, r22
 202:	fa 80       	ldd	r15, Y+2	; 0x02
 204:	f7 fe       	sbrs	r15, 7
 206:	00 c0       	rjmp	.+0      	; 0x208 <u8g_pb14v1_Set8PixelStd+0x14>
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	01 f0       	breq	.+0      	; 0x216 <u8g_pb14v1_Set8PixelStd+0x22>
 216:	00 f0       	brcs	.+0      	; 0x218 <u8g_pb14v1_Set8PixelStd+0x24>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	01 f0       	breq	.+0      	; 0x21c <u8g_pb14v1_Set8PixelStd+0x28>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	01 f4       	brne	.+0      	; 0x220 <u8g_pb14v1_Set8PixelStd+0x2c>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 50       	subi	r24, 0x01	; 1
 224:	00 c0       	rjmp	.+0      	; 0x226 <u8g_pb14v1_Set8PixelStd+0x32>
 226:	88 81       	ld	r24, Y
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	00 c0       	rjmp	.+0      	; 0x22c <u8g_pb14v1_Set8PixelStd+0x38>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_pb14v1_Set8PixelStd+0x3e>
 232:	88 81       	ld	r24, Y
 234:	81 50       	subi	r24, 0x01	; 1
 236:	88 83       	st	Y, r24
 238:	00 c0       	rjmp	.+0      	; 0x23a <u8g_pb14v1_Set8PixelStd+0x46>
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	ff 0c       	add	r15, r15
 23e:	01 f4       	brne	.+0      	; 0x240 <u8g_pb14v1_Set8PixelStd+0x4c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	08 95       	ret

Disassembly of section .text.u8g_pb14v1_Set8PixelOpt2:

00000440 <u8g_pb14v1_Set8PixelOpt2>:
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <u8g_pb14v1_Set8PixelOpt2+0x10>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	8c 01       	movw	r16, r24
 456:	6b 01       	movw	r12, r22
 458:	fb 01       	movw	r30, r22
 45a:	f2 80       	ldd	r15, Z+2	; 0x02
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	01 f0       	breq	.+0      	; 0x462 <u8g_pb14v1_Set8PixelOpt2+0x22>
 462:	00 f0       	brcs	.+0      	; 0x464 <u8g_pb14v1_Set8PixelOpt2+0x24>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	01 f0       	breq	.+0      	; 0x468 <u8g_pb14v1_Set8PixelOpt2+0x28>
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	01 f0       	breq	.+0      	; 0x46c <u8g_pb14v1_Set8PixelOpt2+0x2c>
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	00 c0       	rjmp	.+0      	; 0x470 <u8g_pb14v1_Set8PixelOpt2+0x30>
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	00 c0       	rjmp	.+0      	; 0x476 <u8g_pb14v1_Set8PixelOpt2+0x36>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	3f ef       	ldi	r19, 0xFF	; 255
 47a:	00 c0       	rjmp	.+0      	; 0x47c <u8g_pb14v1_Set8PixelOpt2+0x3c>
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	00 c0       	rjmp	.+0      	; 0x480 <u8g_pb14v1_Set8PixelOpt2+0x40>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	31 e0       	ldi	r19, 0x01	; 1
 484:	f7 fe       	sbrs	r15, 7
 486:	00 c0       	rjmp	.+0      	; 0x488 <u8g_pb14v1_Set8PixelOpt2+0x48>
 488:	b6 01       	movw	r22, r12
 48a:	c8 01       	movw	r24, r16
 48c:	29 83       	std	Y+1, r18	; 0x01
 48e:	3a 83       	std	Y+2, r19	; 0x02
 490:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 494:	3a 81       	ldd	r19, Y+2	; 0x02
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	f6 01       	movw	r30, r12
 49a:	80 81       	ld	r24, Z
 49c:	83 0f       	add	r24, r19
 49e:	80 83       	st	Z, r24
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	82 0f       	add	r24, r18
 4a4:	81 83       	std	Z+1, r24	; 0x01
 4a6:	ff 0c       	add	r15, r15
 4a8:	01 f4       	brne	.+0      	; 0x4aa <u8g_pb14v1_Set8PixelOpt2+0x6a>
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	08 95       	ret

Disassembly of section .text.u8g_dev_pb14v1_base_fn:

000008fe <u8g_dev_pb14v1_base_fn>:
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	89 01       	movw	r16, r18
 908:	fb 01       	movw	r30, r22
 90a:	c2 81       	ldd	r28, Z+2	; 0x02
 90c:	d3 81       	ldd	r29, Z+3	; 0x03
 90e:	42 33       	cpi	r20, 0x32	; 50
 910:	01 f0       	breq	.+0      	; 0x912 <u8g_dev_pb14v1_base_fn+0x14>
 912:	00 f4       	brcc	.+0      	; 0x914 <u8g_dev_pb14v1_base_fn+0x16>
 914:	45 31       	cpi	r20, 0x15	; 21
 916:	01 f0       	breq	.+0      	; 0x918 <u8g_dev_pb14v1_base_fn+0x1a>
 918:	47 31       	cpi	r20, 0x17	; 23
 91a:	01 f0       	breq	.+0      	; 0x91c <u8g_dev_pb14v1_base_fn+0x1e>
 91c:	44 31       	cpi	r20, 0x14	; 20
 91e:	01 f4       	brne	.+0      	; 0x920 <u8g_dev_pb14v1_base_fn+0x22>
 920:	ce 01       	movw	r24, r28
 922:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 926:	ce 01       	movw	r24, r28
 928:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <u8g_dev_pb14v1_base_fn+0x30>
 92e:	46 34       	cpi	r20, 0x46	; 70
 930:	01 f0       	breq	.+0      	; 0x932 <u8g_dev_pb14v1_base_fn+0x34>
 932:	47 34       	cpi	r20, 0x47	; 71
 934:	01 f0       	breq	.+0      	; 0x936 <u8g_dev_pb14v1_base_fn+0x38>
 936:	4b 33       	cpi	r20, 0x3B	; 59
 938:	01 f4       	brne	.+0      	; 0x93a <u8g_dev_pb14v1_base_fn+0x3c>
 93a:	b9 01       	movw	r22, r18
 93c:	ce 01       	movw	r24, r28
 93e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 942:	88 23       	and	r24, r24
 944:	01 f0       	breq	.+0      	; 0x946 <u8g_dev_pb14v1_base_fn+0x48>
 946:	b8 01       	movw	r22, r16
 948:	ce 01       	movw	r24, r28
 94a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <u8g_dev_pb14v1_base_fn+0x52>
 950:	b9 01       	movw	r22, r18
 952:	ce 01       	movw	r24, r28
 954:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 958:	00 c0       	rjmp	.+0      	; 0x95a <u8g_dev_pb14v1_base_fn+0x5c>
 95a:	ce 01       	movw	r24, r28
 95c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 960:	88 23       	and	r24, r24
 962:	01 f0       	breq	.+0      	; 0x964 <u8g_dev_pb14v1_base_fn+0x66>
 964:	ce 01       	movw	r24, r28
 966:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <u8g_dev_pb14v1_base_fn+0x6e>
 96c:	b9 01       	movw	r22, r18
 96e:	ce 01       	movw	r24, r28
 970:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 974:	00 c0       	rjmp	.+0      	; 0x976 <u8g_dev_pb14v1_base_fn+0x78>
 976:	8d 81       	ldd	r24, Y+5	; 0x05
 978:	00 c0       	rjmp	.+0      	; 0x97a <u8g_dev_pb14v1_base_fn+0x7c>
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	f8 01       	movw	r30, r16
 97e:	80 83       	st	Z, r24
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	00 c0       	rjmp	.+0      	; 0x984 <u8g_dev_pb14v1_base_fn+0x86>
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

u8g_pb16h1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017ef  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb16h1_Clear 00000024  00000000  00000000  000023ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb16h1_Init 0000000c  00000000  00000000  000023cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb16h1_set_pixel 0000005e  00000000  00000000  000023db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb16h1_SetPixel 0000002c  00000000  00000000  00002439  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb16h1_Set8PixelStd 00000058  00000000  00000000  00002465  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_pb16h1_Set8PixelOpt2 0000007e  00000000  00000000  000024bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_pb16h1_base_fn 00000092  00000000  00000000  0000253b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  000025cd  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb16h1_Clear:

00000000 <u8g_pb16h1_Clear>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pb16h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	2c 91       	ld	r18, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	cf 01       	movw	r24, r30
  12:	82 0f       	add	r24, r18
  14:	91 1d       	adc	r25, r1
  16:	82 0f       	add	r24, r18
  18:	91 1d       	adc	r25, r1
  1a:	11 92       	st	Z+, r1
  1c:	e8 17       	cp	r30, r24
  1e:	f9 07       	cpc	r31, r25
  20:	01 f4       	brne	.+0      	; 0x22 <u8g_pb16h1_Clear+0x22>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16h1_Clear(pb);
  22:	08 95       	ret

Disassembly of section .text.u8g_pb16h1_Init:

00000024 <u8g_pb16h1_Init>:
  24:	fc 01       	movw	r30, r24
  26:	77 83       	std	Z+7, r23	; 0x07
      u8g_page_First(&(pb->p));
  28:	66 83       	std	Z+6, r22	; 0x06
  2a:	45 83       	std	Z+5, r20	; 0x05
  2c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb16h1_set_pixel:

00000054 <u8g_pb16h1_set_pixel>:
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb16h1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb16h1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	dc 01       	movw	r26, r24
  56:	16 96       	adiw	r26, 0x06	; 6
  58:	ed 91       	ld	r30, X+
  5a:	fc 91       	ld	r31, X
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16h1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	17 97       	sbiw	r26, 0x07	; 7
  5e:	12 96       	adiw	r26, 0x02	; 2
  60:	8c 91       	ld	r24, X
  62:	12 97       	sbiw	r26, 0x02	; 2
  64:	48 1b       	sub	r20, r24
        return 0;
      u8g_pb16h1_Clear(pb);
  66:	15 96       	adiw	r26, 0x05	; 5
  68:	8c 91       	ld	r24, X
  6a:	48 30       	cpi	r20, 0x08	; 8
  6c:	00 f0       	brcs	.+0      	; 0x6e <u8g_pb16h1_set_pixel+0x1a>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	e8 0f       	add	r30, r24
  70:	f1 1d       	adc	r31, r1
  72:	47 70       	andi	r20, 0x07	; 7
  74:	86 95       	lsr	r24
  76:	86 95       	lsr	r24
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	86 95       	lsr	r24
  7a:	48 9f       	mul	r20, r24
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	40 2d       	mov	r20, r0
  7e:	11 24       	eor	r1, r1
  80:	e4 0f       	add	r30, r20
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	f1 1d       	adc	r31, r1
  84:	36 2f       	mov	r19, r22
      u8g_pb16h1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	37 70       	andi	r19, 0x07	; 7
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	00 c0       	rjmp	.+0      	; 0x8e <u8g_pb16h1_set_pixel+0x3a>
  8e:	95 95       	asr	r25
  90:	87 95       	ror	r24
  92:	3a 95       	dec	r19
  94:	02 f4       	brpl	.+0      	; 0x96 <u8g_pb16h1_set_pixel+0x42>
  96:	66 95       	lsr	r22
  98:	66 95       	lsr	r22
  9a:	66 95       	lsr	r22
  9c:	e6 0f       	add	r30, r22
  9e:	f1 1d       	adc	r31, r1
  a0:	30 81       	ld	r19, Z
  a2:	22 23       	and	r18, r18
  a4:	01 f0       	breq	.+0      	; 0xa6 <u8g_pb16h1_set_pixel+0x52>
  a6:	83 2b       	or	r24, r19
  a8:	00 c0       	rjmp	.+0      	; 0xaa <u8g_pb16h1_set_pixel+0x56>
  aa:	80 95       	com	r24
  ac:	83 23       	and	r24, r19
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

Disassembly of section .text.u8g_pb16h1_SetPixel:

00000106 <u8g_pb16h1_SetPixel>:
 106:	fb 01       	movw	r30, r22
 108:	41 81       	ldd	r20, Z+1	; 0x01
 10a:	dc 01       	movw	r26, r24
 10c:	12 96       	adiw	r26, 0x02	; 2
 10e:	2c 91       	ld	r18, X
 110:	12 97       	sbiw	r26, 0x02	; 2
 112:	42 17       	cp	r20, r18
 114:	00 f0       	brcs	.+0      	; 0x116 <u8g_pb16h1_SetPixel+0x10>
 116:	13 96       	adiw	r26, 0x03	; 3
 118:	2c 91       	ld	r18, X
 11a:	13 97       	sbiw	r26, 0x03	; 3
 11c:	24 17       	cp	r18, r20
 11e:	00 f0       	brcs	.+0      	; 0x120 <u8g_pb16h1_SetPixel+0x1a>
 120:	60 81       	ld	r22, Z
 122:	15 96       	adiw	r26, 0x05	; 5
 124:	2c 91       	ld	r18, X
 126:	62 17       	cp	r22, r18
 128:	00 f4       	brcc	.+0      	; 0x12a <u8g_pb16h1_SetPixel+0x24>
 12a:	24 81       	ldd	r18, Z+4	; 0x04
 12c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 130:	08 95       	ret

Disassembly of section .text.u8g_pb16h1_Set8PixelStd:

00000238 <u8g_pb16h1_Set8PixelStd>:
 238:	ff 92       	push	r15
 23a:	0f 93       	push	r16
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	8c 01       	movw	r16, r24
 244:	eb 01       	movw	r28, r22
 246:	fa 80       	ldd	r15, Y+2	; 0x02
 248:	f7 fe       	sbrs	r15, 7
 24a:	00 c0       	rjmp	.+0      	; 0x24c <u8g_pb16h1_Set8PixelStd+0x14>
 24c:	be 01       	movw	r22, r28
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	01 f0       	breq	.+0      	; 0x25a <u8g_pb16h1_Set8PixelStd+0x22>
 25a:	00 f0       	brcs	.+0      	; 0x25c <u8g_pb16h1_Set8PixelStd+0x24>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	01 f0       	breq	.+0      	; 0x260 <u8g_pb16h1_Set8PixelStd+0x28>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	01 f4       	brne	.+0      	; 0x264 <u8g_pb16h1_Set8PixelStd+0x2c>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	81 50       	subi	r24, 0x01	; 1
 268:	00 c0       	rjmp	.+0      	; 0x26a <u8g_pb16h1_Set8PixelStd+0x32>
 26a:	88 81       	ld	r24, Y
 26c:	8f 5f       	subi	r24, 0xFF	; 255
 26e:	00 c0       	rjmp	.+0      	; 0x270 <u8g_pb16h1_Set8PixelStd+0x38>
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	8f 5f       	subi	r24, 0xFF	; 255
 274:	00 c0       	rjmp	.+0      	; 0x276 <u8g_pb16h1_Set8PixelStd+0x3e>
 276:	88 81       	ld	r24, Y
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	88 83       	st	Y, r24
 27c:	00 c0       	rjmp	.+0      	; 0x27e <u8g_pb16h1_Set8PixelStd+0x46>
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	ff 0c       	add	r15, r15
 282:	01 f4       	brne	.+0      	; 0x284 <u8g_pb16h1_Set8PixelStd+0x4c>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	08 95       	ret

Disassembly of section .text.u8g_pb16h1_Set8PixelOpt2:

000004c8 <u8g_pb16h1_Set8PixelOpt2>:
 4c8:	cf 92       	push	r12
 4ca:	df 92       	push	r13
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	00 d0       	rcall	.+0      	; 0x4d8 <u8g_pb16h1_Set8PixelOpt2+0x10>
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	8c 01       	movw	r16, r24
 4de:	6b 01       	movw	r12, r22
 4e0:	fb 01       	movw	r30, r22
 4e2:	f2 80       	ldd	r15, Z+2	; 0x02
 4e4:	83 81       	ldd	r24, Z+3	; 0x03
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	01 f0       	breq	.+0      	; 0x4ea <u8g_pb16h1_Set8PixelOpt2+0x22>
 4ea:	00 f0       	brcs	.+0      	; 0x4ec <u8g_pb16h1_Set8PixelOpt2+0x24>
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	01 f0       	breq	.+0      	; 0x4f0 <u8g_pb16h1_Set8PixelOpt2+0x28>
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	01 f0       	breq	.+0      	; 0x4f4 <u8g_pb16h1_Set8PixelOpt2+0x2c>
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <u8g_pb16h1_Set8PixelOpt2+0x30>
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <u8g_pb16h1_Set8PixelOpt2+0x36>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	3f ef       	ldi	r19, 0xFF	; 255
 502:	00 c0       	rjmp	.+0      	; 0x504 <u8g_pb16h1_Set8PixelOpt2+0x3c>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	00 c0       	rjmp	.+0      	; 0x508 <u8g_pb16h1_Set8PixelOpt2+0x40>
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	31 e0       	ldi	r19, 0x01	; 1
 50c:	f7 fe       	sbrs	r15, 7
 50e:	00 c0       	rjmp	.+0      	; 0x510 <u8g_pb16h1_Set8PixelOpt2+0x48>
 510:	b6 01       	movw	r22, r12
 512:	c8 01       	movw	r24, r16
 514:	29 83       	std	Y+1, r18	; 0x01
 516:	3a 83       	std	Y+2, r19	; 0x02
 518:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 51c:	3a 81       	ldd	r19, Y+2	; 0x02
 51e:	29 81       	ldd	r18, Y+1	; 0x01
 520:	f6 01       	movw	r30, r12
 522:	80 81       	ld	r24, Z
 524:	83 0f       	add	r24, r19
 526:	80 83       	st	Z, r24
 528:	81 81       	ldd	r24, Z+1	; 0x01
 52a:	82 0f       	add	r24, r18
 52c:	81 83       	std	Z+1, r24	; 0x01
 52e:	ff 0c       	add	r15, r15
 530:	01 f4       	brne	.+0      	; 0x532 <u8g_pb16h1_Set8PixelOpt2+0x6a>
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	ff 90       	pop	r15
 540:	df 90       	pop	r13
 542:	cf 90       	pop	r12
 544:	08 95       	ret

Disassembly of section .text.u8g_dev_pb16h1_base_fn:

00000a0e <u8g_dev_pb16h1_base_fn>:
 a0e:	0f 93       	push	r16
 a10:	1f 93       	push	r17
 a12:	cf 93       	push	r28
 a14:	df 93       	push	r29
 a16:	89 01       	movw	r16, r18
 a18:	fb 01       	movw	r30, r22
 a1a:	c2 81       	ldd	r28, Z+2	; 0x02
 a1c:	d3 81       	ldd	r29, Z+3	; 0x03
 a1e:	42 33       	cpi	r20, 0x32	; 50
 a20:	01 f0       	breq	.+0      	; 0xa22 <u8g_dev_pb16h1_base_fn+0x14>
 a22:	00 f4       	brcc	.+0      	; 0xa24 <u8g_dev_pb16h1_base_fn+0x16>
 a24:	45 31       	cpi	r20, 0x15	; 21
 a26:	01 f0       	breq	.+0      	; 0xa28 <u8g_dev_pb16h1_base_fn+0x1a>
 a28:	47 31       	cpi	r20, 0x17	; 23
 a2a:	01 f0       	breq	.+0      	; 0xa2c <u8g_dev_pb16h1_base_fn+0x1e>
 a2c:	44 31       	cpi	r20, 0x14	; 20
 a2e:	01 f4       	brne	.+0      	; 0xa30 <u8g_dev_pb16h1_base_fn+0x22>
 a30:	ce 01       	movw	r24, r28
 a32:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a36:	ce 01       	movw	r24, r28
 a38:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <u8g_dev_pb16h1_base_fn+0x30>
 a3e:	46 34       	cpi	r20, 0x46	; 70
 a40:	01 f0       	breq	.+0      	; 0xa42 <u8g_dev_pb16h1_base_fn+0x34>
 a42:	47 34       	cpi	r20, 0x47	; 71
 a44:	01 f0       	breq	.+0      	; 0xa46 <u8g_dev_pb16h1_base_fn+0x38>
 a46:	4b 33       	cpi	r20, 0x3B	; 59
 a48:	01 f4       	brne	.+0      	; 0xa4a <u8g_dev_pb16h1_base_fn+0x3c>
 a4a:	b9 01       	movw	r22, r18
 a4c:	ce 01       	movw	r24, r28
 a4e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a52:	88 23       	and	r24, r24
 a54:	01 f0       	breq	.+0      	; 0xa56 <u8g_dev_pb16h1_base_fn+0x48>
 a56:	b8 01       	movw	r22, r16
 a58:	ce 01       	movw	r24, r28
 a5a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <u8g_dev_pb16h1_base_fn+0x52>
 a60:	b9 01       	movw	r22, r18
 a62:	ce 01       	movw	r24, r28
 a64:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a68:	00 c0       	rjmp	.+0      	; 0xa6a <u8g_dev_pb16h1_base_fn+0x5c>
 a6a:	ce 01       	movw	r24, r28
 a6c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a70:	88 23       	and	r24, r24
 a72:	01 f0       	breq	.+0      	; 0xa74 <u8g_dev_pb16h1_base_fn+0x66>
 a74:	ce 01       	movw	r24, r28
 a76:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a7a:	00 c0       	rjmp	.+0      	; 0xa7c <u8g_dev_pb16h1_base_fn+0x6e>
 a7c:	b9 01       	movw	r22, r18
 a7e:	ce 01       	movw	r24, r28
 a80:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a84:	00 c0       	rjmp	.+0      	; 0xa86 <u8g_dev_pb16h1_base_fn+0x78>
 a86:	8d 81       	ldd	r24, Y+5	; 0x05
 a88:	00 c0       	rjmp	.+0      	; 0xa8a <u8g_dev_pb16h1_base_fn+0x7c>
 a8a:	89 81       	ldd	r24, Y+1	; 0x01
 a8c:	f8 01       	movw	r30, r16
 a8e:	80 83       	st	Z, r24
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	00 c0       	rjmp	.+0      	; 0xa94 <u8g_dev_pb16h1_base_fn+0x86>
 a94:	80 e0       	ldi	r24, 0x00	; 0
 a96:	df 91       	pop	r29
 a98:	cf 91       	pop	r28
 a9a:	1f 91       	pop	r17
 a9c:	0f 91       	pop	r16
 a9e:	08 95       	ret

u8g_pb16h2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000bc4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017f1  00000000  00000000  00000bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb16h2_set_pixel 00000078  00000000  00000000  000023e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb16h2_Clear 00000020  00000000  00000000  00002461  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb16h2_Init 0000000c  00000000  00000000  00002481  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb16h2_SetPixel 00000034  00000000  00000000  0000248d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb16h2_Set8PixelStd 0000005a  00000000  00000000  000024c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_pb16h2_Or4PixelStd 00000064  00000000  00000000  0000251b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_pb16h2_base_fn 000000b6  00000000  00000000  0000257f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  00002635  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb16h2_set_pixel:

00000000 <u8g_pb16h2_set_pixel>:
  } while( pixel != 0  );
}


uint8_t u8g_dev_pb16h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	0f 93       	push	r16
   2:	dc 01       	movw	r26, r24
   4:	16 96       	adiw	r26, 0x06	; 6
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	17 97       	sbiw	r26, 0x07	; 7
   c:	15 96       	adiw	r26, 0x05	; 5
   e:	8c 91       	ld	r24, X
  switch(msg)
  10:	15 97       	sbiw	r26, 0x05	; 5
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	96 95       	lsr	r25
  16:	87 95       	ror	r24
  18:	96 95       	lsr	r25
  1a:	87 95       	ror	r24
  1c:	12 96       	adiw	r26, 0x02	; 2
  1e:	3c 91       	ld	r19, X
  20:	43 1b       	sub	r20, r19
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_page_First(&(pb->p));
  22:	48 9f       	mul	r20, r24
  24:	d0 01       	movw	r26, r0
  26:	49 9f       	mul	r20, r25
  28:	b0 0d       	add	r27, r0


uint8_t u8g_dev_pb16h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  2a:	11 24       	eor	r1, r1
  2c:	ea 0f       	add	r30, r26
  2e:	fb 1f       	adc	r31, r27
  30:	86 2f       	mov	r24, r22
      break;
    case U8G_DEV_MSG_SET_4TPIXEL:
      u8g_pb16h2_Or4PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_TPIXEL:
      u8g_pb16h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg, 1);
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	96 95       	lsr	r25


uint8_t u8g_dev_pb16h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  36:	87 95       	ror	r24
  38:	96 95       	lsr	r25
  3a:	87 95       	ror	r24
  3c:	e8 0f       	add	r30, r24
  3e:	f9 1f       	adc	r31, r25
  40:	63 70       	andi	r22, 0x03	; 3
  42:	70 e0       	ldi	r23, 0x00	; 0
  44:	66 0f       	add	r22, r22
  46:	77 1f       	adc	r23, r23
  48:	01 11       	cpse	r16, r1
  4a:	00 c0       	rjmp	.+0      	; 0x4c <u8g_pb16h2_set_pixel+0x4c>
  4c:	83 e0       	ldi	r24, 0x03	; 3
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	06 2e       	mov	r0, r22
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  52:	00 c0       	rjmp	.+0      	; 0x54 <u8g_pb16h2_set_pixel+0x54>
  54:	88 0f       	add	r24, r24
  56:	0a 94       	dec	r0
  58:	02 f4       	brpl	.+0      	; 0x5a <u8g_pb16h2_set_pixel+0x5a>
  5a:	80 95       	com	r24
  5c:	90 81       	ld	r25, Z
      {
        u8g_pb16h2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
  5e:	98 23       	and	r25, r24
  60:	90 83       	st	Z, r25
  62:	23 70       	andi	r18, 0x03	; 3
  64:	06 2e       	mov	r0, r22
  66:	00 c0       	rjmp	.+0      	; 0x68 <u8g_pb16h2_set_pixel+0x68>
      }
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb16h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg, 0);
  68:	22 0f       	add	r18, r18
  6a:	0a 94       	dec	r0
      break;
    case U8G_DEV_MSG_SET_4TPIXEL:
      u8g_pb16h2_Or4PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
  6c:	02 f4       	brpl	.+0      	; 0x6e <u8g_pb16h2_set_pixel+0x6e>
  6e:	80 81       	ld	r24, Z
  70:	82 2b       	or	r24, r18
  72:	80 83       	st	Z, r24
  74:	0f 91       	pop	r16
      break;
    case U8G_DEV_MSG_SET_TPIXEL:
      u8g_pb16h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg, 1);
  76:	08 95       	ret

Disassembly of section .text.u8g_pb16h2_Clear:

00000078 <u8g_pb16h2_Clear>:
  78:	fc 01       	movw	r30, r24
  7a:	96 81       	ldd	r25, Z+6	; 0x06
  7c:	87 81       	ldd	r24, Z+7	; 0x07
  7e:	25 81       	ldd	r18, Z+5	; 0x05
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_page_First(&(pb->p));
      u8g_pb16h2_Clear(pb);
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  80:	e9 2f       	mov	r30, r25
  82:	f8 2f       	mov	r31, r24
  84:	cf 01       	movw	r24, r30
  86:	82 0f       	add	r24, r18
  88:	91 1d       	adc	r25, r1
        return 0;
      u8g_pb16h2_Clear(pb);
  8a:	82 0f       	add	r24, r18
  8c:	91 1d       	adc	r25, r1
  8e:	11 92       	st	Z+, r1
  90:	e8 17       	cp	r30, r24
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  92:	f9 07       	cpc	r31, r25
  94:	01 f4       	brne	.+0      	; 0x96 <u8g_pb16h2_Clear+0x1e>
  96:	08 95       	ret

Disassembly of section .text.u8g_pb16h2_Init:

00000110 <u8g_pb16h2_Init>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  }
  return 1;
}
 110:	fc 01       	movw	r30, r24
 112:	77 83       	std	Z+7, r23	; 0x07
 114:	66 83       	std	Z+6, r22	; 0x06
 116:	45 83       	std	Z+5, r20	; 0x05
 118:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb16h2_SetPixel:

0000022c <u8g_pb16h2_SetPixel>:
 22c:	0f 93       	push	r16
 22e:	fb 01       	movw	r30, r22
 230:	31 81       	ldd	r19, Z+1	; 0x01
 232:	dc 01       	movw	r26, r24
 234:	12 96       	adiw	r26, 0x02	; 2
 236:	2c 91       	ld	r18, X
 238:	12 97       	sbiw	r26, 0x02	; 2
 23a:	32 17       	cp	r19, r18
 23c:	00 f0       	brcs	.+0      	; 0x23e <u8g_pb16h2_SetPixel+0x12>
 23e:	13 96       	adiw	r26, 0x03	; 3
 240:	2c 91       	ld	r18, X
 242:	13 97       	sbiw	r26, 0x03	; 3
 244:	23 17       	cp	r18, r19
 246:	00 f0       	brcs	.+0      	; 0x248 <u8g_pb16h2_SetPixel+0x1c>
 248:	60 81       	ld	r22, Z
 24a:	15 96       	adiw	r26, 0x05	; 5
 24c:	2c 91       	ld	r18, X
 24e:	62 17       	cp	r22, r18
 250:	00 f4       	brcc	.+0      	; 0x252 <u8g_pb16h2_SetPixel+0x26>
 252:	04 2f       	mov	r16, r20
 254:	24 81       	ldd	r18, Z+4	; 0x04
 256:	43 2f       	mov	r20, r19
 258:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 25c:	0f 91       	pop	r16
 25e:	08 95       	ret

Disassembly of section .text.u8g_pb16h2_Set8PixelStd:

0000048c <u8g_pb16h2_Set8PixelStd>:
 48c:	ff 92       	push	r15
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	cf 93       	push	r28
 494:	df 93       	push	r29
 496:	8c 01       	movw	r16, r24
 498:	eb 01       	movw	r28, r22
 49a:	fa 80       	ldd	r15, Y+2	; 0x02
 49c:	f7 fe       	sbrs	r15, 7
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <u8g_pb16h2_Set8PixelStd+0x14>
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	be 01       	movw	r22, r28
 4a4:	c8 01       	movw	r24, r16
 4a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	01 f0       	breq	.+0      	; 0x4b0 <u8g_pb16h2_Set8PixelStd+0x24>
 4b0:	00 f0       	brcs	.+0      	; 0x4b2 <u8g_pb16h2_Set8PixelStd+0x26>
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	01 f0       	breq	.+0      	; 0x4b6 <u8g_pb16h2_Set8PixelStd+0x2a>
 4b6:	83 30       	cpi	r24, 0x03	; 3
 4b8:	01 f4       	brne	.+0      	; 0x4ba <u8g_pb16h2_Set8PixelStd+0x2e>
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	81 50       	subi	r24, 0x01	; 1
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <u8g_pb16h2_Set8PixelStd+0x34>
 4c0:	88 81       	ld	r24, Y
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <u8g_pb16h2_Set8PixelStd+0x3a>
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	8f 5f       	subi	r24, 0xFF	; 255
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <u8g_pb16h2_Set8PixelStd+0x40>
 4cc:	88 81       	ld	r24, Y
 4ce:	81 50       	subi	r24, 0x01	; 1
 4d0:	88 83       	st	Y, r24
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <u8g_pb16h2_Set8PixelStd+0x48>
 4d4:	89 83       	std	Y+1, r24	; 0x01
 4d6:	ff 0c       	add	r15, r15
 4d8:	01 f4       	brne	.+0      	; 0x4da <u8g_pb16h2_Set8PixelStd+0x4e>
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	1f 91       	pop	r17
 4e0:	0f 91       	pop	r16
 4e2:	ff 90       	pop	r15
 4e4:	08 95       	ret

Disassembly of section .text.u8g_pb16h2_Or4PixelStd:

00000972 <u8g_pb16h2_Or4PixelStd>:
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	8c 01       	movw	r16, r24
 97e:	eb 01       	movw	r28, r22
 980:	fa 80       	ldd	r15, Y+2	; 0x02
 982:	8f 2d       	mov	r24, r15
 984:	82 95       	swap	r24
 986:	86 95       	lsr	r24
 988:	86 95       	lsr	r24
 98a:	83 70       	andi	r24, 0x03	; 3
 98c:	8c 83       	std	Y+4, r24	; 0x04
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	be 01       	movw	r22, r28
 992:	c8 01       	movw	r24, r16
 994:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	01 f0       	breq	.+0      	; 0x99e <u8g_pb16h2_Or4PixelStd+0x2c>
 99e:	00 f0       	brcs	.+0      	; 0x9a0 <u8g_pb16h2_Or4PixelStd+0x2e>
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	01 f0       	breq	.+0      	; 0x9a4 <u8g_pb16h2_Or4PixelStd+0x32>
 9a4:	83 30       	cpi	r24, 0x03	; 3
 9a6:	01 f4       	brne	.+0      	; 0x9a8 <u8g_pb16h2_Or4PixelStd+0x36>
 9a8:	89 81       	ldd	r24, Y+1	; 0x01
 9aa:	81 50       	subi	r24, 0x01	; 1
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <u8g_pb16h2_Or4PixelStd+0x3c>
 9ae:	88 81       	ld	r24, Y
 9b0:	8f 5f       	subi	r24, 0xFF	; 255
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <u8g_pb16h2_Or4PixelStd+0x42>
 9b4:	89 81       	ldd	r24, Y+1	; 0x01
 9b6:	8f 5f       	subi	r24, 0xFF	; 255
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <u8g_pb16h2_Or4PixelStd+0x48>
 9ba:	88 81       	ld	r24, Y
 9bc:	81 50       	subi	r24, 0x01	; 1
 9be:	88 83       	st	Y, r24
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <u8g_pb16h2_Or4PixelStd+0x50>
 9c2:	89 83       	std	Y+1, r24	; 0x01
 9c4:	ff 0c       	add	r15, r15
 9c6:	ff 0c       	add	r15, r15
 9c8:	01 f4       	brne	.+0      	; 0x9ca <u8g_pb16h2_Or4PixelStd+0x58>
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	ff 90       	pop	r15
 9d4:	08 95       	ret

Disassembly of section .text.u8g_dev_pb16h2_base_fn:

00001348 <u8g_dev_pb16h2_base_fn>:
    1348:	0f 93       	push	r16
    134a:	1f 93       	push	r17
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	89 01       	movw	r16, r18
    1352:	fb 01       	movw	r30, r22
    1354:	c2 81       	ldd	r28, Z+2	; 0x02
    1356:	d3 81       	ldd	r29, Z+3	; 0x03
    1358:	4d 32       	cpi	r20, 0x2D	; 45
    135a:	01 f0       	breq	.+0      	; 0x135c <u8g_dev_pb16h2_base_fn+0x14>
    135c:	00 f4       	brcc	.+0      	; 0x135e <u8g_dev_pb16h2_base_fn+0x16>
    135e:	45 31       	cpi	r20, 0x15	; 21
    1360:	01 f0       	breq	.+0      	; 0x1362 <u8g_dev_pb16h2_base_fn+0x1a>
    1362:	00 f4       	brcc	.+0      	; 0x1364 <u8g_dev_pb16h2_base_fn+0x1c>
    1364:	44 31       	cpi	r20, 0x14	; 20
    1366:	01 f0       	breq	.+0      	; 0x1368 <u8g_dev_pb16h2_base_fn+0x20>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <u8g_dev_pb16h2_base_fn+0x22>
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <u8g_dev_pb16h2_base_fn+0x2a>
    1372:	47 31       	cpi	r20, 0x17	; 23
    1374:	01 f0       	breq	.+0      	; 0x1376 <u8g_dev_pb16h2_base_fn+0x2e>
    1376:	4c 32       	cpi	r20, 0x2C	; 44
    1378:	01 f4       	brne	.+0      	; 0x137a <u8g_dev_pb16h2_base_fn+0x32>
    137a:	41 e0       	ldi	r20, 0x01	; 1
    137c:	00 c0       	rjmp	.+0      	; 0x137e <u8g_dev_pb16h2_base_fn+0x36>
    137e:	46 34       	cpi	r20, 0x46	; 70
    1380:	01 f0       	breq	.+0      	; 0x1382 <u8g_dev_pb16h2_base_fn+0x3a>
    1382:	00 f4       	brcc	.+0      	; 0x1384 <u8g_dev_pb16h2_base_fn+0x3c>
    1384:	42 33       	cpi	r20, 0x32	; 50
    1386:	01 f0       	breq	.+0      	; 0x1388 <u8g_dev_pb16h2_base_fn+0x40>
    1388:	4b 33       	cpi	r20, 0x3B	; 59
    138a:	01 f0       	breq	.+0      	; 0x138c <u8g_dev_pb16h2_base_fn+0x44>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <u8g_dev_pb16h2_base_fn+0x46>
    138e:	47 34       	cpi	r20, 0x47	; 71
    1390:	01 f0       	breq	.+0      	; 0x1392 <u8g_dev_pb16h2_base_fn+0x4a>
    1392:	48 34       	cpi	r20, 0x48	; 72
    1394:	01 f4       	brne	.+0      	; 0x1396 <u8g_dev_pb16h2_base_fn+0x4e>
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	00 c0       	rjmp	.+0      	; 0x139a <u8g_dev_pb16h2_base_fn+0x52>
    139a:	b9 01       	movw	r22, r18
    139c:	ce 01       	movw	r24, r28
    139e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13a2:	88 23       	and	r24, r24
    13a4:	01 f0       	breq	.+0      	; 0x13a6 <u8g_dev_pb16h2_base_fn+0x5e>
    13a6:	b8 01       	movw	r22, r16
    13a8:	ce 01       	movw	r24, r28
    13aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13ae:	00 c0       	rjmp	.+0      	; 0x13b0 <u8g_dev_pb16h2_base_fn+0x68>
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <u8g_dev_pb16h2_base_fn+0x6c>
    13b4:	b9 01       	movw	r22, r18
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13bc:	00 c0       	rjmp	.+0      	; 0x13be <u8g_dev_pb16h2_base_fn+0x76>
    13be:	b8 01       	movw	r22, r16
    13c0:	ce 01       	movw	r24, r28
    13c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <u8g_dev_pb16h2_base_fn+0x80>
    13c8:	ce 01       	movw	r24, r28
    13ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13ce:	88 23       	and	r24, r24
    13d0:	01 f0       	breq	.+0      	; 0x13d2 <u8g_dev_pb16h2_base_fn+0x8a>
    13d2:	ce 01       	movw	r24, r28
    13d4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <u8g_dev_pb16h2_base_fn+0x92>
    13da:	b9 01       	movw	r22, r18
    13dc:	ce 01       	movw	r24, r28
    13de:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    13e2:	00 c0       	rjmp	.+0      	; 0x13e4 <u8g_dev_pb16h2_base_fn+0x9c>
    13e4:	8d 81       	ldd	r24, Y+5	; 0x05
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <u8g_dev_pb16h2_base_fn+0xa0>
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	f8 01       	movw	r30, r16
    13ec:	80 83       	st	Z, r24
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	00 c0       	rjmp	.+0      	; 0x13f2 <u8g_dev_pb16h2_base_fn+0xaa>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	08 95       	ret

u8g_pb16v1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b58  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017ef  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb16v1_Clear 00000024  00000000  00000000  0000237b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb16v1_Init 0000000c  00000000  00000000  0000239f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb16v1_set_pixel 0000003c  00000000  00000000  000023ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb16v1_SetPixel 0000002c  00000000  00000000  000023e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb16v1_Set8PixelStd 00000058  00000000  00000000  00002413  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_pb16v1_Set8PixelOpt2 0000007e  00000000  00000000  0000246b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_pb16v1_base_fn 00000092  00000000  00000000  000024e9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  0000257b  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb16v1_Clear:

00000000 <u8g_pb16v1_Clear>:
  } while( pixel != 0  );
  
}

uint8_t u8g_dev_pb16v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	2c 91       	ld	r18, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	cf 01       	movw	r24, r30
  12:	82 0f       	add	r24, r18
  14:	91 1d       	adc	r25, r1
  16:	82 0f       	add	r24, r18
  18:	91 1d       	adc	r25, r1
  1a:	11 92       	st	Z+, r1
  1c:	e8 17       	cp	r30, r24
  1e:	f9 07       	cpc	r31, r25
  20:	01 f4       	brne	.+0      	; 0x22 <u8g_pb16v1_Clear+0x22>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
  22:	08 95       	ret

Disassembly of section .text.u8g_pb16v1_Init:

00000024 <u8g_pb16v1_Init>:
  24:	fc 01       	movw	r30, r24
  26:	77 83       	std	Z+7, r23	; 0x07
      u8g_page_First(&(pb->p));
  28:	66 83       	std	Z+6, r22	; 0x06
  2a:	45 83       	std	Z+5, r20	; 0x05
  2c:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb16v1_set_pixel:

00000054 <u8g_pb16v1_set_pixel>:
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb16v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb16v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	fc 01       	movw	r30, r24
  56:	a6 81       	ldd	r26, Z+6	; 0x06
  58:	b7 81       	ldd	r27, Z+7	; 0x07
  5a:	82 81       	ldd	r24, Z+2	; 0x02
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	48 1b       	sub	r20, r24
  5e:	48 30       	cpi	r20, 0x08	; 8
  60:	00 f0       	brcs	.+0      	; 0x62 <u8g_pb16v1_set_pixel+0xe>
  62:	85 81       	ldd	r24, Z+5	; 0x05
  64:	a8 0f       	add	r26, r24
        return 0;
      u8g_pb16v1_Clear(pb);
  66:	b1 1d       	adc	r27, r1
  68:	47 70       	andi	r20, 0x07	; 7
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	04 2e       	mov	r0, r20
  70:	00 c0       	rjmp	.+0      	; 0x72 <u8g_pb16v1_set_pixel+0x1e>
  72:	88 0f       	add	r24, r24
  74:	0a 94       	dec	r0
  76:	02 f4       	brpl	.+0      	; 0x78 <u8g_pb16v1_set_pixel+0x24>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	fd 01       	movw	r30, r26
  7a:	e6 0f       	add	r30, r22
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	f1 1d       	adc	r31, r1
  7e:	30 81       	ld	r19, Z
  80:	22 23       	and	r18, r18
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	01 f0       	breq	.+0      	; 0x84 <u8g_pb16v1_set_pixel+0x30>
  84:	83 2b       	or	r24, r19
      u8g_pb16v1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	00 c0       	rjmp	.+0      	; 0x88 <u8g_pb16v1_set_pixel+0x34>
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	80 95       	com	r24
  8a:	83 23       	and	r24, r19
  8c:	80 83       	st	Z, r24
  8e:	08 95       	ret

Disassembly of section .text.u8g_pb16v1_SetPixel:

000000e4 <u8g_pb16v1_SetPixel>:
  e4:	fb 01       	movw	r30, r22
  e6:	41 81       	ldd	r20, Z+1	; 0x01
  e8:	dc 01       	movw	r26, r24
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	2c 91       	ld	r18, X
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	42 17       	cp	r20, r18
  f2:	00 f0       	brcs	.+0      	; 0xf4 <u8g_pb16v1_SetPixel+0x10>
  f4:	13 96       	adiw	r26, 0x03	; 3
  f6:	2c 91       	ld	r18, X
  f8:	13 97       	sbiw	r26, 0x03	; 3
  fa:	24 17       	cp	r18, r20
  fc:	00 f0       	brcs	.+0      	; 0xfe <u8g_pb16v1_SetPixel+0x1a>
  fe:	60 81       	ld	r22, Z
 100:	15 96       	adiw	r26, 0x05	; 5
 102:	2c 91       	ld	r18, X
 104:	62 17       	cp	r22, r18
 106:	00 f4       	brcc	.+0      	; 0x108 <u8g_pb16v1_SetPixel+0x24>
 108:	24 81       	ldd	r18, Z+4	; 0x04
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 10e:	08 95       	ret

Disassembly of section .text.u8g_pb16v1_Set8PixelStd:

000001f4 <u8g_pb16v1_Set8PixelStd>:
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	8c 01       	movw	r16, r24
 200:	eb 01       	movw	r28, r22
 202:	fa 80       	ldd	r15, Y+2	; 0x02
 204:	f7 fe       	sbrs	r15, 7
 206:	00 c0       	rjmp	.+0      	; 0x208 <u8g_pb16v1_Set8PixelStd+0x14>
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	01 f0       	breq	.+0      	; 0x216 <u8g_pb16v1_Set8PixelStd+0x22>
 216:	00 f0       	brcs	.+0      	; 0x218 <u8g_pb16v1_Set8PixelStd+0x24>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	01 f0       	breq	.+0      	; 0x21c <u8g_pb16v1_Set8PixelStd+0x28>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	01 f4       	brne	.+0      	; 0x220 <u8g_pb16v1_Set8PixelStd+0x2c>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 50       	subi	r24, 0x01	; 1
 224:	00 c0       	rjmp	.+0      	; 0x226 <u8g_pb16v1_Set8PixelStd+0x32>
 226:	88 81       	ld	r24, Y
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	00 c0       	rjmp	.+0      	; 0x22c <u8g_pb16v1_Set8PixelStd+0x38>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_pb16v1_Set8PixelStd+0x3e>
 232:	88 81       	ld	r24, Y
 234:	81 50       	subi	r24, 0x01	; 1
 236:	88 83       	st	Y, r24
 238:	00 c0       	rjmp	.+0      	; 0x23a <u8g_pb16v1_Set8PixelStd+0x46>
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	ff 0c       	add	r15, r15
 23e:	01 f4       	brne	.+0      	; 0x240 <u8g_pb16v1_Set8PixelStd+0x4c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	08 95       	ret

Disassembly of section .text.u8g_pb16v1_Set8PixelOpt2:

00000440 <u8g_pb16v1_Set8PixelOpt2>:
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <u8g_pb16v1_Set8PixelOpt2+0x10>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	8c 01       	movw	r16, r24
 456:	6b 01       	movw	r12, r22
 458:	fb 01       	movw	r30, r22
 45a:	f2 80       	ldd	r15, Z+2	; 0x02
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	01 f0       	breq	.+0      	; 0x462 <u8g_pb16v1_Set8PixelOpt2+0x22>
 462:	00 f0       	brcs	.+0      	; 0x464 <u8g_pb16v1_Set8PixelOpt2+0x24>
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	01 f0       	breq	.+0      	; 0x468 <u8g_pb16v1_Set8PixelOpt2+0x28>
 468:	83 30       	cpi	r24, 0x03	; 3
 46a:	01 f0       	breq	.+0      	; 0x46c <u8g_pb16v1_Set8PixelOpt2+0x2c>
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	00 c0       	rjmp	.+0      	; 0x470 <u8g_pb16v1_Set8PixelOpt2+0x30>
 470:	21 e0       	ldi	r18, 0x01	; 1
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	00 c0       	rjmp	.+0      	; 0x476 <u8g_pb16v1_Set8PixelOpt2+0x36>
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	3f ef       	ldi	r19, 0xFF	; 255
 47a:	00 c0       	rjmp	.+0      	; 0x47c <u8g_pb16v1_Set8PixelOpt2+0x3c>
 47c:	2f ef       	ldi	r18, 0xFF	; 255
 47e:	00 c0       	rjmp	.+0      	; 0x480 <u8g_pb16v1_Set8PixelOpt2+0x40>
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	31 e0       	ldi	r19, 0x01	; 1
 484:	f7 fe       	sbrs	r15, 7
 486:	00 c0       	rjmp	.+0      	; 0x488 <u8g_pb16v1_Set8PixelOpt2+0x48>
 488:	b6 01       	movw	r22, r12
 48a:	c8 01       	movw	r24, r16
 48c:	29 83       	std	Y+1, r18	; 0x01
 48e:	3a 83       	std	Y+2, r19	; 0x02
 490:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 494:	3a 81       	ldd	r19, Y+2	; 0x02
 496:	29 81       	ldd	r18, Y+1	; 0x01
 498:	f6 01       	movw	r30, r12
 49a:	80 81       	ld	r24, Z
 49c:	83 0f       	add	r24, r19
 49e:	80 83       	st	Z, r24
 4a0:	81 81       	ldd	r24, Z+1	; 0x01
 4a2:	82 0f       	add	r24, r18
 4a4:	81 83       	std	Z+1, r24	; 0x01
 4a6:	ff 0c       	add	r15, r15
 4a8:	01 f4       	brne	.+0      	; 0x4aa <u8g_pb16v1_Set8PixelOpt2+0x6a>
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	08 95       	ret

Disassembly of section .text.u8g_dev_pb16v1_base_fn:

000008fe <u8g_dev_pb16v1_base_fn>:
 8fe:	0f 93       	push	r16
 900:	1f 93       	push	r17
 902:	cf 93       	push	r28
 904:	df 93       	push	r29
 906:	89 01       	movw	r16, r18
 908:	fb 01       	movw	r30, r22
 90a:	c2 81       	ldd	r28, Z+2	; 0x02
 90c:	d3 81       	ldd	r29, Z+3	; 0x03
 90e:	42 33       	cpi	r20, 0x32	; 50
 910:	01 f0       	breq	.+0      	; 0x912 <u8g_dev_pb16v1_base_fn+0x14>
 912:	00 f4       	brcc	.+0      	; 0x914 <u8g_dev_pb16v1_base_fn+0x16>
 914:	45 31       	cpi	r20, 0x15	; 21
 916:	01 f0       	breq	.+0      	; 0x918 <u8g_dev_pb16v1_base_fn+0x1a>
 918:	47 31       	cpi	r20, 0x17	; 23
 91a:	01 f0       	breq	.+0      	; 0x91c <u8g_dev_pb16v1_base_fn+0x1e>
 91c:	44 31       	cpi	r20, 0x14	; 20
 91e:	01 f4       	brne	.+0      	; 0x920 <u8g_dev_pb16v1_base_fn+0x22>
 920:	ce 01       	movw	r24, r28
 922:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 926:	ce 01       	movw	r24, r28
 928:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <u8g_dev_pb16v1_base_fn+0x30>
 92e:	46 34       	cpi	r20, 0x46	; 70
 930:	01 f0       	breq	.+0      	; 0x932 <u8g_dev_pb16v1_base_fn+0x34>
 932:	47 34       	cpi	r20, 0x47	; 71
 934:	01 f0       	breq	.+0      	; 0x936 <u8g_dev_pb16v1_base_fn+0x38>
 936:	4b 33       	cpi	r20, 0x3B	; 59
 938:	01 f4       	brne	.+0      	; 0x93a <u8g_dev_pb16v1_base_fn+0x3c>
 93a:	b9 01       	movw	r22, r18
 93c:	ce 01       	movw	r24, r28
 93e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 942:	88 23       	and	r24, r24
 944:	01 f0       	breq	.+0      	; 0x946 <u8g_dev_pb16v1_base_fn+0x48>
 946:	b8 01       	movw	r22, r16
 948:	ce 01       	movw	r24, r28
 94a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 94e:	00 c0       	rjmp	.+0      	; 0x950 <u8g_dev_pb16v1_base_fn+0x52>
 950:	b9 01       	movw	r22, r18
 952:	ce 01       	movw	r24, r28
 954:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 958:	00 c0       	rjmp	.+0      	; 0x95a <u8g_dev_pb16v1_base_fn+0x5c>
 95a:	ce 01       	movw	r24, r28
 95c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 960:	88 23       	and	r24, r24
 962:	01 f0       	breq	.+0      	; 0x964 <u8g_dev_pb16v1_base_fn+0x66>
 964:	ce 01       	movw	r24, r28
 966:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <u8g_dev_pb16v1_base_fn+0x6e>
 96c:	b9 01       	movw	r22, r18
 96e:	ce 01       	movw	r24, r28
 970:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 974:	00 c0       	rjmp	.+0      	; 0x976 <u8g_dev_pb16v1_base_fn+0x78>
 976:	8d 81       	ldd	r24, Y+5	; 0x05
 978:	00 c0       	rjmp	.+0      	; 0x97a <u8g_dev_pb16v1_base_fn+0x7c>
 97a:	89 81       	ldd	r24, Y+1	; 0x01
 97c:	f8 01       	movw	r30, r16
 97e:	80 83       	st	Z, r24
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	00 c0       	rjmp	.+0      	; 0x984 <u8g_dev_pb16v1_base_fn+0x86>
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	1f 91       	pop	r17
 98c:	0f 91       	pop	r16
 98e:	08 95       	ret

u8g_pb16v2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a50  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000178e  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb16v2_Clear 00000020  00000000  00000000  00002212  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb16v2Init 0000000c  00000000  00000000  00002232  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb16v2_set_pixel 00000040  00000000  00000000  0000223e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb16v2_SetPixel 0000002c  00000000  00000000  0000227e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb16v2_Set8PixelStd 00000058  00000000  00000000  000022aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_pb16v2_base_fn 0000009e  00000000  00000000  00002302  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb16v2_Clear:

00000000 <u8g_pb16v2_Clear>:
}



uint8_t u8g_dev_pb16v2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	96 81       	ldd	r25, Z+6	; 0x06
   4:	87 81       	ldd	r24, Z+7	; 0x07
   6:	25 81       	ldd	r18, Z+5	; 0x05
   8:	e9 2f       	mov	r30, r25
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	f8 2f       	mov	r31, r24
   c:	cf 01       	movw	r24, r30
   e:	82 0f       	add	r24, r18
  switch(msg)
  10:	91 1d       	adc	r25, r1
  12:	82 0f       	add	r24, r18
  14:	91 1d       	adc	r25, r1
  16:	11 92       	st	Z+, r1
  18:	e8 17       	cp	r30, r24
  1a:	f9 07       	cpc	r31, r25
  1c:	01 f4       	brne	.+0      	; 0x1e <u8g_pb16v2_Clear+0x1e>
  1e:	08 95       	ret

Disassembly of section .text.u8g_pb16v2Init:

00000020 <u8g_pb16v2Init>:
  20:	fc 01       	movw	r30, r24
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v2_Clear(pb);
  22:	77 83       	std	Z+7, r23	; 0x07
  24:	66 83       	std	Z+6, r22	; 0x06
  26:	45 83       	std	Z+5, r20	; 0x05
      u8g_page_First(&(pb->p));
  28:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb16v2_set_pixel:

0000004c <u8g_pb16v2_set_pixel>:
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  4c:	fc 01       	movw	r30, r24
  4e:	a6 81       	ldd	r26, Z+6	; 0x06
  50:	b7 81       	ldd	r27, Z+7	; 0x07
  52:	82 81       	ldd	r24, Z+2	; 0x02
      {
        u8g_pb16v2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	48 1b       	sub	r20, r24
  56:	44 30       	cpi	r20, 0x04	; 4
  58:	00 f0       	brcs	.+0      	; 0x5a <u8g_pb16v2_set_pixel+0xe>
  5a:	85 81       	ldd	r24, Z+5	; 0x05
  5c:	a8 0f       	add	r26, r24
      }
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb16v2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  5e:	b1 1d       	adc	r27, r1
  60:	43 70       	andi	r20, 0x03	; 3
  62:	44 0f       	add	r20, r20
  64:	83 e0       	ldi	r24, 0x03	; 3
  66:	90 e0       	ldi	r25, 0x00	; 0
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb16v2_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  68:	04 2e       	mov	r0, r20
  6a:	00 c0       	rjmp	.+0      	; 0x6c <u8g_pb16v2_set_pixel+0x20>
  6c:	88 0f       	add	r24, r24
  6e:	0a 94       	dec	r0
  70:	02 f4       	brpl	.+0      	; 0x72 <u8g_pb16v2_set_pixel+0x26>
        return 0;
      u8g_pb16v2_Clear(pb);
  72:	23 70       	andi	r18, 0x03	; 3
  74:	00 c0       	rjmp	.+0      	; 0x76 <u8g_pb16v2_set_pixel+0x2a>
  76:	22 0f       	add	r18, r18
  78:	4a 95       	dec	r20
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  7a:	02 f4       	brpl	.+0      	; 0x7c <u8g_pb16v2_set_pixel+0x30>
  7c:	a6 0f       	add	r26, r22
  7e:	b1 1d       	adc	r27, r1
  80:	80 95       	com	r24
  82:	9c 91       	ld	r25, X
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  84:	89 23       	and	r24, r25
  86:	28 2b       	or	r18, r24
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  88:	2c 93       	st	X, r18
  8a:	08 95       	ret

Disassembly of section .text.u8g_pb16v2_SetPixel:

000000d8 <u8g_pb16v2_SetPixel>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  }
  return 1;
}
  d8:	fb 01       	movw	r30, r22
  da:	41 81       	ldd	r20, Z+1	; 0x01
  dc:	dc 01       	movw	r26, r24
  de:	12 96       	adiw	r26, 0x02	; 2
  e0:	2c 91       	ld	r18, X
  e2:	12 97       	sbiw	r26, 0x02	; 2
  e4:	42 17       	cp	r20, r18
  e6:	00 f0       	brcs	.+0      	; 0xe8 <u8g_pb16v2_SetPixel+0x10>
  e8:	13 96       	adiw	r26, 0x03	; 3
  ea:	2c 91       	ld	r18, X
  ec:	13 97       	sbiw	r26, 0x03	; 3
  ee:	24 17       	cp	r18, r20
  f0:	00 f0       	brcs	.+0      	; 0xf2 <u8g_pb16v2_SetPixel+0x1a>
  f2:	60 81       	ld	r22, Z
  f4:	15 96       	adiw	r26, 0x05	; 5
  f6:	2c 91       	ld	r18, X
  f8:	62 17       	cp	r22, r18
  fa:	00 f4       	brcc	.+0      	; 0xfc <u8g_pb16v2_SetPixel+0x24>
  fc:	24 81       	ldd	r18, Z+4	; 0x04
  fe:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 102:	08 95       	ret

Disassembly of section .text.u8g_pb16v2_Set8PixelStd:

000001dc <u8g_pb16v2_Set8PixelStd>:
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	8c 01       	movw	r16, r24
 1e8:	eb 01       	movw	r28, r22
 1ea:	fa 80       	ldd	r15, Y+2	; 0x02
 1ec:	f7 fe       	sbrs	r15, 7
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <u8g_pb16v2_Set8PixelStd+0x14>
 1f0:	be 01       	movw	r22, r28
 1f2:	c8 01       	movw	r24, r16
 1f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1f8:	8b 81       	ldd	r24, Y+3	; 0x03
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	01 f0       	breq	.+0      	; 0x1fe <u8g_pb16v2_Set8PixelStd+0x22>
 1fe:	00 f0       	brcs	.+0      	; 0x200 <u8g_pb16v2_Set8PixelStd+0x24>
 200:	82 30       	cpi	r24, 0x02	; 2
 202:	01 f0       	breq	.+0      	; 0x204 <u8g_pb16v2_Set8PixelStd+0x28>
 204:	83 30       	cpi	r24, 0x03	; 3
 206:	01 f4       	brne	.+0      	; 0x208 <u8g_pb16v2_Set8PixelStd+0x2c>
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	00 c0       	rjmp	.+0      	; 0x20e <u8g_pb16v2_Set8PixelStd+0x32>
 20e:	88 81       	ld	r24, Y
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	00 c0       	rjmp	.+0      	; 0x214 <u8g_pb16v2_Set8PixelStd+0x38>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	8f 5f       	subi	r24, 0xFF	; 255
 218:	00 c0       	rjmp	.+0      	; 0x21a <u8g_pb16v2_Set8PixelStd+0x3e>
 21a:	88 81       	ld	r24, Y
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	88 83       	st	Y, r24
 220:	00 c0       	rjmp	.+0      	; 0x222 <u8g_pb16v2_Set8PixelStd+0x46>
 222:	89 83       	std	Y+1, r24	; 0x01
 224:	ff 0c       	add	r15, r15
 226:	01 f4       	brne	.+0      	; 0x228 <u8g_pb16v2_Set8PixelStd+0x4c>
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	08 95       	ret

Disassembly of section .text.u8g_dev_pb16v2_base_fn:

00000410 <u8g_dev_pb16v2_base_fn>:
 410:	0f 93       	push	r16
 412:	1f 93       	push	r17
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	89 01       	movw	r16, r18
 41a:	fb 01       	movw	r30, r22
 41c:	c2 81       	ldd	r28, Z+2	; 0x02
 41e:	d3 81       	ldd	r29, Z+3	; 0x03
 420:	42 33       	cpi	r20, 0x32	; 50
 422:	01 f0       	breq	.+0      	; 0x424 <u8g_dev_pb16v2_base_fn+0x14>
 424:	00 f4       	brcc	.+0      	; 0x426 <u8g_dev_pb16v2_base_fn+0x16>
 426:	45 31       	cpi	r20, 0x15	; 21
 428:	01 f0       	breq	.+0      	; 0x42a <u8g_dev_pb16v2_base_fn+0x1a>
 42a:	47 31       	cpi	r20, 0x17	; 23
 42c:	01 f0       	breq	.+0      	; 0x42e <u8g_dev_pb16v2_base_fn+0x1e>
 42e:	44 31       	cpi	r20, 0x14	; 20
 430:	01 f4       	brne	.+0      	; 0x432 <u8g_dev_pb16v2_base_fn+0x22>
 432:	ce 01       	movw	r24, r28
 434:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 438:	ce 01       	movw	r24, r28
 43a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <u8g_dev_pb16v2_base_fn+0x30>
 440:	46 34       	cpi	r20, 0x46	; 70
 442:	01 f0       	breq	.+0      	; 0x444 <u8g_dev_pb16v2_base_fn+0x34>
 444:	00 f4       	brcc	.+0      	; 0x446 <u8g_dev_pb16v2_base_fn+0x36>
 446:	4b 33       	cpi	r20, 0x3B	; 59
 448:	01 f0       	breq	.+0      	; 0x44a <u8g_dev_pb16v2_base_fn+0x3a>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <u8g_dev_pb16v2_base_fn+0x3c>
 44c:	47 34       	cpi	r20, 0x47	; 71
 44e:	01 f0       	breq	.+0      	; 0x450 <u8g_dev_pb16v2_base_fn+0x40>
 450:	48 34       	cpi	r20, 0x48	; 72
 452:	01 f4       	brne	.+0      	; 0x454 <u8g_dev_pb16v2_base_fn+0x44>
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	00 c0       	rjmp	.+0      	; 0x458 <u8g_dev_pb16v2_base_fn+0x48>
 458:	b9 01       	movw	r22, r18
 45a:	ce 01       	movw	r24, r28
 45c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 460:	88 23       	and	r24, r24
 462:	01 f0       	breq	.+0      	; 0x464 <u8g_dev_pb16v2_base_fn+0x54>
 464:	b8 01       	movw	r22, r16
 466:	ce 01       	movw	r24, r28
 468:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <u8g_dev_pb16v2_base_fn+0x5e>
 46e:	b9 01       	movw	r22, r18
 470:	ce 01       	movw	r24, r28
 472:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 476:	00 c0       	rjmp	.+0      	; 0x478 <u8g_dev_pb16v2_base_fn+0x68>
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 47e:	88 23       	and	r24, r24
 480:	01 f0       	breq	.+0      	; 0x482 <u8g_dev_pb16v2_base_fn+0x72>
 482:	ce 01       	movw	r24, r28
 484:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 488:	00 c0       	rjmp	.+0      	; 0x48a <u8g_dev_pb16v2_base_fn+0x7a>
 48a:	b9 01       	movw	r22, r18
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 492:	00 c0       	rjmp	.+0      	; 0x494 <u8g_dev_pb16v2_base_fn+0x84>
 494:	8d 81       	ldd	r24, Y+5	; 0x05
 496:	00 c0       	rjmp	.+0      	; 0x498 <u8g_dev_pb16v2_base_fn+0x88>
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	f8 01       	movw	r30, r16
 49c:	80 83       	st	Z, r24
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <u8g_dev_pb16v2_base_fn+0x92>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

u8g_pb32h1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b70  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017ef  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb32h1_Clear 00000026  00000000  00000000  00002393  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb32h1_Init 0000000c  00000000  00000000  000023b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb32h1_set_pixel 0000005e  00000000  00000000  000023c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb32h1_SetPixel 0000002c  00000000  00000000  00002423  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb32h1_Set8PixelStd 00000058  00000000  00000000  0000244f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_pb32h1_Set8PixelOpt2 0000007e  00000000  00000000  000024a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_dev_pb32h1_base_fn 00000092  00000000  00000000  00002525  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .comment      00000022  00000000  00000000  000025b7  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb32h1_Clear:

00000000 <u8g_pb32h1_Clear>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pb32h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	2c 91       	ld	r18, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	cf 01       	movw	r24, r30
  12:	b4 e0       	ldi	r27, 0x04	; 4
  14:	2b 9f       	mul	r18, r27
  16:	80 0d       	add	r24, r0
  18:	91 1d       	adc	r25, r1
  1a:	11 24       	eor	r1, r1
  1c:	11 92       	st	Z+, r1
  1e:	e8 17       	cp	r30, r24
  20:	f9 07       	cpc	r31, r25
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb32h1_Clear(pb);
  22:	01 f4       	brne	.+0      	; 0x24 <u8g_pb32h1_Clear+0x24>
  24:	08 95       	ret

Disassembly of section .text.u8g_pb32h1_Init:

00000026 <u8g_pb32h1_Init>:
  26:	fc 01       	movw	r30, r24
      u8g_page_First(&(pb->p));
  28:	77 83       	std	Z+7, r23	; 0x07
  2a:	66 83       	std	Z+6, r22	; 0x06
  2c:	45 83       	std	Z+5, r20	; 0x05
  2e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb32h1_set_pixel:

00000058 <u8g_pb32h1_set_pixel>:
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb32h1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb32h1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  58:	dc 01       	movw	r26, r24
  5a:	16 96       	adiw	r26, 0x06	; 6
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb32h1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	ed 91       	ld	r30, X+
  5e:	fc 91       	ld	r31, X
  60:	17 97       	sbiw	r26, 0x07	; 7
  62:	15 96       	adiw	r26, 0x05	; 5
  64:	8c 91       	ld	r24, X
        return 0;
      u8g_pb32h1_Clear(pb);
  66:	15 97       	sbiw	r26, 0x05	; 5
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	33 e0       	ldi	r19, 0x03	; 3
  6c:	96 95       	lsr	r25
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	87 95       	ror	r24
  70:	3a 95       	dec	r19
  72:	01 f4       	brne	.+0      	; 0x74 <u8g_pb32h1_set_pixel+0x1c>
  74:	12 96       	adiw	r26, 0x02	; 2
  76:	3c 91       	ld	r19, X
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	43 1b       	sub	r20, r19
  7a:	48 9f       	mul	r20, r24
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	d0 01       	movw	r26, r0
  7e:	49 9f       	mul	r20, r25
  80:	b0 0d       	add	r27, r0
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	11 24       	eor	r1, r1
  84:	ea 0f       	add	r30, r26
      u8g_pb32h1_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	fb 1f       	adc	r31, r27
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	36 2f       	mov	r19, r22
  8a:	37 70       	andi	r19, 0x07	; 7
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	00 c0       	rjmp	.+0      	; 0x92 <u8g_pb32h1_set_pixel+0x3a>
  92:	95 95       	asr	r25
  94:	87 95       	ror	r24
  96:	3a 95       	dec	r19
  98:	02 f4       	brpl	.+0      	; 0x9a <u8g_pb32h1_set_pixel+0x42>
  9a:	66 95       	lsr	r22
  9c:	66 95       	lsr	r22
  9e:	66 95       	lsr	r22
  a0:	e6 0f       	add	r30, r22
  a2:	f1 1d       	adc	r31, r1
  a4:	30 81       	ld	r19, Z
  a6:	22 23       	and	r18, r18
  a8:	01 f0       	breq	.+0      	; 0xaa <u8g_pb32h1_set_pixel+0x52>
  aa:	83 2b       	or	r24, r19
  ac:	00 c0       	rjmp	.+0      	; 0xae <u8g_pb32h1_set_pixel+0x56>
  ae:	80 95       	com	r24
  b0:	83 23       	and	r24, r19
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

Disassembly of section .text.u8g_pb32h1_SetPixel:

0000010e <u8g_pb32h1_SetPixel>:
 10e:	fb 01       	movw	r30, r22
 110:	41 81       	ldd	r20, Z+1	; 0x01
 112:	dc 01       	movw	r26, r24
 114:	12 96       	adiw	r26, 0x02	; 2
 116:	2c 91       	ld	r18, X
 118:	12 97       	sbiw	r26, 0x02	; 2
 11a:	42 17       	cp	r20, r18
 11c:	00 f0       	brcs	.+0      	; 0x11e <u8g_pb32h1_SetPixel+0x10>
 11e:	13 96       	adiw	r26, 0x03	; 3
 120:	2c 91       	ld	r18, X
 122:	13 97       	sbiw	r26, 0x03	; 3
 124:	24 17       	cp	r18, r20
 126:	00 f0       	brcs	.+0      	; 0x128 <u8g_pb32h1_SetPixel+0x1a>
 128:	60 81       	ld	r22, Z
 12a:	15 96       	adiw	r26, 0x05	; 5
 12c:	2c 91       	ld	r18, X
 12e:	62 17       	cp	r22, r18
 130:	00 f4       	brcc	.+0      	; 0x132 <u8g_pb32h1_SetPixel+0x24>
 132:	24 81       	ldd	r18, Z+4	; 0x04
 134:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 138:	08 95       	ret

Disassembly of section .text.u8g_pb32h1_Set8PixelStd:

00000248 <u8g_pb32h1_Set8PixelStd>:
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8c 01       	movw	r16, r24
 254:	eb 01       	movw	r28, r22
 256:	fa 80       	ldd	r15, Y+2	; 0x02
 258:	f7 fe       	sbrs	r15, 7
 25a:	00 c0       	rjmp	.+0      	; 0x25c <u8g_pb32h1_Set8PixelStd+0x14>
 25c:	be 01       	movw	r22, r28
 25e:	c8 01       	movw	r24, r16
 260:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 264:	8b 81       	ldd	r24, Y+3	; 0x03
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	01 f0       	breq	.+0      	; 0x26a <u8g_pb32h1_Set8PixelStd+0x22>
 26a:	00 f0       	brcs	.+0      	; 0x26c <u8g_pb32h1_Set8PixelStd+0x24>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	01 f0       	breq	.+0      	; 0x270 <u8g_pb32h1_Set8PixelStd+0x28>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	01 f4       	brne	.+0      	; 0x274 <u8g_pb32h1_Set8PixelStd+0x2c>
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	81 50       	subi	r24, 0x01	; 1
 278:	00 c0       	rjmp	.+0      	; 0x27a <u8g_pb32h1_Set8PixelStd+0x32>
 27a:	88 81       	ld	r24, Y
 27c:	8f 5f       	subi	r24, 0xFF	; 255
 27e:	00 c0       	rjmp	.+0      	; 0x280 <u8g_pb32h1_Set8PixelStd+0x38>
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	00 c0       	rjmp	.+0      	; 0x286 <u8g_pb32h1_Set8PixelStd+0x3e>
 286:	88 81       	ld	r24, Y
 288:	81 50       	subi	r24, 0x01	; 1
 28a:	88 83       	st	Y, r24
 28c:	00 c0       	rjmp	.+0      	; 0x28e <u8g_pb32h1_Set8PixelStd+0x46>
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	ff 0c       	add	r15, r15
 292:	01 f4       	brne	.+0      	; 0x294 <u8g_pb32h1_Set8PixelStd+0x4c>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	ff 90       	pop	r15
 29e:	08 95       	ret

Disassembly of section .text.u8g_pb32h1_Set8PixelOpt2:

000004e8 <u8g_pb32h1_Set8PixelOpt2>:
 4e8:	cf 92       	push	r12
 4ea:	df 92       	push	r13
 4ec:	ff 92       	push	r15
 4ee:	0f 93       	push	r16
 4f0:	1f 93       	push	r17
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <u8g_pb32h1_Set8PixelOpt2+0x10>
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
 4fc:	8c 01       	movw	r16, r24
 4fe:	6b 01       	movw	r12, r22
 500:	fb 01       	movw	r30, r22
 502:	f2 80       	ldd	r15, Z+2	; 0x02
 504:	83 81       	ldd	r24, Z+3	; 0x03
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	01 f0       	breq	.+0      	; 0x50a <u8g_pb32h1_Set8PixelOpt2+0x22>
 50a:	00 f0       	brcs	.+0      	; 0x50c <u8g_pb32h1_Set8PixelOpt2+0x24>
 50c:	82 30       	cpi	r24, 0x02	; 2
 50e:	01 f0       	breq	.+0      	; 0x510 <u8g_pb32h1_Set8PixelOpt2+0x28>
 510:	83 30       	cpi	r24, 0x03	; 3
 512:	01 f0       	breq	.+0      	; 0x514 <u8g_pb32h1_Set8PixelOpt2+0x2c>
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	00 c0       	rjmp	.+0      	; 0x518 <u8g_pb32h1_Set8PixelOpt2+0x30>
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	00 c0       	rjmp	.+0      	; 0x51e <u8g_pb32h1_Set8PixelOpt2+0x36>
 51e:	20 e0       	ldi	r18, 0x00	; 0
 520:	3f ef       	ldi	r19, 0xFF	; 255
 522:	00 c0       	rjmp	.+0      	; 0x524 <u8g_pb32h1_Set8PixelOpt2+0x3c>
 524:	2f ef       	ldi	r18, 0xFF	; 255
 526:	00 c0       	rjmp	.+0      	; 0x528 <u8g_pb32h1_Set8PixelOpt2+0x40>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	31 e0       	ldi	r19, 0x01	; 1
 52c:	f7 fe       	sbrs	r15, 7
 52e:	00 c0       	rjmp	.+0      	; 0x530 <u8g_pb32h1_Set8PixelOpt2+0x48>
 530:	b6 01       	movw	r22, r12
 532:	c8 01       	movw	r24, r16
 534:	29 83       	std	Y+1, r18	; 0x01
 536:	3a 83       	std	Y+2, r19	; 0x02
 538:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 53c:	3a 81       	ldd	r19, Y+2	; 0x02
 53e:	29 81       	ldd	r18, Y+1	; 0x01
 540:	f6 01       	movw	r30, r12
 542:	80 81       	ld	r24, Z
 544:	83 0f       	add	r24, r19
 546:	80 83       	st	Z, r24
 548:	81 81       	ldd	r24, Z+1	; 0x01
 54a:	82 0f       	add	r24, r18
 54c:	81 83       	std	Z+1, r24	; 0x01
 54e:	ff 0c       	add	r15, r15
 550:	01 f4       	brne	.+0      	; 0x552 <u8g_pb32h1_Set8PixelOpt2+0x6a>
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	ff 90       	pop	r15
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	08 95       	ret

Disassembly of section .text.u8g_dev_pb32h1_base_fn:

00000a4e <u8g_dev_pb32h1_base_fn>:
 a4e:	0f 93       	push	r16
 a50:	1f 93       	push	r17
 a52:	cf 93       	push	r28
 a54:	df 93       	push	r29
 a56:	89 01       	movw	r16, r18
 a58:	fb 01       	movw	r30, r22
 a5a:	c2 81       	ldd	r28, Z+2	; 0x02
 a5c:	d3 81       	ldd	r29, Z+3	; 0x03
 a5e:	42 33       	cpi	r20, 0x32	; 50
 a60:	01 f0       	breq	.+0      	; 0xa62 <u8g_dev_pb32h1_base_fn+0x14>
 a62:	00 f4       	brcc	.+0      	; 0xa64 <u8g_dev_pb32h1_base_fn+0x16>
 a64:	45 31       	cpi	r20, 0x15	; 21
 a66:	01 f0       	breq	.+0      	; 0xa68 <u8g_dev_pb32h1_base_fn+0x1a>
 a68:	47 31       	cpi	r20, 0x17	; 23
 a6a:	01 f0       	breq	.+0      	; 0xa6c <u8g_dev_pb32h1_base_fn+0x1e>
 a6c:	44 31       	cpi	r20, 0x14	; 20
 a6e:	01 f4       	brne	.+0      	; 0xa70 <u8g_dev_pb32h1_base_fn+0x22>
 a70:	ce 01       	movw	r24, r28
 a72:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a76:	ce 01       	movw	r24, r28
 a78:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a7c:	00 c0       	rjmp	.+0      	; 0xa7e <u8g_dev_pb32h1_base_fn+0x30>
 a7e:	46 34       	cpi	r20, 0x46	; 70
 a80:	01 f0       	breq	.+0      	; 0xa82 <u8g_dev_pb32h1_base_fn+0x34>
 a82:	47 34       	cpi	r20, 0x47	; 71
 a84:	01 f0       	breq	.+0      	; 0xa86 <u8g_dev_pb32h1_base_fn+0x38>
 a86:	4b 33       	cpi	r20, 0x3B	; 59
 a88:	01 f4       	brne	.+0      	; 0xa8a <u8g_dev_pb32h1_base_fn+0x3c>
 a8a:	b9 01       	movw	r22, r18
 a8c:	ce 01       	movw	r24, r28
 a8e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a92:	88 23       	and	r24, r24
 a94:	01 f0       	breq	.+0      	; 0xa96 <u8g_dev_pb32h1_base_fn+0x48>
 a96:	b8 01       	movw	r22, r16
 a98:	ce 01       	movw	r24, r28
 a9a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <u8g_dev_pb32h1_base_fn+0x52>
 aa0:	b9 01       	movw	r22, r18
 aa2:	ce 01       	movw	r24, r28
 aa4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <u8g_dev_pb32h1_base_fn+0x5c>
 aaa:	ce 01       	movw	r24, r28
 aac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 ab0:	88 23       	and	r24, r24
 ab2:	01 f0       	breq	.+0      	; 0xab4 <u8g_dev_pb32h1_base_fn+0x66>
 ab4:	ce 01       	movw	r24, r28
 ab6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 aba:	00 c0       	rjmp	.+0      	; 0xabc <u8g_dev_pb32h1_base_fn+0x6e>
 abc:	b9 01       	movw	r22, r18
 abe:	ce 01       	movw	r24, r28
 ac0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 ac4:	00 c0       	rjmp	.+0      	; 0xac6 <u8g_dev_pb32h1_base_fn+0x78>
 ac6:	8d 81       	ldd	r24, Y+5	; 0x05
 ac8:	00 c0       	rjmp	.+0      	; 0xaca <u8g_dev_pb32h1_base_fn+0x7c>
 aca:	89 81       	ldd	r24, Y+1	; 0x01
 acc:	f8 01       	movw	r30, r16
 ace:	80 83       	st	Z, r24
 ad0:	81 e0       	ldi	r24, 0x01	; 1
 ad2:	00 c0       	rjmp	.+0      	; 0xad4 <u8g_dev_pb32h1_base_fn+0x86>
 ad4:	80 e0       	ldi	r24, 0x00	; 0
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	0f 91       	pop	r16
 ade:	08 95       	ret

u8g_pb8h1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b1c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017c4  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8h1_Init 0000000c  00000000  00000000  00002314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8h1_set_pixel 00000054  00000000  00000000  00002320  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8h1_SetPixel 0000002c  00000000  00000000  00002374  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8h1_Set8PixelStd 00000058  00000000  00000000  000023a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb8h1_Set8PixelOpt2 0000007e  00000000  00000000  000023f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_pb8h1_base_fn 00000092  00000000  00000000  00002476  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8h1_Init:

00000000 <u8g_pb8h1_Init>:
  }
}
#endif

uint8_t u8g_dev_pb8h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	77 83       	std	Z+7, r23	; 0x07
   4:	66 83       	std	Z+6, r22	; 0x06
   6:	45 83       	std	Z+5, r20	; 0x05
   8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_pb8h1_Init>

Disassembly of section .text.u8g_pb8h1_set_pixel:

0000000c <u8g_pb8h1_set_pixel>:
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   c:	dc 01       	movw	r26, r24
   e:	16 96       	adiw	r26, 0x06	; 6
  switch(msg)
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	17 97       	sbiw	r26, 0x07	; 7
  16:	15 96       	adiw	r26, 0x05	; 5
  18:	8c 91       	ld	r24, X
  1a:	15 97       	sbiw	r26, 0x05	; 5
  1c:	86 95       	lsr	r24
  1e:	86 95       	lsr	r24
  20:	86 95       	lsr	r24
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  22:	12 96       	adiw	r26, 0x02	; 2
  24:	9c 91       	ld	r25, X
  26:	49 1b       	sub	r20, r25
      u8g_page_First(&(pb->p));
  28:	48 9f       	mul	r20, r24
  2a:	40 2d       	mov	r20, r0
  2c:	11 24       	eor	r1, r1
  2e:	e4 0f       	add	r30, r20
#endif

uint8_t u8g_dev_pb8h1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	f1 1d       	adc	r31, r1
  32:	36 2f       	mov	r19, r22
  34:	37 70       	andi	r19, 0x07	; 7
  36:	80 e8       	ldi	r24, 0x80	; 128
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <u8g_pb8h1_set_pixel+0x30>
    case U8G_DEV_MSG_SET_8PIXEL:
#ifdef NEW_CODE
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
        u8g_pb8h1_Set8PixelState(pb, (u8g_dev_arg_pixel_t *)arg);
#else
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  3c:	95 95       	asr	r25
  3e:	87 95       	ror	r24
  40:	3a 95       	dec	r19
  42:	02 f4       	brpl	.+0      	; 0x44 <u8g_pb8h1_set_pixel+0x38>
  44:	66 95       	lsr	r22
  46:	66 95       	lsr	r22
        u8g_pb8h1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
  48:	66 95       	lsr	r22
  4a:	e6 0f       	add	r30, r22
  4c:	f1 1d       	adc	r31, r1
  4e:	30 81       	ld	r19, Z
  50:	22 23       	and	r18, r18
#endif
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8h1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  52:	01 f0       	breq	.+0      	; 0x54 <u8g_pb8h1_set_pixel+0x48>
  54:	83 2b       	or	r24, r19
  56:	00 c0       	rjmp	.+0      	; 0x58 <u8g_pb8h1_set_pixel+0x4c>
  58:	80 95       	com	r24
  5a:	83 23       	and	r24, r19
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	80 83       	st	Z, r24
  5e:	08 95       	ret

Disassembly of section .text.u8g_pb8h1_SetPixel:

0000006c <u8g_pb8h1_SetPixel>:
        return 0;
      u8g_pb_Clear(pb);
  6c:	fb 01       	movw	r30, r22
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	41 81       	ldd	r20, Z+1	; 0x01
  70:	dc 01       	movw	r26, r24
  72:	12 96       	adiw	r26, 0x02	; 2
  74:	2c 91       	ld	r18, X
  76:	12 97       	sbiw	r26, 0x02	; 2
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	42 17       	cp	r20, r18
  7a:	00 f0       	brcs	.+0      	; 0x7c <u8g_pb8h1_SetPixel+0x10>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	13 96       	adiw	r26, 0x03	; 3
  7e:	2c 91       	ld	r18, X
  80:	13 97       	sbiw	r26, 0x03	; 3
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	24 17       	cp	r18, r20
  84:	00 f0       	brcs	.+0      	; 0x86 <u8g_pb8h1_SetPixel+0x1a>
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	60 81       	ld	r22, Z
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	15 96       	adiw	r26, 0x05	; 5
  8a:	2c 91       	ld	r18, X
  8c:	62 17       	cp	r22, r18
  8e:	00 f4       	brcc	.+0      	; 0x90 <u8g_pb8h1_SetPixel+0x24>
  90:	24 81       	ldd	r18, Z+4	; 0x04
  92:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  96:	08 95       	ret

Disassembly of section .text.u8g_pb8h1_Set8PixelStd:

00000104 <u8g_pb8h1_Set8PixelStd>:
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
 110:	eb 01       	movw	r28, r22
 112:	fa 80       	ldd	r15, Y+2	; 0x02
 114:	f7 fe       	sbrs	r15, 7
 116:	00 c0       	rjmp	.+0      	; 0x118 <u8g_pb8h1_Set8PixelStd+0x14>
 118:	be 01       	movw	r22, r28
 11a:	c8 01       	movw	r24, r16
 11c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 120:	8b 81       	ldd	r24, Y+3	; 0x03
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	01 f0       	breq	.+0      	; 0x126 <u8g_pb8h1_Set8PixelStd+0x22>
 126:	00 f0       	brcs	.+0      	; 0x128 <u8g_pb8h1_Set8PixelStd+0x24>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	01 f0       	breq	.+0      	; 0x12c <u8g_pb8h1_Set8PixelStd+0x28>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	01 f4       	brne	.+0      	; 0x130 <u8g_pb8h1_Set8PixelStd+0x2c>
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	81 50       	subi	r24, 0x01	; 1
 134:	00 c0       	rjmp	.+0      	; 0x136 <u8g_pb8h1_Set8PixelStd+0x32>
 136:	88 81       	ld	r24, Y
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	00 c0       	rjmp	.+0      	; 0x13c <u8g_pb8h1_Set8PixelStd+0x38>
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	00 c0       	rjmp	.+0      	; 0x142 <u8g_pb8h1_Set8PixelStd+0x3e>
 142:	88 81       	ld	r24, Y
 144:	81 50       	subi	r24, 0x01	; 1
 146:	88 83       	st	Y, r24
 148:	00 c0       	rjmp	.+0      	; 0x14a <u8g_pb8h1_Set8PixelStd+0x46>
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	ff 0c       	add	r15, r15
 14e:	01 f4       	brne	.+0      	; 0x150 <u8g_pb8h1_Set8PixelStd+0x4c>
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	08 95       	ret

Disassembly of section .text.u8g_pb8h1_Set8PixelOpt2:

00000260 <u8g_pb8h1_Set8PixelOpt2>:
 260:	cf 92       	push	r12
 262:	df 92       	push	r13
 264:	ff 92       	push	r15
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	00 d0       	rcall	.+0      	; 0x270 <u8g_pb8h1_Set8PixelOpt2+0x10>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	8c 01       	movw	r16, r24
 276:	6b 01       	movw	r12, r22
 278:	fb 01       	movw	r30, r22
 27a:	f2 80       	ldd	r15, Z+2	; 0x02
 27c:	83 81       	ldd	r24, Z+3	; 0x03
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	01 f0       	breq	.+0      	; 0x282 <u8g_pb8h1_Set8PixelOpt2+0x22>
 282:	00 f0       	brcs	.+0      	; 0x284 <u8g_pb8h1_Set8PixelOpt2+0x24>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	01 f0       	breq	.+0      	; 0x288 <u8g_pb8h1_Set8PixelOpt2+0x28>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	01 f0       	breq	.+0      	; 0x28c <u8g_pb8h1_Set8PixelOpt2+0x2c>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	00 c0       	rjmp	.+0      	; 0x290 <u8g_pb8h1_Set8PixelOpt2+0x30>
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	00 c0       	rjmp	.+0      	; 0x296 <u8g_pb8h1_Set8PixelOpt2+0x36>
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	3f ef       	ldi	r19, 0xFF	; 255
 29a:	00 c0       	rjmp	.+0      	; 0x29c <u8g_pb8h1_Set8PixelOpt2+0x3c>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <u8g_pb8h1_Set8PixelOpt2+0x40>
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	31 e0       	ldi	r19, 0x01	; 1
 2a4:	f7 fe       	sbrs	r15, 7
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <u8g_pb8h1_Set8PixelOpt2+0x48>
 2a8:	b6 01       	movw	r22, r12
 2aa:	c8 01       	movw	r24, r16
 2ac:	29 83       	std	Y+1, r18	; 0x01
 2ae:	3a 83       	std	Y+2, r19	; 0x02
 2b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2b4:	3a 81       	ldd	r19, Y+2	; 0x02
 2b6:	29 81       	ldd	r18, Y+1	; 0x01
 2b8:	f6 01       	movw	r30, r12
 2ba:	80 81       	ld	r24, Z
 2bc:	83 0f       	add	r24, r19
 2be:	80 83       	st	Z, r24
 2c0:	81 81       	ldd	r24, Z+1	; 0x01
 2c2:	82 0f       	add	r24, r18
 2c4:	81 83       	std	Z+1, r24	; 0x01
 2c6:	ff 0c       	add	r15, r15
 2c8:	01 f4       	brne	.+0      	; 0x2ca <u8g_pb8h1_Set8PixelOpt2+0x6a>
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8h1_base_fn:

0000053e <u8g_dev_pb8h1_base_fn>:
 53e:	0f 93       	push	r16
 540:	1f 93       	push	r17
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	89 01       	movw	r16, r18
 548:	fb 01       	movw	r30, r22
 54a:	c2 81       	ldd	r28, Z+2	; 0x02
 54c:	d3 81       	ldd	r29, Z+3	; 0x03
 54e:	42 33       	cpi	r20, 0x32	; 50
 550:	01 f0       	breq	.+0      	; 0x552 <u8g_dev_pb8h1_base_fn+0x14>
 552:	00 f4       	brcc	.+0      	; 0x554 <u8g_dev_pb8h1_base_fn+0x16>
 554:	45 31       	cpi	r20, 0x15	; 21
 556:	01 f0       	breq	.+0      	; 0x558 <u8g_dev_pb8h1_base_fn+0x1a>
 558:	47 31       	cpi	r20, 0x17	; 23
 55a:	01 f0       	breq	.+0      	; 0x55c <u8g_dev_pb8h1_base_fn+0x1e>
 55c:	44 31       	cpi	r20, 0x14	; 20
 55e:	01 f4       	brne	.+0      	; 0x560 <u8g_dev_pb8h1_base_fn+0x22>
 560:	ce 01       	movw	r24, r28
 562:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 566:	ce 01       	movw	r24, r28
 568:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 56c:	00 c0       	rjmp	.+0      	; 0x56e <u8g_dev_pb8h1_base_fn+0x30>
 56e:	46 34       	cpi	r20, 0x46	; 70
 570:	01 f0       	breq	.+0      	; 0x572 <u8g_dev_pb8h1_base_fn+0x34>
 572:	47 34       	cpi	r20, 0x47	; 71
 574:	01 f0       	breq	.+0      	; 0x576 <u8g_dev_pb8h1_base_fn+0x38>
 576:	4b 33       	cpi	r20, 0x3B	; 59
 578:	01 f4       	brne	.+0      	; 0x57a <u8g_dev_pb8h1_base_fn+0x3c>
 57a:	b9 01       	movw	r22, r18
 57c:	ce 01       	movw	r24, r28
 57e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 582:	88 23       	and	r24, r24
 584:	01 f0       	breq	.+0      	; 0x586 <u8g_dev_pb8h1_base_fn+0x48>
 586:	b8 01       	movw	r22, r16
 588:	ce 01       	movw	r24, r28
 58a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <u8g_dev_pb8h1_base_fn+0x52>
 590:	b9 01       	movw	r22, r18
 592:	ce 01       	movw	r24, r28
 594:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 598:	00 c0       	rjmp	.+0      	; 0x59a <u8g_dev_pb8h1_base_fn+0x5c>
 59a:	ce 01       	movw	r24, r28
 59c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5a0:	88 23       	and	r24, r24
 5a2:	01 f0       	breq	.+0      	; 0x5a4 <u8g_dev_pb8h1_base_fn+0x66>
 5a4:	ce 01       	movw	r24, r28
 5a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <u8g_dev_pb8h1_base_fn+0x6e>
 5ac:	b9 01       	movw	r22, r18
 5ae:	ce 01       	movw	r24, r28
 5b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <u8g_dev_pb8h1_base_fn+0x78>
 5b6:	8d 81       	ldd	r24, Y+5	; 0x05
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <u8g_dev_pb8h1_base_fn+0x7c>
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	f8 01       	movw	r30, r16
 5be:	80 83       	st	Z, r24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <u8g_dev_pb8h1_base_fn+0x86>
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	08 95       	ret

u8g_pb8h1f.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b10  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017cc  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8h1f_Init 0000000c  00000000  00000000  00002310  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8h1f_set_pixel 00000052  00000000  00000000  0000231c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8h1f_SetPixel 0000002c  00000000  00000000  0000236e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8h1f_Set8PixelStd 00000058  00000000  00000000  0000239a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb8h1f_Set8PixelOpt2 0000007e  00000000  00000000  000023f2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_pb8h1f_base_fn 00000092  00000000  00000000  00002470  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  00002502  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8h1f_Init:

00000000 <u8g_pb8h1f_Init>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pb8h1f_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	77 83       	std	Z+7, r23	; 0x07
   4:	66 83       	std	Z+6, r22	; 0x06
   6:	45 83       	std	Z+5, r20	; 0x05
   8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_pb8h1f_Init>

Disassembly of section .text.u8g_pb8h1f_set_pixel:

0000000c <u8g_pb8h1f_set_pixel>:
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   c:	dc 01       	movw	r26, r24
   e:	16 96       	adiw	r26, 0x06	; 6
  switch(msg)
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	17 97       	sbiw	r26, 0x07	; 7
  16:	15 96       	adiw	r26, 0x05	; 5
  18:	8c 91       	ld	r24, X
  1a:	15 97       	sbiw	r26, 0x05	; 5
  1c:	86 95       	lsr	r24
  1e:	86 95       	lsr	r24
  20:	86 95       	lsr	r24
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  22:	12 96       	adiw	r26, 0x02	; 2
  24:	9c 91       	ld	r25, X
  26:	49 1b       	sub	r20, r25
      u8g_page_First(&(pb->p));
  28:	48 9f       	mul	r20, r24
  2a:	40 2d       	mov	r20, r0
  2c:	11 24       	eor	r1, r1
  2e:	e4 0f       	add	r30, r20


uint8_t u8g_dev_pb8h1f_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	f1 1d       	adc	r31, r1
  32:	36 2f       	mov	r19, r22
  34:	37 70       	andi	r19, 0x07	; 7
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	90 e0       	ldi	r25, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <u8g_pb8h1f_set_pixel+0x30>
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  3c:	88 0f       	add	r24, r24
  3e:	3a 95       	dec	r19
  40:	02 f4       	brpl	.+0      	; 0x42 <u8g_pb8h1f_set_pixel+0x36>
  42:	66 95       	lsr	r22
  44:	66 95       	lsr	r22
  46:	66 95       	lsr	r22
        u8g_pb8h1f_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
  48:	e6 0f       	add	r30, r22
  4a:	f1 1d       	adc	r31, r1
  4c:	30 81       	ld	r19, Z
  4e:	22 23       	and	r18, r18
  50:	01 f0       	breq	.+0      	; 0x52 <u8g_pb8h1f_set_pixel+0x46>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8h1f_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  52:	83 2b       	or	r24, r19
  54:	00 c0       	rjmp	.+0      	; 0x56 <u8g_pb8h1f_set_pixel+0x4a>
  56:	80 95       	com	r24
  58:	83 23       	and	r24, r19
  5a:	80 83       	st	Z, r24
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	08 95       	ret

Disassembly of section .text.u8g_pb8h1f_SetPixel:

0000006a <u8g_pb8h1f_SetPixel>:
        return 0;
      u8g_pb_Clear(pb);
  6a:	fb 01       	movw	r30, r22
  6c:	41 81       	ldd	r20, Z+1	; 0x01
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	dc 01       	movw	r26, r24
  70:	12 96       	adiw	r26, 0x02	; 2
  72:	2c 91       	ld	r18, X
  74:	12 97       	sbiw	r26, 0x02	; 2
  76:	42 17       	cp	r20, r18
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	00 f0       	brcs	.+0      	; 0x7a <u8g_pb8h1f_SetPixel+0x10>
  7a:	13 96       	adiw	r26, 0x03	; 3
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  7c:	2c 91       	ld	r18, X
  7e:	13 97       	sbiw	r26, 0x03	; 3
  80:	24 17       	cp	r18, r20
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
  82:	00 f0       	brcs	.+0      	; 0x84 <u8g_pb8h1f_SetPixel+0x1a>
  84:	60 81       	ld	r22, Z
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  86:	15 96       	adiw	r26, 0x05	; 5
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  88:	2c 91       	ld	r18, X
  8a:	62 17       	cp	r22, r18
  8c:	00 f4       	brcc	.+0      	; 0x8e <u8g_pb8h1f_SetPixel+0x24>
  8e:	24 81       	ldd	r18, Z+4	; 0x04
  90:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  94:	08 95       	ret

Disassembly of section .text.u8g_pb8h1f_Set8PixelStd:

00000100 <u8g_pb8h1f_Set8PixelStd>:
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	8c 01       	movw	r16, r24
 10c:	eb 01       	movw	r28, r22
 10e:	fa 80       	ldd	r15, Y+2	; 0x02
 110:	f7 fe       	sbrs	r15, 7
 112:	00 c0       	rjmp	.+0      	; 0x114 <u8g_pb8h1f_Set8PixelStd+0x14>
 114:	be 01       	movw	r22, r28
 116:	c8 01       	movw	r24, r16
 118:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 11c:	8b 81       	ldd	r24, Y+3	; 0x03
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	01 f0       	breq	.+0      	; 0x122 <u8g_pb8h1f_Set8PixelStd+0x22>
 122:	00 f0       	brcs	.+0      	; 0x124 <u8g_pb8h1f_Set8PixelStd+0x24>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	01 f0       	breq	.+0      	; 0x128 <u8g_pb8h1f_Set8PixelStd+0x28>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	01 f4       	brne	.+0      	; 0x12c <u8g_pb8h1f_Set8PixelStd+0x2c>
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	81 50       	subi	r24, 0x01	; 1
 130:	00 c0       	rjmp	.+0      	; 0x132 <u8g_pb8h1f_Set8PixelStd+0x32>
 132:	88 81       	ld	r24, Y
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	00 c0       	rjmp	.+0      	; 0x138 <u8g_pb8h1f_Set8PixelStd+0x38>
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	00 c0       	rjmp	.+0      	; 0x13e <u8g_pb8h1f_Set8PixelStd+0x3e>
 13e:	88 81       	ld	r24, Y
 140:	81 50       	subi	r24, 0x01	; 1
 142:	88 83       	st	Y, r24
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_pb8h1f_Set8PixelStd+0x46>
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	ff 0c       	add	r15, r15
 14a:	01 f4       	brne	.+0      	; 0x14c <u8g_pb8h1f_Set8PixelStd+0x4c>
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	ff 90       	pop	r15
 156:	08 95       	ret

Disassembly of section .text.u8g_pb8h1f_Set8PixelOpt2:

00000258 <u8g_pb8h1f_Set8PixelOpt2>:
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ff 92       	push	r15
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	00 d0       	rcall	.+0      	; 0x268 <u8g_pb8h1f_Set8PixelOpt2+0x10>
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	8c 01       	movw	r16, r24
 26e:	6b 01       	movw	r12, r22
 270:	fb 01       	movw	r30, r22
 272:	f2 80       	ldd	r15, Z+2	; 0x02
 274:	83 81       	ldd	r24, Z+3	; 0x03
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	01 f0       	breq	.+0      	; 0x27a <u8g_pb8h1f_Set8PixelOpt2+0x22>
 27a:	00 f0       	brcs	.+0      	; 0x27c <u8g_pb8h1f_Set8PixelOpt2+0x24>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	01 f0       	breq	.+0      	; 0x280 <u8g_pb8h1f_Set8PixelOpt2+0x28>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	01 f0       	breq	.+0      	; 0x284 <u8g_pb8h1f_Set8PixelOpt2+0x2c>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	00 c0       	rjmp	.+0      	; 0x288 <u8g_pb8h1f_Set8PixelOpt2+0x30>
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	00 c0       	rjmp	.+0      	; 0x28e <u8g_pb8h1f_Set8PixelOpt2+0x36>
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	3f ef       	ldi	r19, 0xFF	; 255
 292:	00 c0       	rjmp	.+0      	; 0x294 <u8g_pb8h1f_Set8PixelOpt2+0x3c>
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	00 c0       	rjmp	.+0      	; 0x298 <u8g_pb8h1f_Set8PixelOpt2+0x40>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	31 e0       	ldi	r19, 0x01	; 1
 29c:	f7 fe       	sbrs	r15, 7
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <u8g_pb8h1f_Set8PixelOpt2+0x48>
 2a0:	b6 01       	movw	r22, r12
 2a2:	c8 01       	movw	r24, r16
 2a4:	29 83       	std	Y+1, r18	; 0x01
 2a6:	3a 83       	std	Y+2, r19	; 0x02
 2a8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2ac:	3a 81       	ldd	r19, Y+2	; 0x02
 2ae:	29 81       	ldd	r18, Y+1	; 0x01
 2b0:	f6 01       	movw	r30, r12
 2b2:	80 81       	ld	r24, Z
 2b4:	83 0f       	add	r24, r19
 2b6:	80 83       	st	Z, r24
 2b8:	81 81       	ldd	r24, Z+1	; 0x01
 2ba:	82 0f       	add	r24, r18
 2bc:	81 83       	std	Z+1, r24	; 0x01
 2be:	ff 0c       	add	r15, r15
 2c0:	01 f4       	brne	.+0      	; 0x2c2 <u8g_pb8h1f_Set8PixelOpt2+0x6a>
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	df 90       	pop	r13
 2d2:	cf 90       	pop	r12
 2d4:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8h1f_base_fn:

0000052e <u8g_dev_pb8h1f_base_fn>:
 52e:	0f 93       	push	r16
 530:	1f 93       	push	r17
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	89 01       	movw	r16, r18
 538:	fb 01       	movw	r30, r22
 53a:	c2 81       	ldd	r28, Z+2	; 0x02
 53c:	d3 81       	ldd	r29, Z+3	; 0x03
 53e:	42 33       	cpi	r20, 0x32	; 50
 540:	01 f0       	breq	.+0      	; 0x542 <u8g_dev_pb8h1f_base_fn+0x14>
 542:	00 f4       	brcc	.+0      	; 0x544 <u8g_dev_pb8h1f_base_fn+0x16>
 544:	45 31       	cpi	r20, 0x15	; 21
 546:	01 f0       	breq	.+0      	; 0x548 <u8g_dev_pb8h1f_base_fn+0x1a>
 548:	47 31       	cpi	r20, 0x17	; 23
 54a:	01 f0       	breq	.+0      	; 0x54c <u8g_dev_pb8h1f_base_fn+0x1e>
 54c:	44 31       	cpi	r20, 0x14	; 20
 54e:	01 f4       	brne	.+0      	; 0x550 <u8g_dev_pb8h1f_base_fn+0x22>
 550:	ce 01       	movw	r24, r28
 552:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 556:	ce 01       	movw	r24, r28
 558:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <u8g_dev_pb8h1f_base_fn+0x30>
 55e:	46 34       	cpi	r20, 0x46	; 70
 560:	01 f0       	breq	.+0      	; 0x562 <u8g_dev_pb8h1f_base_fn+0x34>
 562:	47 34       	cpi	r20, 0x47	; 71
 564:	01 f0       	breq	.+0      	; 0x566 <u8g_dev_pb8h1f_base_fn+0x38>
 566:	4b 33       	cpi	r20, 0x3B	; 59
 568:	01 f4       	brne	.+0      	; 0x56a <u8g_dev_pb8h1f_base_fn+0x3c>
 56a:	b9 01       	movw	r22, r18
 56c:	ce 01       	movw	r24, r28
 56e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 572:	88 23       	and	r24, r24
 574:	01 f0       	breq	.+0      	; 0x576 <u8g_dev_pb8h1f_base_fn+0x48>
 576:	b8 01       	movw	r22, r16
 578:	ce 01       	movw	r24, r28
 57a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <u8g_dev_pb8h1f_base_fn+0x52>
 580:	b9 01       	movw	r22, r18
 582:	ce 01       	movw	r24, r28
 584:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 588:	00 c0       	rjmp	.+0      	; 0x58a <u8g_dev_pb8h1f_base_fn+0x5c>
 58a:	ce 01       	movw	r24, r28
 58c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 590:	88 23       	and	r24, r24
 592:	01 f0       	breq	.+0      	; 0x594 <u8g_dev_pb8h1f_base_fn+0x66>
 594:	ce 01       	movw	r24, r28
 596:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <u8g_dev_pb8h1f_base_fn+0x6e>
 59c:	b9 01       	movw	r22, r18
 59e:	ce 01       	movw	r24, r28
 5a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <u8g_dev_pb8h1f_base_fn+0x78>
 5a6:	8d 81       	ldd	r24, Y+5	; 0x05
 5a8:	00 c0       	rjmp	.+0      	; 0x5aa <u8g_dev_pb8h1f_base_fn+0x7c>
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	f8 01       	movw	r30, r16
 5ae:	80 83       	st	Z, r24
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <u8g_dev_pb8h1f_base_fn+0x86>
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	1f 91       	pop	r17
 5bc:	0f 91       	pop	r16
 5be:	08 95       	ret

u8g_pb8h2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a14  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001765  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8h2_set_pixel 0000006c  00000000  00000000  000021ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8h2_Init 0000000c  00000000  00000000  00002219  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8h2_SetPixel 0000002c  00000000  00000000  00002225  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8h2_Set8PixelStd 00000058  00000000  00000000  00002251  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_pb8h2_base_fn 0000009e  00000000  00000000  000022a9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .comment      00000022  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8h2_set_pixel:

00000000 <u8g_pb8h2_set_pixel>:
}



uint8_t u8g_dev_pb8h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	16 96       	adiw	r26, 0x06	; 6
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	17 97       	sbiw	r26, 0x07	; 7
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	15 96       	adiw	r26, 0x05	; 5
   c:	8c 91       	ld	r24, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  switch(msg)
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	96 95       	lsr	r25
  14:	87 95       	ror	r24
  16:	96 95       	lsr	r25
  18:	87 95       	ror	r24
  1a:	12 96       	adiw	r26, 0x02	; 2
  1c:	3c 91       	ld	r19, X
  1e:	43 1b       	sub	r20, r19
  20:	48 9f       	mul	r20, r24
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  22:	d0 01       	movw	r26, r0
  24:	49 9f       	mul	r20, r25
  26:	b0 0d       	add	r27, r0
      u8g_page_First(&(pb->p));
  28:	11 24       	eor	r1, r1
  2a:	ea 0f       	add	r30, r26
  2c:	fb 1f       	adc	r31, r27
  2e:	86 2f       	mov	r24, r22


uint8_t u8g_dev_pb8h2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	96 95       	lsr	r25
  34:	87 95       	ror	r24
  36:	96 95       	lsr	r25
  38:	87 95       	ror	r24
  3a:	e8 0f       	add	r30, r24
  3c:	f9 1f       	adc	r31, r25
  3e:	63 70       	andi	r22, 0x03	; 3
  40:	70 e0       	ldi	r23, 0x00	; 0
  42:	66 0f       	add	r22, r22
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  44:	77 1f       	adc	r23, r23
  46:	83 e0       	ldi	r24, 0x03	; 3
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	06 2e       	mov	r0, r22
  4c:	00 c0       	rjmp	.+0      	; 0x4e <u8g_pb8h2_set_pixel+0x4e>
  4e:	88 0f       	add	r24, r24
  50:	0a 94       	dec	r0
  52:	02 f4       	brpl	.+0      	; 0x54 <u8g_pb8h2_set_pixel+0x54>
      {
        u8g_pb8h2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	23 70       	andi	r18, 0x03	; 3
  56:	06 2e       	mov	r0, r22
  58:	00 c0       	rjmp	.+0      	; 0x5a <u8g_pb8h2_set_pixel+0x5a>
  5a:	22 0f       	add	r18, r18
  5c:	0a 94       	dec	r0
      }
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8h2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  5e:	02 f4       	brpl	.+0      	; 0x60 <u8g_pb8h2_set_pixel+0x60>
  60:	80 95       	com	r24
  62:	90 81       	ld	r25, Z
  64:	89 23       	and	r24, r25
  66:	82 2b       	or	r24, r18
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  68:	80 83       	st	Z, r24
  6a:	08 95       	ret

Disassembly of section .text.u8g_pb8h2_Init:

0000006c <u8g_pb8h2_Init>:
  6c:	fc 01       	movw	r30, r24
  6e:	77 83       	std	Z+7, r23	; 0x07
  70:	66 83       	std	Z+6, r22	; 0x06
        return 0;
      u8g_pb_Clear(pb);
  72:	45 83       	std	Z+5, r20	; 0x05
  74:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb8h2_SetPixel:

000000e4 <u8g_pb8h2_SetPixel>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  }
  return 1;
}
  e4:	fb 01       	movw	r30, r22
  e6:	41 81       	ldd	r20, Z+1	; 0x01
  e8:	dc 01       	movw	r26, r24
  ea:	12 96       	adiw	r26, 0x02	; 2
  ec:	2c 91       	ld	r18, X
  ee:	12 97       	sbiw	r26, 0x02	; 2
  f0:	42 17       	cp	r20, r18
  f2:	00 f0       	brcs	.+0      	; 0xf4 <u8g_pb8h2_SetPixel+0x10>
  f4:	13 96       	adiw	r26, 0x03	; 3
  f6:	2c 91       	ld	r18, X
  f8:	13 97       	sbiw	r26, 0x03	; 3
  fa:	24 17       	cp	r18, r20
  fc:	00 f0       	brcs	.+0      	; 0xfe <u8g_pb8h2_SetPixel+0x1a>
  fe:	60 81       	ld	r22, Z
 100:	15 96       	adiw	r26, 0x05	; 5
 102:	2c 91       	ld	r18, X
 104:	62 17       	cp	r22, r18
 106:	00 f4       	brcc	.+0      	; 0x108 <u8g_pb8h2_SetPixel+0x24>
 108:	24 81       	ldd	r18, Z+4	; 0x04
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 10e:	08 95       	ret

Disassembly of section .text.u8g_pb8h2_Set8PixelStd:

000001f4 <u8g_pb8h2_Set8PixelStd>:
 1f4:	ff 92       	push	r15
 1f6:	0f 93       	push	r16
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	8c 01       	movw	r16, r24
 200:	eb 01       	movw	r28, r22
 202:	fa 80       	ldd	r15, Y+2	; 0x02
 204:	f7 fe       	sbrs	r15, 7
 206:	00 c0       	rjmp	.+0      	; 0x208 <u8g_pb8h2_Set8PixelStd+0x14>
 208:	be 01       	movw	r22, r28
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 210:	8b 81       	ldd	r24, Y+3	; 0x03
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	01 f0       	breq	.+0      	; 0x216 <u8g_pb8h2_Set8PixelStd+0x22>
 216:	00 f0       	brcs	.+0      	; 0x218 <u8g_pb8h2_Set8PixelStd+0x24>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	01 f0       	breq	.+0      	; 0x21c <u8g_pb8h2_Set8PixelStd+0x28>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	01 f4       	brne	.+0      	; 0x220 <u8g_pb8h2_Set8PixelStd+0x2c>
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 50       	subi	r24, 0x01	; 1
 224:	00 c0       	rjmp	.+0      	; 0x226 <u8g_pb8h2_Set8PixelStd+0x32>
 226:	88 81       	ld	r24, Y
 228:	8f 5f       	subi	r24, 0xFF	; 255
 22a:	00 c0       	rjmp	.+0      	; 0x22c <u8g_pb8h2_Set8PixelStd+0x38>
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_pb8h2_Set8PixelStd+0x3e>
 232:	88 81       	ld	r24, Y
 234:	81 50       	subi	r24, 0x01	; 1
 236:	88 83       	st	Y, r24
 238:	00 c0       	rjmp	.+0      	; 0x23a <u8g_pb8h2_Set8PixelStd+0x46>
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	ff 0c       	add	r15, r15
 23e:	01 f4       	brne	.+0      	; 0x240 <u8g_pb8h2_Set8PixelStd+0x4c>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8h2_base_fn:

00000440 <u8g_dev_pb8h2_base_fn>:
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	89 01       	movw	r16, r18
 44a:	fb 01       	movw	r30, r22
 44c:	c2 81       	ldd	r28, Z+2	; 0x02
 44e:	d3 81       	ldd	r29, Z+3	; 0x03
 450:	42 33       	cpi	r20, 0x32	; 50
 452:	01 f0       	breq	.+0      	; 0x454 <u8g_dev_pb8h2_base_fn+0x14>
 454:	00 f4       	brcc	.+0      	; 0x456 <u8g_dev_pb8h2_base_fn+0x16>
 456:	45 31       	cpi	r20, 0x15	; 21
 458:	01 f0       	breq	.+0      	; 0x45a <u8g_dev_pb8h2_base_fn+0x1a>
 45a:	47 31       	cpi	r20, 0x17	; 23
 45c:	01 f0       	breq	.+0      	; 0x45e <u8g_dev_pb8h2_base_fn+0x1e>
 45e:	44 31       	cpi	r20, 0x14	; 20
 460:	01 f4       	brne	.+0      	; 0x462 <u8g_dev_pb8h2_base_fn+0x22>
 462:	ce 01       	movw	r24, r28
 464:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 468:	ce 01       	movw	r24, r28
 46a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <u8g_dev_pb8h2_base_fn+0x30>
 470:	46 34       	cpi	r20, 0x46	; 70
 472:	01 f0       	breq	.+0      	; 0x474 <u8g_dev_pb8h2_base_fn+0x34>
 474:	00 f4       	brcc	.+0      	; 0x476 <u8g_dev_pb8h2_base_fn+0x36>
 476:	4b 33       	cpi	r20, 0x3B	; 59
 478:	01 f0       	breq	.+0      	; 0x47a <u8g_dev_pb8h2_base_fn+0x3a>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <u8g_dev_pb8h2_base_fn+0x3c>
 47c:	47 34       	cpi	r20, 0x47	; 71
 47e:	01 f0       	breq	.+0      	; 0x480 <u8g_dev_pb8h2_base_fn+0x40>
 480:	48 34       	cpi	r20, 0x48	; 72
 482:	01 f4       	brne	.+0      	; 0x484 <u8g_dev_pb8h2_base_fn+0x44>
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	00 c0       	rjmp	.+0      	; 0x488 <u8g_dev_pb8h2_base_fn+0x48>
 488:	b9 01       	movw	r22, r18
 48a:	ce 01       	movw	r24, r28
 48c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 490:	88 23       	and	r24, r24
 492:	01 f0       	breq	.+0      	; 0x494 <u8g_dev_pb8h2_base_fn+0x54>
 494:	b8 01       	movw	r22, r16
 496:	ce 01       	movw	r24, r28
 498:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <u8g_dev_pb8h2_base_fn+0x5e>
 49e:	b9 01       	movw	r22, r18
 4a0:	ce 01       	movw	r24, r28
 4a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <u8g_dev_pb8h2_base_fn+0x68>
 4a8:	ce 01       	movw	r24, r28
 4aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4ae:	88 23       	and	r24, r24
 4b0:	01 f0       	breq	.+0      	; 0x4b2 <u8g_dev_pb8h2_base_fn+0x72>
 4b2:	ce 01       	movw	r24, r28
 4b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <u8g_dev_pb8h2_base_fn+0x7a>
 4ba:	b9 01       	movw	r22, r18
 4bc:	ce 01       	movw	r24, r28
 4be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <u8g_dev_pb8h2_base_fn+0x84>
 4c4:	8d 81       	ldd	r24, Y+5	; 0x05
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <u8g_dev_pb8h2_base_fn+0x88>
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	f8 01       	movw	r30, r16
 4cc:	80 83       	st	Z, r24
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <u8g_dev_pb8h2_base_fn+0x92>
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

u8g_pb8h8.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a2c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001762  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8h8_Clear 00000022  00000000  00000000  000021c2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8h8_Init 0000000c  00000000  00000000  000021e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8h8_SetPixel 0000003a  00000000  00000000  000021f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8h8_Set8Pixel 0000007e  00000000  00000000  0000222a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_pb8h8_base_fn 0000009e  00000000  00000000  000022a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .comment      00000022  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8h8_Clear:

00000000 <u8g_pb8h8_Clear>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pb8h8_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	06 80       	ldd	r0, Z+6	; 0x06
   8:	f7 81       	ldd	r31, Z+7	; 0x07
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	e0 2d       	mov	r30, r0
   c:	9f 01       	movw	r18, r30
   e:	98 9f       	mul	r25, r24
  switch(msg)
  10:	20 0d       	add	r18, r0
  12:	31 1d       	adc	r19, r1
  14:	11 24       	eor	r1, r1
  16:	c9 01       	movw	r24, r18
  18:	11 92       	st	Z+, r1
  1a:	e8 17       	cp	r30, r24
  1c:	f9 07       	cpc	r31, r25
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_pb8h8_Clear+0x20>
  20:	08 95       	ret

Disassembly of section .text.u8g_pb8h8_Init:

00000022 <u8g_pb8h8_Init>:
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb8h8_Clear(pb);
  22:	fc 01       	movw	r30, r24
  24:	77 83       	std	Z+7, r23	; 0x07
  26:	66 83       	std	Z+6, r22	; 0x06
      u8g_page_First(&(pb->p));
  28:	45 83       	std	Z+5, r20	; 0x05
  2a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pb8h8_SetPixel:

00000050 <u8g_pb8h8_SetPixel>:
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  50:	fc 01       	movw	r30, r24
  52:	db 01       	movw	r26, r22
        u8g_pb8h8_Set8Pixel(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	11 96       	adiw	r26, 0x01	; 1
  56:	8c 91       	ld	r24, X
  58:	11 97       	sbiw	r26, 0x01	; 1
  5a:	32 81       	ldd	r19, Z+2	; 0x02
  5c:	83 17       	cp	r24, r19
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8h8_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  5e:	00 f0       	brcs	.+0      	; 0x60 <u8g_pb8h8_SetPixel+0x10>
  60:	93 81       	ldd	r25, Z+3	; 0x03
  62:	98 17       	cp	r25, r24
  64:	00 f0       	brcs	.+0      	; 0x66 <u8g_pb8h8_SetPixel+0x16>
  66:	9c 91       	ld	r25, X
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb8h8_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  68:	25 81       	ldd	r18, Z+5	; 0x05
  6a:	92 17       	cp	r25, r18
  6c:	00 f4       	brcc	.+0      	; 0x6e <u8g_pb8h8_SetPixel+0x1e>
  6e:	14 96       	adiw	r26, 0x04	; 4
  70:	4c 91       	ld	r20, X
        return 0;
      u8g_pb8h8_Clear(pb);
  72:	06 80       	ldd	r0, Z+6	; 0x06
  74:	f7 81       	ldd	r31, Z+7	; 0x07
  76:	e0 2d       	mov	r30, r0
  78:	83 1b       	sub	r24, r19
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  7a:	82 9f       	mul	r24, r18
  7c:	e0 0d       	add	r30, r0
  7e:	f1 1d       	adc	r31, r1
  80:	11 24       	eor	r1, r1
  82:	e9 0f       	add	r30, r25
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  84:	f1 1d       	adc	r31, r1
  86:	40 83       	st	Z, r20
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  88:	08 95       	ret

Disassembly of section .text.u8g_pb8h8_Set8Pixel:

000000da <u8g_pb8h8_Set8Pixel>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_R3G3B2;
  }
  return 1;
}
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	00 d0       	rcall	.+0      	; 0xea <u8g_pb8h8_Set8Pixel+0x10>
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	8c 01       	movw	r16, r24
  f0:	6b 01       	movw	r12, r22
  f2:	fb 01       	movw	r30, r22
  f4:	f2 80       	ldd	r15, Z+2	; 0x02
  f6:	83 81       	ldd	r24, Z+3	; 0x03
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	01 f0       	breq	.+0      	; 0xfc <u8g_pb8h8_Set8Pixel+0x22>
  fc:	00 f0       	brcs	.+0      	; 0xfe <u8g_pb8h8_Set8Pixel+0x24>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	01 f0       	breq	.+0      	; 0x102 <u8g_pb8h8_Set8Pixel+0x28>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	01 f0       	breq	.+0      	; 0x106 <u8g_pb8h8_Set8Pixel+0x2c>
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	00 c0       	rjmp	.+0      	; 0x10a <u8g_pb8h8_Set8Pixel+0x30>
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	00 c0       	rjmp	.+0      	; 0x110 <u8g_pb8h8_Set8Pixel+0x36>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	3f ef       	ldi	r19, 0xFF	; 255
 114:	00 c0       	rjmp	.+0      	; 0x116 <u8g_pb8h8_Set8Pixel+0x3c>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	00 c0       	rjmp	.+0      	; 0x11a <u8g_pb8h8_Set8Pixel+0x40>
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	31 e0       	ldi	r19, 0x01	; 1
 11e:	f7 fe       	sbrs	r15, 7
 120:	00 c0       	rjmp	.+0      	; 0x122 <u8g_pb8h8_Set8Pixel+0x48>
 122:	b6 01       	movw	r22, r12
 124:	c8 01       	movw	r24, r16
 126:	29 83       	std	Y+1, r18	; 0x01
 128:	3a 83       	std	Y+2, r19	; 0x02
 12a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 12e:	3a 81       	ldd	r19, Y+2	; 0x02
 130:	29 81       	ldd	r18, Y+1	; 0x01
 132:	f6 01       	movw	r30, r12
 134:	80 81       	ld	r24, Z
 136:	83 0f       	add	r24, r19
 138:	80 83       	st	Z, r24
 13a:	81 81       	ldd	r24, Z+1	; 0x01
 13c:	82 0f       	add	r24, r18
 13e:	81 83       	std	Z+1, r24	; 0x01
 140:	ff 0c       	add	r15, r15
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_pb8h8_Set8Pixel+0x6a>
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	ff 90       	pop	r15
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8h8_base_fn:

00000232 <u8g_dev_pb8h8_base_fn>:
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	89 01       	movw	r16, r18
 23c:	fb 01       	movw	r30, r22
 23e:	c2 81       	ldd	r28, Z+2	; 0x02
 240:	d3 81       	ldd	r29, Z+3	; 0x03
 242:	42 33       	cpi	r20, 0x32	; 50
 244:	01 f0       	breq	.+0      	; 0x246 <u8g_dev_pb8h8_base_fn+0x14>
 246:	00 f4       	brcc	.+0      	; 0x248 <u8g_dev_pb8h8_base_fn+0x16>
 248:	45 31       	cpi	r20, 0x15	; 21
 24a:	01 f0       	breq	.+0      	; 0x24c <u8g_dev_pb8h8_base_fn+0x1a>
 24c:	47 31       	cpi	r20, 0x17	; 23
 24e:	01 f0       	breq	.+0      	; 0x250 <u8g_dev_pb8h8_base_fn+0x1e>
 250:	44 31       	cpi	r20, 0x14	; 20
 252:	01 f4       	brne	.+0      	; 0x254 <u8g_dev_pb8h8_base_fn+0x22>
 254:	ce 01       	movw	r24, r28
 256:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 260:	00 c0       	rjmp	.+0      	; 0x262 <u8g_dev_pb8h8_base_fn+0x30>
 262:	46 34       	cpi	r20, 0x46	; 70
 264:	01 f0       	breq	.+0      	; 0x266 <u8g_dev_pb8h8_base_fn+0x34>
 266:	00 f4       	brcc	.+0      	; 0x268 <u8g_dev_pb8h8_base_fn+0x36>
 268:	4b 33       	cpi	r20, 0x3B	; 59
 26a:	01 f0       	breq	.+0      	; 0x26c <u8g_dev_pb8h8_base_fn+0x3a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <u8g_dev_pb8h8_base_fn+0x3c>
 26e:	47 34       	cpi	r20, 0x47	; 71
 270:	01 f0       	breq	.+0      	; 0x272 <u8g_dev_pb8h8_base_fn+0x40>
 272:	48 34       	cpi	r20, 0x48	; 72
 274:	01 f4       	brne	.+0      	; 0x276 <u8g_dev_pb8h8_base_fn+0x44>
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	00 c0       	rjmp	.+0      	; 0x27a <u8g_dev_pb8h8_base_fn+0x48>
 27a:	b9 01       	movw	r22, r18
 27c:	ce 01       	movw	r24, r28
 27e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 282:	88 23       	and	r24, r24
 284:	01 f0       	breq	.+0      	; 0x286 <u8g_dev_pb8h8_base_fn+0x54>
 286:	b8 01       	movw	r22, r16
 288:	ce 01       	movw	r24, r28
 28a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <u8g_dev_pb8h8_base_fn+0x5e>
 290:	b9 01       	movw	r22, r18
 292:	ce 01       	movw	r24, r28
 294:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 298:	00 c0       	rjmp	.+0      	; 0x29a <u8g_dev_pb8h8_base_fn+0x68>
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2a0:	88 23       	and	r24, r24
 2a2:	01 f0       	breq	.+0      	; 0x2a4 <u8g_dev_pb8h8_base_fn+0x72>
 2a4:	ce 01       	movw	r24, r28
 2a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <u8g_dev_pb8h8_base_fn+0x7a>
 2ac:	b9 01       	movw	r22, r18
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <u8g_dev_pb8h8_base_fn+0x84>
 2b6:	8d 81       	ldd	r24, Y+5	; 0x05
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <u8g_dev_pb8h8_base_fn+0x88>
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	f8 01       	movw	r30, r16
 2be:	80 83       	st	Z, r24
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <u8g_dev_pb8h8_base_fn+0x92>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

u8g_pb8v1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000aec  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017c4  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8v1_Init 0000000c  00000000  00000000  000022e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8v1_set_pixel 00000036  00000000  00000000  000022f0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8v1_SetPixel 0000002c  00000000  00000000  00002326  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8v1_Set8PixelStd 00000058  00000000  00000000  00002352  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pb8v1_Set8PixelOpt2 0000007e  00000000  00000000  000023aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_pb8v1_base_fn 00000092  00000000  00000000  00002428  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  000024ba  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8v1_Init:

00000000 <u8g_pb8v1_Init>:
  } while( pixel != 0  );
  
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	77 83       	std	Z+7, r23	; 0x07
   4:	66 83       	std	Z+6, r22	; 0x06
   6:	45 83       	std	Z+5, r20	; 0x05
   8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_pb8v1_Init>

Disassembly of section .text.u8g_pb8v1_set_pixel:

0000000c <u8g_pb8v1_set_pixel>:
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   c:	dc 01       	movw	r26, r24
   e:	16 96       	adiw	r26, 0x06	; 6
  switch(msg)
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	17 97       	sbiw	r26, 0x07	; 7
  16:	12 96       	adiw	r26, 0x02	; 2
  18:	8c 91       	ld	r24, X
  1a:	48 1b       	sub	r20, r24
  1c:	47 70       	andi	r20, 0x07	; 7
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	90 e0       	ldi	r25, 0x00	; 0
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  22:	04 2e       	mov	r0, r20
  24:	00 c0       	rjmp	.+0      	; 0x26 <u8g_pb8v1_set_pixel+0x1a>
  26:	88 0f       	add	r24, r24
      u8g_page_First(&(pb->p));
  28:	0a 94       	dec	r0
  2a:	02 f4       	brpl	.+0      	; 0x2c <u8g_pb8v1_set_pixel+0x20>
  2c:	e6 0f       	add	r30, r22
  2e:	f1 1d       	adc	r31, r1
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	30 81       	ld	r19, Z
  32:	22 23       	and	r18, r18
  34:	01 f0       	breq	.+0      	; 0x36 <u8g_pb8v1_set_pixel+0x2a>
  36:	83 2b       	or	r24, r19
  38:	00 c0       	rjmp	.+0      	; 0x3a <u8g_pb8v1_set_pixel+0x2e>
  3a:	80 95       	com	r24
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
  3c:	83 23       	and	r24, r19
  3e:	80 83       	st	Z, r24
  40:	08 95       	ret

Disassembly of section .text.u8g_pb8v1_SetPixel:

0000004e <u8g_pb8v1_SetPixel>:
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
  4e:	fb 01       	movw	r30, r22
  50:	41 81       	ldd	r20, Z+1	; 0x01
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  52:	dc 01       	movw	r26, r24
  54:	12 96       	adiw	r26, 0x02	; 2
  56:	2c 91       	ld	r18, X
  58:	12 97       	sbiw	r26, 0x02	; 2
  5a:	42 17       	cp	r20, r18
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  5c:	00 f0       	brcs	.+0      	; 0x5e <u8g_pb8v1_SetPixel+0x10>
  5e:	13 96       	adiw	r26, 0x03	; 3
  60:	2c 91       	ld	r18, X
  62:	13 97       	sbiw	r26, 0x03	; 3
  64:	24 17       	cp	r18, r20
        return 0;
      u8g_pb_Clear(pb);
  66:	00 f0       	brcs	.+0      	; 0x68 <u8g_pb8v1_SetPixel+0x1a>
  68:	60 81       	ld	r22, Z
  6a:	15 96       	adiw	r26, 0x05	; 5
  6c:	2c 91       	ld	r18, X
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  6e:	62 17       	cp	r22, r18
  70:	00 f4       	brcc	.+0      	; 0x72 <u8g_pb8v1_SetPixel+0x24>
  72:	24 81       	ldd	r18, Z+4	; 0x04
  74:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  78:	08 95       	ret

Disassembly of section .text.u8g_pb8v1_Set8PixelStd:

000000c8 <u8g_pb8v1_Set8PixelStd>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
}
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24
  d4:	eb 01       	movw	r28, r22
  d6:	fa 80       	ldd	r15, Y+2	; 0x02
  d8:	f7 fe       	sbrs	r15, 7
  da:	00 c0       	rjmp	.+0      	; 0xdc <u8g_pb8v1_Set8PixelStd+0x14>
  dc:	be 01       	movw	r22, r28
  de:	c8 01       	movw	r24, r16
  e0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  e4:	8b 81       	ldd	r24, Y+3	; 0x03
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	01 f0       	breq	.+0      	; 0xea <u8g_pb8v1_Set8PixelStd+0x22>
  ea:	00 f0       	brcs	.+0      	; 0xec <u8g_pb8v1_Set8PixelStd+0x24>
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	01 f0       	breq	.+0      	; 0xf0 <u8g_pb8v1_Set8PixelStd+0x28>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	01 f4       	brne	.+0      	; 0xf4 <u8g_pb8v1_Set8PixelStd+0x2c>
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	81 50       	subi	r24, 0x01	; 1
  f8:	00 c0       	rjmp	.+0      	; 0xfa <u8g_pb8v1_Set8PixelStd+0x32>
  fa:	88 81       	ld	r24, Y
  fc:	8f 5f       	subi	r24, 0xFF	; 255
  fe:	00 c0       	rjmp	.+0      	; 0x100 <u8g_pb8v1_Set8PixelStd+0x38>
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	00 c0       	rjmp	.+0      	; 0x106 <u8g_pb8v1_Set8PixelStd+0x3e>
 106:	88 81       	ld	r24, Y
 108:	81 50       	subi	r24, 0x01	; 1
 10a:	88 83       	st	Y, r24
 10c:	00 c0       	rjmp	.+0      	; 0x10e <u8g_pb8v1_Set8PixelStd+0x46>
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	ff 0c       	add	r15, r15
 112:	01 f4       	brne	.+0      	; 0x114 <u8g_pb8v1_Set8PixelStd+0x4c>
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	08 95       	ret

Disassembly of section .text.u8g_pb8v1_Set8PixelOpt2:

000001e8 <u8g_pb8v1_Set8PixelOpt2>:
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ff 92       	push	r15
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <u8g_pb8v1_Set8PixelOpt2+0x10>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	8c 01       	movw	r16, r24
 1fe:	6b 01       	movw	r12, r22
 200:	fb 01       	movw	r30, r22
 202:	f2 80       	ldd	r15, Z+2	; 0x02
 204:	83 81       	ldd	r24, Z+3	; 0x03
 206:	81 30       	cpi	r24, 0x01	; 1
 208:	01 f0       	breq	.+0      	; 0x20a <u8g_pb8v1_Set8PixelOpt2+0x22>
 20a:	00 f0       	brcs	.+0      	; 0x20c <u8g_pb8v1_Set8PixelOpt2+0x24>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	01 f0       	breq	.+0      	; 0x210 <u8g_pb8v1_Set8PixelOpt2+0x28>
 210:	83 30       	cpi	r24, 0x03	; 3
 212:	01 f0       	breq	.+0      	; 0x214 <u8g_pb8v1_Set8PixelOpt2+0x2c>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	00 c0       	rjmp	.+0      	; 0x218 <u8g_pb8v1_Set8PixelOpt2+0x30>
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	00 c0       	rjmp	.+0      	; 0x21e <u8g_pb8v1_Set8PixelOpt2+0x36>
 21e:	20 e0       	ldi	r18, 0x00	; 0
 220:	3f ef       	ldi	r19, 0xFF	; 255
 222:	00 c0       	rjmp	.+0      	; 0x224 <u8g_pb8v1_Set8PixelOpt2+0x3c>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	00 c0       	rjmp	.+0      	; 0x228 <u8g_pb8v1_Set8PixelOpt2+0x40>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	31 e0       	ldi	r19, 0x01	; 1
 22c:	f7 fe       	sbrs	r15, 7
 22e:	00 c0       	rjmp	.+0      	; 0x230 <u8g_pb8v1_Set8PixelOpt2+0x48>
 230:	b6 01       	movw	r22, r12
 232:	c8 01       	movw	r24, r16
 234:	29 83       	std	Y+1, r18	; 0x01
 236:	3a 83       	std	Y+2, r19	; 0x02
 238:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 23c:	3a 81       	ldd	r19, Y+2	; 0x02
 23e:	29 81       	ldd	r18, Y+1	; 0x01
 240:	f6 01       	movw	r30, r12
 242:	80 81       	ld	r24, Z
 244:	83 0f       	add	r24, r19
 246:	80 83       	st	Z, r24
 248:	81 81       	ldd	r24, Z+1	; 0x01
 24a:	82 0f       	add	r24, r18
 24c:	81 83       	std	Z+1, r24	; 0x01
 24e:	ff 0c       	add	r15, r15
 250:	01 f4       	brne	.+0      	; 0x252 <u8g_pb8v1_Set8PixelOpt2+0x6a>
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8v1_base_fn:

0000044e <u8g_dev_pb8v1_base_fn>:
 44e:	0f 93       	push	r16
 450:	1f 93       	push	r17
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	89 01       	movw	r16, r18
 458:	fb 01       	movw	r30, r22
 45a:	c2 81       	ldd	r28, Z+2	; 0x02
 45c:	d3 81       	ldd	r29, Z+3	; 0x03
 45e:	42 33       	cpi	r20, 0x32	; 50
 460:	01 f0       	breq	.+0      	; 0x462 <u8g_dev_pb8v1_base_fn+0x14>
 462:	00 f4       	brcc	.+0      	; 0x464 <u8g_dev_pb8v1_base_fn+0x16>
 464:	45 31       	cpi	r20, 0x15	; 21
 466:	01 f0       	breq	.+0      	; 0x468 <u8g_dev_pb8v1_base_fn+0x1a>
 468:	47 31       	cpi	r20, 0x17	; 23
 46a:	01 f0       	breq	.+0      	; 0x46c <u8g_dev_pb8v1_base_fn+0x1e>
 46c:	44 31       	cpi	r20, 0x14	; 20
 46e:	01 f4       	brne	.+0      	; 0x470 <u8g_dev_pb8v1_base_fn+0x22>
 470:	ce 01       	movw	r24, r28
 472:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 476:	ce 01       	movw	r24, r28
 478:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <u8g_dev_pb8v1_base_fn+0x30>
 47e:	46 34       	cpi	r20, 0x46	; 70
 480:	01 f0       	breq	.+0      	; 0x482 <u8g_dev_pb8v1_base_fn+0x34>
 482:	47 34       	cpi	r20, 0x47	; 71
 484:	01 f0       	breq	.+0      	; 0x486 <u8g_dev_pb8v1_base_fn+0x38>
 486:	4b 33       	cpi	r20, 0x3B	; 59
 488:	01 f4       	brne	.+0      	; 0x48a <u8g_dev_pb8v1_base_fn+0x3c>
 48a:	b9 01       	movw	r22, r18
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 492:	88 23       	and	r24, r24
 494:	01 f0       	breq	.+0      	; 0x496 <u8g_dev_pb8v1_base_fn+0x48>
 496:	b8 01       	movw	r22, r16
 498:	ce 01       	movw	r24, r28
 49a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <u8g_dev_pb8v1_base_fn+0x52>
 4a0:	b9 01       	movw	r22, r18
 4a2:	ce 01       	movw	r24, r28
 4a4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <u8g_dev_pb8v1_base_fn+0x5c>
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4b0:	88 23       	and	r24, r24
 4b2:	01 f0       	breq	.+0      	; 0x4b4 <u8g_dev_pb8v1_base_fn+0x66>
 4b4:	ce 01       	movw	r24, r28
 4b6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <u8g_dev_pb8v1_base_fn+0x6e>
 4bc:	b9 01       	movw	r22, r18
 4be:	ce 01       	movw	r24, r28
 4c0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <u8g_dev_pb8v1_base_fn+0x78>
 4c6:	8d 81       	ldd	r24, Y+5	; 0x05
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <u8g_dev_pb8v1_base_fn+0x7c>
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	f8 01       	movw	r30, r16
 4ce:	80 83       	st	Z, r24
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <u8g_dev_pb8v1_base_fn+0x86>
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

u8g_pb8v2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001765  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pb8v2_Init 0000000c  00000000  00000000  00002165  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pb8v2_set_pixel 0000003c  00000000  00000000  00002171  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pb8v2_SetPixel 0000002c  00000000  00000000  000021ad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pb8v2_Set8PixelStd 00000058  00000000  00000000  000021d9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_pb8v2_base_fn 0000009e  00000000  00000000  00002231  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .comment      00000022  00000000  00000000  000022cf  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pb8v2_Init:

00000000 <u8g_pb8v2_Init>:
}



uint8_t u8g_dev_pb8v2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	fc 01       	movw	r30, r24
   2:	77 83       	std	Z+7, r23	; 0x07
   4:	66 83       	std	Z+6, r22	; 0x06
   6:	45 83       	std	Z+5, r20	; 0x05
   8:	0c 94 00 00 	jmp	0	; 0x0 <u8g_pb8v2_Init>

Disassembly of section .text.u8g_pb8v2_set_pixel:

0000000c <u8g_pb8v2_set_pixel>:
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   c:	dc 01       	movw	r26, r24
   e:	16 96       	adiw	r26, 0x06	; 6
  switch(msg)
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	17 97       	sbiw	r26, 0x07	; 7
  16:	12 96       	adiw	r26, 0x02	; 2
  18:	8c 91       	ld	r24, X
  1a:	48 1b       	sub	r20, r24
  1c:	43 70       	andi	r20, 0x03	; 3
  1e:	44 0f       	add	r20, r20
  20:	83 e0       	ldi	r24, 0x03	; 3
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	04 2e       	mov	r0, r20
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_pb8v2_set_pixel+0x1c>
      u8g_page_First(&(pb->p));
  28:	88 0f       	add	r24, r24
  2a:	0a 94       	dec	r0
  2c:	02 f4       	brpl	.+0      	; 0x2e <u8g_pb8v2_set_pixel+0x22>
  2e:	23 70       	andi	r18, 0x03	; 3


uint8_t u8g_dev_pb8v2_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_pb8v2_set_pixel+0x26>
  32:	22 0f       	add	r18, r18
  34:	4a 95       	dec	r20
  36:	02 f4       	brpl	.+0      	; 0x38 <u8g_pb8v2_set_pixel+0x2c>
  38:	e6 0f       	add	r30, r22
  3a:	f1 1d       	adc	r31, r1
  3c:	80 95       	com	r24
  3e:	90 81       	ld	r25, Z
  40:	89 23       	and	r24, r25
  42:	28 2b       	or	r18, r24
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  44:	20 83       	st	Z, r18
  46:	08 95       	ret

Disassembly of section .text.u8g_pb8v2_SetPixel:

00000054 <u8g_pb8v2_SetPixel>:
  switch(msg)
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
      {
        u8g_pb8v2_Set8PixelStd(pb, (u8g_dev_arg_pixel_t *)arg);
  54:	fb 01       	movw	r30, r22
  56:	41 81       	ldd	r20, Z+1	; 0x01
  58:	dc 01       	movw	r26, r24
  5a:	12 96       	adiw	r26, 0x02	; 2
  5c:	2c 91       	ld	r18, X
      }
      break;
    case U8G_DEV_MSG_SET_PIXEL:
      u8g_pb8v2_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
  5e:	12 97       	sbiw	r26, 0x02	; 2
  60:	42 17       	cp	r20, r18
  62:	00 f0       	brcs	.+0      	; 0x64 <u8g_pb8v2_SetPixel+0x10>
  64:	13 96       	adiw	r26, 0x03	; 3
  66:	2c 91       	ld	r18, X
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  68:	13 97       	sbiw	r26, 0x03	; 3
  6a:	24 17       	cp	r18, r20
  6c:	00 f0       	brcs	.+0      	; 0x6e <u8g_pb8v2_SetPixel+0x1a>
  6e:	60 81       	ld	r22, Z
  70:	15 96       	adiw	r26, 0x05	; 5
        return 0;
      u8g_pb_Clear(pb);
  72:	2c 91       	ld	r18, X
  74:	62 17       	cp	r22, r18
  76:	00 f4       	brcc	.+0      	; 0x78 <u8g_pb8v2_SetPixel+0x24>
  78:	24 81       	ldd	r18, Z+4	; 0x04
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  7a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  7e:	08 95       	ret

Disassembly of section .text.u8g_pb8v2_Set8PixelStd:

000000d4 <u8g_pb8v2_Set8PixelStd>:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_GRAY2BIT;
  }
  return 1;
}
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	8c 01       	movw	r16, r24
  e0:	eb 01       	movw	r28, r22
  e2:	fa 80       	ldd	r15, Y+2	; 0x02
  e4:	f7 fe       	sbrs	r15, 7
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <u8g_pb8v2_Set8PixelStd+0x14>
  e8:	be 01       	movw	r22, r28
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  f0:	8b 81       	ldd	r24, Y+3	; 0x03
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	01 f0       	breq	.+0      	; 0xf6 <u8g_pb8v2_Set8PixelStd+0x22>
  f6:	00 f0       	brcs	.+0      	; 0xf8 <u8g_pb8v2_Set8PixelStd+0x24>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	01 f0       	breq	.+0      	; 0xfc <u8g_pb8v2_Set8PixelStd+0x28>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	01 f4       	brne	.+0      	; 0x100 <u8g_pb8v2_Set8PixelStd+0x2c>
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	81 50       	subi	r24, 0x01	; 1
 104:	00 c0       	rjmp	.+0      	; 0x106 <u8g_pb8v2_Set8PixelStd+0x32>
 106:	88 81       	ld	r24, Y
 108:	8f 5f       	subi	r24, 0xFF	; 255
 10a:	00 c0       	rjmp	.+0      	; 0x10c <u8g_pb8v2_Set8PixelStd+0x38>
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	00 c0       	rjmp	.+0      	; 0x112 <u8g_pb8v2_Set8PixelStd+0x3e>
 112:	88 81       	ld	r24, Y
 114:	81 50       	subi	r24, 0x01	; 1
 116:	88 83       	st	Y, r24
 118:	00 c0       	rjmp	.+0      	; 0x11a <u8g_pb8v2_Set8PixelStd+0x46>
 11a:	89 83       	std	Y+1, r24	; 0x01
 11c:	ff 0c       	add	r15, r15
 11e:	01 f4       	brne	.+0      	; 0x120 <u8g_pb8v2_Set8PixelStd+0x4c>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	ff 90       	pop	r15
 12a:	08 95       	ret

Disassembly of section .text.u8g_dev_pb8v2_base_fn:

00000200 <u8g_dev_pb8v2_base_fn>:
 200:	0f 93       	push	r16
 202:	1f 93       	push	r17
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	89 01       	movw	r16, r18
 20a:	fb 01       	movw	r30, r22
 20c:	c2 81       	ldd	r28, Z+2	; 0x02
 20e:	d3 81       	ldd	r29, Z+3	; 0x03
 210:	42 33       	cpi	r20, 0x32	; 50
 212:	01 f0       	breq	.+0      	; 0x214 <u8g_dev_pb8v2_base_fn+0x14>
 214:	00 f4       	brcc	.+0      	; 0x216 <u8g_dev_pb8v2_base_fn+0x16>
 216:	45 31       	cpi	r20, 0x15	; 21
 218:	01 f0       	breq	.+0      	; 0x21a <u8g_dev_pb8v2_base_fn+0x1a>
 21a:	47 31       	cpi	r20, 0x17	; 23
 21c:	01 f0       	breq	.+0      	; 0x21e <u8g_dev_pb8v2_base_fn+0x1e>
 21e:	44 31       	cpi	r20, 0x14	; 20
 220:	01 f4       	brne	.+0      	; 0x222 <u8g_dev_pb8v2_base_fn+0x22>
 222:	ce 01       	movw	r24, r28
 224:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 228:	ce 01       	movw	r24, r28
 22a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <u8g_dev_pb8v2_base_fn+0x30>
 230:	46 34       	cpi	r20, 0x46	; 70
 232:	01 f0       	breq	.+0      	; 0x234 <u8g_dev_pb8v2_base_fn+0x34>
 234:	00 f4       	brcc	.+0      	; 0x236 <u8g_dev_pb8v2_base_fn+0x36>
 236:	4b 33       	cpi	r20, 0x3B	; 59
 238:	01 f0       	breq	.+0      	; 0x23a <u8g_dev_pb8v2_base_fn+0x3a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <u8g_dev_pb8v2_base_fn+0x3c>
 23c:	47 34       	cpi	r20, 0x47	; 71
 23e:	01 f0       	breq	.+0      	; 0x240 <u8g_dev_pb8v2_base_fn+0x40>
 240:	48 34       	cpi	r20, 0x48	; 72
 242:	01 f4       	brne	.+0      	; 0x244 <u8g_dev_pb8v2_base_fn+0x44>
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	00 c0       	rjmp	.+0      	; 0x248 <u8g_dev_pb8v2_base_fn+0x48>
 248:	b9 01       	movw	r22, r18
 24a:	ce 01       	movw	r24, r28
 24c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 250:	88 23       	and	r24, r24
 252:	01 f0       	breq	.+0      	; 0x254 <u8g_dev_pb8v2_base_fn+0x54>
 254:	b8 01       	movw	r22, r16
 256:	ce 01       	movw	r24, r28
 258:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <u8g_dev_pb8v2_base_fn+0x5e>
 25e:	b9 01       	movw	r22, r18
 260:	ce 01       	movw	r24, r28
 262:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 266:	00 c0       	rjmp	.+0      	; 0x268 <u8g_dev_pb8v2_base_fn+0x68>
 268:	ce 01       	movw	r24, r28
 26a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 26e:	88 23       	and	r24, r24
 270:	01 f0       	breq	.+0      	; 0x272 <u8g_dev_pb8v2_base_fn+0x72>
 272:	ce 01       	movw	r24, r28
 274:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 278:	00 c0       	rjmp	.+0      	; 0x27a <u8g_dev_pb8v2_base_fn+0x7a>
 27a:	b9 01       	movw	r22, r18
 27c:	ce 01       	movw	r24, r28
 27e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 282:	00 c0       	rjmp	.+0      	; 0x284 <u8g_dev_pb8v2_base_fn+0x84>
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	00 c0       	rjmp	.+0      	; 0x288 <u8g_dev_pb8v2_base_fn+0x88>
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	f8 01       	movw	r30, r16
 28c:	80 83       	st	Z, r24
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	00 c0       	rjmp	.+0      	; 0x292 <u8g_dev_pb8v2_base_fn+0x92>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

u8g_pbxh16.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a2c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000175e  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pbxh16_Clear 0000003c  00000000  00000000  000021be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pbxh16_Init 0000000c  00000000  00000000  000021fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pbxh16_SetPixel 0000004a  00000000  00000000  00002206  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pbxh16_Set8Pixel 0000007e  00000000  00000000  00002250  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_dev_pbxh16_base_fn 0000009e  00000000  00000000  000022ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .comment      00000022  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pbxh16_Clear:

00000000 <u8g_pbxh16_Clear>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pbxh16_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	2c 91       	ld	r18, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	4c 91       	ld	r20, X
  12:	41 50       	subi	r20, 0x01	; 1
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	4f 5f       	subi	r20, 0xFF	; 255
  18:	5f 4f       	sbci	r21, 0xFF	; 255
  1a:	30 e0       	ldi	r19, 0x00	; 0
  1c:	22 0f       	add	r18, r18
  1e:	33 1f       	adc	r19, r19
  20:	42 9f       	mul	r20, r18
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pbxh16_Clear(pb);
  22:	c0 01       	movw	r24, r0
  24:	43 9f       	mul	r20, r19
  26:	90 0d       	add	r25, r0
      u8g_page_First(&(pb->p));
  28:	52 9f       	mul	r21, r18
  2a:	90 0d       	add	r25, r0
  2c:	11 24       	eor	r1, r1
  2e:	8e 0f       	add	r24, r30


uint8_t u8g_dev_pbxh16_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	9f 1f       	adc	r25, r31
  32:	11 92       	st	Z+, r1
  34:	e8 17       	cp	r30, r24
  36:	f9 07       	cpc	r31, r25
  38:	01 f4       	brne	.+0      	; 0x3a <u8g_pbxh16_Clear+0x3a>
  3a:	08 95       	ret

Disassembly of section .text.u8g_pbxh16_Init:

0000003c <u8g_pbxh16_Init>:
  3c:	fc 01       	movw	r30, r24
  3e:	77 83       	std	Z+7, r23	; 0x07
  40:	66 83       	std	Z+6, r22	; 0x06
  42:	45 83       	std	Z+5, r20	; 0x05
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_HICOLOR;
  44:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pbxh16_SetPixel:

00000084 <u8g_pbxh16_SetPixel>:
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  84:	fc 01       	movw	r30, r24
  86:	db 01       	movw	r26, r22
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  88:	11 96       	adiw	r26, 0x01	; 1
  8a:	9c 91       	ld	r25, X
  8c:	11 97       	sbiw	r26, 0x01	; 1
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_HICOLOR;
  }
  return 1;
  8e:	32 81       	ldd	r19, Z+2	; 0x02
  90:	93 17       	cp	r25, r19
      u8g_pbxh16_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  92:	00 f0       	brcs	.+0      	; 0x94 <u8g_pbxh16_SetPixel+0x10>
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_HICOLOR;
  }
  return 1;
}
  94:	83 81       	ldd	r24, Z+3	; 0x03
  96:	89 17       	cp	r24, r25
  98:	00 f0       	brcs	.+0      	; 0x9a <u8g_pbxh16_SetPixel+0x16>
  9a:	8c 91       	ld	r24, X
  9c:	25 81       	ldd	r18, Z+5	; 0x05
  9e:	82 17       	cp	r24, r18
  a0:	00 f4       	brcc	.+0      	; 0xa2 <u8g_pbxh16_SetPixel+0x1e>
  a2:	15 96       	adiw	r26, 0x05	; 5
  a4:	4c 91       	ld	r20, X
  a6:	15 97       	sbiw	r26, 0x05	; 5
  a8:	14 96       	adiw	r26, 0x04	; 4
  aa:	5c 91       	ld	r21, X
  ac:	06 80       	ldd	r0, Z+6	; 0x06
  ae:	f7 81       	ldd	r31, Z+7	; 0x07
  b0:	e0 2d       	mov	r30, r0
  b2:	93 1b       	sub	r25, r19
  b4:	39 2f       	mov	r19, r25
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	32 9f       	mul	r19, r18
  ba:	80 0d       	add	r24, r0
  bc:	91 1d       	adc	r25, r1
  be:	11 24       	eor	r1, r1
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	e8 0f       	add	r30, r24
  c6:	f9 1f       	adc	r31, r25
  c8:	50 83       	st	Z, r21
  ca:	41 83       	std	Z+1, r20	; 0x01
  cc:	08 95       	ret

Disassembly of section .text.u8g_pbxh16_Set8Pixel:

00000152 <u8g_pbxh16_Set8Pixel>:
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <u8g_pbxh16_Set8Pixel+0x10>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8c 01       	movw	r16, r24
 168:	6b 01       	movw	r12, r22
 16a:	fb 01       	movw	r30, r22
 16c:	f2 80       	ldd	r15, Z+2	; 0x02
 16e:	83 81       	ldd	r24, Z+3	; 0x03
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	01 f0       	breq	.+0      	; 0x174 <u8g_pbxh16_Set8Pixel+0x22>
 174:	00 f0       	brcs	.+0      	; 0x176 <u8g_pbxh16_Set8Pixel+0x24>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	01 f0       	breq	.+0      	; 0x17a <u8g_pbxh16_Set8Pixel+0x28>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	01 f0       	breq	.+0      	; 0x17e <u8g_pbxh16_Set8Pixel+0x2c>
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	00 c0       	rjmp	.+0      	; 0x182 <u8g_pbxh16_Set8Pixel+0x30>
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	00 c0       	rjmp	.+0      	; 0x188 <u8g_pbxh16_Set8Pixel+0x36>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	3f ef       	ldi	r19, 0xFF	; 255
 18c:	00 c0       	rjmp	.+0      	; 0x18e <u8g_pbxh16_Set8Pixel+0x3c>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	00 c0       	rjmp	.+0      	; 0x192 <u8g_pbxh16_Set8Pixel+0x40>
 192:	20 e0       	ldi	r18, 0x00	; 0
 194:	31 e0       	ldi	r19, 0x01	; 1
 196:	f7 fe       	sbrs	r15, 7
 198:	00 c0       	rjmp	.+0      	; 0x19a <u8g_pbxh16_Set8Pixel+0x48>
 19a:	b6 01       	movw	r22, r12
 19c:	c8 01       	movw	r24, r16
 19e:	29 83       	std	Y+1, r18	; 0x01
 1a0:	3a 83       	std	Y+2, r19	; 0x02
 1a2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1a6:	3a 81       	ldd	r19, Y+2	; 0x02
 1a8:	29 81       	ldd	r18, Y+1	; 0x01
 1aa:	f6 01       	movw	r30, r12
 1ac:	80 81       	ld	r24, Z
 1ae:	83 0f       	add	r24, r19
 1b0:	80 83       	st	Z, r24
 1b2:	81 81       	ldd	r24, Z+1	; 0x01
 1b4:	82 0f       	add	r24, r18
 1b6:	81 83       	std	Z+1, r24	; 0x01
 1b8:	ff 0c       	add	r15, r15
 1ba:	01 f4       	brne	.+0      	; 0x1bc <u8g_pbxh16_Set8Pixel+0x6a>
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	ff 90       	pop	r15
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	08 95       	ret

Disassembly of section .text.u8g_dev_pbxh16_base_fn:

00000322 <u8g_dev_pbxh16_base_fn>:
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	89 01       	movw	r16, r18
 32c:	fb 01       	movw	r30, r22
 32e:	c2 81       	ldd	r28, Z+2	; 0x02
 330:	d3 81       	ldd	r29, Z+3	; 0x03
 332:	42 33       	cpi	r20, 0x32	; 50
 334:	01 f0       	breq	.+0      	; 0x336 <u8g_dev_pbxh16_base_fn+0x14>
 336:	00 f4       	brcc	.+0      	; 0x338 <u8g_dev_pbxh16_base_fn+0x16>
 338:	45 31       	cpi	r20, 0x15	; 21
 33a:	01 f0       	breq	.+0      	; 0x33c <u8g_dev_pbxh16_base_fn+0x1a>
 33c:	47 31       	cpi	r20, 0x17	; 23
 33e:	01 f0       	breq	.+0      	; 0x340 <u8g_dev_pbxh16_base_fn+0x1e>
 340:	44 31       	cpi	r20, 0x14	; 20
 342:	01 f4       	brne	.+0      	; 0x344 <u8g_dev_pbxh16_base_fn+0x22>
 344:	ce 01       	movw	r24, r28
 346:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 34a:	ce 01       	movw	r24, r28
 34c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 350:	00 c0       	rjmp	.+0      	; 0x352 <u8g_dev_pbxh16_base_fn+0x30>
 352:	46 34       	cpi	r20, 0x46	; 70
 354:	01 f0       	breq	.+0      	; 0x356 <u8g_dev_pbxh16_base_fn+0x34>
 356:	00 f4       	brcc	.+0      	; 0x358 <u8g_dev_pbxh16_base_fn+0x36>
 358:	4b 33       	cpi	r20, 0x3B	; 59
 35a:	01 f0       	breq	.+0      	; 0x35c <u8g_dev_pbxh16_base_fn+0x3a>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <u8g_dev_pbxh16_base_fn+0x3c>
 35e:	47 34       	cpi	r20, 0x47	; 71
 360:	01 f0       	breq	.+0      	; 0x362 <u8g_dev_pbxh16_base_fn+0x40>
 362:	48 34       	cpi	r20, 0x48	; 72
 364:	01 f4       	brne	.+0      	; 0x366 <u8g_dev_pbxh16_base_fn+0x44>
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	00 c0       	rjmp	.+0      	; 0x36a <u8g_dev_pbxh16_base_fn+0x48>
 36a:	b9 01       	movw	r22, r18
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 372:	88 23       	and	r24, r24
 374:	01 f0       	breq	.+0      	; 0x376 <u8g_dev_pbxh16_base_fn+0x54>
 376:	b8 01       	movw	r22, r16
 378:	ce 01       	movw	r24, r28
 37a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <u8g_dev_pbxh16_base_fn+0x5e>
 380:	b9 01       	movw	r22, r18
 382:	ce 01       	movw	r24, r28
 384:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 388:	00 c0       	rjmp	.+0      	; 0x38a <u8g_dev_pbxh16_base_fn+0x68>
 38a:	ce 01       	movw	r24, r28
 38c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 390:	88 23       	and	r24, r24
 392:	01 f0       	breq	.+0      	; 0x394 <u8g_dev_pbxh16_base_fn+0x72>
 394:	ce 01       	movw	r24, r28
 396:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <u8g_dev_pbxh16_base_fn+0x7a>
 39c:	b9 01       	movw	r22, r18
 39e:	ce 01       	movw	r24, r28
 3a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <u8g_dev_pbxh16_base_fn+0x84>
 3a6:	8d 81       	ldd	r24, Y+5	; 0x05
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <u8g_dev_pbxh16_base_fn+0x88>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	f8 01       	movw	r30, r16
 3ae:	80 83       	st	Z, r24
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <u8g_dev_pbxh16_base_fn+0x92>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	1f 91       	pop	r17
 3bc:	0f 91       	pop	r16
 3be:	08 95       	ret

u8g_pbxh24.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000c90  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017f1  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_pbxh24_Clear 0000003e  00000000  00000000  000024b5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_pbxh24_Init 0000000c  00000000  00000000  000024f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_pbxh24_SetTPixel 000000e6  00000000  00000000  000024ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_pbxh24_Set8Pixel 00000080  00000000  00000000  000025e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_pbxh24_Set4TPixel 00000086  00000000  00000000  00002665  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_dev_pbxh24_base_fn 000000c0  00000000  00000000  000026eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .comment      00000022  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_pbxh24_Clear:

00000000 <u8g_pbxh24_Clear>:
  } while( pixel != 0  );  
}


uint8_t u8g_dev_pbxh24_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
   0:	dc 01       	movw	r26, r24
   2:	15 96       	adiw	r26, 0x05	; 5
   4:	4c 91       	ld	r20, X
   6:	15 97       	sbiw	r26, 0x05	; 5
   8:	16 96       	adiw	r26, 0x06	; 6
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
   a:	ed 91       	ld	r30, X+
   c:	fc 91       	ld	r31, X
   e:	17 97       	sbiw	r26, 0x07	; 7
  switch(msg)
  10:	2c 91       	ld	r18, X
  12:	21 50       	subi	r18, 0x01	; 1
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	2f 5f       	subi	r18, 0xFF	; 255
  18:	3f 4f       	sbci	r19, 0xFF	; 255
  1a:	83 e0       	ldi	r24, 0x03	; 3
  1c:	48 9f       	mul	r20, r24
  1e:	a0 01       	movw	r20, r0
  20:	11 24       	eor	r1, r1
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pbxh24_Clear(pb);
  22:	24 9f       	mul	r18, r20
  24:	c0 01       	movw	r24, r0
  26:	25 9f       	mul	r18, r21
      u8g_page_First(&(pb->p));
  28:	90 0d       	add	r25, r0
  2a:	34 9f       	mul	r19, r20
  2c:	90 0d       	add	r25, r0
  2e:	11 24       	eor	r1, r1


uint8_t u8g_dev_pbxh24_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  30:	8e 0f       	add	r24, r30
  32:	9f 1f       	adc	r25, r31
  34:	11 92       	st	Z+, r1
  36:	e8 17       	cp	r30, r24
      break;
    case U8G_DEV_MSG_SET_4TPIXEL:
      u8g_pbxh24_Set4TPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_TPIXEL:
      u8g_pbxh24_SetTPixel(pb, (u8g_dev_arg_pixel_t *)arg, ((u8g_dev_arg_pixel_t *)arg)->pixel&3);
  38:	f9 07       	cpc	r31, r25
  3a:	01 f4       	brne	.+0      	; 0x3c <u8g_pbxh24_Clear+0x3c>
  3c:	08 95       	ret

Disassembly of section .text.u8g_pbxh24_Init:

0000003e <u8g_pbxh24_Init>:
  3e:	fc 01       	movw	r30, r24


uint8_t u8g_dev_pbxh24_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
  40:	77 83       	std	Z+7, r23	; 0x07
  42:	66 83       	std	Z+6, r22	; 0x06
  44:	45 83       	std	Z+5, r20	; 0x05
  46:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_pbxh24_SetTPixel:

00000088 <u8g_pbxh24_SetTPixel>:
      break;
    case U8G_DEV_MSG_SET_4TPIXEL:
      u8g_pbxh24_Set4TPixel(pb, (u8g_dev_arg_pixel_t *)arg);
      break;
    case U8G_DEV_MSG_SET_TPIXEL:
      u8g_pbxh24_SetTPixel(pb, (u8g_dev_arg_pixel_t *)arg, ((u8g_dev_arg_pixel_t *)arg)->pixel&3);
  88:	cf 93       	push	r28
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pbxh24_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
  8a:	df 93       	push	r29
  8c:	dc 01       	movw	r26, r24
  8e:	fb 01       	movw	r30, r22
  90:	91 81       	ldd	r25, Z+1	; 0x01
  92:	12 96       	adiw	r26, 0x02	; 2
        return 0;
      u8g_pbxh24_Clear(pb);
  94:	dc 91       	ld	r29, X
  96:	12 97       	sbiw	r26, 0x02	; 2
  98:	9d 17       	cp	r25, r29
  9a:	00 f4       	brcc	.+0      	; 0x9c <u8g_pbxh24_SetTPixel+0x14>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
  9c:	00 c0       	rjmp	.+0      	; 0x9e <u8g_pbxh24_SetTPixel+0x16>
  9e:	13 96       	adiw	r26, 0x03	; 3
  a0:	8c 91       	ld	r24, X
  a2:	13 97       	sbiw	r26, 0x03	; 3
  a4:	89 17       	cp	r24, r25
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
  a6:	00 f4       	brcc	.+0      	; 0xa8 <u8g_pbxh24_SetTPixel+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <u8g_pbxh24_SetTPixel+0x22>
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
  aa:	80 81       	ld	r24, Z
  ac:	15 96       	adiw	r26, 0x05	; 5
  ae:	cc 91       	ld	r28, X
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_TRUECOLOR;
  }
  return 1;
  b0:	15 97       	sbiw	r26, 0x05	; 5
  b2:	8c 17       	cp	r24, r28
      u8g_pbxh24_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
        return 0;
  b4:	00 f0       	brcs	.+0      	; 0xb6 <u8g_pbxh24_SetTPixel+0x2e>
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_TRUECOLOR;
  }
  return 1;
}
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <u8g_pbxh24_SetTPixel+0x30>
  b8:	56 81       	ldd	r21, Z+6	; 0x06
  ba:	65 81       	ldd	r22, Z+5	; 0x05
  bc:	74 81       	ldd	r23, Z+4	; 0x04
  be:	16 96       	adiw	r26, 0x06	; 6
  c0:	2d 91       	ld	r18, X+
  c2:	3c 91       	ld	r19, X
  c4:	17 97       	sbiw	r26, 0x07	; 7
  c6:	44 23       	and	r20, r20
  c8:	01 f4       	brne	.+0      	; 0xca <u8g_pbxh24_SetTPixel+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <u8g_pbxh24_SetTPixel+0x44>
  cc:	e9 2f       	mov	r30, r25
  ce:	ed 1b       	sub	r30, r29
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	ec 9f       	mul	r30, r28
  d4:	80 0d       	add	r24, r0
  d6:	91 1d       	adc	r25, r1
  d8:	11 24       	eor	r1, r1
  da:	fc 01       	movw	r30, r24
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e8 0f       	add	r30, r24
  e2:	f9 1f       	adc	r31, r25
  e4:	e2 0f       	add	r30, r18
  e6:	f3 1f       	adc	r31, r19
  e8:	44 30       	cpi	r20, 0x04	; 4
  ea:	01 f4       	brne	.+0      	; 0xec <u8g_pbxh24_SetTPixel+0x64>
  ec:	70 83       	st	Z, r23
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <u8g_pbxh24_SetTPixel+0x6a>
  f2:	42 30       	cpi	r20, 0x02	; 2
  f4:	01 f4       	brne	.+0      	; 0xf6 <u8g_pbxh24_SetTPixel+0x6e>
  f6:	76 95       	lsr	r23
  f8:	66 95       	lsr	r22
  fa:	56 95       	lsr	r21
  fc:	00 c0       	rjmp	.+0      	; 0xfe <u8g_pbxh24_SetTPixel+0x76>
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	01 f4       	brne	.+0      	; 0x102 <u8g_pbxh24_SetTPixel+0x7a>
 102:	76 95       	lsr	r23
 104:	76 95       	lsr	r23
 106:	66 95       	lsr	r22
 108:	66 95       	lsr	r22
 10a:	56 95       	lsr	r21
 10c:	56 95       	lsr	r21
 10e:	40 81       	ld	r20, Z
 110:	24 2f       	mov	r18, r20
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	87 1b       	sub	r24, r23
 11a:	91 09       	sbc	r25, r1
 11c:	28 17       	cp	r18, r24
 11e:	39 07       	cpc	r19, r25
 120:	04 f0       	brlt	.+0      	; 0x122 <u8g_pbxh24_SetTPixel+0x9a>
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	80 83       	st	Z, r24
 126:	00 c0       	rjmp	.+0      	; 0x128 <u8g_pbxh24_SetTPixel+0xa0>
 128:	74 0f       	add	r23, r20
 12a:	70 83       	st	Z, r23
 12c:	41 81       	ldd	r20, Z+1	; 0x01
 12e:	24 2f       	mov	r18, r20
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	86 1b       	sub	r24, r22
 138:	91 09       	sbc	r25, r1
 13a:	28 17       	cp	r18, r24
 13c:	39 07       	cpc	r19, r25
 13e:	04 f0       	brlt	.+0      	; 0x140 <u8g_pbxh24_SetTPixel+0xb8>
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	81 83       	std	Z+1, r24	; 0x01
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_pbxh24_SetTPixel+0xbe>
 146:	64 0f       	add	r22, r20
 148:	61 83       	std	Z+1, r22	; 0x01
 14a:	42 81       	ldd	r20, Z+2	; 0x02
 14c:	24 2f       	mov	r18, r20
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	85 1b       	sub	r24, r21
 156:	91 09       	sbc	r25, r1
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	04 f0       	brlt	.+0      	; 0x15e <u8g_pbxh24_SetTPixel+0xd6>
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	82 83       	std	Z+2, r24	; 0x02
 162:	00 c0       	rjmp	.+0      	; 0x164 <u8g_pbxh24_SetTPixel+0xdc>
 164:	54 0f       	add	r21, r20
 166:	52 83       	std	Z+2, r21	; 0x02
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

Disassembly of section .text.u8g_pbxh24_Set8Pixel:

000001f6 <u8g_pbxh24_Set8Pixel>:
 1f6:	cf 92       	push	r12
 1f8:	df 92       	push	r13
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	00 d0       	rcall	.+0      	; 0x206 <u8g_pbxh24_Set8Pixel+0x10>
 206:	cd b7       	in	r28, 0x3d	; 61
 208:	de b7       	in	r29, 0x3e	; 62
 20a:	8c 01       	movw	r16, r24
 20c:	6b 01       	movw	r12, r22
 20e:	fb 01       	movw	r30, r22
 210:	f2 80       	ldd	r15, Z+2	; 0x02
 212:	83 81       	ldd	r24, Z+3	; 0x03
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	01 f0       	breq	.+0      	; 0x218 <u8g_pbxh24_Set8Pixel+0x22>
 218:	00 f0       	brcs	.+0      	; 0x21a <u8g_pbxh24_Set8Pixel+0x24>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	01 f0       	breq	.+0      	; 0x21e <u8g_pbxh24_Set8Pixel+0x28>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	01 f0       	breq	.+0      	; 0x222 <u8g_pbxh24_Set8Pixel+0x2c>
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	00 c0       	rjmp	.+0      	; 0x226 <u8g_pbxh24_Set8Pixel+0x30>
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	00 c0       	rjmp	.+0      	; 0x22c <u8g_pbxh24_Set8Pixel+0x36>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	3f ef       	ldi	r19, 0xFF	; 255
 230:	00 c0       	rjmp	.+0      	; 0x232 <u8g_pbxh24_Set8Pixel+0x3c>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	00 c0       	rjmp	.+0      	; 0x236 <u8g_pbxh24_Set8Pixel+0x40>
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	31 e0       	ldi	r19, 0x01	; 1
 23a:	f7 fe       	sbrs	r15, 7
 23c:	00 c0       	rjmp	.+0      	; 0x23e <u8g_pbxh24_Set8Pixel+0x48>
 23e:	44 e0       	ldi	r20, 0x04	; 4
 240:	b6 01       	movw	r22, r12
 242:	c8 01       	movw	r24, r16
 244:	29 83       	std	Y+1, r18	; 0x01
 246:	3a 83       	std	Y+2, r19	; 0x02
 248:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 24c:	3a 81       	ldd	r19, Y+2	; 0x02
 24e:	29 81       	ldd	r18, Y+1	; 0x01
 250:	f6 01       	movw	r30, r12
 252:	80 81       	ld	r24, Z
 254:	83 0f       	add	r24, r19
 256:	80 83       	st	Z, r24
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	82 0f       	add	r24, r18
 25c:	81 83       	std	Z+1, r24	; 0x01
 25e:	ff 0c       	add	r15, r15
 260:	01 f4       	brne	.+0      	; 0x262 <u8g_pbxh24_Set8Pixel+0x6c>
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	08 95       	ret

Disassembly of section .text.u8g_pbxh24_Set4TPixel:

0000046c <u8g_pbxh24_Set4TPixel>:
 46c:	cf 92       	push	r12
 46e:	df 92       	push	r13
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <u8g_pbxh24_Set4TPixel+0x10>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	8c 01       	movw	r16, r24
 482:	6b 01       	movw	r12, r22
 484:	fb 01       	movw	r30, r22
 486:	f2 80       	ldd	r15, Z+2	; 0x02
 488:	83 81       	ldd	r24, Z+3	; 0x03
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	01 f0       	breq	.+0      	; 0x48e <u8g_pbxh24_Set4TPixel+0x22>
 48e:	00 f0       	brcs	.+0      	; 0x490 <u8g_pbxh24_Set4TPixel+0x24>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	01 f0       	breq	.+0      	; 0x494 <u8g_pbxh24_Set4TPixel+0x28>
 494:	83 30       	cpi	r24, 0x03	; 3
 496:	01 f0       	breq	.+0      	; 0x498 <u8g_pbxh24_Set4TPixel+0x2c>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	00 c0       	rjmp	.+0      	; 0x49c <u8g_pbxh24_Set4TPixel+0x30>
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <u8g_pbxh24_Set4TPixel+0x36>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	3f ef       	ldi	r19, 0xFF	; 255
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <u8g_pbxh24_Set4TPixel+0x3c>
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <u8g_pbxh24_Set4TPixel+0x40>
 4ac:	20 e0       	ldi	r18, 0x00	; 0
 4ae:	31 e0       	ldi	r19, 0x01	; 1
 4b0:	4f 2d       	mov	r20, r15
 4b2:	42 95       	swap	r20
 4b4:	46 95       	lsr	r20
 4b6:	46 95       	lsr	r20
 4b8:	43 70       	andi	r20, 0x03	; 3
 4ba:	b6 01       	movw	r22, r12
 4bc:	c8 01       	movw	r24, r16
 4be:	29 83       	std	Y+1, r18	; 0x01
 4c0:	3a 83       	std	Y+2, r19	; 0x02
 4c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 4c6:	f6 01       	movw	r30, r12
 4c8:	80 81       	ld	r24, Z
 4ca:	3a 81       	ldd	r19, Y+2	; 0x02
 4cc:	83 0f       	add	r24, r19
 4ce:	80 83       	st	Z, r24
 4d0:	81 81       	ldd	r24, Z+1	; 0x01
 4d2:	29 81       	ldd	r18, Y+1	; 0x01
 4d4:	82 0f       	add	r24, r18
 4d6:	81 83       	std	Z+1, r24	; 0x01
 4d8:	ff 0c       	add	r15, r15
 4da:	ff 0c       	add	r15, r15
 4dc:	01 f4       	brne	.+0      	; 0x4de <u8g_pbxh24_Set4TPixel+0x72>
 4de:	0f 90       	pop	r0
 4e0:	0f 90       	pop	r0
 4e2:	df 91       	pop	r29
 4e4:	cf 91       	pop	r28
 4e6:	1f 91       	pop	r17
 4e8:	0f 91       	pop	r16
 4ea:	ff 90       	pop	r15
 4ec:	df 90       	pop	r13
 4ee:	cf 90       	pop	r12
 4f0:	08 95       	ret

Disassembly of section .text.u8g_dev_pbxh24_base_fn:

0000095e <u8g_dev_pbxh24_base_fn>:
 95e:	0f 93       	push	r16
 960:	1f 93       	push	r17
 962:	cf 93       	push	r28
 964:	df 93       	push	r29
 966:	89 01       	movw	r16, r18
 968:	fb 01       	movw	r30, r22
 96a:	c2 81       	ldd	r28, Z+2	; 0x02
 96c:	d3 81       	ldd	r29, Z+3	; 0x03
 96e:	4d 32       	cpi	r20, 0x2D	; 45
 970:	01 f0       	breq	.+0      	; 0x972 <u8g_dev_pbxh24_base_fn+0x14>
 972:	00 f4       	brcc	.+0      	; 0x974 <u8g_dev_pbxh24_base_fn+0x16>
 974:	45 31       	cpi	r20, 0x15	; 21
 976:	01 f0       	breq	.+0      	; 0x978 <u8g_dev_pbxh24_base_fn+0x1a>
 978:	00 f4       	brcc	.+0      	; 0x97a <u8g_dev_pbxh24_base_fn+0x1c>
 97a:	44 31       	cpi	r20, 0x14	; 20
 97c:	01 f0       	breq	.+0      	; 0x97e <u8g_dev_pbxh24_base_fn+0x20>
 97e:	00 c0       	rjmp	.+0      	; 0x980 <u8g_dev_pbxh24_base_fn+0x22>
 980:	ce 01       	movw	r24, r28
 982:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 986:	ce 01       	movw	r24, r28
 988:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 98c:	00 c0       	rjmp	.+0      	; 0x98e <u8g_dev_pbxh24_base_fn+0x30>
 98e:	47 31       	cpi	r20, 0x17	; 23
 990:	01 f0       	breq	.+0      	; 0x992 <u8g_dev_pbxh24_base_fn+0x34>
 992:	4c 32       	cpi	r20, 0x2C	; 44
 994:	01 f4       	brne	.+0      	; 0x996 <u8g_dev_pbxh24_base_fn+0x38>
 996:	f9 01       	movw	r30, r18
 998:	42 81       	ldd	r20, Z+2	; 0x02
 99a:	43 70       	andi	r20, 0x03	; 3
 99c:	00 c0       	rjmp	.+0      	; 0x99e <u8g_dev_pbxh24_base_fn+0x40>
 99e:	46 34       	cpi	r20, 0x46	; 70
 9a0:	01 f0       	breq	.+0      	; 0x9a2 <u8g_dev_pbxh24_base_fn+0x44>
 9a2:	00 f4       	brcc	.+0      	; 0x9a4 <u8g_dev_pbxh24_base_fn+0x46>
 9a4:	42 33       	cpi	r20, 0x32	; 50
 9a6:	01 f0       	breq	.+0      	; 0x9a8 <u8g_dev_pbxh24_base_fn+0x4a>
 9a8:	4b 33       	cpi	r20, 0x3B	; 59
 9aa:	01 f0       	breq	.+0      	; 0x9ac <u8g_dev_pbxh24_base_fn+0x4e>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <u8g_dev_pbxh24_base_fn+0x50>
 9ae:	47 34       	cpi	r20, 0x47	; 71
 9b0:	01 f0       	breq	.+0      	; 0x9b2 <u8g_dev_pbxh24_base_fn+0x54>
 9b2:	48 34       	cpi	r20, 0x48	; 72
 9b4:	01 f4       	brne	.+0      	; 0x9b6 <u8g_dev_pbxh24_base_fn+0x58>
 9b6:	88 e3       	ldi	r24, 0x38	; 56
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <u8g_dev_pbxh24_base_fn+0x5c>
 9ba:	b9 01       	movw	r22, r18
 9bc:	ce 01       	movw	r24, r28
 9be:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9c2:	88 23       	and	r24, r24
 9c4:	01 f0       	breq	.+0      	; 0x9c6 <u8g_dev_pbxh24_base_fn+0x68>
 9c6:	b8 01       	movw	r22, r16
 9c8:	ce 01       	movw	r24, r28
 9ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <u8g_dev_pbxh24_base_fn+0x72>
 9d0:	44 e0       	ldi	r20, 0x04	; 4
 9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <u8g_dev_pbxh24_base_fn+0x76>
 9d4:	b9 01       	movw	r22, r18
 9d6:	ce 01       	movw	r24, r28
 9d8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <u8g_dev_pbxh24_base_fn+0x80>
 9de:	b8 01       	movw	r22, r16
 9e0:	ce 01       	movw	r24, r28
 9e2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <u8g_dev_pbxh24_base_fn+0x8a>
 9e8:	ce 01       	movw	r24, r28
 9ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9ee:	88 23       	and	r24, r24
 9f0:	01 f0       	breq	.+0      	; 0x9f2 <u8g_dev_pbxh24_base_fn+0x94>
 9f2:	ce 01       	movw	r24, r28
 9f4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 9f8:	00 c0       	rjmp	.+0      	; 0x9fa <u8g_dev_pbxh24_base_fn+0x9c>
 9fa:	b9 01       	movw	r22, r18
 9fc:	ce 01       	movw	r24, r28
 9fe:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 a02:	00 c0       	rjmp	.+0      	; 0xa04 <u8g_dev_pbxh24_base_fn+0xa6>
 a04:	8d 81       	ldd	r24, Y+5	; 0x05
 a06:	00 c0       	rjmp	.+0      	; 0xa08 <u8g_dev_pbxh24_base_fn+0xaa>
 a08:	89 81       	ldd	r24, Y+1	; 0x01
 a0a:	f8 01       	movw	r30, r16
 a0c:	80 83       	st	Z, r24
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	00 c0       	rjmp	.+0      	; 0xa12 <u8g_dev_pbxh24_base_fn+0xb4>
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	1f 91       	pop	r17
 a1a:	0f 91       	pop	r16
 a1c:	08 95       	ret

u8g_polygon.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000edc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000018a3  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pge_Next 0000005e  00000000  00000000  000027b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pg_inc  00000010  00000000  00000000  00002811  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.pg_dec  00000012  00000000  00000000  00002821  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.pg_expand_min_y 0000006a  00000000  00000000  00002833  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.pg_line_init 000000c8  00000000  00000000  0000289d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.pg_ClearPolygonXY 00000006  00000000  00000000  00002965  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.pg_AddPolygonXY 00000022  00000000  00000000  0000296b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.pg_DrawPolygon 000001c6  00000000  00000000  0000298d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.u8g_ClearPolygonXY 00000006  00000000  00000000  00002b53  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.u8g_AddPolygonXY 00000024  00000000  00000000  00002b59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.u8g_DrawPolygon 0000000a  00000000  00000000  00002b7d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.u8g_DrawTriangle 0000004e  00000000  00000000  00002b87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .comment      00000022  00000000  00000000  00002bd5  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pge_Next:

00000000 <pge_Next>:
{
  pg_DrawPolygon(&u8g_pg, u8g);
}

void u8g_DrawTriangle(u8g_t *u8g, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
   0:	fc 01       	movw	r30, r24
   2:	60 85       	ldd	r22, Z+8	; 0x08
   4:	71 85       	ldd	r23, Z+9	; 0x09
   6:	82 85       	ldd	r24, Z+10	; 0x0a
   8:	93 85       	ldd	r25, Z+11	; 0x0b
   a:	68 17       	cp	r22, r24
   c:	79 07       	cpc	r23, r25
   e:	04 f4       	brge	.+0      	; 0x10 <pge_Next+0x10>
  10:	24 85       	ldd	r18, Z+12	; 0x0c
  12:	35 85       	ldd	r19, Z+13	; 0x0d
  14:	84 81       	ldd	r24, Z+4	; 0x04
  16:	95 81       	ldd	r25, Z+5	; 0x05
/*===========================================*/
/* API procedures */

void pg_ClearPolygonXY(pg_struct *pg)
{
  pg->cnt = 0;
  18:	28 0f       	add	r18, r24
  1a:	39 1f       	adc	r19, r25
}

void u8g_DrawTriangle(u8g_t *u8g, int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2)
{
  u8g_ClearPolygonXY();
  u8g_AddPolygonXY(u8g, x0, y0);
  1c:	35 87       	std	Z+13, r19	; 0x0d
  1e:	24 87       	std	Z+12, r18	; 0x0c
  u8g_AddPolygonXY(u8g, x1, y1);
  20:	86 85       	ldd	r24, Z+14	; 0x0e
  22:	97 85       	ldd	r25, Z+15	; 0x0f
  24:	46 81       	ldd	r20, Z+6	; 0x06
  26:	57 81       	ldd	r21, Z+7	; 0x07
  28:	84 0f       	add	r24, r20
  u8g_AddPolygonXY(u8g, x2, y2);
  2a:	95 1f       	adc	r25, r21
  2c:	97 87       	std	Z+15, r25	; 0x0f
  2e:	86 87       	std	Z+14, r24	; 0x0e
  30:	18 16       	cp	r1, r24
  32:	19 06       	cpc	r1, r25
  u8g_DrawPolygon(u8g);
  34:	04 f4       	brge	.+0      	; 0x36 <pge_Next+0x36>
}
  36:	40 81       	ld	r20, Z
  38:	51 81       	ldd	r21, Z+1	; 0x01
  3a:	42 0f       	add	r20, r18
  3c:	53 1f       	adc	r21, r19
  3e:	55 87       	std	Z+13, r21	; 0x0d
  40:	44 87       	std	Z+12, r20	; 0x0c
  42:	22 81       	ldd	r18, Z+2	; 0x02
  44:	33 81       	ldd	r19, Z+3	; 0x03
  46:	82 1b       	sub	r24, r18
  48:	93 0b       	sbc	r25, r19
{
  u8g_ClearPolygonXY();
  u8g_AddPolygonXY(u8g, x0, y0);
  u8g_AddPolygonXY(u8g, x1, y1);
  u8g_AddPolygonXY(u8g, x2, y2);
  u8g_DrawPolygon(u8g);
  4a:	97 87       	std	Z+15, r25	; 0x0f
  4c:	86 87       	std	Z+14, r24	; 0x0e
  4e:	6f 5f       	subi	r22, 0xFF	; 255
  50:	7f 4f       	sbci	r23, 0xFF	; 255
  52:	71 87       	std	Z+9, r23	; 0x09
  54:	60 87       	std	Z+8, r22	; 0x08
  56:	81 e0       	ldi	r24, 0x01	; 1
  58:	08 95       	ret
  5a:	80 e0       	ldi	r24, 0x00	; 0
  5c:	08 95       	ret

Disassembly of section .text.pg_inc:

0000005e <pg_inc>:
  5e:	6f 5f       	subi	r22, 0xFF	; 255
  60:	fc 01       	movw	r30, r24
  62:	80 8d       	ldd	r24, Z+24	; 0x18
  64:	68 17       	cp	r22, r24
  66:	00 f0       	brcs	.+0      	; 0x68 <pg_inc+0xa>
  68:	60 e0       	ldi	r22, 0x00	; 0
  6a:	86 2f       	mov	r24, r22
  6c:	08 95       	ret

Disassembly of section .text.pg_dec:

000000cc <pg_dec>:
  cc:	61 50       	subi	r22, 0x01	; 1
  ce:	fc 01       	movw	r30, r24
  d0:	80 8d       	ldd	r24, Z+24	; 0x18
  d2:	68 17       	cp	r22, r24
  d4:	00 f0       	brcs	.+0      	; 0xd6 <pg_dec+0xa>
  d6:	6f ef       	ldi	r22, 0xFF	; 255
  d8:	68 0f       	add	r22, r24
  da:	86 2f       	mov	r24, r22
  dc:	08 95       	ret

Disassembly of section .text.pg_expand_min_y:

000001aa <pg_expand_min_y>:
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	0f 93       	push	r16
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ec 01       	movw	r28, r24
 1bc:	6b 01       	movw	r12, r22
 1be:	fc 01       	movw	r30, r24
 1c0:	83 e1       	ldi	r24, 0x13	; 19
 1c2:	48 9f       	mul	r20, r24
 1c4:	e0 0d       	add	r30, r0
 1c6:	f1 1d       	adc	r31, r1
 1c8:	11 24       	eor	r1, r1
 1ca:	86 a5       	ldd	r24, Z+46	; 0x2e
 1cc:	7f 01       	movw	r14, r30
 1ce:	9c e2       	ldi	r25, 0x2C	; 44
 1d0:	e9 0e       	add	r14, r25
 1d2:	f1 1c       	adc	r15, r1
 1d4:	8f 01       	movw	r16, r30
 1d6:	02 5d       	subi	r16, 0xD2	; 210
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	d7 01       	movw	r26, r14
 1dc:	ed 91       	ld	r30, X+
 1de:	fc 91       	ld	r31, X
 1e0:	68 2f       	mov	r22, r24
 1e2:	ce 01       	movw	r24, r28
 1e4:	09 95       	icall
 1e6:	fe 01       	movw	r30, r28
 1e8:	b4 e0       	ldi	r27, 0x04	; 4
 1ea:	8b 9f       	mul	r24, r27
 1ec:	e0 0d       	add	r30, r0
 1ee:	f1 1d       	adc	r31, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	22 81       	ldd	r18, Z+2	; 0x02
 1f4:	33 81       	ldd	r19, Z+3	; 0x03
 1f6:	2c 15       	cp	r18, r12
 1f8:	3d 05       	cpc	r19, r13
 1fa:	01 f4       	brne	.+0      	; 0x1fc <pg_expand_min_y+0x52>
 1fc:	f8 01       	movw	r30, r16
 1fe:	80 83       	st	Z, r24
 200:	00 c0       	rjmp	.+0      	; 0x202 <pg_expand_min_y+0x58>
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	df 90       	pop	r13
 210:	cf 90       	pop	r12
 212:	08 95       	ret

Disassembly of section .text.pg_line_init:

000003be <pg_line_init>:
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	8c 01       	movw	r16, r24
 3d0:	ec 01       	movw	r28, r24
 3d2:	83 e1       	ldi	r24, 0x13	; 19
 3d4:	68 9f       	mul	r22, r24
 3d6:	c0 0d       	add	r28, r0
 3d8:	d1 1d       	adc	r29, r1
 3da:	11 24       	eor	r1, r1
 3dc:	6c 96       	adiw	r28, 0x1c	; 28
 3de:	6a 89       	ldd	r22, Y+18	; 0x12
 3e0:	f8 01       	movw	r30, r16
 3e2:	94 e0       	ldi	r25, 0x04	; 4
 3e4:	69 9f       	mul	r22, r25
 3e6:	e0 0d       	add	r30, r0
 3e8:	f1 1d       	adc	r31, r1
 3ea:	11 24       	eor	r1, r1
 3ec:	c2 80       	ldd	r12, Z+2	; 0x02
 3ee:	d3 80       	ldd	r13, Z+3	; 0x03
 3f0:	e0 80       	ld	r14, Z
 3f2:	f1 80       	ldd	r15, Z+1	; 0x01
 3f4:	e8 89       	ldd	r30, Y+16	; 0x10
 3f6:	f9 89       	ldd	r31, Y+17	; 0x11
 3f8:	c8 01       	movw	r24, r16
 3fa:	09 95       	icall
 3fc:	f8 01       	movw	r30, r16
 3fe:	94 e0       	ldi	r25, 0x04	; 4
 400:	89 9f       	mul	r24, r25
 402:	e0 0d       	add	r30, r0
 404:	f1 1d       	adc	r31, r1
 406:	11 24       	eor	r1, r1
 408:	42 81       	ldd	r20, Z+2	; 0x02
 40a:	53 81       	ldd	r21, Z+3	; 0x03
 40c:	20 81       	ld	r18, Z
 40e:	31 81       	ldd	r19, Z+1	; 0x01
 410:	8a 8b       	std	Y+18, r24	; 0x12
 412:	2e 19       	sub	r18, r14
 414:	3f 09       	sbc	r19, r15
 416:	fa 01       	movw	r30, r20
 418:	ec 19       	sub	r30, r12
 41a:	fd 09       	sbc	r31, r13
 41c:	fb 83       	std	Y+3, r31	; 0x03
 41e:	ea 83       	std	Y+2, r30	; 0x02
 420:	5b 87       	std	Y+11, r21	; 0x0b
 422:	4a 87       	std	Y+10, r20	; 0x0a
 424:	d9 86       	std	Y+9, r13	; 0x09
 426:	c8 86       	std	Y+8, r12	; 0x08
 428:	fd 86       	std	Y+13, r15	; 0x0d
 42a:	ec 86       	std	Y+12, r14	; 0x0c
 42c:	37 fd       	sbrc	r19, 7
 42e:	00 c0       	rjmp	.+0      	; 0x430 <pg_line_init+0x72>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	99 83       	std	Y+1, r25	; 0x01
 436:	88 83       	st	Y, r24
 438:	1f 86       	std	Y+15, r1	; 0x0f
 43a:	1e 86       	std	Y+14, r1	; 0x0e
 43c:	89 01       	movw	r16, r18
 43e:	00 c0       	rjmp	.+0      	; 0x440 <pg_line_init+0x82>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	99 83       	std	Y+1, r25	; 0x01
 446:	88 83       	st	Y, r24
 448:	00 27       	eor	r16, r16
 44a:	11 27       	eor	r17, r17
 44c:	02 1b       	sub	r16, r18
 44e:	13 0b       	sbc	r17, r19
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	4e 1b       	sub	r20, r30
 456:	5f 0b       	sbc	r21, r31
 458:	5f 87       	std	Y+15, r21	; 0x0f
 45a:	4e 87       	std	Y+14, r20	; 0x0e
 45c:	c9 01       	movw	r24, r18
 45e:	bf 01       	movw	r22, r30
 460:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 464:	7d 83       	std	Y+5, r23	; 0x05
 466:	6c 83       	std	Y+4, r22	; 0x04
 468:	c8 01       	movw	r24, r16
 46a:	bf 01       	movw	r22, r30
 46c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 470:	9f 83       	std	Y+7, r25	; 0x07
 472:	8e 83       	std	Y+6, r24	; 0x06
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	08 95       	ret

Disassembly of section .text.pg_ClearPolygonXY:

00000844 <pg_ClearPolygonXY>:
 844:	fc 01       	movw	r30, r24
 846:	10 8e       	std	Z+24, r1	; 0x18
 848:	08 95       	ret

Disassembly of section .text.pg_AddPolygonXY:

0000108e <pg_AddPolygonXY>:
    108e:	fc 01       	movw	r30, r24
    1090:	60 8d       	ldd	r22, Z+24	; 0x18
    1092:	66 30       	cpi	r22, 0x06	; 6
    1094:	00 f4       	brcc	.+0      	; 0x1096 <pg_AddPolygonXY+0x8>
    1096:	74 e0       	ldi	r23, 0x04	; 4
    1098:	67 9f       	mul	r22, r23
    109a:	e0 0d       	add	r30, r0
    109c:	f1 1d       	adc	r31, r1
    109e:	11 24       	eor	r1, r1
    10a0:	51 83       	std	Z+1, r21	; 0x01
    10a2:	40 83       	st	Z, r20
    10a4:	33 83       	std	Z+3, r19	; 0x03
    10a6:	22 83       	std	Z+2, r18	; 0x02
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	fc 01       	movw	r30, r24
    10ac:	60 8f       	std	Z+24, r22	; 0x18
    10ae:	08 95       	ret

Disassembly of section .text.pg_DrawPolygon:

0000213e <pg_DrawPolygon>:
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	ec 01       	movw	r28, r24
    2154:	8b 01       	movw	r16, r22
    2156:	fc 01       	movw	r30, r24
    2158:	ff 96       	adiw	r30, 0x3f	; 63
    215a:	80 e0       	ldi	r24, 0x00	; 0
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	80 83       	st	Z, r24
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9d a7       	std	Y+45, r25	; 0x2d
    2168:	8c a7       	std	Y+44, r24	; 0x2c
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	1e a6       	std	Y+46, r1	; 0x2e
    2170:	58 8d       	ldd	r21, Y+24	; 0x18
    2172:	fe 01       	movw	r30, r28
    2174:	7c 01       	movw	r14, r24
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	45 17       	cp	r20, r21
    217a:	00 f4       	brcc	.+0      	; 0x217c <pg_DrawPolygon+0x3e>
    217c:	26 81       	ldd	r18, Z+6	; 0x06
    217e:	37 81       	ldd	r19, Z+7	; 0x07
    2180:	82 17       	cp	r24, r18
    2182:	93 07       	cpc	r25, r19
    2184:	04 f4       	brge	.+0      	; 0x2186 <pg_DrawPolygon+0x48>
    2186:	c9 01       	movw	r24, r18
    2188:	2e 15       	cp	r18, r14
    218a:	3f 05       	cpc	r19, r15
    218c:	04 f4       	brge	.+0      	; 0x218e <pg_DrawPolygon+0x50>
    218e:	4e a7       	std	Y+46, r20	; 0x2e
    2190:	79 01       	movw	r14, r18
    2192:	4f 5f       	subi	r20, 0xFF	; 255
    2194:	34 96       	adiw	r30, 0x04	; 4
    2196:	00 c0       	rjmp	.+0      	; 0x2198 <pg_DrawPolygon+0x5a>
    2198:	8e 19       	sub	r24, r14
    219a:	9f 09       	sbc	r25, r15
    219c:	9b 8f       	std	Y+27, r25	; 0x1b
    219e:	8a 8f       	std	Y+26, r24	; 0x1a
    21a0:	89 2b       	or	r24, r25
    21a2:	01 f4       	brne	.+0      	; 0x21a4 <pg_DrawPolygon+0x66>
    21a4:	00 c0       	rjmp	.+0      	; 0x21a6 <pg_DrawPolygon+0x68>
    21a6:	8e a5       	ldd	r24, Y+46	; 0x2e
    21a8:	6e 01       	movw	r12, r28
    21aa:	21 e4       	ldi	r18, 0x41	; 65
    21ac:	c2 0e       	add	r12, r18
    21ae:	d1 1c       	adc	r13, r1
    21b0:	d6 01       	movw	r26, r12
    21b2:	8c 93       	st	X, r24
    21b4:	41 e0       	ldi	r20, 0x01	; 1
    21b6:	b7 01       	movw	r22, r14
    21b8:	ce 01       	movw	r24, r28
    21ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	b7 01       	movw	r22, r14
    21c2:	ce 01       	movw	r24, r28
    21c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	89 8f       	std	Y+25, r24	; 0x19
    21cc:	8e a5       	ldd	r24, Y+46	; 0x2e
    21ce:	de 01       	movw	r26, r28
    21d0:	e4 e0       	ldi	r30, 0x04	; 4
    21d2:	8e 9f       	mul	r24, r30
    21d4:	a0 0d       	add	r26, r0
    21d6:	b1 1d       	adc	r27, r1
    21d8:	11 24       	eor	r1, r1
    21da:	f6 01       	movw	r30, r12
    21dc:	80 81       	ld	r24, Z
    21de:	fe 01       	movw	r30, r28
    21e0:	24 e0       	ldi	r18, 0x04	; 4
    21e2:	82 9f       	mul	r24, r18
    21e4:	e0 0d       	add	r30, r0
    21e6:	f1 1d       	adc	r31, r1
    21e8:	11 24       	eor	r1, r1
    21ea:	2d 91       	ld	r18, X+
    21ec:	3c 91       	ld	r19, X
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	28 17       	cp	r18, r24
    21f4:	39 07       	cpc	r19, r25
    21f6:	01 f0       	breq	.+0      	; 0x21f8 <pg_DrawPolygon+0xba>
    21f8:	19 8e       	std	Y+25, r1	; 0x19
    21fa:	00 c0       	rjmp	.+0      	; 0x21fc <pg_DrawPolygon+0xbe>
    21fc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21fe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9b 8f       	std	Y+27, r25	; 0x1b
    2204:	8a 8f       	std	Y+26, r24	; 0x1a
    2206:	89 2b       	or	r24, r25
    2208:	01 f4       	brne	.+0      	; 0x220a <pg_DrawPolygon+0xcc>
    220a:	00 c0       	rjmp	.+0      	; 0x220c <pg_DrawPolygon+0xce>
    220c:	ea 8c       	ldd	r14, Y+26	; 0x1a
    220e:	fb 8c       	ldd	r15, Y+27	; 0x1b
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	ce 01       	movw	r24, r28
    2214:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2218:	61 e0       	ldi	r22, 0x01	; 1
    221a:	ce 01       	movw	r24, r28
    221c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2220:	89 8d       	ldd	r24, Y+25	; 0x19
    2222:	fe 01       	movw	r30, r28
    2224:	7c 96       	adiw	r30, 0x1c	; 28
    2226:	6f 01       	movw	r12, r30
    2228:	88 23       	and	r24, r24
    222a:	01 f0       	breq	.+0      	; 0x222c <pg_DrawPolygon+0xee>
    222c:	c6 01       	movw	r24, r12
    222e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    2232:	ce 01       	movw	r24, r28
    2234:	8f 96       	adiw	r24, 0x2f	; 47
    2236:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    223a:	5e 01       	movw	r10, r28
    223c:	3f e2       	ldi	r19, 0x2F	; 47
    223e:	a3 0e       	add	r10, r19
    2240:	b1 1c       	adc	r11, r1
    2242:	28 a5       	ldd	r18, Y+40	; 0x28
    2244:	39 a5       	ldd	r19, Y+41	; 0x29
    2246:	eb ad       	ldd	r30, Y+59	; 0x3b
    2248:	fc ad       	ldd	r31, Y+60	; 0x3c
    224a:	4f a9       	ldd	r20, Y+55	; 0x37
    224c:	58 ad       	ldd	r21, Y+56	; 0x38
    224e:	57 fd       	sbrc	r21, 7
    2250:	00 c0       	rjmp	.+0      	; 0x2252 <pg_DrawPolygon+0x114>
    2252:	d8 01       	movw	r26, r16
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	8c 91       	ld	r24, X
    2258:	11 97       	sbiw	r26, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	48 17       	cp	r20, r24
    225e:	59 07       	cpc	r21, r25
    2260:	04 f4       	brge	.+0      	; 0x2262 <pg_DrawPolygon+0x124>
    2262:	2e 17       	cp	r18, r30
    2264:	3f 07       	cpc	r19, r31
    2266:	04 f4       	brge	.+0      	; 0x2268 <pg_DrawPolygon+0x12a>
    2268:	f7 fd       	sbrc	r31, 7
    226a:	00 c0       	rjmp	.+0      	; 0x226c <pg_DrawPolygon+0x12e>
    226c:	8c 91       	ld	r24, X
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	28 17       	cp	r18, r24
    2272:	39 07       	cpc	r19, r25
    2274:	04 f4       	brge	.+0      	; 0x2276 <pg_DrawPolygon+0x138>
    2276:	37 ff       	sbrs	r19, 7
    2278:	00 c0       	rjmp	.+0      	; 0x227a <pg_DrawPolygon+0x13c>
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	62 2f       	mov	r22, r18
    2280:	e8 17       	cp	r30, r24
    2282:	f9 07       	cpc	r31, r25
    2284:	04 f4       	brge	.+0      	; 0x2286 <pg_DrawPolygon+0x148>
    2286:	cf 01       	movw	r24, r30
    2288:	28 2f       	mov	r18, r24
    228a:	26 1b       	sub	r18, r22
    228c:	00 c0       	rjmp	.+0      	; 0x228e <pg_DrawPolygon+0x150>
    228e:	37 fd       	sbrc	r19, 7
    2290:	00 c0       	rjmp	.+0      	; 0x2292 <pg_DrawPolygon+0x154>
    2292:	d8 01       	movw	r26, r16
    2294:	8c 91       	ld	r24, X
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	e8 17       	cp	r30, r24
    229a:	f9 07       	cpc	r31, r25
    229c:	04 f4       	brge	.+0      	; 0x229e <pg_DrawPolygon+0x160>
    229e:	f7 ff       	sbrs	r31, 7
    22a0:	00 c0       	rjmp	.+0      	; 0x22a2 <pg_DrawPolygon+0x164>
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	82 17       	cp	r24, r18
    22a8:	93 07       	cpc	r25, r19
    22aa:	04 f4       	brge	.+0      	; 0x22ac <pg_DrawPolygon+0x16e>
    22ac:	9c 01       	movw	r18, r24
    22ae:	2e 1b       	sub	r18, r30
    22b0:	6e 2f       	mov	r22, r30
    22b2:	c8 01       	movw	r24, r16
    22b4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    22b8:	c6 01       	movw	r24, r12
    22ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    22be:	81 11       	cpse	r24, r1
    22c0:	00 c0       	rjmp	.+0      	; 0x22c2 <pg_DrawPolygon+0x184>
    22c2:	60 e0       	ldi	r22, 0x00	; 0
    22c4:	ce 01       	movw	r24, r28
    22c6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    22ca:	00 c0       	rjmp	.+0      	; 0x22cc <pg_DrawPolygon+0x18e>
    22cc:	c5 01       	movw	r24, r10
    22ce:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    22d2:	81 11       	cpse	r24, r1
    22d4:	00 c0       	rjmp	.+0      	; 0x22d6 <pg_DrawPolygon+0x198>
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	ce 01       	movw	r24, r28
    22da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    22de:	00 c0       	rjmp	.+0      	; 0x22e0 <pg_DrawPolygon+0x1a2>
    22e0:	b1 e0       	ldi	r27, 0x01	; 1
    22e2:	eb 1a       	sub	r14, r27
    22e4:	f1 08       	sbc	r15, r1
    22e6:	1e 14       	cp	r1, r14
    22e8:	1f 04       	cpc	r1, r15
    22ea:	04 f4       	brge	.+0      	; 0x22ec <pg_DrawPolygon+0x1ae>
    22ec:	00 c0       	rjmp	.+0      	; 0x22ee <pg_DrawPolygon+0x1b0>
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	08 95       	ret

Disassembly of section .text.u8g_ClearPolygonXY:

00004442 <u8g_ClearPolygonXY>:
    4442:	10 92 00 00 	sts	0x0000, r1
    4446:	08 95       	ret

Disassembly of section .text.u8g_AddPolygonXY:

0000888a <u8g_AddPolygonXY>:
    888a:	80 91 00 00 	lds	r24, 0x0000
    888e:	86 30       	cpi	r24, 0x06	; 6
    8890:	00 f4       	brcc	.+0      	; 0x8892 <u8g_AddPolygonXY+0x8>
    8892:	94 e0       	ldi	r25, 0x04	; 4
    8894:	89 9f       	mul	r24, r25
    8896:	f0 01       	movw	r30, r0
    8898:	11 24       	eor	r1, r1
    889a:	e0 50       	subi	r30, 0x00	; 0
    889c:	f0 40       	sbci	r31, 0x00	; 0
    889e:	71 83       	std	Z+1, r23	; 0x01
    88a0:	60 83       	st	Z, r22
    88a2:	53 83       	std	Z+3, r21	; 0x03
    88a4:	42 83       	std	Z+2, r20	; 0x02
    88a6:	8f 5f       	subi	r24, 0xFF	; 255
    88a8:	80 93 00 00 	sts	0x0000, r24
    88ac:	08 95       	ret

Disassembly of section .text.u8g_DrawPolygon:

00011138 <u8g_DrawPolygon>:
   11138:	bc 01       	movw	r22, r24
   1113a:	80 e0       	ldi	r24, 0x00	; 0
   1113c:	90 e0       	ldi	r25, 0x00	; 0
   1113e:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_DrawTriangle:

0002227a <u8g_DrawTriangle>:
   2227a:	af 92       	push	r10
   2227c:	bf 92       	push	r11
   2227e:	cf 92       	push	r12
   22280:	df 92       	push	r13
   22282:	ef 92       	push	r14
   22284:	ff 92       	push	r15
   22286:	0f 93       	push	r16
   22288:	1f 93       	push	r17
   2228a:	cf 93       	push	r28
   2228c:	df 93       	push	r29
   2228e:	ec 01       	movw	r28, r24
   22290:	59 01       	movw	r10, r18
   22292:	10 92 00 00 	sts	0x0000, r1
   22296:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   2229a:	a8 01       	movw	r20, r16
   2229c:	b5 01       	movw	r22, r10
   2229e:	ce 01       	movw	r24, r28
   222a0:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   222a4:	a6 01       	movw	r20, r12
   222a6:	b7 01       	movw	r22, r14
   222a8:	ce 01       	movw	r24, r28
   222aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
   222ae:	ce 01       	movw	r24, r28
   222b0:	df 91       	pop	r29
   222b2:	cf 91       	pop	r28
   222b4:	1f 91       	pop	r17
   222b6:	0f 91       	pop	r16
   222b8:	ff 90       	pop	r15
   222ba:	ef 90       	pop	r14
   222bc:	df 90       	pop	r13
   222be:	cf 90       	pop	r12
   222c0:	bf 90       	pop	r11
   222c2:	af 90       	pop	r10
   222c4:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_rect.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001895  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_draw_hline 00000080  00000000  00000000  000026f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_draw_vline 00000080  00000000  00000000  00002771  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_DrawHLine 00000044  00000000  00000000  000027f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_DrawVLine 00000046  00000000  00000000  00002835  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_DrawFrame 00000076  00000000  00000000  0000287b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_draw_box 00000036  00000000  00000000  000028f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_DrawBox 0000003a  00000000  00000000  00002927  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.u8g_DrawRFrame 00000102  00000000  00000000  00002961  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.u8g_DrawRBox 000000d4  00000000  00000000  00002a63  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .comment      00000022  00000000  00000000  00002b37  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_draw_hline:

00000000 <u8g_draw_hline>:
    u8g_draw_vline(u8g, x+w, yu, hh);
  }
}

void u8g_DrawRBox(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h, u8g_uint_t r)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	1f 92       	push	r1
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	5c 01       	movw	r10, r24
  1a:	e6 2e       	mov	r14, r22
  1c:	f4 2e       	mov	r15, r20
  1e:	12 2f       	mov	r17, r18
  20:	32 2f       	mov	r19, r18
  u8g_uint_t xl, yu;
    u8g_uint_t yl, xr;

  if ( u8g_IsBBXIntersection(u8g, x, y, w, h) == 0 )
  22:	d6 2e       	mov	r13, r22
  24:	d2 0e       	add	r13, r18
  26:	6d 2d       	mov	r22, r13
  28:	63 1b       	sub	r22, r19
  2a:	38 30       	cpi	r19, 0x08	; 8
    return;

  xl = x;
  xl += r;
  2c:	00 f0       	brcs	.+0      	; 0x2e <u8g_draw_hline+0x2e>
  2e:	0f ef       	ldi	r16, 0xFF	; 255
  yu = y;
  yu += r;
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	4f 2d       	mov	r20, r15
 
  xr = x;
  xr += w;
  34:	c5 01       	movw	r24, r10
  36:	39 83       	std	Y+1, r19	; 0x01
  xr -= r;
  38:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_hline>
  xr -= 1;
  
  yl = y;
  yl += h;
  3c:	39 81       	ldd	r19, Y+1	; 0x01
  3e:	38 50       	subi	r19, 0x08	; 8
  yl -= r; 
  40:	00 c0       	rjmp	.+0      	; 0x42 <u8g_draw_hline+0x42>
  42:	61 2f       	mov	r22, r17
  44:	68 7f       	andi	r22, 0xF8	; 248
  yl -= 1;
  46:	6e 0d       	add	r22, r14

  u8g_draw_disc(u8g, xl, yu, r, U8G_DRAW_UPPER_LEFT);
  48:	17 70       	andi	r17, 0x07	; 7
  4a:	01 f0       	breq	.+0      	; 0x4c <u8g_draw_hline+0x4c>
  4c:	87 e0       	ldi	r24, 0x07	; 7
  4e:	81 27       	eor	r24, r17
  50:	8f 5f       	subi	r24, 0xFF	; 255
  52:	87 70       	andi	r24, 0x07	; 7
  54:	0f ef       	ldi	r16, 0xFF	; 255
  u8g_draw_disc(u8g, xr, yu, r, U8G_DRAW_UPPER_RIGHT);
  56:	10 e0       	ldi	r17, 0x00	; 0
  58:	00 c0       	rjmp	.+0      	; 0x5a <u8g_draw_hline+0x5a>
  5a:	00 0f       	add	r16, r16
  5c:	8a 95       	dec	r24
  5e:	02 f4       	brpl	.+0      	; 0x60 <u8g_draw_hline+0x60>
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	4f 2d       	mov	r20, r15
  u8g_draw_disc(u8g, xl, yl, r, U8G_DRAW_LOWER_LEFT);
  64:	c5 01       	movw	r24, r10
  66:	0e 94 00 00 	call	0	; 0x0 <u8g_draw_hline>
  6a:	0f 90       	pop	r0
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	1f 91       	pop	r17
  u8g_draw_disc(u8g, xr, yl, r, U8G_DRAW_LOWER_RIGHT);
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	bf 90       	pop	r11
  7c:	af 90       	pop	r10
  7e:	08 95       	ret

Disassembly of section .text.u8g_draw_vline:

00000080 <u8g_draw_vline>:
  {
    u8g_uint_t ww, hh;

    ww = w;
    ww -= r;
    ww -= r;
  80:	af 92       	push	r10
  82:	bf 92       	push	r11

  {
    u8g_uint_t ww, hh;

    ww = w;
    ww -= r;
  84:	df 92       	push	r13
  86:	ef 92       	push	r14
    ww -= r;
    ww -= 2;
  88:	ff 92       	push	r15
    hh = h;
    hh -= r;
    hh -= r;
    hh -= 2;
  8a:	0f 93       	push	r16
    
    xl++;
  8c:	1f 93       	push	r17
    yu++;
    h--;
    u8g_draw_box(u8g, xl, y, ww, r+1);
  8e:	cf 93       	push	r28
  90:	df 93       	push	r29
  92:	1f 92       	push	r1
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
  98:	5c 01       	movw	r10, r24
  9a:	f6 2e       	mov	r15, r22
  9c:	e4 2e       	mov	r14, r20
    u8g_draw_box(u8g, xl, yl, ww, r+1);
  9e:	12 2f       	mov	r17, r18
  a0:	32 2f       	mov	r19, r18
  a2:	d4 2e       	mov	r13, r20
  a4:	d2 0e       	add	r13, r18
  a6:	4d 2d       	mov	r20, r13
  a8:	43 1b       	sub	r20, r19
    hh -= r;
    hh -= r;
    hh -= 2;
    
    xl++;
    yu++;
  aa:	38 30       	cpi	r19, 0x08	; 8
  ac:	00 f0       	brcs	.+0      	; 0xae <u8g_draw_vline+0x2e>
    h--;
    u8g_draw_box(u8g, xl, y, ww, r+1);
    u8g_draw_box(u8g, xl, yl, ww, r+1);
    //u8g_draw_hline(u8g, xl, y+h, ww);
    u8g_draw_box(u8g, x, yu, w, hh);
  ae:	0f ef       	ldi	r16, 0xFF	; 255
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	6f 2d       	mov	r22, r15
  b4:	c5 01       	movw	r24, r10
  b6:	39 83       	std	Y+1, r19	; 0x01
  b8:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    //u8g_draw_vline(u8g, x+w, yu, hh);
  }
}
  bc:	39 81       	ldd	r19, Y+1	; 0x01
  be:	38 50       	subi	r19, 0x08	; 8
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <u8g_draw_vline+0x42>
  c2:	41 2f       	mov	r20, r17
  c4:	48 7f       	andi	r20, 0xF8	; 248
  c6:	4e 0d       	add	r20, r14
  c8:	17 70       	andi	r17, 0x07	; 7
  ca:	01 f0       	breq	.+0      	; 0xcc <u8g_draw_vline+0x4c>
  cc:	87 e0       	ldi	r24, 0x07	; 7
  ce:	81 27       	eor	r24, r17
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	87 70       	andi	r24, 0x07	; 7
  d4:	0f ef       	ldi	r16, 0xFF	; 255
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	00 c0       	rjmp	.+0      	; 0xda <u8g_draw_vline+0x5a>
  da:	00 0f       	add	r16, r16
  dc:	8a 95       	dec	r24
  de:	02 f4       	brpl	.+0      	; 0xe0 <u8g_draw_vline+0x60>
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	6f 2d       	mov	r22, r15
  e4:	c5 01       	movw	r24, r10
  e6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  ea:	0f 90       	pop	r0
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	bf 90       	pop	r11
  fc:	af 90       	pop	r10
  fe:	08 95       	ret

Disassembly of section .text.u8g_DrawHLine:

00000180 <u8g_DrawHLine>:
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ec 01       	movw	r28, r24
 18e:	16 2f       	mov	r17, r22
 190:	f4 2e       	mov	r15, r20
 192:	e2 2e       	mov	r14, r18
 194:	01 e0       	ldi	r16, 0x01	; 1
 196:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 19a:	88 23       	and	r24, r24
 19c:	01 f0       	breq	.+0      	; 0x19e <u8g_DrawHLine+0x1e>
 19e:	2e 2d       	mov	r18, r14
 1a0:	4f 2d       	mov	r20, r15
 1a2:	61 2f       	mov	r22, r17
 1a4:	ce 01       	movw	r24, r28
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	08 95       	ret

Disassembly of section .text.u8g_DrawVLine:

00000344 <u8g_DrawVLine>:
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	0f 93       	push	r16
 34a:	1f 93       	push	r17
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ec 01       	movw	r28, r24
 352:	16 2f       	mov	r17, r22
 354:	f4 2e       	mov	r15, r20
 356:	e2 2e       	mov	r14, r18
 358:	02 2f       	mov	r16, r18
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 360:	88 23       	and	r24, r24
 362:	01 f0       	breq	.+0      	; 0x364 <u8g_DrawVLine+0x20>
 364:	2e 2d       	mov	r18, r14
 366:	4f 2d       	mov	r20, r15
 368:	61 2f       	mov	r22, r17
 36a:	ce 01       	movw	r24, r28
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	1f 91       	pop	r17
 382:	0f 91       	pop	r16
 384:	ff 90       	pop	r15
 386:	ef 90       	pop	r14
 388:	08 95       	ret

Disassembly of section .text.u8g_DrawFrame:

000006ce <u8g_DrawFrame>:
 6ce:	df 92       	push	r13
 6d0:	ef 92       	push	r14
 6d2:	ff 92       	push	r15
 6d4:	0f 93       	push	r16
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	ec 01       	movw	r28, r24
 6de:	16 2f       	mov	r17, r22
 6e0:	f4 2e       	mov	r15, r20
 6e2:	e2 2e       	mov	r14, r18
 6e4:	d0 2e       	mov	r13, r16
 6e6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 6ea:	88 23       	and	r24, r24
 6ec:	01 f0       	breq	.+0      	; 0x6ee <u8g_DrawFrame+0x20>
 6ee:	2e 2d       	mov	r18, r14
 6f0:	4f 2d       	mov	r20, r15
 6f2:	61 2f       	mov	r22, r17
 6f4:	ce 01       	movw	r24, r28
 6f6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 6fa:	2d 2d       	mov	r18, r13
 6fc:	4f 2d       	mov	r20, r15
 6fe:	61 2f       	mov	r22, r17
 700:	ce 01       	movw	r24, r28
 702:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	6e 0d       	add	r22, r14
 70a:	61 0f       	add	r22, r17
 70c:	2d 2d       	mov	r18, r13
 70e:	4f 2d       	mov	r20, r15
 710:	ce 01       	movw	r24, r28
 712:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 716:	4f ef       	ldi	r20, 0xFF	; 255
 718:	4d 0d       	add	r20, r13
 71a:	4f 0d       	add	r20, r15
 71c:	2e 2d       	mov	r18, r14
 71e:	61 2f       	mov	r22, r17
 720:	ce 01       	movw	r24, r28
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 734:	df 91       	pop	r29
 736:	cf 91       	pop	r28
 738:	1f 91       	pop	r17
 73a:	0f 91       	pop	r16
 73c:	ff 90       	pop	r15
 73e:	ef 90       	pop	r14
 740:	df 90       	pop	r13
 742:	08 95       	ret

Disassembly of section .text.u8g_draw_box:

00000e12 <u8g_draw_box>:
 e12:	ef 92       	push	r14
 e14:	ff 92       	push	r15
 e16:	0f 93       	push	r16
 e18:	1f 93       	push	r17
 e1a:	cf 93       	push	r28
 e1c:	df 93       	push	r29
 e1e:	ec 01       	movw	r28, r24
 e20:	f6 2e       	mov	r15, r22
 e22:	e2 2e       	mov	r14, r18
 e24:	14 2f       	mov	r17, r20
 e26:	04 0f       	add	r16, r20
 e28:	2e 2d       	mov	r18, r14
 e2a:	41 2f       	mov	r20, r17
 e2c:	6f 2d       	mov	r22, r15
 e2e:	ce 01       	movw	r24, r28
 e30:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 e34:	1f 5f       	subi	r17, 0xFF	; 255
 e36:	01 13       	cpse	r16, r17
 e38:	00 c0       	rjmp	.+0      	; 0xe3a <u8g_draw_box+0x28>
 e3a:	df 91       	pop	r29
 e3c:	cf 91       	pop	r28
 e3e:	1f 91       	pop	r17
 e40:	0f 91       	pop	r16
 e42:	ff 90       	pop	r15
 e44:	ef 90       	pop	r14
 e46:	08 95       	ret

Disassembly of section .text.u8g_DrawBox:

00001c5a <u8g_DrawBox>:
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	16 2f       	mov	r17, r22
    1c6c:	f4 2e       	mov	r15, r20
    1c6e:	e2 2e       	mov	r14, r18
    1c70:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1c74:	88 23       	and	r24, r24
    1c76:	01 f0       	breq	.+0      	; 0x1c78 <u8g_DrawBox+0x1e>
    1c78:	2e 2d       	mov	r18, r14
    1c7a:	4f 2d       	mov	r20, r15
    1c7c:	61 2f       	mov	r22, r17
    1c7e:	ce 01       	movw	r24, r28
    1c80:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	df 90       	pop	r13
    1c92:	08 95       	ret

Disassembly of section .text.u8g_DrawRFrame:

000038ee <u8g_DrawRFrame>:
    38ee:	7f 92       	push	r7
    38f0:	8f 92       	push	r8
    38f2:	9f 92       	push	r9
    38f4:	af 92       	push	r10
    38f6:	bf 92       	push	r11
    38f8:	cf 92       	push	r12
    38fa:	df 92       	push	r13
    38fc:	ef 92       	push	r14
    38fe:	ff 92       	push	r15
    3900:	0f 93       	push	r16
    3902:	1f 93       	push	r17
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	ec 01       	movw	r28, r24
    390a:	f6 2e       	mov	r15, r22
    390c:	d4 2e       	mov	r13, r20
    390e:	c2 2e       	mov	r12, r18
    3910:	a0 2e       	mov	r10, r16
    3912:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3916:	88 23       	and	r24, r24
    3918:	01 f4       	brne	.+0      	; 0x391a <u8g_DrawRFrame+0x2c>
    391a:	00 c0       	rjmp	.+0      	; 0x391c <u8g_DrawRFrame+0x2e>
    391c:	8f 2c       	mov	r8, r15
    391e:	8e 0c       	add	r8, r14
    3920:	9d 2c       	mov	r9, r13
    3922:	9e 0c       	add	r9, r14
    3924:	1e 2d       	mov	r17, r14
    3926:	10 95       	com	r17
    3928:	1c 0d       	add	r17, r12
    392a:	1f 0d       	add	r17, r15
    392c:	7a 2c       	mov	r7, r10
    392e:	7e 18       	sub	r7, r14
    3930:	bb 24       	eor	r11, r11
    3932:	ba 94       	dec	r11
    3934:	b7 0c       	add	r11, r7
    3936:	bd 0c       	add	r11, r13
    3938:	02 e0       	ldi	r16, 0x02	; 2
    393a:	2e 2d       	mov	r18, r14
    393c:	49 2d       	mov	r20, r9
    393e:	68 2d       	mov	r22, r8
    3940:	ce 01       	movw	r24, r28
    3942:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3946:	01 e0       	ldi	r16, 0x01	; 1
    3948:	2e 2d       	mov	r18, r14
    394a:	49 2d       	mov	r20, r9
    394c:	61 2f       	mov	r22, r17
    394e:	ce 01       	movw	r24, r28
    3950:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3954:	04 e0       	ldi	r16, 0x04	; 4
    3956:	2e 2d       	mov	r18, r14
    3958:	4b 2d       	mov	r20, r11
    395a:	68 2d       	mov	r22, r8
    395c:	ce 01       	movw	r24, r28
    395e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3962:	08 e0       	ldi	r16, 0x08	; 8
    3964:	2e 2d       	mov	r18, r14
    3966:	4b 2d       	mov	r20, r11
    3968:	61 2f       	mov	r22, r17
    396a:	ce 01       	movw	r24, r28
    396c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    3970:	8e ef       	ldi	r24, 0xFE	; 254
    3972:	8e 19       	sub	r24, r14
    3974:	18 2f       	mov	r17, r24
    3976:	1e 19       	sub	r17, r14
    3978:	1c 0d       	add	r17, r12
    397a:	e7 2c       	mov	r14, r7
    397c:	e8 0e       	add	r14, r24
    397e:	83 94       	inc	r8
    3980:	93 94       	inc	r9
    3982:	21 2f       	mov	r18, r17
    3984:	4d 2d       	mov	r20, r13
    3986:	68 2d       	mov	r22, r8
    3988:	ce 01       	movw	r24, r28
    398a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    398e:	4f ef       	ldi	r20, 0xFF	; 255
    3990:	4a 0d       	add	r20, r10
    3992:	4d 0d       	add	r20, r13
    3994:	21 2f       	mov	r18, r17
    3996:	68 2d       	mov	r22, r8
    3998:	ce 01       	movw	r24, r28
    399a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    399e:	2e 2d       	mov	r18, r14
    39a0:	49 2d       	mov	r20, r9
    39a2:	6f 2d       	mov	r22, r15
    39a4:	ce 01       	movw	r24, r28
    39a6:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    39aa:	6f ef       	ldi	r22, 0xFF	; 255
    39ac:	6c 0d       	add	r22, r12
    39ae:	6f 0d       	add	r22, r15
    39b0:	2e 2d       	mov	r18, r14
    39b2:	49 2d       	mov	r20, r9
    39b4:	ce 01       	movw	r24, r28
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	df 90       	pop	r13
    39c4:	cf 90       	pop	r12
    39c6:	bf 90       	pop	r11
    39c8:	af 90       	pop	r10
    39ca:	9f 90       	pop	r9
    39cc:	8f 90       	pop	r8
    39ce:	7f 90       	pop	r7
    39d0:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
    39d4:	df 91       	pop	r29
    39d6:	cf 91       	pop	r28
    39d8:	1f 91       	pop	r17
    39da:	0f 91       	pop	r16
    39dc:	ff 90       	pop	r15
    39de:	ef 90       	pop	r14
    39e0:	df 90       	pop	r13
    39e2:	cf 90       	pop	r12
    39e4:	bf 90       	pop	r11
    39e6:	af 90       	pop	r10
    39e8:	9f 90       	pop	r9
    39ea:	8f 90       	pop	r8
    39ec:	7f 90       	pop	r7
    39ee:	08 95       	ret

Disassembly of section .text.u8g_DrawRBox:

000072de <u8g_DrawRBox>:
    72de:	8f 92       	push	r8
    72e0:	9f 92       	push	r9
    72e2:	af 92       	push	r10
    72e4:	bf 92       	push	r11
    72e6:	cf 92       	push	r12
    72e8:	df 92       	push	r13
    72ea:	ef 92       	push	r14
    72ec:	ff 92       	push	r15
    72ee:	0f 93       	push	r16
    72f0:	1f 93       	push	r17
    72f2:	cf 93       	push	r28
    72f4:	df 93       	push	r29
    72f6:	ec 01       	movw	r28, r24
    72f8:	c6 2e       	mov	r12, r22
    72fa:	b4 2e       	mov	r11, r20
    72fc:	d2 2e       	mov	r13, r18
    72fe:	f0 2e       	mov	r15, r16
    7300:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7304:	88 23       	and	r24, r24
    7306:	01 f4       	brne	.+0      	; 0x7308 <u8g_DrawRBox+0x2a>
    7308:	00 c0       	rjmp	.+0      	; 0x730a <u8g_DrawRBox+0x2c>
    730a:	9c 2c       	mov	r9, r12
    730c:	9e 0c       	add	r9, r14
    730e:	ab 2c       	mov	r10, r11
    7310:	ae 0c       	add	r10, r14
    7312:	1e 2d       	mov	r17, r14
    7314:	10 95       	com	r17
    7316:	1d 0d       	add	r17, r13
    7318:	1c 0d       	add	r17, r12
    731a:	8f 2c       	mov	r8, r15
    731c:	8e 18       	sub	r8, r14
    731e:	ff 24       	eor	r15, r15
    7320:	fa 94       	dec	r15
    7322:	f8 0c       	add	r15, r8
    7324:	fb 0c       	add	r15, r11
    7326:	02 e0       	ldi	r16, 0x02	; 2
    7328:	2e 2d       	mov	r18, r14
    732a:	4a 2d       	mov	r20, r10
    732c:	69 2d       	mov	r22, r9
    732e:	ce 01       	movw	r24, r28
    7330:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7334:	01 e0       	ldi	r16, 0x01	; 1
    7336:	2e 2d       	mov	r18, r14
    7338:	4a 2d       	mov	r20, r10
    733a:	61 2f       	mov	r22, r17
    733c:	ce 01       	movw	r24, r28
    733e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7342:	04 e0       	ldi	r16, 0x04	; 4
    7344:	2e 2d       	mov	r18, r14
    7346:	4f 2d       	mov	r20, r15
    7348:	69 2d       	mov	r22, r9
    734a:	ce 01       	movw	r24, r28
    734c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7350:	08 e0       	ldi	r16, 0x08	; 8
    7352:	2e 2d       	mov	r18, r14
    7354:	4f 2d       	mov	r20, r15
    7356:	61 2f       	mov	r22, r17
    7358:	ce 01       	movw	r24, r28
    735a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    735e:	8e ef       	ldi	r24, 0xFE	; 254
    7360:	8e 19       	sub	r24, r14
    7362:	18 2f       	mov	r17, r24
    7364:	1e 19       	sub	r17, r14
    7366:	1d 0d       	add	r17, r13
    7368:	88 0e       	add	r8, r24
    736a:	93 94       	inc	r9
    736c:	e3 94       	inc	r14
    736e:	0e 2d       	mov	r16, r14
    7370:	21 2f       	mov	r18, r17
    7372:	4b 2d       	mov	r20, r11
    7374:	69 2d       	mov	r22, r9
    7376:	ce 01       	movw	r24, r28
    7378:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    737c:	21 2f       	mov	r18, r17
    737e:	4f 2d       	mov	r20, r15
    7380:	69 2d       	mov	r22, r9
    7382:	ce 01       	movw	r24, r28
    7384:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7388:	41 e0       	ldi	r20, 0x01	; 1
    738a:	4a 0d       	add	r20, r10
    738c:	08 2d       	mov	r16, r8
    738e:	2d 2d       	mov	r18, r13
    7390:	6c 2d       	mov	r22, r12
    7392:	ce 01       	movw	r24, r28
    7394:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
    7398:	df 91       	pop	r29
    739a:	cf 91       	pop	r28
    739c:	1f 91       	pop	r17
    739e:	0f 91       	pop	r16
    73a0:	ff 90       	pop	r15
    73a2:	ef 90       	pop	r14
    73a4:	df 90       	pop	r13
    73a6:	cf 90       	pop	r12
    73a8:	bf 90       	pop	r11
    73aa:	af 90       	pop	r10
    73ac:	9f 90       	pop	r9
    73ae:	8f 90       	pop	r8
    73b0:	08 95       	ret

u8g_rot.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000e40  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001819  00000000  00000000  00000e74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_rot_dummy_fn 00000004  00000000  00000000  0000268d  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_dev_rot90_fn 000000f2  00000000  00000000  00002691  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_dev_rot180_fn 00000158  00000000  00000000  00002783  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.u8g_dev_rot270_fn 00000140  00000000  00000000  000028db  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.u8g_UndoRotation 00000020  00000000  00000000  00002a1b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.u8g_SetRot90 00000030  00000000  00000000  00002a3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.u8g_SetRot180 00000030  00000000  00000000  00002a6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.u8g_SetRot270 00000030  00000000  00000000  00002a9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .data.u8g_dev_rot 00000006  00000000  00000000  00002acb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 14 .comment      00000022  00000000  00000000  00002ad1  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_rot_dummy_fn:

00000000 <u8g_dev_rot_dummy_fn>:
  u8g_UpdateDimension(u8g);
}

void u8g_SetRot270(u8g_t *u8g)
{
  if ( u8g->dev != &u8g_dev_rot )
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	08 95       	ret

Disassembly of section .text.u8g_dev_rot90_fn:

00000004 <u8g_dev_rot90_fn>:
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
  {
    u8g_dev_rot.dev_mem = u8g->dev;
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
    u8g->dev = &u8g_dev_rot;
  16:	1f 92       	push	r1
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	8c 01       	movw	r16, r24
  1e:	59 01       	movw	r10, r18
  }
  u8g_dev_rot.dev_fn = u8g_dev_rot270_fn;
  20:	fb 01       	movw	r30, r22
  22:	e2 80       	ldd	r14, Z+2	; 0x02
  24:	f3 80       	ldd	r15, Z+3	; 0x03
  26:	42 33       	cpi	r20, 0x32	; 50
  28:	01 f0       	breq	.+0      	; 0x2a <u8g_dev_rot90_fn+0x26>
  2a:	00 f4       	brcc	.+0      	; 0x2c <u8g_dev_rot90_fn+0x28>
  u8g_UpdateDimension(u8g);
  2c:	4c 32       	cpi	r20, 0x2C	; 44
  2e:	01 f0       	breq	.+0      	; 0x30 <u8g_dev_rot90_fn+0x2c>
  30:	4d 32       	cpi	r20, 0x2D	; 45
  32:	01 f0       	breq	.+0      	; 0x34 <u8g_dev_rot90_fn+0x30>
  34:	47 31       	cpi	r20, 0x17	; 23
  36:	01 f0       	breq	.+0      	; 0x38 <u8g_dev_rot90_fn+0x34>
  38:	00 c0       	rjmp	.+0      	; 0x3a <u8g_dev_rot90_fn+0x36>
  3a:	46 34       	cpi	r20, 0x46	; 70
  3c:	01 f0       	breq	.+0      	; 0x3e <u8g_dev_rot90_fn+0x3a>
  3e:	47 34       	cpi	r20, 0x47	; 71
  40:	01 f0       	breq	.+0      	; 0x42 <u8g_dev_rot90_fn+0x3e>
  42:	4b 33       	cpi	r20, 0x3B	; 59
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_dev_rot90_fn+0x42>
  46:	95 01       	movw	r18, r10
  48:	b7 01       	movw	r22, r14
  4a:	c8 01       	movw	r24, r16
  4c:	0f 90       	pop	r0
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	df 90       	pop	r13
  5c:	bf 90       	pop	r11
  5e:	af 90       	pop	r10
  60:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  64:	47 e1       	ldi	r20, 0x17	; 23
  66:	b7 01       	movw	r22, r14
  68:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  6c:	f5 01       	movw	r30, r10
  6e:	93 81       	ldd	r25, Z+3	; 0x03
  70:	20 81       	ld	r18, Z
  72:	82 81       	ldd	r24, Z+2	; 0x02
  74:	31 81       	ldd	r19, Z+1	; 0x01
  76:	30 83       	st	Z, r19
  78:	21 83       	std	Z+1, r18	; 0x01
  7a:	92 83       	std	Z+2, r25	; 0x02
  7c:	83 83       	std	Z+3, r24	; 0x03
  7e:	00 c0       	rjmp	.+0      	; 0x80 <u8g_dev_rot90_fn+0x7c>
  80:	b7 01       	movw	r22, r14
  82:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  86:	00 c0       	rjmp	.+0      	; 0x88 <u8g_dev_rot90_fn+0x84>
  88:	b7 01       	movw	r22, r14
  8a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  8e:	f5 01       	movw	r30, r10
  90:	80 83       	st	Z, r24
  92:	00 c0       	rjmp	.+0      	; 0x94 <u8g_dev_rot90_fn+0x90>
  94:	f5 01       	movw	r30, r10
  96:	d0 80       	ld	r13, Z
  98:	b7 01       	movw	r22, r14
  9a:	c8 01       	movw	r24, r16
  9c:	49 83       	std	Y+1, r20	; 0x01
  9e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  a2:	f5 01       	movw	r30, r10
  a4:	91 81       	ldd	r25, Z+1	; 0x01
  a6:	90 95       	com	r25
  a8:	98 0f       	add	r25, r24
  aa:	90 83       	st	Z, r25
  ac:	d1 82       	std	Z+1, r13	; 0x01
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <u8g_dev_rot90_fn+0xac>
  b0:	f5 01       	movw	r30, r10
  b2:	d0 80       	ld	r13, Z
  b4:	b7 01       	movw	r22, r14
  b6:	c8 01       	movw	r24, r16
  b8:	49 83       	std	Y+1, r20	; 0x01
  ba:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  be:	f5 01       	movw	r30, r10
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	90 95       	com	r25
  c4:	98 0f       	add	r25, r24
  c6:	90 83       	st	Z, r25
  c8:	d1 82       	std	Z+1, r13	; 0x01
  ca:	83 81       	ldd	r24, Z+3	; 0x03
  cc:	8f 5f       	subi	r24, 0xFF	; 255
  ce:	83 70       	andi	r24, 0x03	; 3
  d0:	83 83       	std	Z+3, r24	; 0x03
  d2:	95 01       	movw	r18, r10
  d4:	49 81       	ldd	r20, Y+1	; 0x01
  d6:	b7 01       	movw	r22, r14
  d8:	c8 01       	movw	r24, r16
  da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	ff 90       	pop	r15
  ec:	ef 90       	pop	r14
  ee:	df 90       	pop	r13
  f0:	bf 90       	pop	r11
  f2:	af 90       	pop	r10
  f4:	08 95       	ret

Disassembly of section .text.u8g_dev_rot180_fn:

000000fa <u8g_dev_rot180_fn>:
  fa:	8f 92       	push	r8
  fc:	9f 92       	push	r9
  fe:	bf 92       	push	r11
 100:	cf 92       	push	r12
 102:	df 92       	push	r13
 104:	ef 92       	push	r14
 106:	ff 92       	push	r15
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	8c 01       	movw	r16, r24
 118:	49 01       	movw	r8, r18
 11a:	fb 01       	movw	r30, r22
 11c:	e2 80       	ldd	r14, Z+2	; 0x02
 11e:	f3 80       	ldd	r15, Z+3	; 0x03
 120:	42 33       	cpi	r20, 0x32	; 50
 122:	01 f4       	brne	.+0      	; 0x124 <u8g_dev_rot180_fn+0x2a>
 124:	00 c0       	rjmp	.+0      	; 0x126 <u8g_dev_rot180_fn+0x2c>
 126:	00 f4       	brcc	.+0      	; 0x128 <u8g_dev_rot180_fn+0x2e>
 128:	4c 32       	cpi	r20, 0x2C	; 44
 12a:	01 f4       	brne	.+0      	; 0x12c <u8g_dev_rot180_fn+0x32>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <u8g_dev_rot180_fn+0x34>
 12e:	4d 32       	cpi	r20, 0x2D	; 45
 130:	01 f4       	brne	.+0      	; 0x132 <u8g_dev_rot180_fn+0x38>
 132:	00 c0       	rjmp	.+0      	; 0x134 <u8g_dev_rot180_fn+0x3a>
 134:	47 31       	cpi	r20, 0x17	; 23
 136:	01 f0       	breq	.+0      	; 0x138 <u8g_dev_rot180_fn+0x3e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <u8g_dev_rot180_fn+0x40>
 13a:	46 34       	cpi	r20, 0x46	; 70
 13c:	01 f4       	brne	.+0      	; 0x13e <u8g_dev_rot180_fn+0x44>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <u8g_dev_rot180_fn+0x46>
 140:	47 34       	cpi	r20, 0x47	; 71
 142:	01 f4       	brne	.+0      	; 0x144 <u8g_dev_rot180_fn+0x4a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <u8g_dev_rot180_fn+0x4c>
 146:	4b 33       	cpi	r20, 0x3B	; 59
 148:	01 f4       	brne	.+0      	; 0x14a <u8g_dev_rot180_fn+0x50>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <u8g_dev_rot180_fn+0x52>
 14c:	94 01       	movw	r18, r8
 14e:	b7 01       	movw	r22, r14
 150:	c8 01       	movw	r24, r16
 152:	0f 90       	pop	r0
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	df 90       	pop	r13
 162:	cf 90       	pop	r12
 164:	bf 90       	pop	r11
 166:	9f 90       	pop	r9
 168:	8f 90       	pop	r8
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 16e:	47 e1       	ldi	r20, 0x17	; 23
 170:	b7 01       	movw	r22, r14
 172:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 176:	b7 01       	movw	r22, r14
 178:	c8 01       	movw	r24, r16
 17a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 17e:	f4 01       	movw	r30, r8
 180:	b2 80       	ldd	r11, Z+2	; 0x02
 182:	b0 94       	com	r11
 184:	b8 0e       	add	r11, r24
 186:	b7 01       	movw	r22, r14
 188:	c8 01       	movw	r24, r16
 18a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 18e:	f4 01       	movw	r30, r8
 190:	d0 80       	ld	r13, Z
 192:	d0 94       	com	r13
 194:	d8 0e       	add	r13, r24
 196:	b7 01       	movw	r22, r14
 198:	c8 01       	movw	r24, r16
 19a:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 19e:	f4 01       	movw	r30, r8
 1a0:	c3 80       	ldd	r12, Z+3	; 0x03
 1a2:	c0 94       	com	r12
 1a4:	c8 0e       	add	r12, r24
 1a6:	b7 01       	movw	r22, r14
 1a8:	c8 01       	movw	r24, r16
 1aa:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ae:	f4 01       	movw	r30, r8
 1b0:	91 81       	ldd	r25, Z+1	; 0x01
 1b2:	90 95       	com	r25
 1b4:	98 0f       	add	r25, r24
 1b6:	b0 82       	st	Z, r11
 1b8:	c1 82       	std	Z+1, r12	; 0x01
 1ba:	d2 82       	std	Z+2, r13	; 0x02
 1bc:	93 83       	std	Z+3, r25	; 0x03
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <u8g_dev_rot180_fn+0xc6>
 1c0:	b7 01       	movw	r22, r14
 1c2:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <u8g_dev_rot180_fn+0xce>
 1c8:	b7 01       	movw	r22, r14
 1ca:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ce:	f4 01       	movw	r30, r8
 1d0:	80 83       	st	Z, r24
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <u8g_dev_rot180_fn+0xda>
 1d4:	b7 01       	movw	r22, r14
 1d6:	c8 01       	movw	r24, r16
 1d8:	49 83       	std	Y+1, r20	; 0x01
 1da:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1de:	f4 01       	movw	r30, r8
 1e0:	d1 80       	ldd	r13, Z+1	; 0x01
 1e2:	d0 94       	com	r13
 1e4:	d8 0e       	add	r13, r24
 1e6:	b7 01       	movw	r22, r14
 1e8:	c8 01       	movw	r24, r16
 1ea:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 1ee:	f4 01       	movw	r30, r8
 1f0:	90 81       	ld	r25, Z
 1f2:	90 95       	com	r25
 1f4:	98 0f       	add	r25, r24
 1f6:	90 83       	st	Z, r25
 1f8:	d1 82       	std	Z+1, r13	; 0x01
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <u8g_dev_rot180_fn+0x102>
 1fc:	b7 01       	movw	r22, r14
 1fe:	c8 01       	movw	r24, r16
 200:	49 83       	std	Y+1, r20	; 0x01
 202:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 206:	f4 01       	movw	r30, r8
 208:	d1 80       	ldd	r13, Z+1	; 0x01
 20a:	d0 94       	com	r13
 20c:	d8 0e       	add	r13, r24
 20e:	b7 01       	movw	r22, r14
 210:	c8 01       	movw	r24, r16
 212:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 216:	f4 01       	movw	r30, r8
 218:	90 81       	ld	r25, Z
 21a:	90 95       	com	r25
 21c:	98 0f       	add	r25, r24
 21e:	90 83       	st	Z, r25
 220:	d1 82       	std	Z+1, r13	; 0x01
 222:	83 81       	ldd	r24, Z+3	; 0x03
 224:	8e 5f       	subi	r24, 0xFE	; 254
 226:	83 70       	andi	r24, 0x03	; 3
 228:	83 83       	std	Z+3, r24	; 0x03
 22a:	94 01       	movw	r18, r8
 22c:	49 81       	ldd	r20, Y+1	; 0x01
 22e:	b7 01       	movw	r22, r14
 230:	c8 01       	movw	r24, r16
 232:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0f 90       	pop	r0
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	bf 90       	pop	r11
 24c:	9f 90       	pop	r9
 24e:	8f 90       	pop	r8
 250:	08 95       	ret

Disassembly of section .text.u8g_dev_rot270_fn:

0000034c <u8g_dev_rot270_fn>:
 34c:	8f 92       	push	r8
 34e:	9f 92       	push	r9
 350:	bf 92       	push	r11
 352:	cf 92       	push	r12
 354:	df 92       	push	r13
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	1f 92       	push	r1
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	8c 01       	movw	r16, r24
 36a:	49 01       	movw	r8, r18
 36c:	fb 01       	movw	r30, r22
 36e:	e2 80       	ldd	r14, Z+2	; 0x02
 370:	f3 80       	ldd	r15, Z+3	; 0x03
 372:	42 33       	cpi	r20, 0x32	; 50
 374:	01 f4       	brne	.+0      	; 0x376 <u8g_dev_rot270_fn+0x2a>
 376:	00 c0       	rjmp	.+0      	; 0x378 <u8g_dev_rot270_fn+0x2c>
 378:	00 f4       	brcc	.+0      	; 0x37a <u8g_dev_rot270_fn+0x2e>
 37a:	4c 32       	cpi	r20, 0x2C	; 44
 37c:	01 f4       	brne	.+0      	; 0x37e <u8g_dev_rot270_fn+0x32>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <u8g_dev_rot270_fn+0x34>
 380:	4d 32       	cpi	r20, 0x2D	; 45
 382:	01 f4       	brne	.+0      	; 0x384 <u8g_dev_rot270_fn+0x38>
 384:	00 c0       	rjmp	.+0      	; 0x386 <u8g_dev_rot270_fn+0x3a>
 386:	47 31       	cpi	r20, 0x17	; 23
 388:	01 f0       	breq	.+0      	; 0x38a <u8g_dev_rot270_fn+0x3e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <u8g_dev_rot270_fn+0x40>
 38c:	46 34       	cpi	r20, 0x46	; 70
 38e:	01 f4       	brne	.+0      	; 0x390 <u8g_dev_rot270_fn+0x44>
 390:	00 c0       	rjmp	.+0      	; 0x392 <u8g_dev_rot270_fn+0x46>
 392:	47 34       	cpi	r20, 0x47	; 71
 394:	01 f4       	brne	.+0      	; 0x396 <u8g_dev_rot270_fn+0x4a>
 396:	00 c0       	rjmp	.+0      	; 0x398 <u8g_dev_rot270_fn+0x4c>
 398:	4b 33       	cpi	r20, 0x3B	; 59
 39a:	01 f4       	brne	.+0      	; 0x39c <u8g_dev_rot270_fn+0x50>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <u8g_dev_rot270_fn+0x52>
 39e:	94 01       	movw	r18, r8
 3a0:	b7 01       	movw	r22, r14
 3a2:	c8 01       	movw	r24, r16
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	ff 90       	pop	r15
 3b0:	ef 90       	pop	r14
 3b2:	df 90       	pop	r13
 3b4:	cf 90       	pop	r12
 3b6:	bf 90       	pop	r11
 3b8:	9f 90       	pop	r9
 3ba:	8f 90       	pop	r8
 3bc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 3c0:	47 e1       	ldi	r20, 0x17	; 23
 3c2:	b7 01       	movw	r22, r14
 3c4:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3c8:	b7 01       	movw	r22, r14
 3ca:	c8 01       	movw	r24, r16
 3cc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3d0:	f4 01       	movw	r30, r8
 3d2:	b3 80       	ldd	r11, Z+3	; 0x03
 3d4:	b0 94       	com	r11
 3d6:	b8 0e       	add	r11, r24
 3d8:	b7 01       	movw	r22, r14
 3da:	c8 01       	movw	r24, r16
 3dc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3e0:	f4 01       	movw	r30, r8
 3e2:	d1 80       	ldd	r13, Z+1	; 0x01
 3e4:	d0 94       	com	r13
 3e6:	d8 0e       	add	r13, r24
 3e8:	b7 01       	movw	r22, r14
 3ea:	c8 01       	movw	r24, r16
 3ec:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 3f0:	f4 01       	movw	r30, r8
 3f2:	c2 80       	ldd	r12, Z+2	; 0x02
 3f4:	c0 94       	com	r12
 3f6:	c8 0e       	add	r12, r24
 3f8:	b7 01       	movw	r22, r14
 3fa:	c8 01       	movw	r24, r16
 3fc:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 400:	f4 01       	movw	r30, r8
 402:	90 81       	ld	r25, Z
 404:	90 95       	com	r25
 406:	98 0f       	add	r25, r24
 408:	b0 82       	st	Z, r11
 40a:	c1 82       	std	Z+1, r12	; 0x01
 40c:	d2 82       	std	Z+2, r13	; 0x02
 40e:	93 83       	std	Z+3, r25	; 0x03
 410:	00 c0       	rjmp	.+0      	; 0x412 <u8g_dev_rot270_fn+0xc6>
 412:	b7 01       	movw	r22, r14
 414:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 418:	00 c0       	rjmp	.+0      	; 0x41a <u8g_dev_rot270_fn+0xce>
 41a:	b7 01       	movw	r22, r14
 41c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 420:	f4 01       	movw	r30, r8
 422:	80 83       	st	Z, r24
 424:	00 c0       	rjmp	.+0      	; 0x426 <u8g_dev_rot270_fn+0xda>
 426:	f4 01       	movw	r30, r8
 428:	d1 80       	ldd	r13, Z+1	; 0x01
 42a:	b7 01       	movw	r22, r14
 42c:	c8 01       	movw	r24, r16
 42e:	49 83       	std	Y+1, r20	; 0x01
 430:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 434:	f4 01       	movw	r30, r8
 436:	90 81       	ld	r25, Z
 438:	90 95       	com	r25
 43a:	d0 82       	st	Z, r13
 43c:	98 0f       	add	r25, r24
 43e:	91 83       	std	Z+1, r25	; 0x01
 440:	00 c0       	rjmp	.+0      	; 0x442 <u8g_dev_rot270_fn+0xf6>
 442:	f4 01       	movw	r30, r8
 444:	d1 80       	ldd	r13, Z+1	; 0x01
 446:	b7 01       	movw	r22, r14
 448:	c8 01       	movw	r24, r16
 44a:	49 83       	std	Y+1, r20	; 0x01
 44c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 450:	f4 01       	movw	r30, r8
 452:	90 81       	ld	r25, Z
 454:	90 95       	com	r25
 456:	d0 82       	st	Z, r13
 458:	98 0f       	add	r25, r24
 45a:	91 83       	std	Z+1, r25	; 0x01
 45c:	83 81       	ldd	r24, Z+3	; 0x03
 45e:	8d 5f       	subi	r24, 0xFD	; 253
 460:	83 70       	andi	r24, 0x03	; 3
 462:	83 83       	std	Z+3, r24	; 0x03
 464:	94 01       	movw	r18, r8
 466:	49 81       	ldd	r20, Y+1	; 0x01
 468:	b7 01       	movw	r22, r14
 46a:	c8 01       	movw	r24, r16
 46c:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	bf 90       	pop	r11
 486:	9f 90       	pop	r9
 488:	8f 90       	pop	r8
 48a:	08 95       	ret

Disassembly of section .text.u8g_UndoRotation:

000007d8 <u8g_UndoRotation>:
 7d8:	fc 01       	movw	r30, r24
 7da:	22 81       	ldd	r18, Z+2	; 0x02
 7dc:	33 81       	ldd	r19, Z+3	; 0x03
 7de:	20 50       	subi	r18, 0x00	; 0
 7e0:	30 40       	sbci	r19, 0x00	; 0
 7e2:	01 f4       	brne	.+0      	; 0x7e4 <u8g_UndoRotation+0xc>
 7e4:	20 91 00 00 	lds	r18, 0x0000
 7e8:	30 91 00 00 	lds	r19, 0x0000
 7ec:	fc 01       	movw	r30, r24
 7ee:	33 83       	std	Z+3, r19	; 0x03
 7f0:	22 83       	std	Z+2, r18	; 0x02
 7f2:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 7f6:	08 95       	ret

Disassembly of section .text.u8g_SetRot90:

00000fd0 <u8g_SetRot90>:
     fd0:	fc 01       	movw	r30, r24
     fd2:	22 81       	ldd	r18, Z+2	; 0x02
     fd4:	33 81       	ldd	r19, Z+3	; 0x03
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	20 30       	cpi	r18, 0x00	; 0
     fda:	3f 07       	cpc	r19, r31
     fdc:	01 f0       	breq	.+0      	; 0xfde <u8g_SetRot90+0xe>
     fde:	30 93 00 00 	sts	0x0000, r19
     fe2:	20 93 00 00 	sts	0x0000, r18
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	fc 01       	movw	r30, r24
     fec:	33 83       	std	Z+3, r19	; 0x03
     fee:	22 83       	std	Z+2, r18	; 0x02
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	30 93 00 00 	sts	0x0000, r19
     ff8:	20 93 00 00 	sts	0x0000, r18
     ffc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetRot180:

00001fd0 <u8g_SetRot180>:
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	22 81       	ldd	r18, Z+2	; 0x02
    1fd4:	33 81       	ldd	r19, Z+3	; 0x03
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	20 30       	cpi	r18, 0x00	; 0
    1fda:	3f 07       	cpc	r19, r31
    1fdc:	01 f0       	breq	.+0      	; 0x1fde <u8g_SetRot180+0xe>
    1fde:	30 93 00 00 	sts	0x0000, r19
    1fe2:	20 93 00 00 	sts	0x0000, r18
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	fc 01       	movw	r30, r24
    1fec:	33 83       	std	Z+3, r19	; 0x03
    1fee:	22 83       	std	Z+2, r18	; 0x02
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	30 93 00 00 	sts	0x0000, r19
    1ff8:	20 93 00 00 	sts	0x0000, r18
    1ffc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

Disassembly of section .text.u8g_SetRot270:

00003fd0 <u8g_SetRot270>:
    3fd0:	fc 01       	movw	r30, r24
    3fd2:	22 81       	ldd	r18, Z+2	; 0x02
    3fd4:	33 81       	ldd	r19, Z+3	; 0x03
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	20 30       	cpi	r18, 0x00	; 0
    3fda:	3f 07       	cpc	r19, r31
    3fdc:	01 f0       	breq	.+0      	; 0x3fde <u8g_SetRot270+0xe>
    3fde:	30 93 00 00 	sts	0x0000, r19
    3fe2:	20 93 00 00 	sts	0x0000, r18
    3fe6:	20 e0       	ldi	r18, 0x00	; 0
    3fe8:	30 e0       	ldi	r19, 0x00	; 0
    3fea:	fc 01       	movw	r30, r24
    3fec:	33 83       	std	Z+3, r19	; 0x03
    3fee:	22 83       	std	Z+2, r18	; 0x02
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	30 93 00 00 	sts	0x0000, r19
    3ff8:	20 93 00 00 	sts	0x0000, r18
    3ffc:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_scale.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b04  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016d1  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_scale_2x2_fn 000001e6  00000000  00000000  00002209  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_UndoScale 00000020  00000000  00000000  000023ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_SetScale2x2 00000030  00000000  00000000  0000240f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_scale 00000006  00000000  00000000  0000243f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .comment      00000022  00000000  00000000  00002445  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_scale_2x2_fn:

00000000 <u8g_dev_scale_2x2_fn>:
  u8g_UpdateDimension(u8g);
}

void u8g_SetScale2x2(u8g_t *u8g)
{
  if ( u8g->dev != &u8g_dev_scale )
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
  {
    u8g_dev_scale.dev_mem = u8g->dev;
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
    u8g->dev = &u8g_dev_scale;
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	1f 92       	push	r1
  1e:	cd b7       	in	r28, 0x3d	; 61
  }
  u8g_dev_scale.dev_fn = u8g_dev_scale_2x2_fn;
  20:	de b7       	in	r29, 0x3e	; 62
  22:	8c 01       	movw	r16, r24
  24:	39 01       	movw	r6, r18
  26:	fb 01       	movw	r30, r22
  28:	e2 80       	ldd	r14, Z+2	; 0x02
  2a:	f3 80       	ldd	r15, Z+3	; 0x03
  u8g_UpdateDimension(u8g);
  2c:	4b 33       	cpi	r20, 0x3B	; 59
  2e:	01 f4       	brne	.+0      	; 0x30 <u8g_dev_scale_2x2_fn+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <u8g_dev_scale_2x2_fn+0x32>
  32:	00 f4       	brcc	.+0      	; 0x34 <u8g_dev_scale_2x2_fn+0x34>
  34:	47 31       	cpi	r20, 0x17	; 23
  36:	01 f0       	breq	.+0      	; 0x38 <u8g_dev_scale_2x2_fn+0x38>
  38:	42 33       	cpi	r20, 0x32	; 50
  3a:	01 f0       	breq	.+0      	; 0x3c <u8g_dev_scale_2x2_fn+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <u8g_dev_scale_2x2_fn+0x3e>
  3e:	46 34       	cpi	r20, 0x46	; 70
  40:	01 f0       	breq	.+0      	; 0x42 <u8g_dev_scale_2x2_fn+0x42>
  42:	47 34       	cpi	r20, 0x47	; 71
  44:	01 f0       	breq	.+0      	; 0x46 <u8g_dev_scale_2x2_fn+0x46>
  46:	93 01       	movw	r18, r6
  48:	b7 01       	movw	r22, r14
  4a:	c8 01       	movw	r24, r16
  4c:	0f 90       	pop	r0
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	df 90       	pop	r13
  5c:	cf 90       	pop	r12
  5e:	bf 90       	pop	r11
  60:	af 90       	pop	r10
  62:	9f 90       	pop	r9
  64:	8f 90       	pop	r8
  66:	7f 90       	pop	r7
  68:	6f 90       	pop	r6
  6a:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_scale_2x2_fn>
  6e:	b7 01       	movw	r22, r14
  70:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  74:	00 c0       	rjmp	.+0      	; 0x76 <u8g_dev_scale_2x2_fn+0x76>
  76:	b7 01       	movw	r22, r14
  78:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  7c:	86 95       	lsr	r24
  7e:	f3 01       	movw	r30, r6
  80:	80 83       	st	Z, r24
  82:	00 c0       	rjmp	.+0      	; 0x84 <u8g_dev_scale_2x2_fn+0x84>
  84:	47 e1       	ldi	r20, 0x17	; 23
  86:	b7 01       	movw	r22, r14
  88:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  8c:	f3 01       	movw	r30, r6
  8e:	80 81       	ld	r24, Z
  90:	86 95       	lsr	r24
  92:	80 83       	st	Z, r24
  94:	82 81       	ldd	r24, Z+2	; 0x02
  96:	86 95       	lsr	r24
  98:	82 83       	std	Z+2, r24	; 0x02
  9a:	81 81       	ldd	r24, Z+1	; 0x01
  9c:	86 95       	lsr	r24
  9e:	81 83       	std	Z+1, r24	; 0x01
  a0:	83 81       	ldd	r24, Z+3	; 0x03
  a2:	86 95       	lsr	r24
  a4:	83 83       	std	Z+3, r24	; 0x03
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <u8g_dev_scale_2x2_fn+0xa8>
  a8:	f9 01       	movw	r30, r18
  aa:	d0 80       	ld	r13, Z
  ac:	dd 0c       	add	r13, r13
  ae:	c1 80       	ldd	r12, Z+1	; 0x01
  b0:	cc 0c       	add	r12, r12
  b2:	d0 82       	st	Z, r13
  b4:	c1 82       	std	Z+1, r12	; 0x01
  b6:	42 e3       	ldi	r20, 0x32	; 50
  b8:	b7 01       	movw	r22, r14
  ba:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  be:	bb 24       	eor	r11, r11
  c0:	b3 94       	inc	r11
  c2:	bd 0c       	add	r11, r13
  c4:	f3 01       	movw	r30, r6
  c6:	b0 82       	st	Z, r11
  c8:	c1 82       	std	Z+1, r12	; 0x01
  ca:	93 01       	movw	r18, r6
  cc:	42 e3       	ldi	r20, 0x32	; 50
  ce:	b7 01       	movw	r22, r14
  d0:	c8 01       	movw	r24, r16
  d2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  d6:	c3 94       	inc	r12
  d8:	f3 01       	movw	r30, r6
  da:	b0 82       	st	Z, r11
  dc:	c1 82       	std	Z+1, r12	; 0x01
  de:	93 01       	movw	r18, r6
  e0:	42 e3       	ldi	r20, 0x32	; 50
  e2:	b7 01       	movw	r22, r14
  e4:	c8 01       	movw	r24, r16
  e6:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
  ea:	f3 01       	movw	r30, r6
  ec:	d0 82       	st	Z, r13
  ee:	c1 82       	std	Z+1, r12	; 0x01
  f0:	93 01       	movw	r18, r6
  f2:	42 e3       	ldi	r20, 0x32	; 50
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <u8g_dev_scale_2x2_fn+0xf6>
  f6:	f9 01       	movw	r30, r18
  f8:	92 81       	ldd	r25, Z+2	; 0x02
  fa:	a3 80       	ldd	r10, Z+3	; 0x03
  fc:	88 e0       	ldi	r24, 0x08	; 8
  fe:	c1 2c       	mov	r12, r1
 100:	d1 2c       	mov	r13, r1
 102:	cc 0c       	add	r12, r12
 104:	dd 1c       	adc	r13, r13
 106:	cc 0c       	add	r12, r12
 108:	dd 1c       	adc	r13, r13
 10a:	97 ff       	sbrs	r25, 7
 10c:	00 c0       	rjmp	.+0      	; 0x10e <u8g_dev_scale_2x2_fn+0x10e>
 10e:	f3 e0       	ldi	r31, 0x03	; 3
 110:	cf 2a       	or	r12, r31
 112:	99 0f       	add	r25, r25
 114:	81 50       	subi	r24, 0x01	; 1
 116:	01 f4       	brne	.+0      	; 0x118 <u8g_dev_scale_2x2_fn+0x118>
 118:	f3 01       	movw	r30, r6
 11a:	b0 80       	ld	r11, Z
 11c:	bb 0c       	add	r11, r11
 11e:	51 81       	ldd	r21, Z+1	; 0x01
 120:	55 0f       	add	r21, r21
 122:	a0 fe       	sbrs	r10, 0
 124:	00 c0       	rjmp	.+0      	; 0x126 <u8g_dev_scale_2x2_fn+0x126>
 126:	88 24       	eor	r8, r8
 128:	83 94       	inc	r8
 12a:	8b 0c       	add	r8, r11
 12c:	95 2e       	mov	r9, r21
 12e:	00 c0       	rjmp	.+0      	; 0x130 <u8g_dev_scale_2x2_fn+0x130>
 130:	99 24       	eor	r9, r9
 132:	93 94       	inc	r9
 134:	95 0e       	add	r9, r21
 136:	8b 2c       	mov	r8, r11
 138:	f3 01       	movw	r30, r6
 13a:	d2 82       	std	Z+2, r13	; 0x02
 13c:	b0 82       	st	Z, r11
 13e:	51 83       	std	Z+1, r21	; 0x01
 140:	93 01       	movw	r18, r6
 142:	4b e3       	ldi	r20, 0x3B	; 59
 144:	b7 01       	movw	r22, r14
 146:	c8 01       	movw	r24, r16
 148:	59 83       	std	Y+1, r21	; 0x01
 14a:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
 14e:	f3 01       	movw	r30, r6
 150:	80 82       	st	Z, r8
 152:	91 82       	std	Z+1, r9	; 0x01
 154:	a3 82       	std	Z+3, r10	; 0x03
 156:	93 01       	movw	r18, r6
 158:	4b e3       	ldi	r20, 0x3B	; 59
 15a:	b7 01       	movw	r22, r14
 15c:	c8 01       	movw	r24, r16
 15e:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
 162:	f3 01       	movw	r30, r6
 164:	c2 82       	std	Z+2, r12	; 0x02
 166:	59 81       	ldd	r21, Y+1	; 0x01
 168:	f1 e0       	ldi	r31, 0x01	; 1
 16a:	af 16       	cp	r10, r31
 16c:	01 f0       	breq	.+0      	; 0x16e <u8g_dev_scale_2x2_fn+0x16e>
 16e:	af 16       	cp	r10, r31
 170:	00 f0       	brcs	.+0      	; 0x172 <u8g_dev_scale_2x2_fn+0x172>
 172:	22 e0       	ldi	r18, 0x02	; 2
 174:	a2 16       	cp	r10, r18
 176:	01 f0       	breq	.+0      	; 0x178 <u8g_dev_scale_2x2_fn+0x178>
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	a8 12       	cpse	r10, r24
 17c:	00 c0       	rjmp	.+0      	; 0x17e <u8g_dev_scale_2x2_fn+0x17e>
 17e:	58 50       	subi	r21, 0x08	; 8
 180:	88 ef       	ldi	r24, 0xF8	; 248
 182:	98 0e       	add	r9, r24
 184:	00 c0       	rjmp	.+0      	; 0x186 <u8g_dev_scale_2x2_fn+0x186>
 186:	e8 e0       	ldi	r30, 0x08	; 8
 188:	be 0e       	add	r11, r30
 18a:	8e 0e       	add	r8, r30
 18c:	00 c0       	rjmp	.+0      	; 0x18e <u8g_dev_scale_2x2_fn+0x18e>
 18e:	58 5f       	subi	r21, 0xF8	; 248
 190:	f8 e0       	ldi	r31, 0x08	; 8
 192:	9f 0e       	add	r9, r31
 194:	00 c0       	rjmp	.+0      	; 0x196 <u8g_dev_scale_2x2_fn+0x196>
 196:	28 ef       	ldi	r18, 0xF8	; 248
 198:	b2 0e       	add	r11, r18
 19a:	82 0e       	add	r8, r18
 19c:	f3 01       	movw	r30, r6
 19e:	b0 82       	st	Z, r11
 1a0:	51 83       	std	Z+1, r21	; 0x01
 1a2:	a3 82       	std	Z+3, r10	; 0x03
 1a4:	93 01       	movw	r18, r6
 1a6:	4b e3       	ldi	r20, 0x3B	; 59
 1a8:	b7 01       	movw	r22, r14
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
 1b0:	f3 01       	movw	r30, r6
 1b2:	80 82       	st	Z, r8
 1b4:	91 82       	std	Z+1, r9	; 0x01
 1b6:	a3 82       	std	Z+3, r10	; 0x03
 1b8:	93 01       	movw	r18, r6
 1ba:	4b e3       	ldi	r20, 0x3B	; 59
 1bc:	b7 01       	movw	r22, r14
 1be:	c8 01       	movw	r24, r16
 1c0:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_scale_2x2_fn>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0f 90       	pop	r0
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	bf 90       	pop	r11
 1da:	af 90       	pop	r10
 1dc:	9f 90       	pop	r9
 1de:	8f 90       	pop	r8
 1e0:	7f 90       	pop	r7
 1e2:	6f 90       	pop	r6
 1e4:	08 95       	ret

Disassembly of section .text.u8g_UndoScale:

000001e6 <u8g_UndoScale>:
 1e6:	fc 01       	movw	r30, r24
 1e8:	22 81       	ldd	r18, Z+2	; 0x02
 1ea:	33 81       	ldd	r19, Z+3	; 0x03
 1ec:	20 50       	subi	r18, 0x00	; 0
 1ee:	30 40       	sbci	r19, 0x00	; 0
 1f0:	01 f4       	brne	.+0      	; 0x1f2 <u8g_UndoScale+0xc>
 1f2:	20 91 00 00 	lds	r18, 0x0000
 1f6:	30 91 00 00 	lds	r19, 0x0000
 1fa:	fc 01       	movw	r30, r24
 1fc:	33 83       	std	Z+3, r19	; 0x03
 1fe:	22 83       	std	Z+2, r18	; 0x02
 200:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
 204:	08 95       	ret

Disassembly of section .text.u8g_SetScale2x2:

000003ec <u8g_SetScale2x2>:
 3ec:	fc 01       	movw	r30, r24
 3ee:	22 81       	ldd	r18, Z+2	; 0x02
 3f0:	33 81       	ldd	r19, Z+3	; 0x03
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	20 30       	cpi	r18, 0x00	; 0
 3f6:	3f 07       	cpc	r19, r31
 3f8:	01 f0       	breq	.+0      	; 0x3fa <u8g_SetScale2x2+0xe>
 3fa:	30 93 00 00 	sts	0x0000, r19
 3fe:	20 93 00 00 	sts	0x0000, r18
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	fc 01       	movw	r30, r24
 408:	33 83       	std	Z+3, r19	; 0x03
 40a:	22 83       	std	Z+2, r18	; 0x02
 40c:	20 e0       	ldi	r18, 0x00	; 0
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	30 93 00 00 	sts	0x0000, r19
 414:	20 93 00 00 	sts	0x0000, r18
 418:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>

u8g_state.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000744  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016ce  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_state_dummy_cb 00000002  00000000  00000000  00001e46  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.u8g_SetHardwareBackup 0000000c  00000000  00000000  00001e48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.u8g_backup_spi 00000028  00000000  00000000  00001e54  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .bss.u8g_state_avr_spi_memory 00000002  00000000  00000000  00001e7c  2**0
                  ALLOC
  9 .comment      00000022  00000000  00000000  00001e7c  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_state_dummy_cb:

00000000 <u8g_state_dummy_cb>:
#if defined(U8G_ATMEGA_HW_SPI)
#include <avr/interrupt.h>
static uint8_t u8g_state_avr_spi_memory[2];

void u8g_backup_spi(uint8_t msg)
{
   0:	08 95       	ret

Disassembly of section .text.u8g_SetHardwareBackup:

00000000 <u8g_SetHardwareBackup>:
   2:	fc 01       	std	Z+50, r23	; 0x32
  if ( U8G_STATE_MSG_IS_BACKUP(msg) )
   4:	72 ab       	std	Z+49, r22	; 0x31
   6:	61 ab       	ldi	r24, 0x03	; 3
  {
    u8g_state_avr_spi_memory[U8G_STATE_MSG_GET_IDX(msg)] = SPCR;
   8:	83 e0       	movw	r30, r22
   a:	fb 01       	ijmp
   c:	09 94       	Address 0x000000000000000c is out of bounds.
.word	0xffff	; ????

Disassembly of section .text.u8g_backup_spi:

00000010 <u8g_backup_spi>:
  10:	e8 2f       	mov	r30, r24
  12:	e1 70       	andi	r30, 0x01	; 1
  }
  else
  {
    uint8_t tmp = SREG;
  14:	81 ff       	sbrs	r24, 1
    cli();
  16:	00 c0       	rjmp	.+0      	; 0x18 <u8g_backup_spi+0x8>
    SPCR = 0;
  18:	8c b5       	in	r24, 0x2c	; 44
    SPCR = u8g_state_avr_spi_memory[U8G_STATE_MSG_GET_IDX(msg)];
  1a:	f0 e0       	ldi	r31, 0x00	; 0
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	80 83       	st	Z, r24
  22:	08 95       	ret
    SREG = tmp;
  24:	8f b7       	in	r24, 0x3f	; 63
  26:	f8 94       	cli
  28:	1c bc       	out	0x2c, r1	; 44
  2a:	f0 e0       	ldi	r31, 0x00	; 0
  2c:	e0 50       	subi	r30, 0x00	; 0
  2e:	f0 40       	sbci	r31, 0x00	; 0
  30:	90 81       	ld	r25, Z
  32:	9c bd       	out	0x2c, r25	; 44
  34:	8f bf       	out	0x3f, r24	; 63
  36:	08 95       	ret

u8g_u16toa.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000078c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000167a  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_u16toap 00000048  00000000  00000000  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_u16toa 0000001a  00000000  00000000  00001e82  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .bss.buf.3351 00000006  00000000  00000000  00001e9c  2**0
                  ALLOC
  8 .comment      00000022  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_u16toap:

00000000 <u8g_u16toap>:
  return dest;
}

/* v = value, d = number of digits */
const char *u8g_u16toa(uint16_t v, uint8_t d)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
  static char buf[6];
  d = 5-d;
  return u8g_u16toap(buf, v) + d;
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	eb 01       	movw	r28, r22
   c:	8c 01       	movw	r16, r24

/* v = value, d = number of digits */
const char *u8g_u16toa(uint16_t v, uint8_t d)
{
  static char buf[6];
  d = 5-d;
   e:	45 e0       	ldi	r20, 0x05	; 5
  10:	60 e1       	ldi	r22, 0x10	; 16
  return u8g_u16toap(buf, v) + d;
}
  12:	77 e2       	ldi	r23, 0x27	; 39
  14:	2a e0       	ldi	r18, 0x0A	; 10
  16:	30 e0       	ldi	r19, 0x00	; 0
  18:	80 e3       	ldi	r24, 0x30	; 48
  1a:	c6 17       	cp	r28, r22
  1c:	d7 07       	cpc	r29, r23
  1e:	00 f0       	brcs	.+0      	; 0x20 <u8g_u16toap+0x20>
  20:	c6 1b       	sub	r28, r22
  22:	d7 0b       	sbc	r29, r23
  24:	8f 5f       	subi	r24, 0xFF	; 255
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_u16toap+0x28>
  28:	d8 01       	movw	r26, r16
  2a:	8d 93       	st	X+, r24
  2c:	8d 01       	movw	r16, r26
  2e:	cb 01       	movw	r24, r22
  30:	b9 01       	movw	r22, r18
  32:	0e 94 00 00 	call	0	; 0x0 <u8g_u16toap>
  36:	41 50       	subi	r20, 0x01	; 1
  38:	01 f4       	brne	.+0      	; 0x3a <u8g_u16toap+0x3a>
  3a:	15 82       	std	Z+5, r1	; 0x05
  3c:	cf 01       	movw	r24, r30
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	08 95       	ret

Disassembly of section .text.u8g_u16toa:

00000048 <u8g_u16toa>:
  48:	cf 93       	push	r28
  4a:	c6 2f       	mov	r28, r22
  4c:	bc 01       	movw	r22, r24
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  56:	25 e0       	ldi	r18, 0x05	; 5
  58:	2c 1b       	sub	r18, r28
  5a:	82 0f       	add	r24, r18
  5c:	91 1d       	adc	r25, r1
  5e:	cf 91       	pop	r28
  60:	08 95       	ret

u8g_u8toa.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000774  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000016a0  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_u8toap 00000024  00000000  00000000  00001e48  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_u8toa 0000001a  00000000  00000000  00001e6c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .bss.buf.3352 00000004  00000000  00000000  00001e86  2**0
                  ALLOC
  8 .rodata.u8g_u8toa_tab 00000003  00000000  00000000  00001e86  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .comment      00000022  00000000  00000000  00001e89  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_u8toap:

00000000 <u8g_u8toap>:
  return dest;
}

/* v = value, d = number of digits */
const char *u8g_u8toa(uint8_t v, uint8_t d)
{
   0:	e0 e0       	ldi	r30, 0x00	; 0
   2:	f0 e0       	ldi	r31, 0x00	; 0
  static char buf[4];
  d = 3-d;
  return u8g_u8toap(buf, v) + d;
   4:	dc 01       	movw	r26, r24
   6:	31 91       	ld	r19, Z+
   8:	20 e3       	ldi	r18, 0x30	; 48
   a:	63 17       	cp	r22, r19
   c:	00 f0       	brcs	.+0      	; 0xe <u8g_u8toap+0xe>

/* v = value, d = number of digits */
const char *u8g_u8toa(uint8_t v, uint8_t d)
{
  static char buf[4];
  d = 3-d;
   e:	63 1b       	sub	r22, r19
  10:	2f 5f       	subi	r18, 0xFF	; 255
  return u8g_u8toap(buf, v) + d;
}
  12:	00 c0       	rjmp	.+0      	; 0x14 <u8g_u8toap+0x14>
  14:	2d 93       	st	X+, r18
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	e0 30       	cpi	r30, 0x00	; 0
  1a:	f2 07       	cpc	r31, r18
  1c:	01 f4       	brne	.+0      	; 0x1e <u8g_u8toap+0x1e>
  1e:	fc 01       	movw	r30, r24
  20:	13 82       	std	Z+3, r1	; 0x03
  22:	08 95       	ret

Disassembly of section .text.u8g_u8toa:

00000024 <u8g_u8toa>:
  24:	cf 93       	push	r28
  26:	c6 2f       	mov	r28, r22
  28:	68 2f       	mov	r22, r24
  2a:	80 e0       	ldi	r24, 0x00	; 0
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <__tmp_reg__>
  32:	23 e0       	ldi	r18, 0x03	; 3
  34:	2c 1b       	sub	r18, r28
  36:	82 0f       	add	r24, r18
  38:	91 1d       	adc	r25, r1
  3a:	cf 91       	pop	r28
  3c:	08 95       	ret

u8g_virtual_screen.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000009cc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017e6  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.u8g_dev_vs_fn 00000194  00000000  00000000  000021e6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.u8g_SetVirtualScreenDimension 00000016  00000000  00000000  0000237a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.u8g_AddToVirtualScreen 00000036  00000000  00000000  00002390  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.u8g_dev_vs 00000006  00000000  00000000  000023c6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  9 .bss.u8g_vs_cnt 00000001  00000000  00000000  000023cc  2**0
                  ALLOC
 10 .comment      00000022  00000000  00000000  000023cc  2**0
                  CONTENTS, READONLY

Disassembly of section .text.u8g_dev_vs_fn:

00000000 <u8g_dev_vs_fn>:
  u8g_vs_height = height;  
}

uint8_t u8g_AddToVirtualScreen(u8g_t *vs_u8g, u8g_uint_t x, u8g_uint_t y, u8g_t *child_u8g)
{
  if ( vs_u8g->dev != &u8g_dev_vs )
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	14 2f       	mov	r17, r20
   a:	e9 01       	movw	r28, r18
    return 0; 	/* abort if there is no a virtual screen device */
  if ( u8g_vs_cnt >= U8g_VS_MAX )
   c:	42 33       	cpi	r20, 0x32	; 50
   e:	01 f4       	brne	.+0      	; 0x10 <u8g_dev_vs_fn+0x10>
  10:	00 c0       	rjmp	.+0      	; 0x12 <u8g_dev_vs_fn+0x12>
  12:	00 f4       	brcc	.+0      	; 0x14 <u8g_dev_vs_fn+0x14>
    return 0;  	/* maximum number of  child u8g's reached */
  u8g_vs_list[u8g_vs_cnt].u8g = child_u8g;
  14:	80 91 00 00 	lds	r24, 0x0000
  18:	45 31       	cpi	r20, 0x15	; 21
  1a:	01 f0       	breq	.+0      	; 0x1c <u8g_dev_vs_fn+0x1c>
  1c:	47 31       	cpi	r20, 0x17	; 23
  1e:	01 f4       	brne	.+0      	; 0x20 <u8g_dev_vs_fn+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <u8g_dev_vs_fn+0x22>
  22:	44 31       	cpi	r20, 0x14	; 20
  u8g_vs_list[u8g_vs_cnt].x = x;
  24:	01 f4       	brne	.+0      	; 0x26 <u8g_dev_vs_fn+0x26>
  u8g_vs_list[u8g_vs_cnt].y = y;
  26:	00 c0       	rjmp	.+0      	; 0x28 <u8g_dev_vs_fn+0x28>
  u8g_vs_cnt++;
  28:	46 34       	cpi	r20, 0x46	; 70
  2a:	01 f4       	brne	.+0      	; 0x2c <u8g_dev_vs_fn+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <u8g_dev_vs_fn+0x2e>
  return 1;
  2e:	47 34       	cpi	r20, 0x47	; 71
  30:	01 f4       	brne	.+0      	; 0x32 <u8g_dev_vs_fn+0x32>
}

uint8_t u8g_AddToVirtualScreen(u8g_t *vs_u8g, u8g_uint_t x, u8g_uint_t y, u8g_t *child_u8g)
{
  if ( vs_u8g->dev != &u8g_dev_vs )
    return 0; 	/* abort if there is no a virtual screen device */
  32:	00 c0       	rjmp	.+0      	; 0x34 <u8g_dev_vs_fn+0x34>
  u8g_vs_list[u8g_vs_cnt].u8g = child_u8g;
  u8g_vs_list[u8g_vs_cnt].x = x;
  u8g_vs_list[u8g_vs_cnt].y = y;
  u8g_vs_cnt++;
  return 1;
}
  34:	4b 33       	cpi	r20, 0x3B	; 59
  36:	01 f4       	brne	.+0      	; 0x38 <u8g_dev_vs_fn+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <u8g_dev_vs_fn+0x3a>
  3a:	00 e0       	ldi	r16, 0x00	; 0
  3c:	80 91 00 00 	lds	r24, 0x0000
  40:	08 17       	cp	r16, r24
  42:	00 f0       	brcs	.+0      	; 0x44 <u8g_dev_vs_fn+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <u8g_dev_vs_fn+0x46>
  46:	84 e0       	ldi	r24, 0x04	; 4
  48:	08 9f       	mul	r16, r24
  4a:	f0 01       	movw	r30, r0
  4c:	11 24       	eor	r1, r1
  4e:	e0 50       	subi	r30, 0x00	; 0
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	82 81       	ldd	r24, Z+2	; 0x02
  54:	93 81       	ldd	r25, Z+3	; 0x03
  56:	fc 01       	movw	r30, r24
  58:	62 81       	ldd	r22, Z+2	; 0x02
  5a:	73 81       	ldd	r23, Z+3	; 0x03
  5c:	9e 01       	movw	r18, r28
  5e:	41 2f       	mov	r20, r17
  60:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_vs_fn>
  64:	0f 5f       	subi	r16, 0xFF	; 255
  66:	00 c0       	rjmp	.+0      	; 0x68 <u8g_dev_vs_fn+0x68>
  68:	10 92 00 00 	sts	0x0000, r1
  6c:	81 11       	cpse	r24, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <u8g_dev_vs_fn+0x70>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	00 c0       	rjmp	.+0      	; 0x74 <u8g_dev_vs_fn+0x74>
  74:	80 91 00 00 	lds	r24, 0x0000
  78:	90 91 00 00 	lds	r25, 0x0000
  7c:	00 c0       	rjmp	.+0      	; 0x7e <u8g_dev_vs_fn+0x7e>
  7e:	81 11       	cpse	r24, r1
  80:	00 c0       	rjmp	.+0      	; 0x82 <u8g_dev_vs_fn+0x82>
  82:	e0 91 00 00 	lds	r30, 0x0000
  86:	ef 5f       	subi	r30, 0xFF	; 255
  88:	e0 93 00 00 	sts	0x0000, r30
  8c:	80 91 00 00 	lds	r24, 0x0000
  90:	e8 17       	cp	r30, r24
  92:	00 f4       	brcc	.+0      	; 0x94 <u8g_dev_vs_fn+0x94>
  94:	84 e0       	ldi	r24, 0x04	; 4
  96:	e8 9f       	mul	r30, r24
  98:	f0 01       	movw	r30, r0
  9a:	11 24       	eor	r1, r1
  9c:	e0 50       	subi	r30, 0x00	; 0
  9e:	f0 40       	sbci	r31, 0x00	; 0
  a0:	82 81       	ldd	r24, Z+2	; 0x02
  a2:	93 81       	ldd	r25, Z+3	; 0x03
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <u8g_dev_vs_fn+0xa6>
  a6:	e0 91 00 00 	lds	r30, 0x0000
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	e8 9f       	mul	r30, r24
  ae:	f0 01       	movw	r30, r0
  b0:	11 24       	eor	r1, r1
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	f0 40       	sbci	r31, 0x00	; 0
  b6:	82 81       	ldd	r24, Z+2	; 0x02
  b8:	93 81       	ldd	r25, Z+3	; 0x03
  ba:	fc 01       	movw	r30, r24
  bc:	62 81       	ldd	r22, Z+2	; 0x02
  be:	73 81       	ldd	r23, Z+3	; 0x03
  c0:	45 e1       	ldi	r20, 0x15	; 21
  c2:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_vs_fn>
  c6:	81 11       	cpse	r24, r1
  c8:	00 c0       	rjmp	.+0      	; 0xca <u8g_dev_vs_fn+0xca>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <u8g_dev_vs_fn+0xcc>
  cc:	fc 01       	movw	r30, r24
  ce:	62 81       	ldd	r22, Z+2	; 0x02
  d0:	73 81       	ldd	r23, Z+3	; 0x03
  d2:	9e 01       	movw	r18, r28
  d4:	44 e1       	ldi	r20, 0x14	; 20
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <u8g_dev_vs_fn+0xd8>
  d8:	80 91 00 00 	lds	r24, 0x0000
  dc:	00 c0       	rjmp	.+0      	; 0xde <u8g_dev_vs_fn+0xde>
  de:	80 91 00 00 	lds	r24, 0x0000
  e2:	88 83       	st	Y, r24
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <u8g_dev_vs_fn+0xe6>
  e6:	e0 91 00 00 	lds	r30, 0x0000
  ea:	e8 17       	cp	r30, r24
  ec:	00 f4       	brcc	.+0      	; 0xee <u8g_dev_vs_fn+0xee>
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	e8 9f       	mul	r30, r24
  f2:	f0 01       	movw	r30, r0
  f4:	11 24       	eor	r1, r1
  f6:	e0 50       	subi	r30, 0x00	; 0
  f8:	f0 40       	sbci	r31, 0x00	; 0
  fa:	82 81       	ldd	r24, Z+2	; 0x02
  fc:	93 81       	ldd	r25, Z+3	; 0x03
  fe:	fc 01       	movw	r30, r24
 100:	62 81       	ldd	r22, Z+2	; 0x02
 102:	73 81       	ldd	r23, Z+3	; 0x03
 104:	47 e1       	ldi	r20, 0x17	; 23
 106:	0e 94 00 00 	call	0	; 0x0 <u8g_dev_vs_fn>
 10a:	e0 91 00 00 	lds	r30, 0x0000
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	e8 9f       	mul	r30, r24
 112:	f0 01       	movw	r30, r0
 114:	11 24       	eor	r1, r1
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	f0 40       	sbci	r31, 0x00	; 0
 11a:	88 81       	ld	r24, Y
 11c:	90 81       	ld	r25, Z
 11e:	89 0f       	add	r24, r25
 120:	88 83       	st	Y, r24
 122:	8a 81       	ldd	r24, Y+2	; 0x02
 124:	90 81       	ld	r25, Z
 126:	89 0f       	add	r24, r25
 128:	8a 83       	std	Y+2, r24	; 0x02
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	91 81       	ldd	r25, Z+1	; 0x01
 12e:	89 0f       	add	r24, r25
 130:	89 83       	std	Y+1, r24	; 0x01
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	91 81       	ldd	r25, Z+1	; 0x01
 136:	89 0f       	add	r24, r25
 138:	8b 83       	std	Y+3, r24	; 0x03
 13a:	00 c0       	rjmp	.+0      	; 0x13c <u8g_dev_vs_fn+0x13c>
 13c:	18 82       	st	Y, r1
 13e:	1a 82       	std	Y+2, r1	; 0x02
 140:	19 82       	std	Y+1, r1	; 0x01
 142:	1b 82       	std	Y+3, r1	; 0x03
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	00 c0       	rjmp	.+0      	; 0x148 <u8g_dev_vs_fn+0x148>
 148:	e0 91 00 00 	lds	r30, 0x0000
 14c:	80 91 00 00 	lds	r24, 0x0000
 150:	e8 17       	cp	r30, r24
 152:	00 f4       	brcc	.+0      	; 0x154 <u8g_dev_vs_fn+0x154>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	e8 9f       	mul	r30, r24
 158:	f0 01       	movw	r30, r0
 15a:	11 24       	eor	r1, r1
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	f0 40       	sbci	r31, 0x00	; 0
 160:	88 81       	ld	r24, Y
 162:	90 81       	ld	r25, Z
 164:	89 1b       	sub	r24, r25
 166:	88 83       	st	Y, r24
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	89 1b       	sub	r24, r25
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	82 81       	ldd	r24, Z+2	; 0x02
 172:	93 81       	ldd	r25, Z+3	; 0x03
 174:	fc 01       	movw	r30, r24
 176:	62 81       	ldd	r22, Z+2	; 0x02
 178:	73 81       	ldd	r23, Z+3	; 0x03
 17a:	9e 01       	movw	r18, r28
 17c:	41 2f       	mov	r20, r17
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	0c 94 00 00 	jmp	0	; 0x0 <u8g_dev_vs_fn>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	08 95       	ret

Disassembly of section .text.u8g_SetVirtualScreenDimension:

00000194 <u8g_SetVirtualScreenDimension>:
 194:	fc 01       	movw	r30, r24
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	93 81       	ldd	r25, Z+3	; 0x03
 19a:	80 50       	subi	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	01 f4       	brne	.+0      	; 0x1a0 <u8g_SetVirtualScreenDimension+0xc>
 1a0:	60 93 00 00 	sts	0x0000, r22
 1a4:	40 93 00 00 	sts	0x0000, r20
 1a8:	08 95       	ret

Disassembly of section .text.u8g_AddToVirtualScreen:

0000033e <u8g_AddToVirtualScreen>:
 33e:	fc 01       	movw	r30, r24
 340:	82 81       	ldd	r24, Z+2	; 0x02
 342:	93 81       	ldd	r25, Z+3	; 0x03
 344:	80 50       	subi	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	01 f4       	brne	.+0      	; 0x34a <u8g_AddToVirtualScreen+0xc>
 34a:	80 91 00 00 	lds	r24, 0x0000
 34e:	84 30       	cpi	r24, 0x04	; 4
 350:	00 f4       	brcc	.+0      	; 0x352 <u8g_AddToVirtualScreen+0x14>
 352:	54 e0       	ldi	r21, 0x04	; 4
 354:	85 9f       	mul	r24, r21
 356:	f0 01       	movw	r30, r0
 358:	11 24       	eor	r1, r1
 35a:	e0 50       	subi	r30, 0x00	; 0
 35c:	f0 40       	sbci	r31, 0x00	; 0
 35e:	33 83       	std	Z+3, r19	; 0x03
 360:	22 83       	std	Z+2, r18	; 0x02
 362:	60 83       	st	Z, r22
 364:	41 83       	std	Z+1, r20	; 0x01
 366:	8f 5f       	subi	r24, 0xFF	; 255
 368:	80 93 00 00 	sts	0x0000, r24
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	08 95       	ret
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
